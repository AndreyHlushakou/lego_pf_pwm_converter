
lego_pf_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007934  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08007a48  08007a48  00017a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e14  08007e14  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08007e14  08007e14  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e14  08007e14  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e18  08007e18  00017e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001d8  08007ff4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08007ff4  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cef4  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001edb  00000000  00000000  0002d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  0002f018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a60  00000000  00000000  0002fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018743  00000000  00000000  000307b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e842  00000000  00000000  00048efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c443  00000000  00000000  0005773d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048a0  00000000  00000000  000e3b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e8420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a2c 	.word	0x08007a2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08007a2c 	.word	0x08007a2c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f001 f82c 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f84e 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 fa6e 	bl	8000f74 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a98:	f000 f890 	bl	8000bbc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a9c:	f000 f92e 	bl	8000cfc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000aa0:	f000 fa3e 	bl	8000f20 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000aa4:	f000 f9c4 	bl	8000e30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET); //revers t.k pc13
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	481b      	ldr	r0, [pc, #108]	; (8000b1c <main+0x94>)
 8000ab0:	f001 fbf2 	bl	8002298 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aba:	4818      	ldr	r0, [pc, #96]	; (8000b1c <main+0x94>)
 8000abc:	f001 fbec 	bl	8002298 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac6:	4815      	ldr	r0, [pc, #84]	; (8000b1c <main+0x94>)
 8000ac8:	f001 fbe6 	bl	8002298 <HAL_GPIO_WritePin>


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                  //servo
 8000acc:	2100      	movs	r1, #0
 8000ace:	4814      	ldr	r0, [pc, #80]	; (8000b20 <main+0x98>)
 8000ad0:	f002 f8ca 	bl	8002c68 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(an1_GPIO_Port, an1_Pin, GPIO_PIN_RESET); //servo
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2180      	movs	r1, #128	; 0x80
 8000ad8:	4812      	ldr	r0, [pc, #72]	; (8000b24 <main+0x9c>)
 8000ada:	f001 fbdd 	bl	8002298 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(an2_GPIO_Port, an2_Pin, GPIO_PIN_RESET); //servo
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4811      	ldr	r0, [pc, #68]	; (8000b28 <main+0xa0>)
 8000ae4:	f001 fbd8 	bl	8002298 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_RESET); //servo
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	480e      	ldr	r0, [pc, #56]	; (8000b28 <main+0xa0>)
 8000aee:	f001 fbd3 	bl	8002298 <HAL_GPIO_WritePin>


  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000af2:	2100      	movs	r1, #0
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <main+0xa4>)
 8000af6:	f002 f9b1 	bl	8002e5c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000afa:	2104      	movs	r1, #4
 8000afc:	480b      	ldr	r0, [pc, #44]	; (8000b2c <main+0xa4>)
 8000afe:	f002 f9ad 	bl	8002e5c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000b02:	2108      	movs	r1, #8
 8000b04:	4809      	ldr	r0, [pc, #36]	; (8000b2c <main+0xa4>)
 8000b06:	f002 f9a9 	bl	8002e5c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000b0a:	210c      	movs	r1, #12
 8000b0c:	4807      	ldr	r0, [pc, #28]	; (8000b2c <main+0xa4>)
 8000b0e:	f002 f9a5 	bl	8002e5c <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //pwm_input_hnd();
	  pwm_generate_hnd();
 8000b12:	f000 fb6f 	bl	80011f4 <pwm_generate_hnd>
	  select_print_data();
 8000b16:	f000 fce9 	bl	80014ec <select_print_data>
	  pwm_generate_hnd();
 8000b1a:	e7fa      	b.n	8000b12 <main+0x8a>
 8000b1c:	40011000 	.word	0x40011000
 8000b20:	20000284 	.word	0x20000284
 8000b24:	40010800 	.word	0x40010800
 8000b28:	40010c00 	.word	0x40010c00
 8000b2c:	200001f4 	.word	0x200001f4

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b090      	sub	sp, #64	; 0x40
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	2228      	movs	r2, #40	; 0x28
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 fe8b 	bl	800585a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b52:	2301      	movs	r3, #1
 8000b54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b60:	2301      	movs	r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b64:	2302      	movs	r3, #2
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 fbbd 	bl	80022f8 <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b84:	f000 fd0a 	bl	800159c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b88:	230f      	movs	r3, #15
 8000b8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fe2a 	bl	80027fc <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bae:	f000 fcf5 	bl	800159c <Error_Handler>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3740      	adds	r7, #64	; 0x40
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc2:	f107 0318 	add.w	r3, r7, #24
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be6:	4b43      	ldr	r3, [pc, #268]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000be8:	4a43      	ldr	r2, [pc, #268]	; (8000cf8 <MX_TIM1_Init+0x13c>)
 8000bea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000bec:	4b41      	ldr	r3, [pc, #260]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000bee:	2247      	movs	r2, #71	; 0x47
 8000bf0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf2:	4b40      	ldr	r3, [pc, #256]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000-1;
 8000bf8:	4b3e      	ldr	r3, [pc, #248]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000bfa:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000bfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c00:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c06:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0c:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c12:	4838      	ldr	r0, [pc, #224]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000c14:	f001 ff80 	bl	8002b18 <HAL_TIM_Base_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000c1e:	f000 fcbd 	bl	800159c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c26:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4831      	ldr	r0, [pc, #196]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000c30:	f002 fc86 	bl	8003540 <HAL_TIM_ConfigClockSource>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c3a:	f000 fcaf 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000c3e:	482d      	ldr	r0, [pc, #180]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000c40:	f002 f8b4 	bl	8002dac <HAL_TIM_IC_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000c4a:	f000 fca7 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4825      	ldr	r0, [pc, #148]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000c5e:	f003 f951 	bl	8003f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000c68:	f000 fc98 	bl	800159c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c70:	2301      	movs	r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4619      	mov	r1, r3
 8000c82:	481c      	ldr	r0, [pc, #112]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000c84:	f002 fafe 	bl	8003284 <HAL_TIM_IC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000c8e:	f000 fc85 	bl	800159c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c92:	2302      	movs	r3, #2
 8000c94:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c96:	2302      	movs	r3, #2
 8000c98:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4814      	ldr	r0, [pc, #80]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000ca2:	f002 faef 	bl	8003284 <HAL_TIM_IC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000cac:	f000 fc76 	bl	800159c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2208      	movs	r2, #8
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000cc0:	f002 fae0 	bl	8003284 <HAL_TIM_IC_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000cca:	f000 fc67 	bl	800159c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	220c      	movs	r2, #12
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_TIM1_Init+0x138>)
 8000cde:	f002 fad1 	bl	8003284 <HAL_TIM_IC_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000ce8:	f000 fc58 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	; 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200001f4 	.word	0x200001f4
 8000cf8:	40012c00 	.word	0x40012c00

08000cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0318 	add.w	r3, r7, #24
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d26:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000d28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000d2e:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000d30:	2247      	movs	r2, #71	; 0x47
 8000d32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b3d      	ldr	r3, [pc, #244]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000-1;
 8000d3a:	4b3c      	ldr	r3, [pc, #240]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000d3c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000d40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d42:	4b3a      	ldr	r3, [pc, #232]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d48:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d4e:	4837      	ldr	r0, [pc, #220]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000d50:	f001 fee2 	bl	8002b18 <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000d5a:	f000 fc1f 	bl	800159c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d62:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d64:	f107 0318 	add.w	r3, r7, #24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4830      	ldr	r0, [pc, #192]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000d6c:	f002 fbe8 	bl	8003540 <HAL_TIM_ConfigClockSource>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000d76:	f000 fc11 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d7a:	482c      	ldr	r0, [pc, #176]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000d7c:	f002 f816 	bl	8002dac <HAL_TIM_IC_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d86:	f000 fc09 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4619      	mov	r1, r3
 8000d98:	4824      	ldr	r0, [pc, #144]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000d9a:	f003 f8b3 	bl	8003f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000da4:	f000 fbfa 	bl	800159c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000da8:	2300      	movs	r3, #0
 8000daa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dac:	2301      	movs	r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	481b      	ldr	r0, [pc, #108]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000dc0:	f002 fa60 	bl	8003284 <HAL_TIM_IC_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000dca:	f000 fbe7 	bl	800159c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2204      	movs	r2, #4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000dde:	f002 fa51 	bl	8003284 <HAL_TIM_IC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000de8:	f000 fbd8 	bl	800159c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000df0:	2301      	movs	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	2208      	movs	r2, #8
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000dfc:	f002 fa42 	bl	8003284 <HAL_TIM_IC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8000e06:	f000 fbc9 	bl	800159c <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000e0e:	463b      	mov	r3, r7
 8000e10:	220c      	movs	r2, #12
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_TIM2_Init+0x130>)
 8000e16:	f002 fa35 	bl	8003284 <HAL_TIM_IC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM2_Init+0x128>
  {
    Error_Handler();
 8000e20:	f000 fbbc 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000023c 	.word	0x2000023c

08000e30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	f107 0320 	add.w	r3, r7, #32
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
 8000e5c:	615a      	str	r2, [r3, #20]
 8000e5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <MX_TIM3_Init+0xe8>)
 8000e62:	4a2e      	ldr	r2, [pc, #184]	; (8000f1c <MX_TIM3_Init+0xec>)
 8000e64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8000e66:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <MX_TIM3_Init+0xe8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <MX_TIM3_Init+0xe8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62600;
 8000e72:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <MX_TIM3_Init+0xe8>)
 8000e74:	f24f 4288 	movw	r2, #62600	; 0xf488
 8000e78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7a:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <MX_TIM3_Init+0xe8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <MX_TIM3_Init+0xe8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e86:	4824      	ldr	r0, [pc, #144]	; (8000f18 <MX_TIM3_Init+0xe8>)
 8000e88:	f001 fe46 	bl	8002b18 <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e92:	f000 fb83 	bl	800159c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481d      	ldr	r0, [pc, #116]	; (8000f18 <MX_TIM3_Init+0xe8>)
 8000ea4:	f002 fb4c 	bl	8003540 <HAL_TIM_ConfigClockSource>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000eae:	f000 fb75 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eb2:	4819      	ldr	r0, [pc, #100]	; (8000f18 <MX_TIM3_Init+0xe8>)
 8000eb4:	f001 fe7f 	bl	8002bb6 <HAL_TIM_PWM_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ebe:	f000 fb6d 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eca:	f107 0320 	add.w	r3, r7, #32
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4811      	ldr	r0, [pc, #68]	; (8000f18 <MX_TIM3_Init+0xe8>)
 8000ed2:	f003 f817 	bl	8003f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000edc:	f000 fb5e 	bl	800159c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee0:	2360      	movs	r3, #96	; 0x60
 8000ee2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30000;
 8000ee4:	f247 5330 	movw	r3, #30000	; 0x7530
 8000ee8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4807      	ldr	r0, [pc, #28]	; (8000f18 <MX_TIM3_Init+0xe8>)
 8000efa:	f002 fa5f 	bl	80033bc <HAL_TIM_PWM_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f04:	f000 fb4a 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <MX_TIM3_Init+0xe8>)
 8000f0a:	f000 fc15 	bl	8001738 <HAL_TIM_MspPostInit>

}
 8000f0e:	bf00      	nop
 8000f10:	3738      	adds	r7, #56	; 0x38
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000284 	.word	0x20000284
 8000f1c:	40000400 	.word	0x40000400

08000f20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_USART3_UART_Init+0x4c>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <MX_USART3_UART_Init+0x50>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <MX_USART3_UART_Init+0x4c>)
 8000f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_USART3_UART_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_USART3_UART_Init+0x4c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MX_USART3_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_USART3_UART_Init+0x4c>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <MX_USART3_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_USART3_UART_Init+0x4c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_USART3_UART_Init+0x4c>)
 8000f58:	f003 f844 	bl	8003fe4 <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f62:	f000 fb1b 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200002cc 	.word	0x200002cc
 8000f70:	40004800 	.word	0x40004800

08000f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f88:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <MX_GPIO_Init+0x13c>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a48      	ldr	r2, [pc, #288]	; (80010b0 <MX_GPIO_Init+0x13c>)
 8000f8e:	f043 0310 	orr.w	r3, r3, #16
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b46      	ldr	r3, [pc, #280]	; (80010b0 <MX_GPIO_Init+0x13c>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f003 0310 	and.w	r3, r3, #16
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa0:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <MX_GPIO_Init+0x13c>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a42      	ldr	r2, [pc, #264]	; (80010b0 <MX_GPIO_Init+0x13c>)
 8000fa6:	f043 0320 	orr.w	r3, r3, #32
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <MX_GPIO_Init+0x13c>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0320 	and.w	r3, r3, #32
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <MX_GPIO_Init+0x13c>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a3c      	ldr	r2, [pc, #240]	; (80010b0 <MX_GPIO_Init+0x13c>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <MX_GPIO_Init+0x13c>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <MX_GPIO_Init+0x13c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a36      	ldr	r2, [pc, #216]	; (80010b0 <MX_GPIO_Init+0x13c>)
 8000fd6:	f043 0308 	orr.w	r3, r3, #8
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <MX_GPIO_Init+0x13c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led_Pin|led1_Pin|led2_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000fee:	4831      	ldr	r0, [pc, #196]	; (80010b4 <MX_GPIO_Init+0x140>)
 8000ff0:	f001 f952 	bl	8002298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led3_Pin|led4_Pin|an1_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	218a      	movs	r1, #138	; 0x8a
 8000ff8:	482f      	ldr	r0, [pc, #188]	; (80010b8 <MX_GPIO_Init+0x144>)
 8000ffa:	f001 f94d 	bl	8002298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, an2_Pin|stby_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2103      	movs	r1, #3
 8001002:	482e      	ldr	r0, [pc, #184]	; (80010bc <MX_GPIO_Init+0x148>)
 8001004:	f001 f948 	bl	8002298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_Pin led1_Pin led2_Pin */
  GPIO_InitStruct.Pin = led_Pin|led1_Pin|led2_Pin;
 8001008:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800100c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2302      	movs	r3, #2
 8001018:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4619      	mov	r1, r3
 8001020:	4824      	ldr	r0, [pc, #144]	; (80010b4 <MX_GPIO_Init+0x140>)
 8001022:	f000 ffb5 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : led3_Pin led4_Pin an1_Pin */
  GPIO_InitStruct.Pin = led3_Pin|led4_Pin|an1_Pin;
 8001026:	238a      	movs	r3, #138	; 0x8a
 8001028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2302      	movs	r3, #2
 8001034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4619      	mov	r1, r3
 800103c:	481e      	ldr	r0, [pc, #120]	; (80010b8 <MX_GPIO_Init+0x144>)
 800103e:	f000 ffa7 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : in1_Pin in2_Pin button_Pin */
  GPIO_InitStruct.Pin = in1_Pin|in2_Pin|button_Pin;
 8001042:	f248 0330 	movw	r3, #32816	; 0x8030
 8001046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <MX_GPIO_Init+0x14c>)
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	4818      	ldr	r0, [pc, #96]	; (80010b8 <MX_GPIO_Init+0x144>)
 8001058:	f000 ff9a 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : an2_Pin stby_Pin */
  GPIO_InitStruct.Pin = an2_Pin|stby_Pin;
 800105c:	2303      	movs	r3, #3
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2302      	movs	r3, #2
 800106a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4619      	mov	r1, r3
 8001072:	4812      	ldr	r0, [pc, #72]	; (80010bc <MX_GPIO_Init+0x148>)
 8001074:	f000 ff8c 	bl	8001f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	200a      	movs	r0, #10
 800107e:	f000 fe90 	bl	8001da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001082:	200a      	movs	r0, #10
 8001084:	f000 fea9 	bl	8001dda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2017      	movs	r0, #23
 800108e:	f000 fe88 	bl	8001da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001092:	2017      	movs	r0, #23
 8001094:	f000 fea1 	bl	8001dda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2028      	movs	r0, #40	; 0x28
 800109e:	f000 fe80 	bl	8001da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010a2:	2028      	movs	r0, #40	; 0x28
 80010a4:	f000 fe99 	bl	8001dda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40011000 	.word	0x40011000
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40010c00 	.word	0x40010c00
 80010c0:	10110000 	.word	0x10110000

080010c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  if (huart == &huart3)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <HAL_UART_RxCpltCallback+0x48>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d116      	bne.n	8001102 <HAL_UART_RxCpltCallback+0x3e>
  {
    dataReceived=1;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_UART_RxCpltCallback+0x4c>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]

    if( dataTransmitted != 0 )
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_UART_RxCpltCallback+0x50>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00a      	beq.n	80010f8 <HAL_UART_RxCpltCallback+0x34>
    {
      HAL_UART_Transmit_IT(&huart3, str_uart_buffer, 1);
 80010e2:	2201      	movs	r2, #1
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <HAL_UART_RxCpltCallback+0x54>)
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <HAL_UART_RxCpltCallback+0x48>)
 80010e8:	f003 f84f 	bl	800418a <HAL_UART_Transmit_IT>
      dataReceived=0;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_UART_RxCpltCallback+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
      dataTransmitted=0;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_UART_RxCpltCallback+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
    }

    HAL_UART_Receive_IT (&huart3, str_uart_buffer, 1);
 80010f8:	2201      	movs	r2, #1
 80010fa:	4907      	ldr	r1, [pc, #28]	; (8001118 <HAL_UART_RxCpltCallback+0x54>)
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <HAL_UART_RxCpltCallback+0x48>)
 80010fe:	f003 f879 	bl	80041f4 <HAL_UART_Receive_IT>
  }
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200002cc 	.word	0x200002cc
 8001110:	2000031d 	.word	0x2000031d
 8001114:	20000000 	.word	0x20000000
 8001118:	20000320 	.word	0x20000320

0800111c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  if(huart == &huart3)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <HAL_UART_TxCpltCallback+0x3c>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d111      	bne.n	8001150 <HAL_UART_TxCpltCallback+0x34>
  {
    dataTransmitted=1;
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_UART_TxCpltCallback+0x40>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]

    if( dataReceived != 0 )
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_UART_TxCpltCallback+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00a      	beq.n	8001150 <HAL_UART_TxCpltCallback+0x34>
    {
      HAL_UART_Transmit_IT(&huart3, str_uart_buffer, 1);
 800113a:	2201      	movs	r2, #1
 800113c:	4909      	ldr	r1, [pc, #36]	; (8001164 <HAL_UART_TxCpltCallback+0x48>)
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <HAL_UART_TxCpltCallback+0x3c>)
 8001140:	f003 f823 	bl	800418a <HAL_UART_Transmit_IT>
      dataReceived=0;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_UART_TxCpltCallback+0x44>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
      dataTransmitted=0;
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <HAL_UART_TxCpltCallback+0x40>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200002cc 	.word	0x200002cc
 800115c:	20000000 	.word	0x20000000
 8001160:	2000031d 	.word	0x2000031d
 8001164:	20000320 	.word	0x20000320

08001168 <HAL_GPIO_EXTI_Callback>:
		HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == button_Pin && !flag_irq)
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001178:	d129      	bne.n	80011ce <HAL_GPIO_EXTI_Callback+0x66>
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x70>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d124      	bne.n	80011ce <HAL_GPIO_EXTI_Callback+0x66>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // сразу же отключаем прерывания на этом пине
 8001184:	2028      	movs	r0, #40	; 0x28
 8001186:	f000 fe36 	bl	8001df6 <HAL_NVIC_DisableIRQ>
		// либо выполняем какое-то действие прямо тут, либо поднимаем флажок
		flag_irq = 1;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x70>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
		time_irq = HAL_GetTick();
 8001190:	f000 fd02 	bl	8001b98 <HAL_GetTick>
 8001194:	4603      	mov	r3, r0
 8001196:	4a11      	ldr	r2, [pc, #68]	; (80011dc <HAL_GPIO_EXTI_Callback+0x74>)
 8001198:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a0:	480f      	ldr	r0, [pc, #60]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x78>)
 80011a2:	f001 f879 	bl	8002298 <HAL_GPIO_WritePin>
		if(!flag_read) HAL_UART_Transmit(&huart3, (uint8_t*) "read mode ON\n", strlen( "read mode ON\n" ), 1000);
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d107      	bne.n	80011c0 <HAL_GPIO_EXTI_Callback+0x58>
 80011b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b4:	220d      	movs	r2, #13
 80011b6:	490c      	ldr	r1, [pc, #48]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x80>)
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <HAL_GPIO_EXTI_Callback+0x84>)
 80011ba:	f002 ff63 	bl	8004084 <HAL_UART_Transmit>
	{
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
		flag_irq2 = 1;
	}
	*/
}
 80011be:	e006      	b.n	80011ce <HAL_GPIO_EXTI_Callback+0x66>
		else HAL_UART_Transmit(&huart3, (uint8_t*) "read mode OFF\n", strlen( "read mode OFF\n" ), 1000);
 80011c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c4:	220e      	movs	r2, #14
 80011c6:	490a      	ldr	r1, [pc, #40]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x88>)
 80011c8:	4808      	ldr	r0, [pc, #32]	; (80011ec <HAL_GPIO_EXTI_Callback+0x84>)
 80011ca:	f002 ff5b 	bl	8004084 <HAL_UART_Transmit>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000314 	.word	0x20000314
 80011dc:	20000318 	.word	0x20000318
 80011e0:	40011000 	.word	0x40011000
 80011e4:	2000031c 	.word	0x2000031c
 80011e8:	08007a48 	.word	0x08007a48
 80011ec:	200002cc 	.word	0x200002cc
 80011f0:	08007a58 	.word	0x08007a58

080011f4 <pwm_generate_hnd>:


//#define PERIOD (htim2.Init.Period)


void pwm_generate_hnd(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
	if(statepwm1 == HIGH && statepwm2 == HIGH) {
 80011fa:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <pwm_generate_hnd+0xf0>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d117      	bne.n	8001232 <pwm_generate_hnd+0x3e>
 8001202:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <pwm_generate_hnd+0xf4>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d113      	bne.n	8001232 <pwm_generate_hnd+0x3e>
		HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2102      	movs	r1, #2
 800120e:	4837      	ldr	r0, [pc, #220]	; (80012ec <pwm_generate_hnd+0xf8>)
 8001210:	f001 f842 	bl	8002298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(an1_GPIO_Port, an1_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2180      	movs	r1, #128	; 0x80
 8001218:	4835      	ldr	r0, [pc, #212]	; (80012f0 <pwm_generate_hnd+0xfc>)
 800121a:	f001 f83d 	bl	8002298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(an2_GPIO_Port, an2_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2101      	movs	r1, #1
 8001222:	4832      	ldr	r0, [pc, #200]	; (80012ec <pwm_generate_hnd+0xf8>)
 8001224:	f001 f838 	bl	8002298 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <pwm_generate_hnd+0x100>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	635a      	str	r2, [r3, #52]	; 0x34
 8001230:	e053      	b.n	80012da <pwm_generate_hnd+0xe6>
	} else {
		uint16_t pwm1 = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	80fb      	strh	r3, [r7, #6]

		if ( (statepwm1 == PWM || statepwm1 == LOW) && statepwm2 == HIGH ) {
 8001236:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <pwm_generate_hnd+0xf0>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d003      	beq.n	8001246 <pwm_generate_hnd+0x52>
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <pwm_generate_hnd+0xf0>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d11e      	bne.n	8001284 <pwm_generate_hnd+0x90>
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <pwm_generate_hnd+0xf4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d11a      	bne.n	8001284 <pwm_generate_hnd+0x90>
			HAL_GPIO_WritePin(an1_GPIO_Port, an1_Pin, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2180      	movs	r1, #128	; 0x80
 8001252:	4827      	ldr	r0, [pc, #156]	; (80012f0 <pwm_generate_hnd+0xfc>)
 8001254:	f001 f820 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(an2_GPIO_Port, an2_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2101      	movs	r1, #1
 800125c:	4823      	ldr	r0, [pc, #140]	; (80012ec <pwm_generate_hnd+0xf8>)
 800125e:	f001 f81b 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2102      	movs	r1, #2
 8001266:	4821      	ldr	r0, [pc, #132]	; (80012ec <pwm_generate_hnd+0xf8>)
 8001268:	f001 f816 	bl	8002298 <HAL_GPIO_WritePin>

			if (statepwm1 == PWM) pwm1 = falling_to_pwm(falling11);
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <pwm_generate_hnd+0xf0>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d12d      	bne.n	80012d0 <pwm_generate_hnd+0xdc>
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <pwm_generate_hnd+0x104>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f000 f841 	bl	8001300 <falling_to_pwm>
 800127e:	4603      	mov	r3, r0
 8001280:	80fb      	strh	r3, [r7, #6]
 8001282:	e025      	b.n	80012d0 <pwm_generate_hnd+0xdc>

		}
		else if ( (statepwm2 == PWM || statepwm2 == LOW) && statepwm1 == HIGH  ) {
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <pwm_generate_hnd+0xf4>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d003      	beq.n	8001294 <pwm_generate_hnd+0xa0>
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <pwm_generate_hnd+0xf4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d11d      	bne.n	80012d0 <pwm_generate_hnd+0xdc>
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <pwm_generate_hnd+0xf0>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d119      	bne.n	80012d0 <pwm_generate_hnd+0xdc>
			HAL_GPIO_WritePin(an1_GPIO_Port, an1_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <pwm_generate_hnd+0xfc>)
 80012a2:	f000 fff9 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(an2_GPIO_Port, an2_Pin, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2101      	movs	r1, #1
 80012aa:	4810      	ldr	r0, [pc, #64]	; (80012ec <pwm_generate_hnd+0xf8>)
 80012ac:	f000 fff4 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2102      	movs	r1, #2
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <pwm_generate_hnd+0xf8>)
 80012b6:	f000 ffef 	bl	8002298 <HAL_GPIO_WritePin>

			if (statepwm2 == PWM) pwm1 = falling_to_pwm(falling12);
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <pwm_generate_hnd+0xf4>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d106      	bne.n	80012d0 <pwm_generate_hnd+0xdc>
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <pwm_generate_hnd+0x108>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f81a 	bl	8001300 <falling_to_pwm>
 80012cc:	4603      	mov	r3, r0
 80012ce:	80fb      	strh	r3, [r7, #6]
		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm1);
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <pwm_generate_hnd+0x100>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	88fa      	ldrh	r2, [r7, #6]
 80012d6:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000001 	.word	0x20000001
 80012e8:	20000002 	.word	0x20000002
 80012ec:	40010c00 	.word	0x40010c00
 80012f0:	40010800 	.word	0x40010800
 80012f4:	20000284 	.word	0x20000284
 80012f8:	20000324 	.word	0x20000324
 80012fc:	20000354 	.word	0x20000354

08001300 <falling_to_pwm>:

uint16_t falling_to_pwm(uint32_t falling) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	uint16_t pwm1 = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	81fb      	strh	r3, [r7, #14]

	print_uart_data(falling, 1);
 800130c:	2101      	movs	r1, #1
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f914 	bl	800153c <print_uart_data>

	if(1700 >= falling && falling >= 1500) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800131a:	4293      	cmp	r3, r2
 800131c:	d808      	bhi.n	8001330 <falling_to_pwm+0x30>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f240 52db 	movw	r2, #1499	; 0x5db
 8001324:	4293      	cmp	r3, r2
 8001326:	d903      	bls.n	8001330 <falling_to_pwm+0x30>
		pwm1 = 62600 * 389 / 1000;
 8001328:	f645 731f 	movw	r3, #24351	; 0x5f1f
 800132c:	81fb      	strh	r3, [r7, #14]
 800132e:	e03d      	b.n	80013ac <falling_to_pwm+0xac>
	} else if(1450 >= falling && falling >= 1250) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8001336:	4293      	cmp	r3, r2
 8001338:	d808      	bhi.n	800134c <falling_to_pwm+0x4c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001340:	4293      	cmp	r3, r2
 8001342:	d903      	bls.n	800134c <falling_to_pwm+0x4c>
		pwm1 = 62600 * 512 / 1000;
 8001344:	f647 5333 	movw	r3, #32051	; 0x7d33
 8001348:	81fb      	strh	r3, [r7, #14]
 800134a:	e02f      	b.n	80013ac <falling_to_pwm+0xac>
	} else if(1150 >= falling && falling >= 950) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f240 427e 	movw	r2, #1150	; 0x47e
 8001352:	4293      	cmp	r3, r2
 8001354:	d808      	bhi.n	8001368 <falling_to_pwm+0x68>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f240 32b5 	movw	r2, #949	; 0x3b5
 800135c:	4293      	cmp	r3, r2
 800135e:	d903      	bls.n	8001368 <falling_to_pwm+0x68>
		pwm1 = 62600 * 630 / 1000;
 8001360:	f649 230e 	movw	r3, #39438	; 0x9a0e
 8001364:	81fb      	strh	r3, [r7, #14]
 8001366:	e021      	b.n	80013ac <falling_to_pwm+0xac>
	} else if(900 >= falling && falling >= 700) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800136e:	d807      	bhi.n	8001380 <falling_to_pwm+0x80>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001376:	d303      	bcc.n	8001380 <falling_to_pwm+0x80>
		pwm1 = 62600 * 750 / 1000;
 8001378:	f24b 7366 	movw	r3, #46950	; 0xb766
 800137c:	81fb      	strh	r3, [r7, #14]
 800137e:	e015      	b.n	80013ac <falling_to_pwm+0xac>
	} else if(600 >= falling && falling >= 400) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001386:	d807      	bhi.n	8001398 <falling_to_pwm+0x98>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800138e:	d303      	bcc.n	8001398 <falling_to_pwm+0x98>
		pwm1 = 62600 * 872 / 1000;
 8001390:	f24d 533b 	movw	r3, #54587	; 0xd53b
 8001394:	81fb      	strh	r3, [r7, #14]
 8001396:	e009      	b.n	80013ac <falling_to_pwm+0xac>
	} else if(350 >= falling && falling >= 150) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800139e:	d805      	bhi.n	80013ac <falling_to_pwm+0xac>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b95      	cmp	r3, #149	; 0x95
 80013a4:	d902      	bls.n	80013ac <falling_to_pwm+0xac>
		pwm1 = 62600 * 950 / 1000;
 80013a6:	f64e 034e 	movw	r3, #59470	; 0xe84e
 80013aa:	81fb      	strh	r3, [r7, #14]
	}
	return pwm1;
 80013ac:	89fb      	ldrh	r3, [r7, #14]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af02      	add	r7, sp, #8
 80013be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1 ) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <HAL_TIM_IC_CaptureCallback+0x80>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d131      	bne.n	800142e <HAL_TIM_IC_CaptureCallback+0x76>

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7f1b      	ldrb	r3, [r3, #28]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d103      	bne.n	80013da <HAL_TIM_IC_CaptureCallback+0x22>
			//TIM1->CNT = 0;
			__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_TIM_IC_CaptureCallback+0x84>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7f1b      	ldrb	r3, [r3, #28]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d10c      	bne.n	80013fc <HAL_TIM_IC_CaptureCallback+0x44>
			uint32_t falling0 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 80013e2:	2104      	movs	r1, #4
 80013e4:	4815      	ldr	r0, [pc, #84]	; (800143c <HAL_TIM_IC_CaptureCallback+0x84>)
 80013e6:	f002 f973 	bl	80036d0 <HAL_TIM_ReadCapturedValue>
 80013ea:	60f8      	str	r0, [r7, #12]
			//falling11 = falling0;
			//flag_falling11 = 1;

			fill_arr(&counter1, &flag_falling11, &falling11, arr_fall1, falling0);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <HAL_TIM_IC_CaptureCallback+0x88>)
 80013f2:	4a14      	ldr	r2, [pc, #80]	; (8001444 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80013f4:	4914      	ldr	r1, [pc, #80]	; (8001448 <HAL_TIM_IC_CaptureCallback+0x90>)
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <HAL_TIM_IC_CaptureCallback+0x94>)
 80013f8:	f000 f832 	bl	8001460 <fill_arr>
		 }

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7f1b      	ldrb	r3, [r3, #28]
 8001400:	2b04      	cmp	r3, #4
 8001402:	d103      	bne.n	800140c <HAL_TIM_IC_CaptureCallback+0x54>
			//TIM1->CNT = 0;
			__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_TIM_IC_CaptureCallback+0x84>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7f1b      	ldrb	r3, [r3, #28]
 8001410:	2b08      	cmp	r3, #8
 8001412:	d10c      	bne.n	800142e <HAL_TIM_IC_CaptureCallback+0x76>
			uint32_t falling0 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_4);
 8001414:	210c      	movs	r1, #12
 8001416:	4809      	ldr	r0, [pc, #36]	; (800143c <HAL_TIM_IC_CaptureCallback+0x84>)
 8001418:	f002 f95a 	bl	80036d0 <HAL_TIM_ReadCapturedValue>
 800141c:	60b8      	str	r0, [r7, #8]
			//falling12 = falling0;
			//flag_falling12 = 1;

			fill_arr(&counter2, &flag_falling12, &falling12, arr_fall2, falling0);
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001424:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001426:	490c      	ldr	r1, [pc, #48]	; (8001458 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800142a:	f000 f819 	bl	8001460 <fill_arr>

		 }
	 }
*/

}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40012c00 	.word	0x40012c00
 800143c:	200001f4 	.word	0x200001f4
 8001440:	2000032c 	.word	0x2000032c
 8001444:	20000324 	.word	0x20000324
 8001448:	20000328 	.word	0x20000328
 800144c:	20000329 	.word	0x20000329
 8001450:	2000035c 	.word	0x2000035c
 8001454:	20000354 	.word	0x20000354
 8001458:	20000358 	.word	0x20000358
 800145c:	20000359 	.word	0x20000359

08001460 <fill_arr>:

void fill_arr(uint8_t *counter, uint8_t *flag_falling, uint32_t *falling, uint32_t arr_fall[], uint32_t falling0) {
 8001460:	b480      	push	{r7}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]

    arr_fall[(*counter)++] = falling0;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	b2d1      	uxtb	r1, r2
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	7011      	strb	r1, [r2, #0]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	4413      	add	r3, r2
 8001480:	6a3a      	ldr	r2, [r7, #32]
 8001482:	601a      	str	r2, [r3, #0]

    if (*counter == size_arr && !(*flag_falling)) {
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b0a      	cmp	r3, #10
 800148a:	d127      	bne.n	80014dc <fill_arr+0x7c>
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d123      	bne.n	80014dc <fill_arr+0x7c>
        *falling = 0;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
        for (uint8_t var = 0; var < size_arr; var++) {
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
 800149e:	e00c      	b.n	80014ba <fill_arr+0x5a>
            *falling += arr_fall[var];
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	6839      	ldr	r1, [r7, #0]
 80014aa:	440b      	add	r3, r1
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	441a      	add	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	601a      	str	r2, [r3, #0]
        for (uint8_t var = 0; var < size_arr; var++) {
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	3301      	adds	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	2b09      	cmp	r3, #9
 80014be:	d9ef      	bls.n	80014a0 <fill_arr+0x40>
        }
        *falling /= size_arr;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <fill_arr+0x88>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	601a      	str	r2, [r3, #0]
        *counter = 0;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
        *flag_falling = 1;
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
    }
}
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	cccccccd 	.word	0xcccccccd

080014ec <select_print_data>:

void select_print_data(void) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	if (flag_falling11) {
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <select_print_data+0x40>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <select_print_data+0x20>
		print_uart_data(falling11, 1);
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <select_print_data+0x44>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2101      	movs	r1, #1
 8001500:	4618      	mov	r0, r3
 8001502:	f000 f81b 	bl	800153c <print_uart_data>
        flag_falling11 = 0;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <select_print_data+0x40>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
	}

	if (flag_falling12) {
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <select_print_data+0x48>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <select_print_data+0x3c>
		print_uart_data(falling12, 2);
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <select_print_data+0x4c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2102      	movs	r1, #2
 800151c:	4618      	mov	r0, r3
 800151e:	f000 f80d 	bl	800153c <print_uart_data>
        flag_falling12 = 0;
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <select_print_data+0x48>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
	}

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000328 	.word	0x20000328
 8001530:	20000324 	.word	0x20000324
 8001534:	20000358 	.word	0x20000358
 8001538:	20000354 	.word	0x20000354

0800153c <print_uart_data>:

void print_uart_data(uint32_t falling, uint8_t num) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b094      	sub	sp, #80	; 0x50
 8001540:	af02      	add	r7, sp, #8
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	70fb      	strb	r3, [r7, #3]
	char str1[63] = {0,};
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	223b      	movs	r2, #59	; 0x3b
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f004 f980 	bl	800585a <memset>
    snprintf(str1, 63, "\nPulse%d %lu\n", num, falling);
 800155a:	78fa      	ldrb	r2, [r7, #3]
 800155c:	f107 0008 	add.w	r0, r7, #8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <print_uart_data+0x58>)
 8001568:	213f      	movs	r1, #63	; 0x3f
 800156a:	f004 f8ff 	bl	800576c <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 1000);
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe fdec 	bl	8000150 <strlen>
 8001578:	4603      	mov	r3, r0
 800157a:	b29a      	uxth	r2, r3
 800157c:	f107 0108 	add.w	r1, r7, #8
 8001580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <print_uart_data+0x5c>)
 8001586:	f002 fd7d 	bl	8004084 <HAL_UART_Transmit>
}
 800158a:	bf00      	nop
 800158c:	3748      	adds	r7, #72	; 0x48
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	08007a68 	.word	0x08007a68
 8001598:	200002cc 	.word	0x200002cc

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <Error_Handler+0x8>
	...

080015a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_MspInit+0x5c>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	4a14      	ldr	r2, [pc, #80]	; (8001604 <HAL_MspInit+0x5c>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6193      	str	r3, [r2, #24]
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_MspInit+0x5c>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <HAL_MspInit+0x5c>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <HAL_MspInit+0x5c>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <HAL_MspInit+0x5c>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HAL_MspInit+0x60>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_MspInit+0x60>)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	40021000 	.word	0x40021000
 8001608:	40010000 	.word	0x40010000

0800160c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	; 0x30
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a40      	ldr	r2, [pc, #256]	; (8001728 <HAL_TIM_Base_MspInit+0x11c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d12d      	bne.n	8001688 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800162c:	4b3f      	ldr	r3, [pc, #252]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a3e      	ldr	r2, [pc, #248]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 8001632:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b3c      	ldr	r3, [pc, #240]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b39      	ldr	r3, [pc, #228]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a38      	ldr	r2, [pc, #224]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b36      	ldr	r3, [pc, #216]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
 800165a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800165c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	4619      	mov	r1, r3
 8001670:	482f      	ldr	r0, [pc, #188]	; (8001730 <HAL_TIM_Base_MspInit+0x124>)
 8001672:	f000 fc8d 	bl	8001f90 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	201b      	movs	r0, #27
 800167c:	f000 fb91 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001680:	201b      	movs	r0, #27
 8001682:	f000 fbaa 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001686:	e04a      	b.n	800171e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001690:	d12c      	bne.n	80016ec <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a25      	ldr	r2, [pc, #148]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	61d3      	str	r3, [r2, #28]
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4a1f      	ldr	r2, [pc, #124]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6193      	str	r3, [r2, #24]
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80016c2:	2305      	movs	r3, #5
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	4619      	mov	r1, r3
 80016d4:	4816      	ldr	r0, [pc, #88]	; (8001730 <HAL_TIM_Base_MspInit+0x124>)
 80016d6:	f000 fc5b 	bl	8001f90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	201c      	movs	r0, #28
 80016e0:	f000 fb5f 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016e4:	201c      	movs	r0, #28
 80016e6:	f000 fb78 	bl	8001dda <HAL_NVIC_EnableIRQ>
}
 80016ea:	e018      	b.n	800171e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_TIM_Base_MspInit+0x128>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d113      	bne.n	800171e <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a0c      	ldr	r2, [pc, #48]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_TIM_Base_MspInit+0x120>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	201d      	movs	r0, #29
 8001714:	f000 fb45 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001718:	201d      	movs	r0, #29
 800171a:	f000 fb5e 	bl	8001dda <HAL_NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3730      	adds	r7, #48	; 0x30
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40012c00 	.word	0x40012c00
 800172c:	40021000 	.word	0x40021000
 8001730:	40010800 	.word	0x40010800
 8001734:	40000400 	.word	0x40000400

08001738 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_TIM_MspPostInit+0x58>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d117      	bne.n	8001788 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_TIM_MspPostInit+0x5c>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <HAL_TIM_MspPostInit+0x5c>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_TIM_MspPostInit+0x5c>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001770:	2340      	movs	r3, #64	; 0x40
 8001772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2302      	movs	r3, #2
 800177a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4619      	mov	r1, r3
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <HAL_TIM_MspPostInit+0x60>)
 8001784:	f000 fc04 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40000400 	.word	0x40000400
 8001794:	40021000 	.word	0x40021000
 8001798:	40010800 	.word	0x40010800

0800179c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a20      	ldr	r2, [pc, #128]	; (8001838 <HAL_UART_MspInit+0x9c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d139      	bne.n	8001830 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <HAL_UART_MspInit+0xa0>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	4a1e      	ldr	r2, [pc, #120]	; (800183c <HAL_UART_MspInit+0xa0>)
 80017c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c6:	61d3      	str	r3, [r2, #28]
 80017c8:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_UART_MspInit+0xa0>)
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_UART_MspInit+0xa0>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a18      	ldr	r2, [pc, #96]	; (800183c <HAL_UART_MspInit+0xa0>)
 80017da:	f043 0308 	orr.w	r3, r3, #8
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_UART_MspInit+0xa0>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4619      	mov	r1, r3
 8001800:	480f      	ldr	r0, [pc, #60]	; (8001840 <HAL_UART_MspInit+0xa4>)
 8001802:	f000 fbc5 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001806:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800180a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4619      	mov	r1, r3
 800181a:	4809      	ldr	r0, [pc, #36]	; (8001840 <HAL_UART_MspInit+0xa4>)
 800181c:	f000 fbb8 	bl	8001f90 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2027      	movs	r0, #39	; 0x27
 8001826:	f000 fabc 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800182a:	2027      	movs	r0, #39	; 0x27
 800182c:	f000 fad5 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40004800 	.word	0x40004800
 800183c:	40021000 	.word	0x40021000
 8001840:	40010c00 	.word	0x40010c00

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler+0x4>

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188a:	f000 f973 	bl	8001b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}

08001892 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(in1_Pin);
 8001896:	2010      	movs	r0, #16
 8001898:	f000 fd16 	bl	80022c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(in2_Pin);
 80018a4:	2020      	movs	r0, #32
 80018a6:	f000 fd0f 	bl	80022c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM1_CC_IRQHandler+0x10>)
 80018b6:	f001 fbdd 	bl	8003074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200001f4 	.word	0x200001f4

080018c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <TIM2_IRQHandler+0x10>)
 80018ca:	f001 fbd3 	bl	8003074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000023c 	.word	0x2000023c

080018d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <TIM3_IRQHandler+0x10>)
 80018de:	f001 fbc9 	bl	8003074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000284 	.word	0x20000284

080018ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <USART3_IRQHandler+0x10>)
 80018f2:	f002 fca5 	bl	8004240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200002cc 	.word	0x200002cc

08001900 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8001904:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001908:	f000 fcde 	bl	80022c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return 1;
 8001914:	2301      	movs	r3, #1
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <_kill>:

int _kill(int pid, int sig)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001928:	f003 ffea 	bl	8005900 <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	2216      	movs	r2, #22
 8001930:	601a      	str	r2, [r3, #0]
  return -1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <_exit>:

void _exit (int status)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001946:	f04f 31ff 	mov.w	r1, #4294967295
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ffe7 	bl	800191e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001950:	e7fe      	b.n	8001950 <_exit+0x12>

08001952 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e00a      	b.n	800197a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001964:	f3af 8000 	nop.w
 8001968:	4601      	mov	r1, r0
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	60ba      	str	r2, [r7, #8]
 8001970:	b2ca      	uxtb	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	dbf0      	blt.n	8001964 <_read+0x12>
  }

  return len;
 8001982:	687b      	ldr	r3, [r7, #4]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e009      	b.n	80019b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	1c5a      	adds	r2, r3, #1
 80019a2:	60ba      	str	r2, [r7, #8]
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	3301      	adds	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	dbf1      	blt.n	800199e <_write+0x12>
  }
  return len;
 80019ba:	687b      	ldr	r3, [r7, #4]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_close>:

int _close(int file)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ea:	605a      	str	r2, [r3, #4]
  return 0;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <_isatty>:

int _isatty(int file)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <_sbrk+0x5c>)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <_sbrk+0x60>)
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <_sbrk+0x64>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <_sbrk+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a54:	f003 ff54 	bl	8005900 <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20005000 	.word	0x20005000
 8001a84:	00000400 	.word	0x00000400
 8001a88:	20000384 	.word	0x20000384
 8001a8c:	200004d8 	.word	0x200004d8

08001a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a9c:	f7ff fff8 	bl	8001a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa0:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aa2:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa8:	e002      	b.n	8001ab0 <LoopCopyDataInit>

08001aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aae:	3304      	adds	r3, #4

08001ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab4:	d3f9      	bcc.n	8001aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ab8:	4c09      	ldr	r4, [pc, #36]	; (8001ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001abc:	e001      	b.n	8001ac2 <LoopFillZerobss>

08001abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac0:	3204      	adds	r2, #4

08001ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac4:	d3fb      	bcc.n	8001abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f003 ff21 	bl	800590c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aca:	f7fe ffdd 	bl	8000a88 <main>
  bx lr
 8001ace:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ad8:	08007e1c 	.word	0x08007e1c
  ldr r2, =_sbss
 8001adc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ae0:	200004d8 	.word	0x200004d8

08001ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_2_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_Init+0x28>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_Init+0x28>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f947 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f000 f808 	bl	8001b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff fd50 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x54>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_InitTick+0x58>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f96d 	bl	8001e12 <HAL_SYSTICK_Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00e      	b.n	8001b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d80a      	bhi.n	8001b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f000 f927 	bl	8001da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <HAL_InitTick+0x5c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	2000000c 	.word	0x2000000c
 8001b70:	20000008 	.word	0x20000008

08001b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_IncTick+0x1c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_IncTick+0x20>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_IncTick+0x20>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	20000388 	.word	0x20000388

08001b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <HAL_GetTick+0x10>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000388 	.word	0x20000388

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4906      	ldr	r1, [pc, #24]	; (8001c44 <__NVIC_EnableIRQ+0x34>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db12      	blt.n	8001c80 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	490a      	ldr	r1, [pc, #40]	; (8001c8c <__NVIC_DisableIRQ+0x44>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	3320      	adds	r3, #32
 8001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c74:	f3bf 8f4f 	dsb	sy
}
 8001c78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c7a:	f3bf 8f6f 	isb	sy
}
 8001c7e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff90 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff09 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff1e 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff90 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5f 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff11 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff1f 	bl	8001c48 <__NVIC_DisableIRQ>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ff94 	bl	8001d48 <SysTick_Config>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d008      	beq.n	8001e54 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2204      	movs	r2, #4
 8001e46:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e020      	b.n	8001e96 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 020e 	bic.w	r2, r2, #14
 8001e62:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d005      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e051      	b.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 020e 	bic.w	r2, r2, #14
 8001ed2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a22      	ldr	r2, [pc, #136]	; (8001f74 <HAL_DMA_Abort_IT+0xd4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d029      	beq.n	8001f42 <HAL_DMA_Abort_IT+0xa2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a21      	ldr	r2, [pc, #132]	; (8001f78 <HAL_DMA_Abort_IT+0xd8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d022      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x9e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1f      	ldr	r2, [pc, #124]	; (8001f7c <HAL_DMA_Abort_IT+0xdc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01a      	beq.n	8001f38 <HAL_DMA_Abort_IT+0x98>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1e      	ldr	r2, [pc, #120]	; (8001f80 <HAL_DMA_Abort_IT+0xe0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d012      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x92>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <HAL_DMA_Abort_IT+0xe4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00a      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x8c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <HAL_DMA_Abort_IT+0xe8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d102      	bne.n	8001f26 <HAL_DMA_Abort_IT+0x86>
 8001f20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f24:	e00e      	b.n	8001f44 <HAL_DMA_Abort_IT+0xa4>
 8001f26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f2a:	e00b      	b.n	8001f44 <HAL_DMA_Abort_IT+0xa4>
 8001f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f30:	e008      	b.n	8001f44 <HAL_DMA_Abort_IT+0xa4>
 8001f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f36:	e005      	b.n	8001f44 <HAL_DMA_Abort_IT+0xa4>
 8001f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3c:	e002      	b.n	8001f44 <HAL_DMA_Abort_IT+0xa4>
 8001f3e:	2310      	movs	r3, #16
 8001f40:	e000      	b.n	8001f44 <HAL_DMA_Abort_IT+0xa4>
 8001f42:	2301      	movs	r3, #1
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_DMA_Abort_IT+0xec>)
 8001f46:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
    } 
  }
  return status;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40020008 	.word	0x40020008
 8001f78:	4002001c 	.word	0x4002001c
 8001f7c:	40020030 	.word	0x40020030
 8001f80:	40020044 	.word	0x40020044
 8001f84:	40020058 	.word	0x40020058
 8001f88:	4002006c 	.word	0x4002006c
 8001f8c:	40020000 	.word	0x40020000

08001f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b08b      	sub	sp, #44	; 0x2c
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa2:	e169      	b.n	8002278 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	f040 8158 	bne.w	8002272 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4a9a      	ldr	r2, [pc, #616]	; (8002230 <HAL_GPIO_Init+0x2a0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d05e      	beq.n	800208a <HAL_GPIO_Init+0xfa>
 8001fcc:	4a98      	ldr	r2, [pc, #608]	; (8002230 <HAL_GPIO_Init+0x2a0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d875      	bhi.n	80020be <HAL_GPIO_Init+0x12e>
 8001fd2:	4a98      	ldr	r2, [pc, #608]	; (8002234 <HAL_GPIO_Init+0x2a4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d058      	beq.n	800208a <HAL_GPIO_Init+0xfa>
 8001fd8:	4a96      	ldr	r2, [pc, #600]	; (8002234 <HAL_GPIO_Init+0x2a4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d86f      	bhi.n	80020be <HAL_GPIO_Init+0x12e>
 8001fde:	4a96      	ldr	r2, [pc, #600]	; (8002238 <HAL_GPIO_Init+0x2a8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d052      	beq.n	800208a <HAL_GPIO_Init+0xfa>
 8001fe4:	4a94      	ldr	r2, [pc, #592]	; (8002238 <HAL_GPIO_Init+0x2a8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d869      	bhi.n	80020be <HAL_GPIO_Init+0x12e>
 8001fea:	4a94      	ldr	r2, [pc, #592]	; (800223c <HAL_GPIO_Init+0x2ac>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d04c      	beq.n	800208a <HAL_GPIO_Init+0xfa>
 8001ff0:	4a92      	ldr	r2, [pc, #584]	; (800223c <HAL_GPIO_Init+0x2ac>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d863      	bhi.n	80020be <HAL_GPIO_Init+0x12e>
 8001ff6:	4a92      	ldr	r2, [pc, #584]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d046      	beq.n	800208a <HAL_GPIO_Init+0xfa>
 8001ffc:	4a90      	ldr	r2, [pc, #576]	; (8002240 <HAL_GPIO_Init+0x2b0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d85d      	bhi.n	80020be <HAL_GPIO_Init+0x12e>
 8002002:	2b12      	cmp	r3, #18
 8002004:	d82a      	bhi.n	800205c <HAL_GPIO_Init+0xcc>
 8002006:	2b12      	cmp	r3, #18
 8002008:	d859      	bhi.n	80020be <HAL_GPIO_Init+0x12e>
 800200a:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <HAL_GPIO_Init+0x80>)
 800200c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002010:	0800208b 	.word	0x0800208b
 8002014:	08002065 	.word	0x08002065
 8002018:	08002077 	.word	0x08002077
 800201c:	080020b9 	.word	0x080020b9
 8002020:	080020bf 	.word	0x080020bf
 8002024:	080020bf 	.word	0x080020bf
 8002028:	080020bf 	.word	0x080020bf
 800202c:	080020bf 	.word	0x080020bf
 8002030:	080020bf 	.word	0x080020bf
 8002034:	080020bf 	.word	0x080020bf
 8002038:	080020bf 	.word	0x080020bf
 800203c:	080020bf 	.word	0x080020bf
 8002040:	080020bf 	.word	0x080020bf
 8002044:	080020bf 	.word	0x080020bf
 8002048:	080020bf 	.word	0x080020bf
 800204c:	080020bf 	.word	0x080020bf
 8002050:	080020bf 	.word	0x080020bf
 8002054:	0800206d 	.word	0x0800206d
 8002058:	08002081 	.word	0x08002081
 800205c:	4a79      	ldr	r2, [pc, #484]	; (8002244 <HAL_GPIO_Init+0x2b4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002062:	e02c      	b.n	80020be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	623b      	str	r3, [r7, #32]
          break;
 800206a:	e029      	b.n	80020c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	3304      	adds	r3, #4
 8002072:	623b      	str	r3, [r7, #32]
          break;
 8002074:	e024      	b.n	80020c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	3308      	adds	r3, #8
 800207c:	623b      	str	r3, [r7, #32]
          break;
 800207e:	e01f      	b.n	80020c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	330c      	adds	r3, #12
 8002086:	623b      	str	r3, [r7, #32]
          break;
 8002088:	e01a      	b.n	80020c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002092:	2304      	movs	r3, #4
 8002094:	623b      	str	r3, [r7, #32]
          break;
 8002096:	e013      	b.n	80020c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d105      	bne.n	80020ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020a0:	2308      	movs	r3, #8
 80020a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	611a      	str	r2, [r3, #16]
          break;
 80020aa:	e009      	b.n	80020c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020ac:	2308      	movs	r3, #8
 80020ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	615a      	str	r2, [r3, #20]
          break;
 80020b6:	e003      	b.n	80020c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
          break;
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x130>
          break;
 80020be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2bff      	cmp	r3, #255	; 0xff
 80020c4:	d801      	bhi.n	80020ca <HAL_GPIO_Init+0x13a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	e001      	b.n	80020ce <HAL_GPIO_Init+0x13e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3304      	adds	r3, #4
 80020ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2bff      	cmp	r3, #255	; 0xff
 80020d4:	d802      	bhi.n	80020dc <HAL_GPIO_Init+0x14c>
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	e002      	b.n	80020e2 <HAL_GPIO_Init+0x152>
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	3b08      	subs	r3, #8
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	210f      	movs	r1, #15
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	401a      	ands	r2, r3
 80020f4:	6a39      	ldr	r1, [r7, #32]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	431a      	orrs	r2, r3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80b1 	beq.w	8002272 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002110:	4b4d      	ldr	r3, [pc, #308]	; (8002248 <HAL_GPIO_Init+0x2b8>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4a4c      	ldr	r2, [pc, #304]	; (8002248 <HAL_GPIO_Init+0x2b8>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6193      	str	r3, [r2, #24]
 800211c:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <HAL_GPIO_Init+0x2b8>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002128:	4a48      	ldr	r2, [pc, #288]	; (800224c <HAL_GPIO_Init+0x2bc>)
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	3302      	adds	r3, #2
 8002130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002134:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4013      	ands	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a40      	ldr	r2, [pc, #256]	; (8002250 <HAL_GPIO_Init+0x2c0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d013      	beq.n	800217c <HAL_GPIO_Init+0x1ec>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3f      	ldr	r2, [pc, #252]	; (8002254 <HAL_GPIO_Init+0x2c4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d00d      	beq.n	8002178 <HAL_GPIO_Init+0x1e8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3e      	ldr	r2, [pc, #248]	; (8002258 <HAL_GPIO_Init+0x2c8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d007      	beq.n	8002174 <HAL_GPIO_Init+0x1e4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3d      	ldr	r2, [pc, #244]	; (800225c <HAL_GPIO_Init+0x2cc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d101      	bne.n	8002170 <HAL_GPIO_Init+0x1e0>
 800216c:	2303      	movs	r3, #3
 800216e:	e006      	b.n	800217e <HAL_GPIO_Init+0x1ee>
 8002170:	2304      	movs	r3, #4
 8002172:	e004      	b.n	800217e <HAL_GPIO_Init+0x1ee>
 8002174:	2302      	movs	r3, #2
 8002176:	e002      	b.n	800217e <HAL_GPIO_Init+0x1ee>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_GPIO_Init+0x1ee>
 800217c:	2300      	movs	r3, #0
 800217e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002180:	f002 0203 	and.w	r2, r2, #3
 8002184:	0092      	lsls	r2, r2, #2
 8002186:	4093      	lsls	r3, r2
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800218e:	492f      	ldr	r1, [pc, #188]	; (800224c <HAL_GPIO_Init+0x2bc>)
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	492c      	ldr	r1, [pc, #176]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021b6:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	43db      	mvns	r3, r3
 80021be:	4928      	ldr	r1, [pc, #160]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	4922      	ldr	r1, [pc, #136]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60cb      	str	r3, [r1, #12]
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	491e      	ldr	r1, [pc, #120]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d006      	beq.n	8002206 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4918      	ldr	r1, [pc, #96]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	43db      	mvns	r3, r3
 800220e:	4914      	ldr	r1, [pc, #80]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 8002210:	4013      	ands	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d021      	beq.n	8002264 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	490e      	ldr	r1, [pc, #56]	; (8002260 <HAL_GPIO_Init+0x2d0>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]
 800222c:	e021      	b.n	8002272 <HAL_GPIO_Init+0x2e2>
 800222e:	bf00      	nop
 8002230:	10320000 	.word	0x10320000
 8002234:	10310000 	.word	0x10310000
 8002238:	10220000 	.word	0x10220000
 800223c:	10210000 	.word	0x10210000
 8002240:	10120000 	.word	0x10120000
 8002244:	10110000 	.word	0x10110000
 8002248:	40021000 	.word	0x40021000
 800224c:	40010000 	.word	0x40010000
 8002250:	40010800 	.word	0x40010800
 8002254:	40010c00 	.word	0x40010c00
 8002258:	40011000 	.word	0x40011000
 800225c:	40011400 	.word	0x40011400
 8002260:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_GPIO_Init+0x304>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	43db      	mvns	r3, r3
 800226c:	4909      	ldr	r1, [pc, #36]	; (8002294 <HAL_GPIO_Init+0x304>)
 800226e:	4013      	ands	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	3301      	adds	r3, #1
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	fa22 f303 	lsr.w	r3, r2, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	f47f ae8e 	bne.w	8001fa4 <HAL_GPIO_Init+0x14>
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	372c      	adds	r7, #44	; 0x2c
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	40010400 	.word	0x40010400

08002298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
 80022a4:	4613      	mov	r3, r2
 80022a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022a8:	787b      	ldrb	r3, [r7, #1]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022b4:	e003      	b.n	80022be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022b6:	887b      	ldrh	r3, [r7, #2]
 80022b8:	041a      	lsls	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	611a      	str	r2, [r3, #16]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe ff3e 	bl	8001168 <HAL_GPIO_EXTI_Callback>
  }
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40010400 	.word	0x40010400

080022f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e272      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8087 	beq.w	8002426 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002318:	4b92      	ldr	r3, [pc, #584]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b04      	cmp	r3, #4
 8002322:	d00c      	beq.n	800233e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002324:	4b8f      	ldr	r3, [pc, #572]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b08      	cmp	r3, #8
 800232e:	d112      	bne.n	8002356 <HAL_RCC_OscConfig+0x5e>
 8002330:	4b8c      	ldr	r3, [pc, #560]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d10b      	bne.n	8002356 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233e:	4b89      	ldr	r3, [pc, #548]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d06c      	beq.n	8002424 <HAL_RCC_OscConfig+0x12c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d168      	bne.n	8002424 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e24c      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x76>
 8002360:	4b80      	ldr	r3, [pc, #512]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a7f      	ldr	r2, [pc, #508]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	e02e      	b.n	80023cc <HAL_RCC_OscConfig+0xd4>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x98>
 8002376:	4b7b      	ldr	r3, [pc, #492]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a7a      	ldr	r2, [pc, #488]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 800237c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b78      	ldr	r3, [pc, #480]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a77      	ldr	r2, [pc, #476]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002388:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e01d      	b.n	80023cc <HAL_RCC_OscConfig+0xd4>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0xbc>
 800239a:	4b72      	ldr	r3, [pc, #456]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a71      	ldr	r2, [pc, #452]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a6e      	ldr	r2, [pc, #440]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e00b      	b.n	80023cc <HAL_RCC_OscConfig+0xd4>
 80023b4:	4b6b      	ldr	r3, [pc, #428]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a6a      	ldr	r2, [pc, #424]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b68      	ldr	r3, [pc, #416]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a67      	ldr	r2, [pc, #412]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d013      	beq.n	80023fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7ff fbe0 	bl	8001b98 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023dc:	f7ff fbdc 	bl	8001b98 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e200      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	4b5d      	ldr	r3, [pc, #372]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0xe4>
 80023fa:	e014      	b.n	8002426 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7ff fbcc 	bl	8001b98 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7ff fbc8 	bl	8001b98 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e1ec      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002416:	4b53      	ldr	r3, [pc, #332]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x10c>
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d063      	beq.n	80024fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002432:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800243e:	4b49      	ldr	r3, [pc, #292]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b08      	cmp	r3, #8
 8002448:	d11c      	bne.n	8002484 <HAL_RCC_OscConfig+0x18c>
 800244a:	4b46      	ldr	r3, [pc, #280]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d116      	bne.n	8002484 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	4b43      	ldr	r3, [pc, #268]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_RCC_OscConfig+0x176>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d001      	beq.n	800246e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e1c0      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246e:	4b3d      	ldr	r3, [pc, #244]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4939      	ldr	r1, [pc, #228]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002482:	e03a      	b.n	80024fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d020      	beq.n	80024ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800248c:	4b36      	ldr	r3, [pc, #216]	; (8002568 <HAL_RCC_OscConfig+0x270>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7ff fb81 	bl	8001b98 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249a:	f7ff fb7d 	bl	8001b98 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1a1      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4927      	ldr	r1, [pc, #156]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	600b      	str	r3, [r1, #0]
 80024cc:	e015      	b.n	80024fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ce:	4b26      	ldr	r3, [pc, #152]	; (8002568 <HAL_RCC_OscConfig+0x270>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7ff fb60 	bl	8001b98 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024dc:	f7ff fb5c 	bl	8001b98 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e180      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ee:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d03a      	beq.n	800257c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d019      	beq.n	8002542 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_RCC_OscConfig+0x274>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002514:	f7ff fb40 	bl	8001b98 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251c:	f7ff fb3c 	bl	8001b98 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e160      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800253a:	2001      	movs	r0, #1
 800253c:	f000 face 	bl	8002adc <RCC_Delay>
 8002540:	e01c      	b.n	800257c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_RCC_OscConfig+0x274>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002548:	f7ff fb26 	bl	8001b98 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254e:	e00f      	b.n	8002570 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002550:	f7ff fb22 	bl	8001b98 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d908      	bls.n	8002570 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e146      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	42420000 	.word	0x42420000
 800256c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002570:	4b92      	ldr	r3, [pc, #584]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e9      	bne.n	8002550 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a6 	beq.w	80026d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258e:	4b8b      	ldr	r3, [pc, #556]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10d      	bne.n	80025b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	4b88      	ldr	r3, [pc, #544]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	4a87      	ldr	r2, [pc, #540]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a4:	61d3      	str	r3, [r2, #28]
 80025a6:	4b85      	ldr	r3, [pc, #532]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b2:	2301      	movs	r3, #1
 80025b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b6:	4b82      	ldr	r3, [pc, #520]	; (80027c0 <HAL_RCC_OscConfig+0x4c8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d118      	bne.n	80025f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c2:	4b7f      	ldr	r3, [pc, #508]	; (80027c0 <HAL_RCC_OscConfig+0x4c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a7e      	ldr	r2, [pc, #504]	; (80027c0 <HAL_RCC_OscConfig+0x4c8>)
 80025c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ce:	f7ff fae3 	bl	8001b98 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d6:	f7ff fadf 	bl	8001b98 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b64      	cmp	r3, #100	; 0x64
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e103      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e8:	4b75      	ldr	r3, [pc, #468]	; (80027c0 <HAL_RCC_OscConfig+0x4c8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d106      	bne.n	800260a <HAL_RCC_OscConfig+0x312>
 80025fc:	4b6f      	ldr	r3, [pc, #444]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4a6e      	ldr	r2, [pc, #440]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6213      	str	r3, [r2, #32]
 8002608:	e02d      	b.n	8002666 <HAL_RCC_OscConfig+0x36e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10c      	bne.n	800262c <HAL_RCC_OscConfig+0x334>
 8002612:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	4a69      	ldr	r2, [pc, #420]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	6213      	str	r3, [r2, #32]
 800261e:	4b67      	ldr	r3, [pc, #412]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4a66      	ldr	r2, [pc, #408]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	6213      	str	r3, [r2, #32]
 800262a:	e01c      	b.n	8002666 <HAL_RCC_OscConfig+0x36e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b05      	cmp	r3, #5
 8002632:	d10c      	bne.n	800264e <HAL_RCC_OscConfig+0x356>
 8002634:	4b61      	ldr	r3, [pc, #388]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4a60      	ldr	r2, [pc, #384]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	6213      	str	r3, [r2, #32]
 8002640:	4b5e      	ldr	r3, [pc, #376]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a5d      	ldr	r2, [pc, #372]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	e00b      	b.n	8002666 <HAL_RCC_OscConfig+0x36e>
 800264e:	4b5b      	ldr	r3, [pc, #364]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a5a      	ldr	r2, [pc, #360]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6213      	str	r3, [r2, #32]
 800265a:	4b58      	ldr	r3, [pc, #352]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a57      	ldr	r2, [pc, #348]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002660:	f023 0304 	bic.w	r3, r3, #4
 8002664:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d015      	beq.n	800269a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7ff fa93 	bl	8001b98 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002674:	e00a      	b.n	800268c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7ff fa8f 	bl	8001b98 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	; 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e0b1      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	4b4b      	ldr	r3, [pc, #300]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ee      	beq.n	8002676 <HAL_RCC_OscConfig+0x37e>
 8002698:	e014      	b.n	80026c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269a:	f7ff fa7d 	bl	8001b98 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7ff fa79 	bl	8001b98 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e09b      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b8:	4b40      	ldr	r3, [pc, #256]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1ee      	bne.n	80026a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d105      	bne.n	80026d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ca:	4b3c      	ldr	r3, [pc, #240]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4a3b      	ldr	r2, [pc, #236]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8087 	beq.w	80027ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e0:	4b36      	ldr	r3, [pc, #216]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d061      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d146      	bne.n	8002782 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f4:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <HAL_RCC_OscConfig+0x4cc>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7ff fa4d 	bl	8001b98 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7ff fa49 	bl	8001b98 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e06d      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002714:	4b29      	ldr	r3, [pc, #164]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f0      	bne.n	8002702 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002728:	d108      	bne.n	800273c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	4921      	ldr	r1, [pc, #132]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800273c:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a19      	ldr	r1, [r3, #32]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	430b      	orrs	r3, r1
 800274e:	491b      	ldr	r1, [pc, #108]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_RCC_OscConfig+0x4cc>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7ff fa1d 	bl	8001b98 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002762:	f7ff fa19 	bl	8001b98 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e03d      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x46a>
 8002780:	e035      	b.n	80027ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_RCC_OscConfig+0x4cc>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff fa06 	bl	8001b98 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002790:	f7ff fa02 	bl	8001b98 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e026      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x498>
 80027ae:	e01e      	b.n	80027ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e019      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40007000 	.word	0x40007000
 80027c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_OscConfig+0x500>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d106      	bne.n	80027ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000

080027fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0d0      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002810:	4b6a      	ldr	r3, [pc, #424]	; (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d910      	bls.n	8002840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b67      	ldr	r3, [pc, #412]	; (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 0207 	bic.w	r2, r3, #7
 8002826:	4965      	ldr	r1, [pc, #404]	; (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b63      	ldr	r3, [pc, #396]	; (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0b8      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002858:	4b59      	ldr	r3, [pc, #356]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a58      	ldr	r2, [pc, #352]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002862:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002870:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a52      	ldr	r2, [pc, #328]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800287a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800287c:	4b50      	ldr	r3, [pc, #320]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	494d      	ldr	r1, [pc, #308]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d040      	beq.n	800291c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d115      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e07f      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e073      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ca:	4b3d      	ldr	r3, [pc, #244]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e06b      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4936      	ldr	r1, [pc, #216]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ec:	f7ff f954 	bl	8001b98 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	e00a      	b.n	800290a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7ff f950 	bl	8001b98 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e053      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 020c 	and.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	429a      	cmp	r2, r3
 800291a:	d1eb      	bne.n	80028f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800291c:	4b27      	ldr	r3, [pc, #156]	; (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d210      	bcs.n	800294c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b24      	ldr	r3, [pc, #144]	; (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 0207 	bic.w	r2, r3, #7
 8002932:	4922      	ldr	r1, [pc, #136]	; (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e032      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4916      	ldr	r1, [pc, #88]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	490e      	ldr	r1, [pc, #56]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800298a:	f000 f821 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 800298e:	4602      	mov	r2, r0
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	490a      	ldr	r1, [pc, #40]	; (80029c4 <HAL_RCC_ClockConfig+0x1c8>)
 800299c:	5ccb      	ldrb	r3, [r1, r3]
 800299e:	fa22 f303 	lsr.w	r3, r2, r3
 80029a2:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1cc>)
 80029a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x1d0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff f8b2 	bl	8001b14 <HAL_InitTick>

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40022000 	.word	0x40022000
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08007a78 	.word	0x08007a78
 80029c8:	20000004 	.word	0x20000004
 80029cc:	20000008 	.word	0x20000008

080029d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	2300      	movs	r3, #0
 80029e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x94>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d002      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x30>
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d003      	beq.n	8002a06 <HAL_RCC_GetSysClockFreq+0x36>
 80029fe:	e027      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a02:	613b      	str	r3, [r7, #16]
      break;
 8002a04:	e027      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	0c9b      	lsrs	r3, r3, #18
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a10:	5cd3      	ldrb	r3, [r2, r3]
 8002a12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d010      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	0c5b      	lsrs	r3, r3, #17
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	4a11      	ldr	r2, [pc, #68]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a2a:	5cd3      	ldrb	r3, [r2, r3]
 8002a2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a0d      	ldr	r2, [pc, #52]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a32:	fb03 f202 	mul.w	r2, r3, r2
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e004      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a0c      	ldr	r2, [pc, #48]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a44:	fb02 f303 	mul.w	r3, r2, r3
 8002a48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	613b      	str	r3, [r7, #16]
      break;
 8002a4e:	e002      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a52:	613b      	str	r3, [r7, #16]
      break;
 8002a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a56:	693b      	ldr	r3, [r7, #16]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	007a1200 	.word	0x007a1200
 8002a6c:	08007a90 	.word	0x08007a90
 8002a70:	08007aa0 	.word	0x08007aa0
 8002a74:	003d0900 	.word	0x003d0900

08002a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a7c:	4b02      	ldr	r3, [pc, #8]	; (8002a88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	20000004 	.word	0x20000004

08002a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a90:	f7ff fff2 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4903      	ldr	r1, [pc, #12]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08007a88 	.word	0x08007a88

08002ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ab8:	f7ff ffde 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	0adb      	lsrs	r3, r3, #11
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4903      	ldr	r1, [pc, #12]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	08007a88 	.word	0x08007a88

08002adc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <RCC_Delay+0x34>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <RCC_Delay+0x38>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	0a5b      	lsrs	r3, r3, #9
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002af8:	bf00      	nop
  }
  while (Delay --);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1e5a      	subs	r2, r3, #1
 8002afe:	60fa      	str	r2, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f9      	bne.n	8002af8 <RCC_Delay+0x1c>
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	20000004 	.word	0x20000004
 8002b14:	10624dd3 	.word	0x10624dd3

08002b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e041      	b.n	8002bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe fd64 	bl	800160c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f000 fe22 	bl	80037a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e041      	b.n	8002c4c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f839 	bl	8002c54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f000 fdd3 	bl	80037a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <HAL_TIM_PWM_Start+0x24>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e022      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x6a>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d109      	bne.n	8002ca6 <HAL_TIM_PWM_Start+0x3e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e015      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x6a>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d109      	bne.n	8002cc0 <HAL_TIM_PWM_Start+0x58>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	bf14      	ite	ne
 8002cb8:	2301      	movne	r3, #1
 8002cba:	2300      	moveq	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	e008      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x6a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	bf14      	ite	ne
 8002ccc:	2301      	movne	r3, #1
 8002cce:	2300      	moveq	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e05e      	b.n	8002d98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_PWM_Start+0x82>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce8:	e013      	b.n	8002d12 <HAL_TIM_PWM_Start+0xaa>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x92>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf8:	e00b      	b.n	8002d12 <HAL_TIM_PWM_Start+0xaa>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_PWM_Start+0xa2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d08:	e003      	b.n	8002d12 <HAL_TIM_PWM_Start+0xaa>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2201      	movs	r2, #1
 8002d18:	6839      	ldr	r1, [r7, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 f8cd 	bl	8003eba <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <HAL_TIM_PWM_Start+0x138>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d107      	bne.n	8002d3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_TIM_PWM_Start+0x138>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00e      	beq.n	8002d62 <HAL_TIM_PWM_Start+0xfa>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4c:	d009      	beq.n	8002d62 <HAL_TIM_PWM_Start+0xfa>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <HAL_TIM_PWM_Start+0x13c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <HAL_TIM_PWM_Start+0xfa>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a12      	ldr	r2, [pc, #72]	; (8002da8 <HAL_TIM_PWM_Start+0x140>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d111      	bne.n	8002d86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b06      	cmp	r3, #6
 8002d72:	d010      	beq.n	8002d96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d84:	e007      	b.n	8002d96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40012c00 	.word	0x40012c00
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800

08002dac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e041      	b.n	8002e42 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f839 	bl	8002e4a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4610      	mov	r0, r2
 8002dec:	f000 fcd8 	bl	80037a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <HAL_TIM_IC_Start_IT+0x1e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	e013      	b.n	8002ea2 <HAL_TIM_IC_Start_IT+0x46>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d104      	bne.n	8002e8a <HAL_TIM_IC_Start_IT+0x2e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	e00b      	b.n	8002ea2 <HAL_TIM_IC_Start_IT+0x46>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_IC_Start_IT+0x3e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	e003      	b.n	8002ea2 <HAL_TIM_IC_Start_IT+0x46>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <HAL_TIM_IC_Start_IT+0x58>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e013      	b.n	8002edc <HAL_TIM_IC_Start_IT+0x80>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d104      	bne.n	8002ec4 <HAL_TIM_IC_Start_IT+0x68>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e00b      	b.n	8002edc <HAL_TIM_IC_Start_IT+0x80>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d104      	bne.n	8002ed4 <HAL_TIM_IC_Start_IT+0x78>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e003      	b.n	8002edc <HAL_TIM_IC_Start_IT+0x80>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ede:	7bbb      	ldrb	r3, [r7, #14]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d102      	bne.n	8002eea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ee4:	7b7b      	ldrb	r3, [r7, #13]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d001      	beq.n	8002eee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0b8      	b.n	8003060 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d104      	bne.n	8002efe <HAL_TIM_IC_Start_IT+0xa2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002efc:	e013      	b.n	8002f26 <HAL_TIM_IC_Start_IT+0xca>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_IC_Start_IT+0xb2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f0c:	e00b      	b.n	8002f26 <HAL_TIM_IC_Start_IT+0xca>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d104      	bne.n	8002f1e <HAL_TIM_IC_Start_IT+0xc2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f1c:	e003      	b.n	8002f26 <HAL_TIM_IC_Start_IT+0xca>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2202      	movs	r2, #2
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <HAL_TIM_IC_Start_IT+0xda>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f34:	e013      	b.n	8002f5e <HAL_TIM_IC_Start_IT+0x102>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d104      	bne.n	8002f46 <HAL_TIM_IC_Start_IT+0xea>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f44:	e00b      	b.n	8002f5e <HAL_TIM_IC_Start_IT+0x102>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d104      	bne.n	8002f56 <HAL_TIM_IC_Start_IT+0xfa>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f54:	e003      	b.n	8002f5e <HAL_TIM_IC_Start_IT+0x102>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	d841      	bhi.n	8002fe8 <HAL_TIM_IC_Start_IT+0x18c>
 8002f64:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <HAL_TIM_IC_Start_IT+0x110>)
 8002f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6a:	bf00      	nop
 8002f6c:	08002fa1 	.word	0x08002fa1
 8002f70:	08002fe9 	.word	0x08002fe9
 8002f74:	08002fe9 	.word	0x08002fe9
 8002f78:	08002fe9 	.word	0x08002fe9
 8002f7c:	08002fb3 	.word	0x08002fb3
 8002f80:	08002fe9 	.word	0x08002fe9
 8002f84:	08002fe9 	.word	0x08002fe9
 8002f88:	08002fe9 	.word	0x08002fe9
 8002f8c:	08002fc5 	.word	0x08002fc5
 8002f90:	08002fe9 	.word	0x08002fe9
 8002f94:	08002fe9 	.word	0x08002fe9
 8002f98:	08002fe9 	.word	0x08002fe9
 8002f9c:	08002fd7 	.word	0x08002fd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0202 	orr.w	r2, r2, #2
 8002fae:	60da      	str	r2, [r3, #12]
      break;
 8002fb0:	e01d      	b.n	8002fee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0204 	orr.w	r2, r2, #4
 8002fc0:	60da      	str	r2, [r3, #12]
      break;
 8002fc2:	e014      	b.n	8002fee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0208 	orr.w	r2, r2, #8
 8002fd2:	60da      	str	r2, [r3, #12]
      break;
 8002fd4:	e00b      	b.n	8002fee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0210 	orr.w	r2, r2, #16
 8002fe4:	60da      	str	r2, [r3, #12]
      break;
 8002fe6:	e002      	b.n	8002fee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
      break;
 8002fec:	bf00      	nop
  }

  if (status == HAL_OK)
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d134      	bne.n	800305e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	6839      	ldr	r1, [r7, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 ff5c 	bl	8003eba <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a18      	ldr	r2, [pc, #96]	; (8003068 <HAL_TIM_IC_Start_IT+0x20c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00e      	beq.n	800302a <HAL_TIM_IC_Start_IT+0x1ce>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003014:	d009      	beq.n	800302a <HAL_TIM_IC_Start_IT+0x1ce>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <HAL_TIM_IC_Start_IT+0x210>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_TIM_IC_Start_IT+0x1ce>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a12      	ldr	r2, [pc, #72]	; (8003070 <HAL_TIM_IC_Start_IT+0x214>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d111      	bne.n	800304e <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b06      	cmp	r3, #6
 800303a:	d010      	beq.n	800305e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304c:	e007      	b.n	800305e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40000400 	.word	0x40000400
 8003070:	40000800 	.word	0x40000800

08003074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b02      	cmp	r3, #2
 8003088:	d122      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b02      	cmp	r3, #2
 8003096:	d11b      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0202 	mvn.w	r2, #2
 80030a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe f97e 	bl	80013b8 <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fb53 	bl	800376a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fb59 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d122      	bne.n	8003124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d11b      	bne.n	8003124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0204 	mvn.w	r2, #4
 80030f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2202      	movs	r2, #2
 80030fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe f954 	bl	80013b8 <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fb29 	bl	800376a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fb2f 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b08      	cmp	r3, #8
 8003130:	d122      	bne.n	8003178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b08      	cmp	r3, #8
 800313e:	d11b      	bne.n	8003178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0208 	mvn.w	r2, #8
 8003148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2204      	movs	r2, #4
 800314e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe f92a 	bl	80013b8 <HAL_TIM_IC_CaptureCallback>
 8003164:	e005      	b.n	8003172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 faff 	bl	800376a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fb05 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b10      	cmp	r3, #16
 8003184:	d122      	bne.n	80031cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b10      	cmp	r3, #16
 8003192:	d11b      	bne.n	80031cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0210 	mvn.w	r2, #16
 800319c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2208      	movs	r2, #8
 80031a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe f900 	bl	80013b8 <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fad5 	bl	800376a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fadb 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d10e      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d107      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0201 	mvn.w	r2, #1
 80031f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fab0 	bl	8003758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	2b80      	cmp	r3, #128	; 0x80
 8003204:	d10e      	bne.n	8003224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003210:	2b80      	cmp	r3, #128	; 0x80
 8003212:	d107      	bne.n	8003224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800321c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fed7 	bl	8003fd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d10e      	bne.n	8003250 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d107      	bne.n	8003250 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fa9f 	bl	800378e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b20      	cmp	r3, #32
 800325c:	d10e      	bne.n	800327c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b20      	cmp	r3, #32
 800326a:	d107      	bne.n	800327c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0220 	mvn.w	r2, #32
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fea2 	bl	8003fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_TIM_IC_ConfigChannel+0x1e>
 800329e:	2302      	movs	r3, #2
 80032a0:	e088      	b.n	80033b4 <HAL_TIM_IC_ConfigChannel+0x130>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d11b      	bne.n	80032e8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80032c0:	f000 fc58 	bl	8003b74 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 020c 	bic.w	r2, r2, #12
 80032d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6999      	ldr	r1, [r3, #24]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	619a      	str	r2, [r3, #24]
 80032e6:	e060      	b.n	80033aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d11c      	bne.n	8003328 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80032fe:	f000 fcc1 	bl	8003c84 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699a      	ldr	r2, [r3, #24]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003310:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6999      	ldr	r1, [r3, #24]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	021a      	lsls	r2, r3, #8
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	619a      	str	r2, [r3, #24]
 8003326:	e040      	b.n	80033aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b08      	cmp	r3, #8
 800332c:	d11b      	bne.n	8003366 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800333e:	f000 fd0c 	bl	8003d5a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 020c 	bic.w	r2, r2, #12
 8003350:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69d9      	ldr	r1, [r3, #28]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	61da      	str	r2, [r3, #28]
 8003364:	e021      	b.n	80033aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d11c      	bne.n	80033a6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800337c:	f000 fd28 	bl	8003dd0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800338e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69d9      	ldr	r1, [r3, #28]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	021a      	lsls	r2, r3, #8
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	61da      	str	r2, [r3, #28]
 80033a4:	e001      	b.n	80033aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e0ae      	b.n	8003538 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b0c      	cmp	r3, #12
 80033e6:	f200 809f 	bhi.w	8003528 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033ea:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f0:	08003425 	.word	0x08003425
 80033f4:	08003529 	.word	0x08003529
 80033f8:	08003529 	.word	0x08003529
 80033fc:	08003529 	.word	0x08003529
 8003400:	08003465 	.word	0x08003465
 8003404:	08003529 	.word	0x08003529
 8003408:	08003529 	.word	0x08003529
 800340c:	08003529 	.word	0x08003529
 8003410:	080034a7 	.word	0x080034a7
 8003414:	08003529 	.word	0x08003529
 8003418:	08003529 	.word	0x08003529
 800341c:	08003529 	.word	0x08003529
 8003420:	080034e7 	.word	0x080034e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fa1a 	bl	8003864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0208 	orr.w	r2, r2, #8
 800343e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0204 	bic.w	r2, r2, #4
 800344e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6999      	ldr	r1, [r3, #24]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	619a      	str	r2, [r3, #24]
      break;
 8003462:	e064      	b.n	800352e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fa60 	bl	8003930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800347e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6999      	ldr	r1, [r3, #24]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	021a      	lsls	r2, r3, #8
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	619a      	str	r2, [r3, #24]
      break;
 80034a4:	e043      	b.n	800352e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 faa9 	bl	8003a04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0208 	orr.w	r2, r2, #8
 80034c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69da      	ldr	r2, [r3, #28]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0204 	bic.w	r2, r2, #4
 80034d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69d9      	ldr	r1, [r3, #28]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	61da      	str	r2, [r3, #28]
      break;
 80034e4:	e023      	b.n	800352e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 faf3 	bl	8003ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69d9      	ldr	r1, [r3, #28]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	021a      	lsls	r2, r3, #8
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	61da      	str	r2, [r3, #28]
      break;
 8003526:	e002      	b.n	800352e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
      break;
 800352c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003536:	7dfb      	ldrb	r3, [r7, #23]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIM_ConfigClockSource+0x1c>
 8003558:	2302      	movs	r3, #2
 800355a:	e0b4      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x186>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800357a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003594:	d03e      	beq.n	8003614 <HAL_TIM_ConfigClockSource+0xd4>
 8003596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359a:	f200 8087 	bhi.w	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 800359e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a2:	f000 8086 	beq.w	80036b2 <HAL_TIM_ConfigClockSource+0x172>
 80035a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035aa:	d87f      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b70      	cmp	r3, #112	; 0x70
 80035ae:	d01a      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0xa6>
 80035b0:	2b70      	cmp	r3, #112	; 0x70
 80035b2:	d87b      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b60      	cmp	r3, #96	; 0x60
 80035b6:	d050      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x11a>
 80035b8:	2b60      	cmp	r3, #96	; 0x60
 80035ba:	d877      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035bc:	2b50      	cmp	r3, #80	; 0x50
 80035be:	d03c      	beq.n	800363a <HAL_TIM_ConfigClockSource+0xfa>
 80035c0:	2b50      	cmp	r3, #80	; 0x50
 80035c2:	d873      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d058      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x13a>
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d86f      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035cc:	2b30      	cmp	r3, #48	; 0x30
 80035ce:	d064      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x15a>
 80035d0:	2b30      	cmp	r3, #48	; 0x30
 80035d2:	d86b      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d060      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x15a>
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d867      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d05c      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x15a>
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d05a      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x15a>
 80035e4:	e062      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035f6:	f000 fc41 	bl	8003e7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	609a      	str	r2, [r3, #8]
      break;
 8003612:	e04f      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003624:	f000 fc2a 	bl	8003e7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003636:	609a      	str	r2, [r3, #8]
      break;
 8003638:	e03c      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003646:	461a      	mov	r2, r3
 8003648:	f000 faee 	bl	8003c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2150      	movs	r1, #80	; 0x50
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fbf8 	bl	8003e48 <TIM_ITRx_SetConfig>
      break;
 8003658:	e02c      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003666:	461a      	mov	r2, r3
 8003668:	f000 fb48 	bl	8003cfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2160      	movs	r1, #96	; 0x60
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fbe8 	bl	8003e48 <TIM_ITRx_SetConfig>
      break;
 8003678:	e01c      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003686:	461a      	mov	r2, r3
 8003688:	f000 face 	bl	8003c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2140      	movs	r1, #64	; 0x40
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fbd8 	bl	8003e48 <TIM_ITRx_SetConfig>
      break;
 8003698:	e00c      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4619      	mov	r1, r3
 80036a4:	4610      	mov	r0, r2
 80036a6:	f000 fbcf 	bl	8003e48 <TIM_ITRx_SetConfig>
      break;
 80036aa:	e003      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      break;
 80036b0:	e000      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b0c      	cmp	r3, #12
 80036e2:	d831      	bhi.n	8003748 <HAL_TIM_ReadCapturedValue+0x78>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	08003721 	.word	0x08003721
 80036f0:	08003749 	.word	0x08003749
 80036f4:	08003749 	.word	0x08003749
 80036f8:	08003749 	.word	0x08003749
 80036fc:	0800372b 	.word	0x0800372b
 8003700:	08003749 	.word	0x08003749
 8003704:	08003749 	.word	0x08003749
 8003708:	08003749 	.word	0x08003749
 800370c:	08003735 	.word	0x08003735
 8003710:	08003749 	.word	0x08003749
 8003714:	08003749 	.word	0x08003749
 8003718:	08003749 	.word	0x08003749
 800371c:	0800373f 	.word	0x0800373f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003726:	60fb      	str	r3, [r7, #12]

      break;
 8003728:	e00f      	b.n	800374a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	60fb      	str	r3, [r7, #12]

      break;
 8003732:	e00a      	b.n	800374a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373a:	60fb      	str	r3, [r7, #12]

      break;
 800373c:	e005      	b.n	800374a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	60fb      	str	r3, [r7, #12]

      break;
 8003746:	e000      	b.n	800374a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003748:	bf00      	nop
  }

  return tmpreg;
 800374a:	68fb      	ldr	r3, [r7, #12]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop

08003758 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a29      	ldr	r2, [pc, #164]	; (8003858 <TIM_Base_SetConfig+0xb8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00b      	beq.n	80037d0 <TIM_Base_SetConfig+0x30>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037be:	d007      	beq.n	80037d0 <TIM_Base_SetConfig+0x30>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a26      	ldr	r2, [pc, #152]	; (800385c <TIM_Base_SetConfig+0xbc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_Base_SetConfig+0x30>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a25      	ldr	r2, [pc, #148]	; (8003860 <TIM_Base_SetConfig+0xc0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d108      	bne.n	80037e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <TIM_Base_SetConfig+0xb8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00b      	beq.n	8003802 <TIM_Base_SetConfig+0x62>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f0:	d007      	beq.n	8003802 <TIM_Base_SetConfig+0x62>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a19      	ldr	r2, [pc, #100]	; (800385c <TIM_Base_SetConfig+0xbc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d003      	beq.n	8003802 <TIM_Base_SetConfig+0x62>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a18      	ldr	r2, [pc, #96]	; (8003860 <TIM_Base_SetConfig+0xc0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d108      	bne.n	8003814 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a07      	ldr	r2, [pc, #28]	; (8003858 <TIM_Base_SetConfig+0xb8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d103      	bne.n	8003848 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	615a      	str	r2, [r3, #20]
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800

08003864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f023 0201 	bic.w	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 0302 	bic.w	r3, r3, #2
 80038ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a1c      	ldr	r2, [pc, #112]	; (800392c <TIM_OC1_SetConfig+0xc8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d10c      	bne.n	80038da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f023 0308 	bic.w	r3, r3, #8
 80038c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f023 0304 	bic.w	r3, r3, #4
 80038d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a13      	ldr	r2, [pc, #76]	; (800392c <TIM_OC1_SetConfig+0xc8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d111      	bne.n	8003906 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	621a      	str	r2, [r3, #32]
}
 8003920:	bf00      	nop
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40012c00 	.word	0x40012c00

08003930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f023 0210 	bic.w	r2, r3, #16
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0320 	bic.w	r3, r3, #32
 800397a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <TIM_OC2_SetConfig+0xd0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d10d      	bne.n	80039ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <TIM_OC2_SetConfig+0xd0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d113      	bne.n	80039dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	40012c00 	.word	0x40012c00

08003a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0303 	bic.w	r3, r3, #3
 8003a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <TIM_OC3_SetConfig+0xd0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d10d      	bne.n	8003a7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <TIM_OC3_SetConfig+0xd0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d113      	bne.n	8003aae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	621a      	str	r2, [r3, #32]
}
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40012c00 	.word	0x40012c00

08003ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	031b      	lsls	r3, r3, #12
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a0f      	ldr	r2, [pc, #60]	; (8003b70 <TIM_OC4_SetConfig+0x98>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d109      	bne.n	8003b4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	019b      	lsls	r3, r3, #6
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	40012c00 	.word	0x40012c00

08003b74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f023 0201 	bic.w	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a1f      	ldr	r2, [pc, #124]	; (8003c1c <TIM_TI1_SetConfig+0xa8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00b      	beq.n	8003bba <TIM_TI1_SetConfig+0x46>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba8:	d007      	beq.n	8003bba <TIM_TI1_SetConfig+0x46>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <TIM_TI1_SetConfig+0xac>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d003      	beq.n	8003bba <TIM_TI1_SetConfig+0x46>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <TIM_TI1_SetConfig+0xb0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <TIM_TI1_SetConfig+0x4a>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <TIM_TI1_SetConfig+0x4c>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	e003      	b.n	8003bde <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003be4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f023 030a 	bic.w	r3, r3, #10
 8003bf8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f003 030a 	and.w	r3, r3, #10
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	621a      	str	r2, [r3, #32]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr
 8003c1c:	40012c00 	.word	0x40012c00
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800

08003c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f023 0201 	bic.w	r2, r3, #1
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f023 030a 	bic.w	r3, r3, #10
 8003c64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	621a      	str	r2, [r3, #32]
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f023 0210 	bic.w	r2, r3, #16
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	031b      	lsls	r3, r3, #12
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cd6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f023 0210 	bic.w	r2, r3, #16
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	031b      	lsls	r3, r3, #12
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b087      	sub	sp, #28
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d96:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003daa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	621a      	str	r2, [r3, #32]
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e0e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	031b      	lsls	r3, r3, #12
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e22:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	031b      	lsls	r3, r3, #12
 8003e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	621a      	str	r2, [r3, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f043 0307 	orr.w	r3, r3, #7
 8003e6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	609a      	str	r2, [r3, #8]
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	021a      	lsls	r2, r3, #8
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	609a      	str	r2, [r3, #8]
}
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr

08003eba <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b087      	sub	sp, #28
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	2201      	movs	r2, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1a      	ldr	r2, [r3, #32]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	401a      	ands	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a1a      	ldr	r2, [r3, #32]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	621a      	str	r2, [r3, #32]
}
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e046      	b.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a16      	ldr	r2, [pc, #88]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f68:	d009      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a12      	ldr	r2, [pc, #72]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a10      	ldr	r2, [pc, #64]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d10c      	bne.n	8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	40012c00 	.word	0x40012c00
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800

08003fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e042      	b.n	800407c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd fbc6 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fdf1 	bl	8004c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800403c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800404c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800405c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d16d      	bne.n	8004180 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_UART_Transmit+0x2c>
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e066      	b.n	8004182 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2221      	movs	r2, #33	; 0x21
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040c2:	f7fd fd69 	bl	8001b98 <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	88fa      	ldrh	r2, [r7, #6]
 80040d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	d108      	bne.n	80040f0 <HAL_UART_Transmit+0x6c>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d104      	bne.n	80040f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e003      	b.n	80040f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040f8:	e02a      	b.n	8004150 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	2180      	movs	r1, #128	; 0x80
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fb41 	bl	800478c <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e036      	b.n	8004182 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10b      	bne.n	8004132 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004128:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	3302      	adds	r3, #2
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	e007      	b.n	8004142 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	3301      	adds	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1cf      	bne.n	80040fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2200      	movs	r2, #0
 8004162:	2140      	movs	r1, #64	; 0x40
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 fb11 	bl	800478c <UART_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e006      	b.n	8004182 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	e000      	b.n	8004182 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
  }
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	4613      	mov	r3, r2
 8004196:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d121      	bne.n	80041e8 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_UART_Transmit_IT+0x26>
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e01a      	b.n	80041ea <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	88fa      	ldrh	r2, [r7, #6]
 80041c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2221      	movs	r2, #33	; 0x21
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041e2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e000      	b.n	80041ea <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80041e8:	2302      	movs	r3, #2
  }
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b20      	cmp	r3, #32
 800420c:	d112      	bne.n	8004234 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <HAL_UART_Receive_IT+0x26>
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e00b      	b.n	8004236 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004224:	88fb      	ldrh	r3, [r7, #6]
 8004226:	461a      	mov	r2, r3
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fb1c 	bl	8004868 <UART_Start_Receive_IT>
 8004230:	4603      	mov	r3, r0
 8004232:	e000      	b.n	8004236 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004234:	2302      	movs	r3, #2
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b0ba      	sub	sp, #232	; 0xe8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800427e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10f      	bne.n	80042a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_UART_IRQHandler+0x66>
 8004292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fbf8 	bl	8004a94 <UART_Receive_IT>
      return;
 80042a4:	e25b      	b.n	800475e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80de 	beq.w	800446c <HAL_UART_IRQHandler+0x22c>
 80042b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d106      	bne.n	80042ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80d1 	beq.w	800446c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <HAL_UART_IRQHandler+0xae>
 80042d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	f043 0201 	orr.w	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_UART_IRQHandler+0xd2>
 80042fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	f043 0202 	orr.w	r2, r3, #2
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_UART_IRQHandler+0xf6>
 800431e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	f043 0204 	orr.w	r2, r3, #4
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d011      	beq.n	8004366 <HAL_UART_IRQHandler+0x126>
 8004342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d105      	bne.n	800435a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800434e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f043 0208 	orr.w	r2, r3, #8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 81f2 	beq.w	8004754 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_UART_IRQHandler+0x14e>
 800437c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fb83 	bl	8004a94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	bf14      	ite	ne
 800439c:	2301      	movne	r3, #1
 800439e:	2300      	moveq	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <HAL_UART_IRQHandler+0x17a>
 80043b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d04f      	beq.n	800445a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa8d 	bl	80048da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d041      	beq.n	8004452 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3314      	adds	r3, #20
 80043f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1d9      	bne.n	80043ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d013      	beq.n	800444a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	4a7e      	ldr	r2, [pc, #504]	; (8004620 <HAL_UART_IRQHandler+0x3e0>)
 8004428:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	4618      	mov	r0, r3
 8004430:	f7fd fd36 	bl	8001ea0 <HAL_DMA_Abort_IT>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d016      	beq.n	8004468 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004444:	4610      	mov	r0, r2
 8004446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	e00e      	b.n	8004468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f98a 	bl	8004764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004450:	e00a      	b.n	8004468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f986 	bl	8004764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004458:	e006      	b.n	8004468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f982 	bl	8004764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004466:	e175      	b.n	8004754 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	bf00      	nop
    return;
 800446a:	e173      	b.n	8004754 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	2b01      	cmp	r3, #1
 8004472:	f040 814f 	bne.w	8004714 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8148 	beq.w	8004714 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8141 	beq.w	8004714 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80b6 	beq.w	8004624 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8145 	beq.w	8004758 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044d6:	429a      	cmp	r2, r3
 80044d8:	f080 813e 	bcs.w	8004758 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	f000 8088 	beq.w	8004600 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004506:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800450a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800450e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	330c      	adds	r3, #12
 8004518:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800451c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004520:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004528:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004534:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1d9      	bne.n	80044f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3314      	adds	r3, #20
 8004542:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800454c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3314      	adds	r3, #20
 800455c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004560:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004564:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004568:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e1      	bne.n	800453c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3314      	adds	r3, #20
 800457e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800458a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3314      	adds	r3, #20
 8004598:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800459c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800459e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e3      	bne.n	8004578 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d0:	f023 0310 	bic.w	r3, r3, #16
 80045d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80045e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e3      	bne.n	80045be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fd fc15 	bl	8001e2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800460e:	b29b      	uxth	r3, r3
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	b29b      	uxth	r3, r3
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f8ad 	bl	8004776 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800461c:	e09c      	b.n	8004758 <HAL_UART_IRQHandler+0x518>
 800461e:	bf00      	nop
 8004620:	0800499f 	.word	0x0800499f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800462c:	b29b      	uxth	r3, r3
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 808e 	beq.w	800475c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8089 	beq.w	800475c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800466e:	647a      	str	r2, [r7, #68]	; 0x44
 8004670:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004674:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800467c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e3      	bne.n	800464a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3314      	adds	r3, #20
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	623b      	str	r3, [r7, #32]
   return(result);
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3314      	adds	r3, #20
 80046a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046a6:	633a      	str	r2, [r7, #48]	; 0x30
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1e3      	bne.n	8004682 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	330c      	adds	r3, #12
 80046ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0310 	bic.w	r3, r3, #16
 80046de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046ec:	61fa      	str	r2, [r7, #28]
 80046ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	69b9      	ldr	r1, [r7, #24]
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	617b      	str	r3, [r7, #20]
   return(result);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e3      	bne.n	80046c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004706:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f832 	bl	8004776 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004712:	e023      	b.n	800475c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	2b00      	cmp	r3, #0
 800471e:	d009      	beq.n	8004734 <HAL_UART_IRQHandler+0x4f4>
 8004720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f94a 	bl	80049c6 <UART_Transmit_IT>
    return;
 8004732:	e014      	b.n	800475e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00e      	beq.n	800475e <HAL_UART_IRQHandler+0x51e>
 8004740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f989 	bl	8004a64 <UART_EndTransmit_IT>
    return;
 8004752:	e004      	b.n	800475e <HAL_UART_IRQHandler+0x51e>
    return;
 8004754:	bf00      	nop
 8004756:	e002      	b.n	800475e <HAL_UART_IRQHandler+0x51e>
      return;
 8004758:	bf00      	nop
 800475a:	e000      	b.n	800475e <HAL_UART_IRQHandler+0x51e>
      return;
 800475c:	bf00      	nop
  }
}
 800475e:	37e8      	adds	r7, #232	; 0xe8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b090      	sub	sp, #64	; 0x40
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479c:	e050      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d04c      	beq.n	8004840 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <UART_WaitOnFlagUntilTimeout+0x30>
 80047ac:	f7fd f9f4 	bl	8001b98 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d241      	bcs.n	8004840 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	330c      	adds	r3, #12
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047dc:	637a      	str	r2, [r7, #52]	; 0x34
 80047de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047e4:	e841 2300 	strex	r3, r2, [r1]
 80047e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e5      	bne.n	80047bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3314      	adds	r3, #20
 80047f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f023 0301 	bic.w	r3, r3, #1
 8004806:	63bb      	str	r3, [r7, #56]	; 0x38
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3314      	adds	r3, #20
 800480e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004810:	623a      	str	r2, [r7, #32]
 8004812:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	69f9      	ldr	r1, [r7, #28]
 8004816:	6a3a      	ldr	r2, [r7, #32]
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	61bb      	str	r3, [r7, #24]
   return(result);
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e5      	bne.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e00f      	b.n	8004860 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4013      	ands	r3, r2
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	429a      	cmp	r2, r3
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	429a      	cmp	r2, r3
 800485c:	d09f      	beq.n	800479e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3740      	adds	r7, #64	; 0x40
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	4613      	mov	r3, r2
 8004874:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	88fa      	ldrh	r2, [r7, #6]
 8004880:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2222      	movs	r2, #34	; 0x22
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695a      	ldr	r2, [r3, #20]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0201 	orr.w	r2, r2, #1
 80048bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0220 	orr.w	r2, r2, #32
 80048cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048da:	b480      	push	{r7}
 80048dc:	b095      	sub	sp, #84	; 0x54
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	330c      	adds	r3, #12
 8004900:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004902:	643a      	str	r2, [r7, #64]	; 0x40
 8004904:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004908:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e5      	bne.n	80048e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3314      	adds	r3, #20
 800491c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	61fb      	str	r3, [r7, #28]
   return(result);
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	64bb      	str	r3, [r7, #72]	; 0x48
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3314      	adds	r3, #20
 8004934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004936:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004938:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800493c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e5      	bne.n	8004916 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	2b01      	cmp	r3, #1
 8004950:	d119      	bne.n	8004986 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	60bb      	str	r3, [r7, #8]
   return(result);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f023 0310 	bic.w	r3, r3, #16
 8004968:	647b      	str	r3, [r7, #68]	; 0x44
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	330c      	adds	r3, #12
 8004970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004972:	61ba      	str	r2, [r7, #24]
 8004974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6979      	ldr	r1, [r7, #20]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	613b      	str	r3, [r7, #16]
   return(result);
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e5      	bne.n	8004952 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004994:	bf00      	nop
 8004996:	3754      	adds	r7, #84	; 0x54
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr

0800499e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff fed3 	bl	8004764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b21      	cmp	r3, #33	; 0x21
 80049d8:	d13e      	bne.n	8004a58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	d114      	bne.n	8004a0e <UART_Transmit_IT+0x48>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d110      	bne.n	8004a0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	1c9a      	adds	r2, r3, #2
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	621a      	str	r2, [r3, #32]
 8004a0c:	e008      	b.n	8004a20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6211      	str	r1, [r2, #32]
 8004a18:	781a      	ldrb	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10f      	bne.n	8004a54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e000      	b.n	8004a5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a58:	2302      	movs	r3, #2
  }
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7fc fb49 	bl	800111c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08c      	sub	sp, #48	; 0x30
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b22      	cmp	r3, #34	; 0x22
 8004aa6:	f040 80ae 	bne.w	8004c06 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab2:	d117      	bne.n	8004ae4 <UART_Receive_IT+0x50>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d113      	bne.n	8004ae4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	1c9a      	adds	r2, r3, #2
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	629a      	str	r2, [r3, #40]	; 0x28
 8004ae2:	e026      	b.n	8004b32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af6:	d007      	beq.n	8004b08 <UART_Receive_IT+0x74>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <UART_Receive_IT+0x82>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d106      	bne.n	8004b16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	e008      	b.n	8004b28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d15d      	bne.n	8004c02 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0220 	bic.w	r2, r2, #32
 8004b54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695a      	ldr	r2, [r3, #20]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d135      	bne.n	8004bf8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f023 0310 	bic.w	r3, r3, #16
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	623a      	str	r2, [r7, #32]
 8004bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	69f9      	ldr	r1, [r7, #28]
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e5      	bne.n	8004b92 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b10      	cmp	r3, #16
 8004bd2:	d10a      	bne.n	8004bea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fdc0 	bl	8004776 <HAL_UARTEx_RxEventCallback>
 8004bf6:	e002      	b.n	8004bfe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7fc fa63 	bl	80010c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e002      	b.n	8004c08 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e000      	b.n	8004c08 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c06:	2302      	movs	r3, #2
  }
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3730      	adds	r7, #48	; 0x30
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c4a:	f023 030c 	bic.w	r3, r3, #12
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	430b      	orrs	r3, r1
 8004c56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2c      	ldr	r2, [pc, #176]	; (8004d24 <UART_SetConfig+0x114>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d103      	bne.n	8004c80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c78:	f7fd ff1c 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	e002      	b.n	8004c86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c80:	f7fd ff04 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8004c84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009a      	lsls	r2, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <UART_SetConfig+0x118>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	0119      	lsls	r1, r3, #4
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	009a      	lsls	r2, r3, #2
 8004cb0:	441a      	add	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cbc:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <UART_SetConfig+0x118>)
 8004cbe:	fba3 0302 	umull	r0, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2064      	movs	r0, #100	; 0x64
 8004cc6:	fb00 f303 	mul.w	r3, r0, r3
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	3332      	adds	r3, #50	; 0x32
 8004cd0:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <UART_SetConfig+0x118>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cdc:	4419      	add	r1, r3
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009a      	lsls	r2, r3, #2
 8004ce8:	441a      	add	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <UART_SetConfig+0x118>)
 8004cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	2064      	movs	r0, #100	; 0x64
 8004cfe:	fb00 f303 	mul.w	r3, r0, r3
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	3332      	adds	r3, #50	; 0x32
 8004d08:	4a07      	ldr	r2, [pc, #28]	; (8004d28 <UART_SetConfig+0x118>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	f003 020f 	and.w	r2, r3, #15
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	440a      	add	r2, r1
 8004d1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d1c:	bf00      	nop
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40013800 	.word	0x40013800
 8004d28:	51eb851f 	.word	0x51eb851f

08004d2c <__cvt>:
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d32:	461f      	mov	r7, r3
 8004d34:	bfbb      	ittet	lt
 8004d36:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d3a:	461f      	movlt	r7, r3
 8004d3c:	2300      	movge	r3, #0
 8004d3e:	232d      	movlt	r3, #45	; 0x2d
 8004d40:	b088      	sub	sp, #32
 8004d42:	4614      	mov	r4, r2
 8004d44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d46:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d48:	7013      	strb	r3, [r2, #0]
 8004d4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d4c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d50:	f023 0820 	bic.w	r8, r3, #32
 8004d54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d58:	d005      	beq.n	8004d66 <__cvt+0x3a>
 8004d5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d5e:	d100      	bne.n	8004d62 <__cvt+0x36>
 8004d60:	3501      	adds	r5, #1
 8004d62:	2302      	movs	r3, #2
 8004d64:	e000      	b.n	8004d68 <__cvt+0x3c>
 8004d66:	2303      	movs	r3, #3
 8004d68:	aa07      	add	r2, sp, #28
 8004d6a:	9204      	str	r2, [sp, #16]
 8004d6c:	aa06      	add	r2, sp, #24
 8004d6e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d72:	e9cd 3500 	strd	r3, r5, [sp]
 8004d76:	4622      	mov	r2, r4
 8004d78:	463b      	mov	r3, r7
 8004d7a:	f000 fe85 	bl	8005a88 <_dtoa_r>
 8004d7e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d82:	4606      	mov	r6, r0
 8004d84:	d102      	bne.n	8004d8c <__cvt+0x60>
 8004d86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d88:	07db      	lsls	r3, r3, #31
 8004d8a:	d522      	bpl.n	8004dd2 <__cvt+0xa6>
 8004d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d90:	eb06 0905 	add.w	r9, r6, r5
 8004d94:	d110      	bne.n	8004db8 <__cvt+0x8c>
 8004d96:	7833      	ldrb	r3, [r6, #0]
 8004d98:	2b30      	cmp	r3, #48	; 0x30
 8004d9a:	d10a      	bne.n	8004db2 <__cvt+0x86>
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2300      	movs	r3, #0
 8004da0:	4620      	mov	r0, r4
 8004da2:	4639      	mov	r1, r7
 8004da4:	f7fb fe00 	bl	80009a8 <__aeabi_dcmpeq>
 8004da8:	b918      	cbnz	r0, 8004db2 <__cvt+0x86>
 8004daa:	f1c5 0501 	rsb	r5, r5, #1
 8004dae:	f8ca 5000 	str.w	r5, [sl]
 8004db2:	f8da 3000 	ldr.w	r3, [sl]
 8004db6:	4499      	add	r9, r3
 8004db8:	2200      	movs	r2, #0
 8004dba:	2300      	movs	r3, #0
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	4639      	mov	r1, r7
 8004dc0:	f7fb fdf2 	bl	80009a8 <__aeabi_dcmpeq>
 8004dc4:	b108      	cbz	r0, 8004dca <__cvt+0x9e>
 8004dc6:	f8cd 901c 	str.w	r9, [sp, #28]
 8004dca:	2230      	movs	r2, #48	; 0x30
 8004dcc:	9b07      	ldr	r3, [sp, #28]
 8004dce:	454b      	cmp	r3, r9
 8004dd0:	d307      	bcc.n	8004de2 <__cvt+0xb6>
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	9b07      	ldr	r3, [sp, #28]
 8004dd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004dd8:	1b9b      	subs	r3, r3, r6
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	b008      	add	sp, #32
 8004dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de2:	1c59      	adds	r1, r3, #1
 8004de4:	9107      	str	r1, [sp, #28]
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	e7f0      	b.n	8004dcc <__cvt+0xa0>

08004dea <__exponent>:
 8004dea:	4603      	mov	r3, r0
 8004dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dee:	2900      	cmp	r1, #0
 8004df0:	f803 2b02 	strb.w	r2, [r3], #2
 8004df4:	bfb6      	itet	lt
 8004df6:	222d      	movlt	r2, #45	; 0x2d
 8004df8:	222b      	movge	r2, #43	; 0x2b
 8004dfa:	4249      	neglt	r1, r1
 8004dfc:	2909      	cmp	r1, #9
 8004dfe:	7042      	strb	r2, [r0, #1]
 8004e00:	dd2a      	ble.n	8004e58 <__exponent+0x6e>
 8004e02:	f10d 0207 	add.w	r2, sp, #7
 8004e06:	4617      	mov	r7, r2
 8004e08:	260a      	movs	r6, #10
 8004e0a:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e0e:	4694      	mov	ip, r2
 8004e10:	fb06 1415 	mls	r4, r6, r5, r1
 8004e14:	3430      	adds	r4, #48	; 0x30
 8004e16:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	2c63      	cmp	r4, #99	; 0x63
 8004e1e:	4629      	mov	r1, r5
 8004e20:	f102 32ff 	add.w	r2, r2, #4294967295
 8004e24:	dcf1      	bgt.n	8004e0a <__exponent+0x20>
 8004e26:	3130      	adds	r1, #48	; 0x30
 8004e28:	f1ac 0402 	sub.w	r4, ip, #2
 8004e2c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e30:	4622      	mov	r2, r4
 8004e32:	1c41      	adds	r1, r0, #1
 8004e34:	42ba      	cmp	r2, r7
 8004e36:	d30a      	bcc.n	8004e4e <__exponent+0x64>
 8004e38:	f10d 0209 	add.w	r2, sp, #9
 8004e3c:	eba2 020c 	sub.w	r2, r2, ip
 8004e40:	42bc      	cmp	r4, r7
 8004e42:	bf88      	it	hi
 8004e44:	2200      	movhi	r2, #0
 8004e46:	4413      	add	r3, r2
 8004e48:	1a18      	subs	r0, r3, r0
 8004e4a:	b003      	add	sp, #12
 8004e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e4e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004e52:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004e56:	e7ed      	b.n	8004e34 <__exponent+0x4a>
 8004e58:	2330      	movs	r3, #48	; 0x30
 8004e5a:	3130      	adds	r1, #48	; 0x30
 8004e5c:	7083      	strb	r3, [r0, #2]
 8004e5e:	70c1      	strb	r1, [r0, #3]
 8004e60:	1d03      	adds	r3, r0, #4
 8004e62:	e7f1      	b.n	8004e48 <__exponent+0x5e>

08004e64 <_printf_float>:
 8004e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	b091      	sub	sp, #68	; 0x44
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004e70:	4616      	mov	r6, r2
 8004e72:	461f      	mov	r7, r3
 8004e74:	4605      	mov	r5, r0
 8004e76:	f000 fcf9 	bl	800586c <_localeconv_r>
 8004e7a:	6803      	ldr	r3, [r0, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e80:	f7fb f966 	bl	8000150 <strlen>
 8004e84:	2300      	movs	r3, #0
 8004e86:	930e      	str	r3, [sp, #56]	; 0x38
 8004e88:	f8d8 3000 	ldr.w	r3, [r8]
 8004e8c:	900a      	str	r0, [sp, #40]	; 0x28
 8004e8e:	3307      	adds	r3, #7
 8004e90:	f023 0307 	bic.w	r3, r3, #7
 8004e94:	f103 0208 	add.w	r2, r3, #8
 8004e98:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e9c:	f8d4 b000 	ldr.w	fp, [r4]
 8004ea0:	f8c8 2000 	str.w	r2, [r8]
 8004ea4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004ea8:	4652      	mov	r2, sl
 8004eaa:	4643      	mov	r3, r8
 8004eac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004eb0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004eb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eba:	4650      	mov	r0, sl
 8004ebc:	4b9c      	ldr	r3, [pc, #624]	; (8005130 <_printf_float+0x2cc>)
 8004ebe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ec0:	f7fb fda4 	bl	8000a0c <__aeabi_dcmpun>
 8004ec4:	bb70      	cbnz	r0, 8004f24 <_printf_float+0xc0>
 8004ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eca:	4650      	mov	r0, sl
 8004ecc:	4b98      	ldr	r3, [pc, #608]	; (8005130 <_printf_float+0x2cc>)
 8004ece:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ed0:	f7fb fd7e 	bl	80009d0 <__aeabi_dcmple>
 8004ed4:	bb30      	cbnz	r0, 8004f24 <_printf_float+0xc0>
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2300      	movs	r3, #0
 8004eda:	4650      	mov	r0, sl
 8004edc:	4641      	mov	r1, r8
 8004ede:	f7fb fd6d 	bl	80009bc <__aeabi_dcmplt>
 8004ee2:	b110      	cbz	r0, 8004eea <_printf_float+0x86>
 8004ee4:	232d      	movs	r3, #45	; 0x2d
 8004ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eea:	4a92      	ldr	r2, [pc, #584]	; (8005134 <_printf_float+0x2d0>)
 8004eec:	4b92      	ldr	r3, [pc, #584]	; (8005138 <_printf_float+0x2d4>)
 8004eee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004ef2:	bf94      	ite	ls
 8004ef4:	4690      	movls	r8, r2
 8004ef6:	4698      	movhi	r8, r3
 8004ef8:	2303      	movs	r3, #3
 8004efa:	f04f 0a00 	mov.w	sl, #0
 8004efe:	6123      	str	r3, [r4, #16]
 8004f00:	f02b 0304 	bic.w	r3, fp, #4
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	4633      	mov	r3, r6
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	9700      	str	r7, [sp, #0]
 8004f0e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004f10:	f000 f9d6 	bl	80052c0 <_printf_common>
 8004f14:	3001      	adds	r0, #1
 8004f16:	f040 8090 	bne.w	800503a <_printf_float+0x1d6>
 8004f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1e:	b011      	add	sp, #68	; 0x44
 8004f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f24:	4652      	mov	r2, sl
 8004f26:	4643      	mov	r3, r8
 8004f28:	4650      	mov	r0, sl
 8004f2a:	4641      	mov	r1, r8
 8004f2c:	f7fb fd6e 	bl	8000a0c <__aeabi_dcmpun>
 8004f30:	b148      	cbz	r0, 8004f46 <_printf_float+0xe2>
 8004f32:	f1b8 0f00 	cmp.w	r8, #0
 8004f36:	bfb8      	it	lt
 8004f38:	232d      	movlt	r3, #45	; 0x2d
 8004f3a:	4a80      	ldr	r2, [pc, #512]	; (800513c <_printf_float+0x2d8>)
 8004f3c:	bfb8      	it	lt
 8004f3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f42:	4b7f      	ldr	r3, [pc, #508]	; (8005140 <_printf_float+0x2dc>)
 8004f44:	e7d3      	b.n	8004eee <_printf_float+0x8a>
 8004f46:	6863      	ldr	r3, [r4, #4]
 8004f48:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	d142      	bne.n	8004fd6 <_printf_float+0x172>
 8004f50:	2306      	movs	r3, #6
 8004f52:	6063      	str	r3, [r4, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	9206      	str	r2, [sp, #24]
 8004f58:	aa0e      	add	r2, sp, #56	; 0x38
 8004f5a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f5e:	aa0d      	add	r2, sp, #52	; 0x34
 8004f60:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f64:	9203      	str	r2, [sp, #12]
 8004f66:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f6a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	6863      	ldr	r3, [r4, #4]
 8004f72:	4652      	mov	r2, sl
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	4628      	mov	r0, r5
 8004f78:	4643      	mov	r3, r8
 8004f7a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f7c:	f7ff fed6 	bl	8004d2c <__cvt>
 8004f80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f82:	4680      	mov	r8, r0
 8004f84:	2947      	cmp	r1, #71	; 0x47
 8004f86:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f88:	d108      	bne.n	8004f9c <_printf_float+0x138>
 8004f8a:	1cc8      	adds	r0, r1, #3
 8004f8c:	db02      	blt.n	8004f94 <_printf_float+0x130>
 8004f8e:	6863      	ldr	r3, [r4, #4]
 8004f90:	4299      	cmp	r1, r3
 8004f92:	dd40      	ble.n	8005016 <_printf_float+0x1b2>
 8004f94:	f1a9 0902 	sub.w	r9, r9, #2
 8004f98:	fa5f f989 	uxtb.w	r9, r9
 8004f9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004fa0:	d81f      	bhi.n	8004fe2 <_printf_float+0x17e>
 8004fa2:	464a      	mov	r2, r9
 8004fa4:	3901      	subs	r1, #1
 8004fa6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004faa:	910d      	str	r1, [sp, #52]	; 0x34
 8004fac:	f7ff ff1d 	bl	8004dea <__exponent>
 8004fb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fb2:	4682      	mov	sl, r0
 8004fb4:	1813      	adds	r3, r2, r0
 8004fb6:	2a01      	cmp	r2, #1
 8004fb8:	6123      	str	r3, [r4, #16]
 8004fba:	dc02      	bgt.n	8004fc2 <_printf_float+0x15e>
 8004fbc:	6822      	ldr	r2, [r4, #0]
 8004fbe:	07d2      	lsls	r2, r2, #31
 8004fc0:	d501      	bpl.n	8004fc6 <_printf_float+0x162>
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	6123      	str	r3, [r4, #16]
 8004fc6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d09b      	beq.n	8004f06 <_printf_float+0xa2>
 8004fce:	232d      	movs	r3, #45	; 0x2d
 8004fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fd4:	e797      	b.n	8004f06 <_printf_float+0xa2>
 8004fd6:	2947      	cmp	r1, #71	; 0x47
 8004fd8:	d1bc      	bne.n	8004f54 <_printf_float+0xf0>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ba      	bne.n	8004f54 <_printf_float+0xf0>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e7b7      	b.n	8004f52 <_printf_float+0xee>
 8004fe2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004fe6:	d118      	bne.n	800501a <_printf_float+0x1b6>
 8004fe8:	2900      	cmp	r1, #0
 8004fea:	6863      	ldr	r3, [r4, #4]
 8004fec:	dd0b      	ble.n	8005006 <_printf_float+0x1a2>
 8004fee:	6121      	str	r1, [r4, #16]
 8004ff0:	b913      	cbnz	r3, 8004ff8 <_printf_float+0x194>
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	07d0      	lsls	r0, r2, #31
 8004ff6:	d502      	bpl.n	8004ffe <_printf_float+0x19a>
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	440b      	add	r3, r1
 8004ffc:	6123      	str	r3, [r4, #16]
 8004ffe:	f04f 0a00 	mov.w	sl, #0
 8005002:	65a1      	str	r1, [r4, #88]	; 0x58
 8005004:	e7df      	b.n	8004fc6 <_printf_float+0x162>
 8005006:	b913      	cbnz	r3, 800500e <_printf_float+0x1aa>
 8005008:	6822      	ldr	r2, [r4, #0]
 800500a:	07d2      	lsls	r2, r2, #31
 800500c:	d501      	bpl.n	8005012 <_printf_float+0x1ae>
 800500e:	3302      	adds	r3, #2
 8005010:	e7f4      	b.n	8004ffc <_printf_float+0x198>
 8005012:	2301      	movs	r3, #1
 8005014:	e7f2      	b.n	8004ffc <_printf_float+0x198>
 8005016:	f04f 0967 	mov.w	r9, #103	; 0x67
 800501a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800501c:	4299      	cmp	r1, r3
 800501e:	db05      	blt.n	800502c <_printf_float+0x1c8>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	6121      	str	r1, [r4, #16]
 8005024:	07d8      	lsls	r0, r3, #31
 8005026:	d5ea      	bpl.n	8004ffe <_printf_float+0x19a>
 8005028:	1c4b      	adds	r3, r1, #1
 800502a:	e7e7      	b.n	8004ffc <_printf_float+0x198>
 800502c:	2900      	cmp	r1, #0
 800502e:	bfcc      	ite	gt
 8005030:	2201      	movgt	r2, #1
 8005032:	f1c1 0202 	rsble	r2, r1, #2
 8005036:	4413      	add	r3, r2
 8005038:	e7e0      	b.n	8004ffc <_printf_float+0x198>
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	055a      	lsls	r2, r3, #21
 800503e:	d407      	bmi.n	8005050 <_printf_float+0x1ec>
 8005040:	6923      	ldr	r3, [r4, #16]
 8005042:	4642      	mov	r2, r8
 8005044:	4631      	mov	r1, r6
 8005046:	4628      	mov	r0, r5
 8005048:	47b8      	blx	r7
 800504a:	3001      	adds	r0, #1
 800504c:	d12b      	bne.n	80050a6 <_printf_float+0x242>
 800504e:	e764      	b.n	8004f1a <_printf_float+0xb6>
 8005050:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005054:	f240 80dd 	bls.w	8005212 <_printf_float+0x3ae>
 8005058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800505c:	2200      	movs	r2, #0
 800505e:	2300      	movs	r3, #0
 8005060:	f7fb fca2 	bl	80009a8 <__aeabi_dcmpeq>
 8005064:	2800      	cmp	r0, #0
 8005066:	d033      	beq.n	80050d0 <_printf_float+0x26c>
 8005068:	2301      	movs	r3, #1
 800506a:	4631      	mov	r1, r6
 800506c:	4628      	mov	r0, r5
 800506e:	4a35      	ldr	r2, [pc, #212]	; (8005144 <_printf_float+0x2e0>)
 8005070:	47b8      	blx	r7
 8005072:	3001      	adds	r0, #1
 8005074:	f43f af51 	beq.w	8004f1a <_printf_float+0xb6>
 8005078:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800507c:	429a      	cmp	r2, r3
 800507e:	db02      	blt.n	8005086 <_printf_float+0x222>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	07d8      	lsls	r0, r3, #31
 8005084:	d50f      	bpl.n	80050a6 <_printf_float+0x242>
 8005086:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	f43f af42 	beq.w	8004f1a <_printf_float+0xb6>
 8005096:	f04f 0800 	mov.w	r8, #0
 800509a:	f104 091a 	add.w	r9, r4, #26
 800509e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050a0:	3b01      	subs	r3, #1
 80050a2:	4543      	cmp	r3, r8
 80050a4:	dc09      	bgt.n	80050ba <_printf_float+0x256>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	079b      	lsls	r3, r3, #30
 80050aa:	f100 8104 	bmi.w	80052b6 <_printf_float+0x452>
 80050ae:	68e0      	ldr	r0, [r4, #12]
 80050b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050b2:	4298      	cmp	r0, r3
 80050b4:	bfb8      	it	lt
 80050b6:	4618      	movlt	r0, r3
 80050b8:	e731      	b.n	8004f1e <_printf_float+0xba>
 80050ba:	2301      	movs	r3, #1
 80050bc:	464a      	mov	r2, r9
 80050be:	4631      	mov	r1, r6
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b8      	blx	r7
 80050c4:	3001      	adds	r0, #1
 80050c6:	f43f af28 	beq.w	8004f1a <_printf_float+0xb6>
 80050ca:	f108 0801 	add.w	r8, r8, #1
 80050ce:	e7e6      	b.n	800509e <_printf_float+0x23a>
 80050d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	dc38      	bgt.n	8005148 <_printf_float+0x2e4>
 80050d6:	2301      	movs	r3, #1
 80050d8:	4631      	mov	r1, r6
 80050da:	4628      	mov	r0, r5
 80050dc:	4a19      	ldr	r2, [pc, #100]	; (8005144 <_printf_float+0x2e0>)
 80050de:	47b8      	blx	r7
 80050e0:	3001      	adds	r0, #1
 80050e2:	f43f af1a 	beq.w	8004f1a <_printf_float+0xb6>
 80050e6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80050ea:	4313      	orrs	r3, r2
 80050ec:	d102      	bne.n	80050f4 <_printf_float+0x290>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	07d9      	lsls	r1, r3, #31
 80050f2:	d5d8      	bpl.n	80050a6 <_printf_float+0x242>
 80050f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050f8:	4631      	mov	r1, r6
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b8      	blx	r7
 80050fe:	3001      	adds	r0, #1
 8005100:	f43f af0b 	beq.w	8004f1a <_printf_float+0xb6>
 8005104:	f04f 0900 	mov.w	r9, #0
 8005108:	f104 0a1a 	add.w	sl, r4, #26
 800510c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800510e:	425b      	negs	r3, r3
 8005110:	454b      	cmp	r3, r9
 8005112:	dc01      	bgt.n	8005118 <_printf_float+0x2b4>
 8005114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005116:	e794      	b.n	8005042 <_printf_float+0x1de>
 8005118:	2301      	movs	r3, #1
 800511a:	4652      	mov	r2, sl
 800511c:	4631      	mov	r1, r6
 800511e:	4628      	mov	r0, r5
 8005120:	47b8      	blx	r7
 8005122:	3001      	adds	r0, #1
 8005124:	f43f aef9 	beq.w	8004f1a <_printf_float+0xb6>
 8005128:	f109 0901 	add.w	r9, r9, #1
 800512c:	e7ee      	b.n	800510c <_printf_float+0x2a8>
 800512e:	bf00      	nop
 8005130:	7fefffff 	.word	0x7fefffff
 8005134:	08007aa2 	.word	0x08007aa2
 8005138:	08007aa6 	.word	0x08007aa6
 800513c:	08007aaa 	.word	0x08007aaa
 8005140:	08007aae 	.word	0x08007aae
 8005144:	08007ab2 	.word	0x08007ab2
 8005148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800514a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800514c:	429a      	cmp	r2, r3
 800514e:	bfa8      	it	ge
 8005150:	461a      	movge	r2, r3
 8005152:	2a00      	cmp	r2, #0
 8005154:	4691      	mov	r9, r2
 8005156:	dc37      	bgt.n	80051c8 <_printf_float+0x364>
 8005158:	f04f 0b00 	mov.w	fp, #0
 800515c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005160:	f104 021a 	add.w	r2, r4, #26
 8005164:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005168:	ebaa 0309 	sub.w	r3, sl, r9
 800516c:	455b      	cmp	r3, fp
 800516e:	dc33      	bgt.n	80051d8 <_printf_float+0x374>
 8005170:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005174:	429a      	cmp	r2, r3
 8005176:	db3b      	blt.n	80051f0 <_printf_float+0x38c>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	07da      	lsls	r2, r3, #31
 800517c:	d438      	bmi.n	80051f0 <_printf_float+0x38c>
 800517e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005182:	eba2 0903 	sub.w	r9, r2, r3
 8005186:	eba2 020a 	sub.w	r2, r2, sl
 800518a:	4591      	cmp	r9, r2
 800518c:	bfa8      	it	ge
 800518e:	4691      	movge	r9, r2
 8005190:	f1b9 0f00 	cmp.w	r9, #0
 8005194:	dc34      	bgt.n	8005200 <_printf_float+0x39c>
 8005196:	f04f 0800 	mov.w	r8, #0
 800519a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800519e:	f104 0a1a 	add.w	sl, r4, #26
 80051a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	eba3 0309 	sub.w	r3, r3, r9
 80051ac:	4543      	cmp	r3, r8
 80051ae:	f77f af7a 	ble.w	80050a6 <_printf_float+0x242>
 80051b2:	2301      	movs	r3, #1
 80051b4:	4652      	mov	r2, sl
 80051b6:	4631      	mov	r1, r6
 80051b8:	4628      	mov	r0, r5
 80051ba:	47b8      	blx	r7
 80051bc:	3001      	adds	r0, #1
 80051be:	f43f aeac 	beq.w	8004f1a <_printf_float+0xb6>
 80051c2:	f108 0801 	add.w	r8, r8, #1
 80051c6:	e7ec      	b.n	80051a2 <_printf_float+0x33e>
 80051c8:	4613      	mov	r3, r2
 80051ca:	4631      	mov	r1, r6
 80051cc:	4642      	mov	r2, r8
 80051ce:	4628      	mov	r0, r5
 80051d0:	47b8      	blx	r7
 80051d2:	3001      	adds	r0, #1
 80051d4:	d1c0      	bne.n	8005158 <_printf_float+0x2f4>
 80051d6:	e6a0      	b.n	8004f1a <_printf_float+0xb6>
 80051d8:	2301      	movs	r3, #1
 80051da:	4631      	mov	r1, r6
 80051dc:	4628      	mov	r0, r5
 80051de:	920b      	str	r2, [sp, #44]	; 0x2c
 80051e0:	47b8      	blx	r7
 80051e2:	3001      	adds	r0, #1
 80051e4:	f43f ae99 	beq.w	8004f1a <_printf_float+0xb6>
 80051e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051ea:	f10b 0b01 	add.w	fp, fp, #1
 80051ee:	e7b9      	b.n	8005164 <_printf_float+0x300>
 80051f0:	4631      	mov	r1, r6
 80051f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051f6:	4628      	mov	r0, r5
 80051f8:	47b8      	blx	r7
 80051fa:	3001      	adds	r0, #1
 80051fc:	d1bf      	bne.n	800517e <_printf_float+0x31a>
 80051fe:	e68c      	b.n	8004f1a <_printf_float+0xb6>
 8005200:	464b      	mov	r3, r9
 8005202:	4631      	mov	r1, r6
 8005204:	4628      	mov	r0, r5
 8005206:	eb08 020a 	add.w	r2, r8, sl
 800520a:	47b8      	blx	r7
 800520c:	3001      	adds	r0, #1
 800520e:	d1c2      	bne.n	8005196 <_printf_float+0x332>
 8005210:	e683      	b.n	8004f1a <_printf_float+0xb6>
 8005212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005214:	2a01      	cmp	r2, #1
 8005216:	dc01      	bgt.n	800521c <_printf_float+0x3b8>
 8005218:	07db      	lsls	r3, r3, #31
 800521a:	d539      	bpl.n	8005290 <_printf_float+0x42c>
 800521c:	2301      	movs	r3, #1
 800521e:	4642      	mov	r2, r8
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	f43f ae77 	beq.w	8004f1a <_printf_float+0xb6>
 800522c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005230:	4631      	mov	r1, r6
 8005232:	4628      	mov	r0, r5
 8005234:	47b8      	blx	r7
 8005236:	3001      	adds	r0, #1
 8005238:	f43f ae6f 	beq.w	8004f1a <_printf_float+0xb6>
 800523c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005240:	2200      	movs	r2, #0
 8005242:	2300      	movs	r3, #0
 8005244:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005248:	f7fb fbae 	bl	80009a8 <__aeabi_dcmpeq>
 800524c:	b9d8      	cbnz	r0, 8005286 <_printf_float+0x422>
 800524e:	f109 33ff 	add.w	r3, r9, #4294967295
 8005252:	f108 0201 	add.w	r2, r8, #1
 8005256:	4631      	mov	r1, r6
 8005258:	4628      	mov	r0, r5
 800525a:	47b8      	blx	r7
 800525c:	3001      	adds	r0, #1
 800525e:	d10e      	bne.n	800527e <_printf_float+0x41a>
 8005260:	e65b      	b.n	8004f1a <_printf_float+0xb6>
 8005262:	2301      	movs	r3, #1
 8005264:	464a      	mov	r2, r9
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	47b8      	blx	r7
 800526c:	3001      	adds	r0, #1
 800526e:	f43f ae54 	beq.w	8004f1a <_printf_float+0xb6>
 8005272:	f108 0801 	add.w	r8, r8, #1
 8005276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005278:	3b01      	subs	r3, #1
 800527a:	4543      	cmp	r3, r8
 800527c:	dcf1      	bgt.n	8005262 <_printf_float+0x3fe>
 800527e:	4653      	mov	r3, sl
 8005280:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005284:	e6de      	b.n	8005044 <_printf_float+0x1e0>
 8005286:	f04f 0800 	mov.w	r8, #0
 800528a:	f104 091a 	add.w	r9, r4, #26
 800528e:	e7f2      	b.n	8005276 <_printf_float+0x412>
 8005290:	2301      	movs	r3, #1
 8005292:	4642      	mov	r2, r8
 8005294:	e7df      	b.n	8005256 <_printf_float+0x3f2>
 8005296:	2301      	movs	r3, #1
 8005298:	464a      	mov	r2, r9
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	f43f ae3a 	beq.w	8004f1a <_printf_float+0xb6>
 80052a6:	f108 0801 	add.w	r8, r8, #1
 80052aa:	68e3      	ldr	r3, [r4, #12]
 80052ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80052ae:	1a5b      	subs	r3, r3, r1
 80052b0:	4543      	cmp	r3, r8
 80052b2:	dcf0      	bgt.n	8005296 <_printf_float+0x432>
 80052b4:	e6fb      	b.n	80050ae <_printf_float+0x24a>
 80052b6:	f04f 0800 	mov.w	r8, #0
 80052ba:	f104 0919 	add.w	r9, r4, #25
 80052be:	e7f4      	b.n	80052aa <_printf_float+0x446>

080052c0 <_printf_common>:
 80052c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	4616      	mov	r6, r2
 80052c6:	4699      	mov	r9, r3
 80052c8:	688a      	ldr	r2, [r1, #8]
 80052ca:	690b      	ldr	r3, [r1, #16]
 80052cc:	4607      	mov	r7, r0
 80052ce:	4293      	cmp	r3, r2
 80052d0:	bfb8      	it	lt
 80052d2:	4613      	movlt	r3, r2
 80052d4:	6033      	str	r3, [r6, #0]
 80052d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052da:	460c      	mov	r4, r1
 80052dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052e0:	b10a      	cbz	r2, 80052e6 <_printf_common+0x26>
 80052e2:	3301      	adds	r3, #1
 80052e4:	6033      	str	r3, [r6, #0]
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	0699      	lsls	r1, r3, #26
 80052ea:	bf42      	ittt	mi
 80052ec:	6833      	ldrmi	r3, [r6, #0]
 80052ee:	3302      	addmi	r3, #2
 80052f0:	6033      	strmi	r3, [r6, #0]
 80052f2:	6825      	ldr	r5, [r4, #0]
 80052f4:	f015 0506 	ands.w	r5, r5, #6
 80052f8:	d106      	bne.n	8005308 <_printf_common+0x48>
 80052fa:	f104 0a19 	add.w	sl, r4, #25
 80052fe:	68e3      	ldr	r3, [r4, #12]
 8005300:	6832      	ldr	r2, [r6, #0]
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	42ab      	cmp	r3, r5
 8005306:	dc2b      	bgt.n	8005360 <_printf_common+0xa0>
 8005308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800530c:	1e13      	subs	r3, r2, #0
 800530e:	6822      	ldr	r2, [r4, #0]
 8005310:	bf18      	it	ne
 8005312:	2301      	movne	r3, #1
 8005314:	0692      	lsls	r2, r2, #26
 8005316:	d430      	bmi.n	800537a <_printf_common+0xba>
 8005318:	4649      	mov	r1, r9
 800531a:	4638      	mov	r0, r7
 800531c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005320:	47c0      	blx	r8
 8005322:	3001      	adds	r0, #1
 8005324:	d023      	beq.n	800536e <_printf_common+0xae>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	6922      	ldr	r2, [r4, #16]
 800532a:	f003 0306 	and.w	r3, r3, #6
 800532e:	2b04      	cmp	r3, #4
 8005330:	bf14      	ite	ne
 8005332:	2500      	movne	r5, #0
 8005334:	6833      	ldreq	r3, [r6, #0]
 8005336:	f04f 0600 	mov.w	r6, #0
 800533a:	bf08      	it	eq
 800533c:	68e5      	ldreq	r5, [r4, #12]
 800533e:	f104 041a 	add.w	r4, r4, #26
 8005342:	bf08      	it	eq
 8005344:	1aed      	subeq	r5, r5, r3
 8005346:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800534a:	bf08      	it	eq
 800534c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005350:	4293      	cmp	r3, r2
 8005352:	bfc4      	itt	gt
 8005354:	1a9b      	subgt	r3, r3, r2
 8005356:	18ed      	addgt	r5, r5, r3
 8005358:	42b5      	cmp	r5, r6
 800535a:	d11a      	bne.n	8005392 <_printf_common+0xd2>
 800535c:	2000      	movs	r0, #0
 800535e:	e008      	b.n	8005372 <_printf_common+0xb2>
 8005360:	2301      	movs	r3, #1
 8005362:	4652      	mov	r2, sl
 8005364:	4649      	mov	r1, r9
 8005366:	4638      	mov	r0, r7
 8005368:	47c0      	blx	r8
 800536a:	3001      	adds	r0, #1
 800536c:	d103      	bne.n	8005376 <_printf_common+0xb6>
 800536e:	f04f 30ff 	mov.w	r0, #4294967295
 8005372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005376:	3501      	adds	r5, #1
 8005378:	e7c1      	b.n	80052fe <_printf_common+0x3e>
 800537a:	2030      	movs	r0, #48	; 0x30
 800537c:	18e1      	adds	r1, r4, r3
 800537e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005388:	4422      	add	r2, r4
 800538a:	3302      	adds	r3, #2
 800538c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005390:	e7c2      	b.n	8005318 <_printf_common+0x58>
 8005392:	2301      	movs	r3, #1
 8005394:	4622      	mov	r2, r4
 8005396:	4649      	mov	r1, r9
 8005398:	4638      	mov	r0, r7
 800539a:	47c0      	blx	r8
 800539c:	3001      	adds	r0, #1
 800539e:	d0e6      	beq.n	800536e <_printf_common+0xae>
 80053a0:	3601      	adds	r6, #1
 80053a2:	e7d9      	b.n	8005358 <_printf_common+0x98>

080053a4 <_printf_i>:
 80053a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053a8:	7e0f      	ldrb	r7, [r1, #24]
 80053aa:	4691      	mov	r9, r2
 80053ac:	2f78      	cmp	r7, #120	; 0x78
 80053ae:	4680      	mov	r8, r0
 80053b0:	460c      	mov	r4, r1
 80053b2:	469a      	mov	sl, r3
 80053b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053ba:	d807      	bhi.n	80053cc <_printf_i+0x28>
 80053bc:	2f62      	cmp	r7, #98	; 0x62
 80053be:	d80a      	bhi.n	80053d6 <_printf_i+0x32>
 80053c0:	2f00      	cmp	r7, #0
 80053c2:	f000 80d5 	beq.w	8005570 <_printf_i+0x1cc>
 80053c6:	2f58      	cmp	r7, #88	; 0x58
 80053c8:	f000 80c1 	beq.w	800554e <_printf_i+0x1aa>
 80053cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053d4:	e03a      	b.n	800544c <_printf_i+0xa8>
 80053d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053da:	2b15      	cmp	r3, #21
 80053dc:	d8f6      	bhi.n	80053cc <_printf_i+0x28>
 80053de:	a101      	add	r1, pc, #4	; (adr r1, 80053e4 <_printf_i+0x40>)
 80053e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053e4:	0800543d 	.word	0x0800543d
 80053e8:	08005451 	.word	0x08005451
 80053ec:	080053cd 	.word	0x080053cd
 80053f0:	080053cd 	.word	0x080053cd
 80053f4:	080053cd 	.word	0x080053cd
 80053f8:	080053cd 	.word	0x080053cd
 80053fc:	08005451 	.word	0x08005451
 8005400:	080053cd 	.word	0x080053cd
 8005404:	080053cd 	.word	0x080053cd
 8005408:	080053cd 	.word	0x080053cd
 800540c:	080053cd 	.word	0x080053cd
 8005410:	08005557 	.word	0x08005557
 8005414:	0800547d 	.word	0x0800547d
 8005418:	08005511 	.word	0x08005511
 800541c:	080053cd 	.word	0x080053cd
 8005420:	080053cd 	.word	0x080053cd
 8005424:	08005579 	.word	0x08005579
 8005428:	080053cd 	.word	0x080053cd
 800542c:	0800547d 	.word	0x0800547d
 8005430:	080053cd 	.word	0x080053cd
 8005434:	080053cd 	.word	0x080053cd
 8005438:	08005519 	.word	0x08005519
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	1d1a      	adds	r2, r3, #4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	602a      	str	r2, [r5, #0]
 8005444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800544c:	2301      	movs	r3, #1
 800544e:	e0a0      	b.n	8005592 <_printf_i+0x1ee>
 8005450:	6820      	ldr	r0, [r4, #0]
 8005452:	682b      	ldr	r3, [r5, #0]
 8005454:	0607      	lsls	r7, r0, #24
 8005456:	f103 0104 	add.w	r1, r3, #4
 800545a:	6029      	str	r1, [r5, #0]
 800545c:	d501      	bpl.n	8005462 <_printf_i+0xbe>
 800545e:	681e      	ldr	r6, [r3, #0]
 8005460:	e003      	b.n	800546a <_printf_i+0xc6>
 8005462:	0646      	lsls	r6, r0, #25
 8005464:	d5fb      	bpl.n	800545e <_printf_i+0xba>
 8005466:	f9b3 6000 	ldrsh.w	r6, [r3]
 800546a:	2e00      	cmp	r6, #0
 800546c:	da03      	bge.n	8005476 <_printf_i+0xd2>
 800546e:	232d      	movs	r3, #45	; 0x2d
 8005470:	4276      	negs	r6, r6
 8005472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005476:	230a      	movs	r3, #10
 8005478:	4859      	ldr	r0, [pc, #356]	; (80055e0 <_printf_i+0x23c>)
 800547a:	e012      	b.n	80054a2 <_printf_i+0xfe>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	6820      	ldr	r0, [r4, #0]
 8005480:	1d19      	adds	r1, r3, #4
 8005482:	6029      	str	r1, [r5, #0]
 8005484:	0605      	lsls	r5, r0, #24
 8005486:	d501      	bpl.n	800548c <_printf_i+0xe8>
 8005488:	681e      	ldr	r6, [r3, #0]
 800548a:	e002      	b.n	8005492 <_printf_i+0xee>
 800548c:	0641      	lsls	r1, r0, #25
 800548e:	d5fb      	bpl.n	8005488 <_printf_i+0xe4>
 8005490:	881e      	ldrh	r6, [r3, #0]
 8005492:	2f6f      	cmp	r7, #111	; 0x6f
 8005494:	bf0c      	ite	eq
 8005496:	2308      	moveq	r3, #8
 8005498:	230a      	movne	r3, #10
 800549a:	4851      	ldr	r0, [pc, #324]	; (80055e0 <_printf_i+0x23c>)
 800549c:	2100      	movs	r1, #0
 800549e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054a2:	6865      	ldr	r5, [r4, #4]
 80054a4:	2d00      	cmp	r5, #0
 80054a6:	bfa8      	it	ge
 80054a8:	6821      	ldrge	r1, [r4, #0]
 80054aa:	60a5      	str	r5, [r4, #8]
 80054ac:	bfa4      	itt	ge
 80054ae:	f021 0104 	bicge.w	r1, r1, #4
 80054b2:	6021      	strge	r1, [r4, #0]
 80054b4:	b90e      	cbnz	r6, 80054ba <_printf_i+0x116>
 80054b6:	2d00      	cmp	r5, #0
 80054b8:	d04b      	beq.n	8005552 <_printf_i+0x1ae>
 80054ba:	4615      	mov	r5, r2
 80054bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80054c0:	fb03 6711 	mls	r7, r3, r1, r6
 80054c4:	5dc7      	ldrb	r7, [r0, r7]
 80054c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054ca:	4637      	mov	r7, r6
 80054cc:	42bb      	cmp	r3, r7
 80054ce:	460e      	mov	r6, r1
 80054d0:	d9f4      	bls.n	80054bc <_printf_i+0x118>
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d10b      	bne.n	80054ee <_printf_i+0x14a>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	07de      	lsls	r6, r3, #31
 80054da:	d508      	bpl.n	80054ee <_printf_i+0x14a>
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	6861      	ldr	r1, [r4, #4]
 80054e0:	4299      	cmp	r1, r3
 80054e2:	bfde      	ittt	le
 80054e4:	2330      	movle	r3, #48	; 0x30
 80054e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054ee:	1b52      	subs	r2, r2, r5
 80054f0:	6122      	str	r2, [r4, #16]
 80054f2:	464b      	mov	r3, r9
 80054f4:	4621      	mov	r1, r4
 80054f6:	4640      	mov	r0, r8
 80054f8:	f8cd a000 	str.w	sl, [sp]
 80054fc:	aa03      	add	r2, sp, #12
 80054fe:	f7ff fedf 	bl	80052c0 <_printf_common>
 8005502:	3001      	adds	r0, #1
 8005504:	d14a      	bne.n	800559c <_printf_i+0x1f8>
 8005506:	f04f 30ff 	mov.w	r0, #4294967295
 800550a:	b004      	add	sp, #16
 800550c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	f043 0320 	orr.w	r3, r3, #32
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	2778      	movs	r7, #120	; 0x78
 800551a:	4832      	ldr	r0, [pc, #200]	; (80055e4 <_printf_i+0x240>)
 800551c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	6829      	ldr	r1, [r5, #0]
 8005524:	061f      	lsls	r7, r3, #24
 8005526:	f851 6b04 	ldr.w	r6, [r1], #4
 800552a:	d402      	bmi.n	8005532 <_printf_i+0x18e>
 800552c:	065f      	lsls	r7, r3, #25
 800552e:	bf48      	it	mi
 8005530:	b2b6      	uxthmi	r6, r6
 8005532:	07df      	lsls	r7, r3, #31
 8005534:	bf48      	it	mi
 8005536:	f043 0320 	orrmi.w	r3, r3, #32
 800553a:	6029      	str	r1, [r5, #0]
 800553c:	bf48      	it	mi
 800553e:	6023      	strmi	r3, [r4, #0]
 8005540:	b91e      	cbnz	r6, 800554a <_printf_i+0x1a6>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	f023 0320 	bic.w	r3, r3, #32
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	2310      	movs	r3, #16
 800554c:	e7a6      	b.n	800549c <_printf_i+0xf8>
 800554e:	4824      	ldr	r0, [pc, #144]	; (80055e0 <_printf_i+0x23c>)
 8005550:	e7e4      	b.n	800551c <_printf_i+0x178>
 8005552:	4615      	mov	r5, r2
 8005554:	e7bd      	b.n	80054d2 <_printf_i+0x12e>
 8005556:	682b      	ldr	r3, [r5, #0]
 8005558:	6826      	ldr	r6, [r4, #0]
 800555a:	1d18      	adds	r0, r3, #4
 800555c:	6961      	ldr	r1, [r4, #20]
 800555e:	6028      	str	r0, [r5, #0]
 8005560:	0635      	lsls	r5, r6, #24
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	d501      	bpl.n	800556a <_printf_i+0x1c6>
 8005566:	6019      	str	r1, [r3, #0]
 8005568:	e002      	b.n	8005570 <_printf_i+0x1cc>
 800556a:	0670      	lsls	r0, r6, #25
 800556c:	d5fb      	bpl.n	8005566 <_printf_i+0x1c2>
 800556e:	8019      	strh	r1, [r3, #0]
 8005570:	2300      	movs	r3, #0
 8005572:	4615      	mov	r5, r2
 8005574:	6123      	str	r3, [r4, #16]
 8005576:	e7bc      	b.n	80054f2 <_printf_i+0x14e>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	2100      	movs	r1, #0
 800557c:	1d1a      	adds	r2, r3, #4
 800557e:	602a      	str	r2, [r5, #0]
 8005580:	681d      	ldr	r5, [r3, #0]
 8005582:	6862      	ldr	r2, [r4, #4]
 8005584:	4628      	mov	r0, r5
 8005586:	f000 f9e8 	bl	800595a <memchr>
 800558a:	b108      	cbz	r0, 8005590 <_printf_i+0x1ec>
 800558c:	1b40      	subs	r0, r0, r5
 800558e:	6060      	str	r0, [r4, #4]
 8005590:	6863      	ldr	r3, [r4, #4]
 8005592:	6123      	str	r3, [r4, #16]
 8005594:	2300      	movs	r3, #0
 8005596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800559a:	e7aa      	b.n	80054f2 <_printf_i+0x14e>
 800559c:	462a      	mov	r2, r5
 800559e:	4649      	mov	r1, r9
 80055a0:	4640      	mov	r0, r8
 80055a2:	6923      	ldr	r3, [r4, #16]
 80055a4:	47d0      	blx	sl
 80055a6:	3001      	adds	r0, #1
 80055a8:	d0ad      	beq.n	8005506 <_printf_i+0x162>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	079b      	lsls	r3, r3, #30
 80055ae:	d413      	bmi.n	80055d8 <_printf_i+0x234>
 80055b0:	68e0      	ldr	r0, [r4, #12]
 80055b2:	9b03      	ldr	r3, [sp, #12]
 80055b4:	4298      	cmp	r0, r3
 80055b6:	bfb8      	it	lt
 80055b8:	4618      	movlt	r0, r3
 80055ba:	e7a6      	b.n	800550a <_printf_i+0x166>
 80055bc:	2301      	movs	r3, #1
 80055be:	4632      	mov	r2, r6
 80055c0:	4649      	mov	r1, r9
 80055c2:	4640      	mov	r0, r8
 80055c4:	47d0      	blx	sl
 80055c6:	3001      	adds	r0, #1
 80055c8:	d09d      	beq.n	8005506 <_printf_i+0x162>
 80055ca:	3501      	adds	r5, #1
 80055cc:	68e3      	ldr	r3, [r4, #12]
 80055ce:	9903      	ldr	r1, [sp, #12]
 80055d0:	1a5b      	subs	r3, r3, r1
 80055d2:	42ab      	cmp	r3, r5
 80055d4:	dcf2      	bgt.n	80055bc <_printf_i+0x218>
 80055d6:	e7eb      	b.n	80055b0 <_printf_i+0x20c>
 80055d8:	2500      	movs	r5, #0
 80055da:	f104 0619 	add.w	r6, r4, #25
 80055de:	e7f5      	b.n	80055cc <_printf_i+0x228>
 80055e0:	08007ab4 	.word	0x08007ab4
 80055e4:	08007ac5 	.word	0x08007ac5

080055e8 <std>:
 80055e8:	2300      	movs	r3, #0
 80055ea:	b510      	push	{r4, lr}
 80055ec:	4604      	mov	r4, r0
 80055ee:	e9c0 3300 	strd	r3, r3, [r0]
 80055f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055f6:	6083      	str	r3, [r0, #8]
 80055f8:	8181      	strh	r1, [r0, #12]
 80055fa:	6643      	str	r3, [r0, #100]	; 0x64
 80055fc:	81c2      	strh	r2, [r0, #14]
 80055fe:	6183      	str	r3, [r0, #24]
 8005600:	4619      	mov	r1, r3
 8005602:	2208      	movs	r2, #8
 8005604:	305c      	adds	r0, #92	; 0x5c
 8005606:	f000 f928 	bl	800585a <memset>
 800560a:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <std+0x58>)
 800560c:	6224      	str	r4, [r4, #32]
 800560e:	6263      	str	r3, [r4, #36]	; 0x24
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <std+0x5c>)
 8005612:	62a3      	str	r3, [r4, #40]	; 0x28
 8005614:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <std+0x60>)
 8005616:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005618:	4b0c      	ldr	r3, [pc, #48]	; (800564c <std+0x64>)
 800561a:	6323      	str	r3, [r4, #48]	; 0x30
 800561c:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <std+0x68>)
 800561e:	429c      	cmp	r4, r3
 8005620:	d006      	beq.n	8005630 <std+0x48>
 8005622:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005626:	4294      	cmp	r4, r2
 8005628:	d002      	beq.n	8005630 <std+0x48>
 800562a:	33d0      	adds	r3, #208	; 0xd0
 800562c:	429c      	cmp	r4, r3
 800562e:	d105      	bne.n	800563c <std+0x54>
 8005630:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005638:	f000 b98c 	b.w	8005954 <__retarget_lock_init_recursive>
 800563c:	bd10      	pop	{r4, pc}
 800563e:	bf00      	nop
 8005640:	080057d5 	.word	0x080057d5
 8005644:	080057f7 	.word	0x080057f7
 8005648:	0800582f 	.word	0x0800582f
 800564c:	08005853 	.word	0x08005853
 8005650:	2000038c 	.word	0x2000038c

08005654 <stdio_exit_handler>:
 8005654:	4a02      	ldr	r2, [pc, #8]	; (8005660 <stdio_exit_handler+0xc>)
 8005656:	4903      	ldr	r1, [pc, #12]	; (8005664 <stdio_exit_handler+0x10>)
 8005658:	4803      	ldr	r0, [pc, #12]	; (8005668 <stdio_exit_handler+0x14>)
 800565a:	f000 b869 	b.w	8005730 <_fwalk_sglue>
 800565e:	bf00      	nop
 8005660:	20000010 	.word	0x20000010
 8005664:	080072ed 	.word	0x080072ed
 8005668:	2000001c 	.word	0x2000001c

0800566c <cleanup_stdio>:
 800566c:	6841      	ldr	r1, [r0, #4]
 800566e:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <cleanup_stdio+0x34>)
 8005670:	b510      	push	{r4, lr}
 8005672:	4299      	cmp	r1, r3
 8005674:	4604      	mov	r4, r0
 8005676:	d001      	beq.n	800567c <cleanup_stdio+0x10>
 8005678:	f001 fe38 	bl	80072ec <_fflush_r>
 800567c:	68a1      	ldr	r1, [r4, #8]
 800567e:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <cleanup_stdio+0x38>)
 8005680:	4299      	cmp	r1, r3
 8005682:	d002      	beq.n	800568a <cleanup_stdio+0x1e>
 8005684:	4620      	mov	r0, r4
 8005686:	f001 fe31 	bl	80072ec <_fflush_r>
 800568a:	68e1      	ldr	r1, [r4, #12]
 800568c:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <cleanup_stdio+0x3c>)
 800568e:	4299      	cmp	r1, r3
 8005690:	d004      	beq.n	800569c <cleanup_stdio+0x30>
 8005692:	4620      	mov	r0, r4
 8005694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005698:	f001 be28 	b.w	80072ec <_fflush_r>
 800569c:	bd10      	pop	{r4, pc}
 800569e:	bf00      	nop
 80056a0:	2000038c 	.word	0x2000038c
 80056a4:	200003f4 	.word	0x200003f4
 80056a8:	2000045c 	.word	0x2000045c

080056ac <global_stdio_init.part.0>:
 80056ac:	b510      	push	{r4, lr}
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <global_stdio_init.part.0+0x30>)
 80056b0:	4c0b      	ldr	r4, [pc, #44]	; (80056e0 <global_stdio_init.part.0+0x34>)
 80056b2:	4a0c      	ldr	r2, [pc, #48]	; (80056e4 <global_stdio_init.part.0+0x38>)
 80056b4:	4620      	mov	r0, r4
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	2104      	movs	r1, #4
 80056ba:	2200      	movs	r2, #0
 80056bc:	f7ff ff94 	bl	80055e8 <std>
 80056c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80056c4:	2201      	movs	r2, #1
 80056c6:	2109      	movs	r1, #9
 80056c8:	f7ff ff8e 	bl	80055e8 <std>
 80056cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80056d0:	2202      	movs	r2, #2
 80056d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d6:	2112      	movs	r1, #18
 80056d8:	f7ff bf86 	b.w	80055e8 <std>
 80056dc:	200004c4 	.word	0x200004c4
 80056e0:	2000038c 	.word	0x2000038c
 80056e4:	08005655 	.word	0x08005655

080056e8 <__sfp_lock_acquire>:
 80056e8:	4801      	ldr	r0, [pc, #4]	; (80056f0 <__sfp_lock_acquire+0x8>)
 80056ea:	f000 b934 	b.w	8005956 <__retarget_lock_acquire_recursive>
 80056ee:	bf00      	nop
 80056f0:	200004cd 	.word	0x200004cd

080056f4 <__sfp_lock_release>:
 80056f4:	4801      	ldr	r0, [pc, #4]	; (80056fc <__sfp_lock_release+0x8>)
 80056f6:	f000 b92f 	b.w	8005958 <__retarget_lock_release_recursive>
 80056fa:	bf00      	nop
 80056fc:	200004cd 	.word	0x200004cd

08005700 <__sinit>:
 8005700:	b510      	push	{r4, lr}
 8005702:	4604      	mov	r4, r0
 8005704:	f7ff fff0 	bl	80056e8 <__sfp_lock_acquire>
 8005708:	6a23      	ldr	r3, [r4, #32]
 800570a:	b11b      	cbz	r3, 8005714 <__sinit+0x14>
 800570c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005710:	f7ff bff0 	b.w	80056f4 <__sfp_lock_release>
 8005714:	4b04      	ldr	r3, [pc, #16]	; (8005728 <__sinit+0x28>)
 8005716:	6223      	str	r3, [r4, #32]
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <__sinit+0x2c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f5      	bne.n	800570c <__sinit+0xc>
 8005720:	f7ff ffc4 	bl	80056ac <global_stdio_init.part.0>
 8005724:	e7f2      	b.n	800570c <__sinit+0xc>
 8005726:	bf00      	nop
 8005728:	0800566d 	.word	0x0800566d
 800572c:	200004c4 	.word	0x200004c4

08005730 <_fwalk_sglue>:
 8005730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005734:	4607      	mov	r7, r0
 8005736:	4688      	mov	r8, r1
 8005738:	4614      	mov	r4, r2
 800573a:	2600      	movs	r6, #0
 800573c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005740:	f1b9 0901 	subs.w	r9, r9, #1
 8005744:	d505      	bpl.n	8005752 <_fwalk_sglue+0x22>
 8005746:	6824      	ldr	r4, [r4, #0]
 8005748:	2c00      	cmp	r4, #0
 800574a:	d1f7      	bne.n	800573c <_fwalk_sglue+0xc>
 800574c:	4630      	mov	r0, r6
 800574e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005752:	89ab      	ldrh	r3, [r5, #12]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d907      	bls.n	8005768 <_fwalk_sglue+0x38>
 8005758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800575c:	3301      	adds	r3, #1
 800575e:	d003      	beq.n	8005768 <_fwalk_sglue+0x38>
 8005760:	4629      	mov	r1, r5
 8005762:	4638      	mov	r0, r7
 8005764:	47c0      	blx	r8
 8005766:	4306      	orrs	r6, r0
 8005768:	3568      	adds	r5, #104	; 0x68
 800576a:	e7e9      	b.n	8005740 <_fwalk_sglue+0x10>

0800576c <sniprintf>:
 800576c:	b40c      	push	{r2, r3}
 800576e:	b530      	push	{r4, r5, lr}
 8005770:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <sniprintf+0x64>)
 8005772:	1e0c      	subs	r4, r1, #0
 8005774:	681d      	ldr	r5, [r3, #0]
 8005776:	b09d      	sub	sp, #116	; 0x74
 8005778:	da08      	bge.n	800578c <sniprintf+0x20>
 800577a:	238b      	movs	r3, #139	; 0x8b
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	b01d      	add	sp, #116	; 0x74
 8005784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005788:	b002      	add	sp, #8
 800578a:	4770      	bx	lr
 800578c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005790:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005794:	bf0c      	ite	eq
 8005796:	4623      	moveq	r3, r4
 8005798:	f104 33ff 	addne.w	r3, r4, #4294967295
 800579c:	9304      	str	r3, [sp, #16]
 800579e:	9307      	str	r3, [sp, #28]
 80057a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057a4:	9002      	str	r0, [sp, #8]
 80057a6:	9006      	str	r0, [sp, #24]
 80057a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057ac:	4628      	mov	r0, r5
 80057ae:	ab21      	add	r3, sp, #132	; 0x84
 80057b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057b2:	a902      	add	r1, sp, #8
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	f001 fc19 	bl	8006fec <_svfiprintf_r>
 80057ba:	1c43      	adds	r3, r0, #1
 80057bc:	bfbc      	itt	lt
 80057be:	238b      	movlt	r3, #139	; 0x8b
 80057c0:	602b      	strlt	r3, [r5, #0]
 80057c2:	2c00      	cmp	r4, #0
 80057c4:	d0dd      	beq.n	8005782 <sniprintf+0x16>
 80057c6:	2200      	movs	r2, #0
 80057c8:	9b02      	ldr	r3, [sp, #8]
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	e7d9      	b.n	8005782 <sniprintf+0x16>
 80057ce:	bf00      	nop
 80057d0:	20000068 	.word	0x20000068

080057d4 <__sread>:
 80057d4:	b510      	push	{r4, lr}
 80057d6:	460c      	mov	r4, r1
 80057d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057dc:	f000 f86c 	bl	80058b8 <_read_r>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	bfab      	itete	ge
 80057e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057e6:	89a3      	ldrhlt	r3, [r4, #12]
 80057e8:	181b      	addge	r3, r3, r0
 80057ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057ee:	bfac      	ite	ge
 80057f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80057f2:	81a3      	strhlt	r3, [r4, #12]
 80057f4:	bd10      	pop	{r4, pc}

080057f6 <__swrite>:
 80057f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fa:	461f      	mov	r7, r3
 80057fc:	898b      	ldrh	r3, [r1, #12]
 80057fe:	4605      	mov	r5, r0
 8005800:	05db      	lsls	r3, r3, #23
 8005802:	460c      	mov	r4, r1
 8005804:	4616      	mov	r6, r2
 8005806:	d505      	bpl.n	8005814 <__swrite+0x1e>
 8005808:	2302      	movs	r3, #2
 800580a:	2200      	movs	r2, #0
 800580c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005810:	f000 f840 	bl	8005894 <_lseek_r>
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	4632      	mov	r2, r6
 8005818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800581c:	81a3      	strh	r3, [r4, #12]
 800581e:	4628      	mov	r0, r5
 8005820:	463b      	mov	r3, r7
 8005822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800582a:	f000 b857 	b.w	80058dc <_write_r>

0800582e <__sseek>:
 800582e:	b510      	push	{r4, lr}
 8005830:	460c      	mov	r4, r1
 8005832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005836:	f000 f82d 	bl	8005894 <_lseek_r>
 800583a:	1c43      	adds	r3, r0, #1
 800583c:	89a3      	ldrh	r3, [r4, #12]
 800583e:	bf15      	itete	ne
 8005840:	6560      	strne	r0, [r4, #84]	; 0x54
 8005842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800584a:	81a3      	strheq	r3, [r4, #12]
 800584c:	bf18      	it	ne
 800584e:	81a3      	strhne	r3, [r4, #12]
 8005850:	bd10      	pop	{r4, pc}

08005852 <__sclose>:
 8005852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005856:	f000 b80d 	b.w	8005874 <_close_r>

0800585a <memset>:
 800585a:	4603      	mov	r3, r0
 800585c:	4402      	add	r2, r0
 800585e:	4293      	cmp	r3, r2
 8005860:	d100      	bne.n	8005864 <memset+0xa>
 8005862:	4770      	bx	lr
 8005864:	f803 1b01 	strb.w	r1, [r3], #1
 8005868:	e7f9      	b.n	800585e <memset+0x4>
	...

0800586c <_localeconv_r>:
 800586c:	4800      	ldr	r0, [pc, #0]	; (8005870 <_localeconv_r+0x4>)
 800586e:	4770      	bx	lr
 8005870:	2000015c 	.word	0x2000015c

08005874 <_close_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	2300      	movs	r3, #0
 8005878:	4d05      	ldr	r5, [pc, #20]	; (8005890 <_close_r+0x1c>)
 800587a:	4604      	mov	r4, r0
 800587c:	4608      	mov	r0, r1
 800587e:	602b      	str	r3, [r5, #0]
 8005880:	f7fc f8a0 	bl	80019c4 <_close>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d102      	bne.n	800588e <_close_r+0x1a>
 8005888:	682b      	ldr	r3, [r5, #0]
 800588a:	b103      	cbz	r3, 800588e <_close_r+0x1a>
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	bd38      	pop	{r3, r4, r5, pc}
 8005890:	200004c8 	.word	0x200004c8

08005894 <_lseek_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4604      	mov	r4, r0
 8005898:	4608      	mov	r0, r1
 800589a:	4611      	mov	r1, r2
 800589c:	2200      	movs	r2, #0
 800589e:	4d05      	ldr	r5, [pc, #20]	; (80058b4 <_lseek_r+0x20>)
 80058a0:	602a      	str	r2, [r5, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f7fc f8b2 	bl	8001a0c <_lseek>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d102      	bne.n	80058b2 <_lseek_r+0x1e>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	b103      	cbz	r3, 80058b2 <_lseek_r+0x1e>
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	200004c8 	.word	0x200004c8

080058b8 <_read_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4604      	mov	r4, r0
 80058bc:	4608      	mov	r0, r1
 80058be:	4611      	mov	r1, r2
 80058c0:	2200      	movs	r2, #0
 80058c2:	4d05      	ldr	r5, [pc, #20]	; (80058d8 <_read_r+0x20>)
 80058c4:	602a      	str	r2, [r5, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f7fc f843 	bl	8001952 <_read>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d102      	bne.n	80058d6 <_read_r+0x1e>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	b103      	cbz	r3, 80058d6 <_read_r+0x1e>
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	200004c8 	.word	0x200004c8

080058dc <_write_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4604      	mov	r4, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	2200      	movs	r2, #0
 80058e6:	4d05      	ldr	r5, [pc, #20]	; (80058fc <_write_r+0x20>)
 80058e8:	602a      	str	r2, [r5, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f7fc f84e 	bl	800198c <_write>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d102      	bne.n	80058fa <_write_r+0x1e>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	b103      	cbz	r3, 80058fa <_write_r+0x1e>
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	200004c8 	.word	0x200004c8

08005900 <__errno>:
 8005900:	4b01      	ldr	r3, [pc, #4]	; (8005908 <__errno+0x8>)
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	20000068 	.word	0x20000068

0800590c <__libc_init_array>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	2600      	movs	r6, #0
 8005910:	4d0c      	ldr	r5, [pc, #48]	; (8005944 <__libc_init_array+0x38>)
 8005912:	4c0d      	ldr	r4, [pc, #52]	; (8005948 <__libc_init_array+0x3c>)
 8005914:	1b64      	subs	r4, r4, r5
 8005916:	10a4      	asrs	r4, r4, #2
 8005918:	42a6      	cmp	r6, r4
 800591a:	d109      	bne.n	8005930 <__libc_init_array+0x24>
 800591c:	f002 f886 	bl	8007a2c <_init>
 8005920:	2600      	movs	r6, #0
 8005922:	4d0a      	ldr	r5, [pc, #40]	; (800594c <__libc_init_array+0x40>)
 8005924:	4c0a      	ldr	r4, [pc, #40]	; (8005950 <__libc_init_array+0x44>)
 8005926:	1b64      	subs	r4, r4, r5
 8005928:	10a4      	asrs	r4, r4, #2
 800592a:	42a6      	cmp	r6, r4
 800592c:	d105      	bne.n	800593a <__libc_init_array+0x2e>
 800592e:	bd70      	pop	{r4, r5, r6, pc}
 8005930:	f855 3b04 	ldr.w	r3, [r5], #4
 8005934:	4798      	blx	r3
 8005936:	3601      	adds	r6, #1
 8005938:	e7ee      	b.n	8005918 <__libc_init_array+0xc>
 800593a:	f855 3b04 	ldr.w	r3, [r5], #4
 800593e:	4798      	blx	r3
 8005940:	3601      	adds	r6, #1
 8005942:	e7f2      	b.n	800592a <__libc_init_array+0x1e>
 8005944:	08007e14 	.word	0x08007e14
 8005948:	08007e14 	.word	0x08007e14
 800594c:	08007e14 	.word	0x08007e14
 8005950:	08007e18 	.word	0x08007e18

08005954 <__retarget_lock_init_recursive>:
 8005954:	4770      	bx	lr

08005956 <__retarget_lock_acquire_recursive>:
 8005956:	4770      	bx	lr

08005958 <__retarget_lock_release_recursive>:
 8005958:	4770      	bx	lr

0800595a <memchr>:
 800595a:	4603      	mov	r3, r0
 800595c:	b510      	push	{r4, lr}
 800595e:	b2c9      	uxtb	r1, r1
 8005960:	4402      	add	r2, r0
 8005962:	4293      	cmp	r3, r2
 8005964:	4618      	mov	r0, r3
 8005966:	d101      	bne.n	800596c <memchr+0x12>
 8005968:	2000      	movs	r0, #0
 800596a:	e003      	b.n	8005974 <memchr+0x1a>
 800596c:	7804      	ldrb	r4, [r0, #0]
 800596e:	3301      	adds	r3, #1
 8005970:	428c      	cmp	r4, r1
 8005972:	d1f6      	bne.n	8005962 <memchr+0x8>
 8005974:	bd10      	pop	{r4, pc}

08005976 <quorem>:
 8005976:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597a:	6903      	ldr	r3, [r0, #16]
 800597c:	690c      	ldr	r4, [r1, #16]
 800597e:	4607      	mov	r7, r0
 8005980:	42a3      	cmp	r3, r4
 8005982:	db7f      	blt.n	8005a84 <quorem+0x10e>
 8005984:	3c01      	subs	r4, #1
 8005986:	f100 0514 	add.w	r5, r0, #20
 800598a:	f101 0814 	add.w	r8, r1, #20
 800598e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005992:	9301      	str	r3, [sp, #4]
 8005994:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005998:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800599c:	3301      	adds	r3, #1
 800599e:	429a      	cmp	r2, r3
 80059a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80059a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059ac:	d331      	bcc.n	8005a12 <quorem+0x9c>
 80059ae:	f04f 0e00 	mov.w	lr, #0
 80059b2:	4640      	mov	r0, r8
 80059b4:	46ac      	mov	ip, r5
 80059b6:	46f2      	mov	sl, lr
 80059b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80059bc:	b293      	uxth	r3, r2
 80059be:	fb06 e303 	mla	r3, r6, r3, lr
 80059c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059c6:	0c1a      	lsrs	r2, r3, #16
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	fb06 220e 	mla	r2, r6, lr, r2
 80059ce:	ebaa 0303 	sub.w	r3, sl, r3
 80059d2:	f8dc a000 	ldr.w	sl, [ip]
 80059d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059da:	fa1f fa8a 	uxth.w	sl, sl
 80059de:	4453      	add	r3, sl
 80059e0:	f8dc a000 	ldr.w	sl, [ip]
 80059e4:	b292      	uxth	r2, r2
 80059e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059f4:	4581      	cmp	r9, r0
 80059f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059fa:	f84c 3b04 	str.w	r3, [ip], #4
 80059fe:	d2db      	bcs.n	80059b8 <quorem+0x42>
 8005a00:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a04:	b92b      	cbnz	r3, 8005a12 <quorem+0x9c>
 8005a06:	9b01      	ldr	r3, [sp, #4]
 8005a08:	3b04      	subs	r3, #4
 8005a0a:	429d      	cmp	r5, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	d32d      	bcc.n	8005a6c <quorem+0xf6>
 8005a10:	613c      	str	r4, [r7, #16]
 8005a12:	4638      	mov	r0, r7
 8005a14:	f001 f992 	bl	8006d3c <__mcmp>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	db23      	blt.n	8005a64 <quorem+0xee>
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	2000      	movs	r0, #0
 8005a20:	3601      	adds	r6, #1
 8005a22:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a26:	f8d1 c000 	ldr.w	ip, [r1]
 8005a2a:	b293      	uxth	r3, r2
 8005a2c:	1ac3      	subs	r3, r0, r3
 8005a2e:	0c12      	lsrs	r2, r2, #16
 8005a30:	fa1f f08c 	uxth.w	r0, ip
 8005a34:	4403      	add	r3, r0
 8005a36:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005a3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a44:	45c1      	cmp	r9, r8
 8005a46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a4a:	f841 3b04 	str.w	r3, [r1], #4
 8005a4e:	d2e8      	bcs.n	8005a22 <quorem+0xac>
 8005a50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a58:	b922      	cbnz	r2, 8005a64 <quorem+0xee>
 8005a5a:	3b04      	subs	r3, #4
 8005a5c:	429d      	cmp	r5, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	d30a      	bcc.n	8005a78 <quorem+0x102>
 8005a62:	613c      	str	r4, [r7, #16]
 8005a64:	4630      	mov	r0, r6
 8005a66:	b003      	add	sp, #12
 8005a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	3b04      	subs	r3, #4
 8005a70:	2a00      	cmp	r2, #0
 8005a72:	d1cd      	bne.n	8005a10 <quorem+0x9a>
 8005a74:	3c01      	subs	r4, #1
 8005a76:	e7c8      	b.n	8005a0a <quorem+0x94>
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	3b04      	subs	r3, #4
 8005a7c:	2a00      	cmp	r2, #0
 8005a7e:	d1f0      	bne.n	8005a62 <quorem+0xec>
 8005a80:	3c01      	subs	r4, #1
 8005a82:	e7eb      	b.n	8005a5c <quorem+0xe6>
 8005a84:	2000      	movs	r0, #0
 8005a86:	e7ee      	b.n	8005a66 <quorem+0xf0>

08005a88 <_dtoa_r>:
 8005a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8c:	4616      	mov	r6, r2
 8005a8e:	461f      	mov	r7, r3
 8005a90:	69c4      	ldr	r4, [r0, #28]
 8005a92:	b099      	sub	sp, #100	; 0x64
 8005a94:	4605      	mov	r5, r0
 8005a96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005a9a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005a9e:	b974      	cbnz	r4, 8005abe <_dtoa_r+0x36>
 8005aa0:	2010      	movs	r0, #16
 8005aa2:	f000 fe1d 	bl	80066e0 <malloc>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	61e8      	str	r0, [r5, #28]
 8005aaa:	b920      	cbnz	r0, 8005ab6 <_dtoa_r+0x2e>
 8005aac:	21ef      	movs	r1, #239	; 0xef
 8005aae:	4bac      	ldr	r3, [pc, #688]	; (8005d60 <_dtoa_r+0x2d8>)
 8005ab0:	48ac      	ldr	r0, [pc, #688]	; (8005d64 <_dtoa_r+0x2dc>)
 8005ab2:	f001 fc7b 	bl	80073ac <__assert_func>
 8005ab6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005aba:	6004      	str	r4, [r0, #0]
 8005abc:	60c4      	str	r4, [r0, #12]
 8005abe:	69eb      	ldr	r3, [r5, #28]
 8005ac0:	6819      	ldr	r1, [r3, #0]
 8005ac2:	b151      	cbz	r1, 8005ada <_dtoa_r+0x52>
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	4093      	lsls	r3, r2
 8005aca:	604a      	str	r2, [r1, #4]
 8005acc:	608b      	str	r3, [r1, #8]
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f000 fefa 	bl	80068c8 <_Bfree>
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	69eb      	ldr	r3, [r5, #28]
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	1e3b      	subs	r3, r7, #0
 8005adc:	bfaf      	iteee	ge
 8005ade:	2300      	movge	r3, #0
 8005ae0:	2201      	movlt	r2, #1
 8005ae2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ae6:	9305      	strlt	r3, [sp, #20]
 8005ae8:	bfa8      	it	ge
 8005aea:	f8c8 3000 	strge.w	r3, [r8]
 8005aee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005af2:	4b9d      	ldr	r3, [pc, #628]	; (8005d68 <_dtoa_r+0x2e0>)
 8005af4:	bfb8      	it	lt
 8005af6:	f8c8 2000 	strlt.w	r2, [r8]
 8005afa:	ea33 0309 	bics.w	r3, r3, r9
 8005afe:	d119      	bne.n	8005b34 <_dtoa_r+0xac>
 8005b00:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b0c:	4333      	orrs	r3, r6
 8005b0e:	f000 8589 	beq.w	8006624 <_dtoa_r+0xb9c>
 8005b12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b14:	b953      	cbnz	r3, 8005b2c <_dtoa_r+0xa4>
 8005b16:	4b95      	ldr	r3, [pc, #596]	; (8005d6c <_dtoa_r+0x2e4>)
 8005b18:	e023      	b.n	8005b62 <_dtoa_r+0xda>
 8005b1a:	4b95      	ldr	r3, [pc, #596]	; (8005d70 <_dtoa_r+0x2e8>)
 8005b1c:	9303      	str	r3, [sp, #12]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	9803      	ldr	r0, [sp, #12]
 8005b26:	b019      	add	sp, #100	; 0x64
 8005b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2c:	4b8f      	ldr	r3, [pc, #572]	; (8005d6c <_dtoa_r+0x2e4>)
 8005b2e:	9303      	str	r3, [sp, #12]
 8005b30:	3303      	adds	r3, #3
 8005b32:	e7f5      	b.n	8005b20 <_dtoa_r+0x98>
 8005b34:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005b3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b40:	2200      	movs	r2, #0
 8005b42:	2300      	movs	r3, #0
 8005b44:	f7fa ff30 	bl	80009a8 <__aeabi_dcmpeq>
 8005b48:	4680      	mov	r8, r0
 8005b4a:	b160      	cbz	r0, 8005b66 <_dtoa_r+0xde>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8562 	beq.w	800661e <_dtoa_r+0xb96>
 8005b5a:	4b86      	ldr	r3, [pc, #536]	; (8005d74 <_dtoa_r+0x2ec>)
 8005b5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	9303      	str	r3, [sp, #12]
 8005b64:	e7de      	b.n	8005b24 <_dtoa_r+0x9c>
 8005b66:	ab16      	add	r3, sp, #88	; 0x58
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	ab17      	add	r3, sp, #92	; 0x5c
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	4628      	mov	r0, r5
 8005b70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b74:	f001 f98a 	bl	8006e8c <__d2b>
 8005b78:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b7c:	4682      	mov	sl, r0
 8005b7e:	2c00      	cmp	r4, #0
 8005b80:	d07e      	beq.n	8005c80 <_dtoa_r+0x1f8>
 8005b82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b88:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b90:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005b94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005b98:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	4b75      	ldr	r3, [pc, #468]	; (8005d78 <_dtoa_r+0x2f0>)
 8005ba2:	f7fa fae1 	bl	8000168 <__aeabi_dsub>
 8005ba6:	a368      	add	r3, pc, #416	; (adr r3, 8005d48 <_dtoa_r+0x2c0>)
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	f7fa fc94 	bl	80004d8 <__aeabi_dmul>
 8005bb0:	a367      	add	r3, pc, #412	; (adr r3, 8005d50 <_dtoa_r+0x2c8>)
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	f7fa fad9 	bl	800016c <__adddf3>
 8005bba:	4606      	mov	r6, r0
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	460f      	mov	r7, r1
 8005bc0:	f7fa fc20 	bl	8000404 <__aeabi_i2d>
 8005bc4:	a364      	add	r3, pc, #400	; (adr r3, 8005d58 <_dtoa_r+0x2d0>)
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	f7fa fc85 	bl	80004d8 <__aeabi_dmul>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	f7fa fac9 	bl	800016c <__adddf3>
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460f      	mov	r7, r1
 8005bde:	f7fa ff2b 	bl	8000a38 <__aeabi_d2iz>
 8005be2:	2200      	movs	r2, #0
 8005be4:	4683      	mov	fp, r0
 8005be6:	2300      	movs	r3, #0
 8005be8:	4630      	mov	r0, r6
 8005bea:	4639      	mov	r1, r7
 8005bec:	f7fa fee6 	bl	80009bc <__aeabi_dcmplt>
 8005bf0:	b148      	cbz	r0, 8005c06 <_dtoa_r+0x17e>
 8005bf2:	4658      	mov	r0, fp
 8005bf4:	f7fa fc06 	bl	8000404 <__aeabi_i2d>
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	463b      	mov	r3, r7
 8005bfc:	f7fa fed4 	bl	80009a8 <__aeabi_dcmpeq>
 8005c00:	b908      	cbnz	r0, 8005c06 <_dtoa_r+0x17e>
 8005c02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c06:	f1bb 0f16 	cmp.w	fp, #22
 8005c0a:	d857      	bhi.n	8005cbc <_dtoa_r+0x234>
 8005c0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c10:	4b5a      	ldr	r3, [pc, #360]	; (8005d7c <_dtoa_r+0x2f4>)
 8005c12:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f7fa fecf 	bl	80009bc <__aeabi_dcmplt>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d04e      	beq.n	8005cc0 <_dtoa_r+0x238>
 8005c22:	2300      	movs	r3, #0
 8005c24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c28:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c2c:	1b1b      	subs	r3, r3, r4
 8005c2e:	1e5a      	subs	r2, r3, #1
 8005c30:	bf46      	itte	mi
 8005c32:	f1c3 0901 	rsbmi	r9, r3, #1
 8005c36:	2300      	movmi	r3, #0
 8005c38:	f04f 0900 	movpl.w	r9, #0
 8005c3c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c3e:	bf48      	it	mi
 8005c40:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005c42:	f1bb 0f00 	cmp.w	fp, #0
 8005c46:	db3d      	blt.n	8005cc4 <_dtoa_r+0x23c>
 8005c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c4a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005c4e:	445b      	add	r3, fp
 8005c50:	9309      	str	r3, [sp, #36]	; 0x24
 8005c52:	2300      	movs	r3, #0
 8005c54:	930a      	str	r3, [sp, #40]	; 0x28
 8005c56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c58:	2b09      	cmp	r3, #9
 8005c5a:	d867      	bhi.n	8005d2c <_dtoa_r+0x2a4>
 8005c5c:	2b05      	cmp	r3, #5
 8005c5e:	bfc4      	itt	gt
 8005c60:	3b04      	subgt	r3, #4
 8005c62:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005c64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c66:	bfc8      	it	gt
 8005c68:	2400      	movgt	r4, #0
 8005c6a:	f1a3 0302 	sub.w	r3, r3, #2
 8005c6e:	bfd8      	it	le
 8005c70:	2401      	movle	r4, #1
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	f200 8086 	bhi.w	8005d84 <_dtoa_r+0x2fc>
 8005c78:	e8df f003 	tbb	[pc, r3]
 8005c7c:	5637392c 	.word	0x5637392c
 8005c80:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005c84:	441c      	add	r4, r3
 8005c86:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	bfc1      	itttt	gt
 8005c8e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c92:	fa09 f903 	lslgt.w	r9, r9, r3
 8005c96:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005c9a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005c9e:	bfd6      	itet	le
 8005ca0:	f1c3 0320 	rsble	r3, r3, #32
 8005ca4:	ea49 0003 	orrgt.w	r0, r9, r3
 8005ca8:	fa06 f003 	lslle.w	r0, r6, r3
 8005cac:	f7fa fb9a 	bl	80003e4 <__aeabi_ui2d>
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005cb6:	3c01      	subs	r4, #1
 8005cb8:	9213      	str	r2, [sp, #76]	; 0x4c
 8005cba:	e76f      	b.n	8005b9c <_dtoa_r+0x114>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e7b3      	b.n	8005c28 <_dtoa_r+0x1a0>
 8005cc0:	900f      	str	r0, [sp, #60]	; 0x3c
 8005cc2:	e7b2      	b.n	8005c2a <_dtoa_r+0x1a2>
 8005cc4:	f1cb 0300 	rsb	r3, fp, #0
 8005cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8005cca:	2300      	movs	r3, #0
 8005ccc:	eba9 090b 	sub.w	r9, r9, fp
 8005cd0:	930e      	str	r3, [sp, #56]	; 0x38
 8005cd2:	e7c0      	b.n	8005c56 <_dtoa_r+0x1ce>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	dc55      	bgt.n	8005d8a <_dtoa_r+0x302>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	9306      	str	r3, [sp, #24]
 8005ce4:	9308      	str	r3, [sp, #32]
 8005ce6:	9223      	str	r2, [sp, #140]	; 0x8c
 8005ce8:	e00b      	b.n	8005d02 <_dtoa_r+0x27a>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e7f3      	b.n	8005cd6 <_dtoa_r+0x24e>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cf4:	445b      	add	r3, fp
 8005cf6:	9306      	str	r3, [sp, #24]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	9308      	str	r3, [sp, #32]
 8005cfe:	bfb8      	it	lt
 8005d00:	2301      	movlt	r3, #1
 8005d02:	2100      	movs	r1, #0
 8005d04:	2204      	movs	r2, #4
 8005d06:	69e8      	ldr	r0, [r5, #28]
 8005d08:	f102 0614 	add.w	r6, r2, #20
 8005d0c:	429e      	cmp	r6, r3
 8005d0e:	d940      	bls.n	8005d92 <_dtoa_r+0x30a>
 8005d10:	6041      	str	r1, [r0, #4]
 8005d12:	4628      	mov	r0, r5
 8005d14:	f000 fd98 	bl	8006848 <_Balloc>
 8005d18:	9003      	str	r0, [sp, #12]
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d13c      	bne.n	8005d98 <_dtoa_r+0x310>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	f240 11af 	movw	r1, #431	; 0x1af
 8005d24:	4b16      	ldr	r3, [pc, #88]	; (8005d80 <_dtoa_r+0x2f8>)
 8005d26:	e6c3      	b.n	8005ab0 <_dtoa_r+0x28>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e7e1      	b.n	8005cf0 <_dtoa_r+0x268>
 8005d2c:	2401      	movs	r4, #1
 8005d2e:	2300      	movs	r3, #0
 8005d30:	940b      	str	r4, [sp, #44]	; 0x2c
 8005d32:	9322      	str	r3, [sp, #136]	; 0x88
 8005d34:	f04f 33ff 	mov.w	r3, #4294967295
 8005d38:	2200      	movs	r2, #0
 8005d3a:	9306      	str	r3, [sp, #24]
 8005d3c:	9308      	str	r3, [sp, #32]
 8005d3e:	2312      	movs	r3, #18
 8005d40:	e7d1      	b.n	8005ce6 <_dtoa_r+0x25e>
 8005d42:	bf00      	nop
 8005d44:	f3af 8000 	nop.w
 8005d48:	636f4361 	.word	0x636f4361
 8005d4c:	3fd287a7 	.word	0x3fd287a7
 8005d50:	8b60c8b3 	.word	0x8b60c8b3
 8005d54:	3fc68a28 	.word	0x3fc68a28
 8005d58:	509f79fb 	.word	0x509f79fb
 8005d5c:	3fd34413 	.word	0x3fd34413
 8005d60:	08007ae3 	.word	0x08007ae3
 8005d64:	08007afa 	.word	0x08007afa
 8005d68:	7ff00000 	.word	0x7ff00000
 8005d6c:	08007adf 	.word	0x08007adf
 8005d70:	08007ad6 	.word	0x08007ad6
 8005d74:	08007ab3 	.word	0x08007ab3
 8005d78:	3ff80000 	.word	0x3ff80000
 8005d7c:	08007be8 	.word	0x08007be8
 8005d80:	08007b52 	.word	0x08007b52
 8005d84:	2301      	movs	r3, #1
 8005d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d88:	e7d4      	b.n	8005d34 <_dtoa_r+0x2ac>
 8005d8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d8c:	9306      	str	r3, [sp, #24]
 8005d8e:	9308      	str	r3, [sp, #32]
 8005d90:	e7b7      	b.n	8005d02 <_dtoa_r+0x27a>
 8005d92:	3101      	adds	r1, #1
 8005d94:	0052      	lsls	r2, r2, #1
 8005d96:	e7b7      	b.n	8005d08 <_dtoa_r+0x280>
 8005d98:	69eb      	ldr	r3, [r5, #28]
 8005d9a:	9a03      	ldr	r2, [sp, #12]
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	9b08      	ldr	r3, [sp, #32]
 8005da0:	2b0e      	cmp	r3, #14
 8005da2:	f200 80a8 	bhi.w	8005ef6 <_dtoa_r+0x46e>
 8005da6:	2c00      	cmp	r4, #0
 8005da8:	f000 80a5 	beq.w	8005ef6 <_dtoa_r+0x46e>
 8005dac:	f1bb 0f00 	cmp.w	fp, #0
 8005db0:	dd34      	ble.n	8005e1c <_dtoa_r+0x394>
 8005db2:	4b9a      	ldr	r3, [pc, #616]	; (800601c <_dtoa_r+0x594>)
 8005db4:	f00b 020f 	and.w	r2, fp, #15
 8005db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005dc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dc4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005dc8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005dcc:	d016      	beq.n	8005dfc <_dtoa_r+0x374>
 8005dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dd2:	4b93      	ldr	r3, [pc, #588]	; (8006020 <_dtoa_r+0x598>)
 8005dd4:	2703      	movs	r7, #3
 8005dd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005dda:	f7fa fca7 	bl	800072c <__aeabi_ddiv>
 8005dde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005de2:	f004 040f 	and.w	r4, r4, #15
 8005de6:	4e8e      	ldr	r6, [pc, #568]	; (8006020 <_dtoa_r+0x598>)
 8005de8:	b954      	cbnz	r4, 8005e00 <_dtoa_r+0x378>
 8005dea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005df2:	f7fa fc9b 	bl	800072c <__aeabi_ddiv>
 8005df6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dfa:	e029      	b.n	8005e50 <_dtoa_r+0x3c8>
 8005dfc:	2702      	movs	r7, #2
 8005dfe:	e7f2      	b.n	8005de6 <_dtoa_r+0x35e>
 8005e00:	07e1      	lsls	r1, r4, #31
 8005e02:	d508      	bpl.n	8005e16 <_dtoa_r+0x38e>
 8005e04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e0c:	f7fa fb64 	bl	80004d8 <__aeabi_dmul>
 8005e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e14:	3701      	adds	r7, #1
 8005e16:	1064      	asrs	r4, r4, #1
 8005e18:	3608      	adds	r6, #8
 8005e1a:	e7e5      	b.n	8005de8 <_dtoa_r+0x360>
 8005e1c:	f000 80a5 	beq.w	8005f6a <_dtoa_r+0x4e2>
 8005e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e24:	f1cb 0400 	rsb	r4, fp, #0
 8005e28:	4b7c      	ldr	r3, [pc, #496]	; (800601c <_dtoa_r+0x594>)
 8005e2a:	f004 020f 	and.w	r2, r4, #15
 8005e2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f7fa fb4f 	bl	80004d8 <__aeabi_dmul>
 8005e3a:	2702      	movs	r7, #2
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e42:	4e77      	ldr	r6, [pc, #476]	; (8006020 <_dtoa_r+0x598>)
 8005e44:	1124      	asrs	r4, r4, #4
 8005e46:	2c00      	cmp	r4, #0
 8005e48:	f040 8084 	bne.w	8005f54 <_dtoa_r+0x4cc>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1d2      	bne.n	8005df6 <_dtoa_r+0x36e>
 8005e50:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e54:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005e58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8087 	beq.w	8005f6e <_dtoa_r+0x4e6>
 8005e60:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e64:	2200      	movs	r2, #0
 8005e66:	4b6f      	ldr	r3, [pc, #444]	; (8006024 <_dtoa_r+0x59c>)
 8005e68:	f7fa fda8 	bl	80009bc <__aeabi_dcmplt>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d07e      	beq.n	8005f6e <_dtoa_r+0x4e6>
 8005e70:	9b08      	ldr	r3, [sp, #32]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d07b      	beq.n	8005f6e <_dtoa_r+0x4e6>
 8005e76:	9b06      	ldr	r3, [sp, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	dd38      	ble.n	8005eee <_dtoa_r+0x466>
 8005e7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e80:	2200      	movs	r2, #0
 8005e82:	4b69      	ldr	r3, [pc, #420]	; (8006028 <_dtoa_r+0x5a0>)
 8005e84:	f7fa fb28 	bl	80004d8 <__aeabi_dmul>
 8005e88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e8c:	9c06      	ldr	r4, [sp, #24]
 8005e8e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005e92:	3701      	adds	r7, #1
 8005e94:	4638      	mov	r0, r7
 8005e96:	f7fa fab5 	bl	8000404 <__aeabi_i2d>
 8005e9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e9e:	f7fa fb1b 	bl	80004d8 <__aeabi_dmul>
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	4b61      	ldr	r3, [pc, #388]	; (800602c <_dtoa_r+0x5a4>)
 8005ea6:	f7fa f961 	bl	800016c <__adddf3>
 8005eaa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005eae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005eb2:	9611      	str	r6, [sp, #68]	; 0x44
 8005eb4:	2c00      	cmp	r4, #0
 8005eb6:	d15d      	bne.n	8005f74 <_dtoa_r+0x4ec>
 8005eb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4b5c      	ldr	r3, [pc, #368]	; (8006030 <_dtoa_r+0x5a8>)
 8005ec0:	f7fa f952 	bl	8000168 <__aeabi_dsub>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ecc:	4633      	mov	r3, r6
 8005ece:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ed0:	f7fa fd92 	bl	80009f8 <__aeabi_dcmpgt>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	f040 8295 	bne.w	8006404 <_dtoa_r+0x97c>
 8005eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ede:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ee0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005ee4:	f7fa fd6a 	bl	80009bc <__aeabi_dcmplt>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	f040 8289 	bne.w	8006400 <_dtoa_r+0x978>
 8005eee:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005ef2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ef6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f2c0 8151 	blt.w	80061a0 <_dtoa_r+0x718>
 8005efe:	f1bb 0f0e 	cmp.w	fp, #14
 8005f02:	f300 814d 	bgt.w	80061a0 <_dtoa_r+0x718>
 8005f06:	4b45      	ldr	r3, [pc, #276]	; (800601c <_dtoa_r+0x594>)
 8005f08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f10:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005f14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f280 80da 	bge.w	80060d0 <_dtoa_r+0x648>
 8005f1c:	9b08      	ldr	r3, [sp, #32]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f300 80d6 	bgt.w	80060d0 <_dtoa_r+0x648>
 8005f24:	f040 826b 	bne.w	80063fe <_dtoa_r+0x976>
 8005f28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4b40      	ldr	r3, [pc, #256]	; (8006030 <_dtoa_r+0x5a8>)
 8005f30:	f7fa fad2 	bl	80004d8 <__aeabi_dmul>
 8005f34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f38:	f7fa fd54 	bl	80009e4 <__aeabi_dcmpge>
 8005f3c:	9c08      	ldr	r4, [sp, #32]
 8005f3e:	4626      	mov	r6, r4
 8005f40:	2800      	cmp	r0, #0
 8005f42:	f040 8241 	bne.w	80063c8 <_dtoa_r+0x940>
 8005f46:	2331      	movs	r3, #49	; 0x31
 8005f48:	9f03      	ldr	r7, [sp, #12]
 8005f4a:	f10b 0b01 	add.w	fp, fp, #1
 8005f4e:	f807 3b01 	strb.w	r3, [r7], #1
 8005f52:	e23d      	b.n	80063d0 <_dtoa_r+0x948>
 8005f54:	07e2      	lsls	r2, r4, #31
 8005f56:	d505      	bpl.n	8005f64 <_dtoa_r+0x4dc>
 8005f58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f5c:	f7fa fabc 	bl	80004d8 <__aeabi_dmul>
 8005f60:	2301      	movs	r3, #1
 8005f62:	3701      	adds	r7, #1
 8005f64:	1064      	asrs	r4, r4, #1
 8005f66:	3608      	adds	r6, #8
 8005f68:	e76d      	b.n	8005e46 <_dtoa_r+0x3be>
 8005f6a:	2702      	movs	r7, #2
 8005f6c:	e770      	b.n	8005e50 <_dtoa_r+0x3c8>
 8005f6e:	46d8      	mov	r8, fp
 8005f70:	9c08      	ldr	r4, [sp, #32]
 8005f72:	e78f      	b.n	8005e94 <_dtoa_r+0x40c>
 8005f74:	9903      	ldr	r1, [sp, #12]
 8005f76:	4b29      	ldr	r3, [pc, #164]	; (800601c <_dtoa_r+0x594>)
 8005f78:	4421      	add	r1, r4
 8005f7a:	9112      	str	r1, [sp, #72]	; 0x48
 8005f7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f7e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f82:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005f86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f8a:	2900      	cmp	r1, #0
 8005f8c:	d054      	beq.n	8006038 <_dtoa_r+0x5b0>
 8005f8e:	2000      	movs	r0, #0
 8005f90:	4928      	ldr	r1, [pc, #160]	; (8006034 <_dtoa_r+0x5ac>)
 8005f92:	f7fa fbcb 	bl	800072c <__aeabi_ddiv>
 8005f96:	463b      	mov	r3, r7
 8005f98:	4632      	mov	r2, r6
 8005f9a:	f7fa f8e5 	bl	8000168 <__aeabi_dsub>
 8005f9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fa2:	9f03      	ldr	r7, [sp, #12]
 8005fa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fa8:	f7fa fd46 	bl	8000a38 <__aeabi_d2iz>
 8005fac:	4604      	mov	r4, r0
 8005fae:	f7fa fa29 	bl	8000404 <__aeabi_i2d>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fba:	f7fa f8d5 	bl	8000168 <__aeabi_dsub>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	3430      	adds	r4, #48	; 0x30
 8005fc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fcc:	f807 4b01 	strb.w	r4, [r7], #1
 8005fd0:	f7fa fcf4 	bl	80009bc <__aeabi_dcmplt>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d173      	bne.n	80060c0 <_dtoa_r+0x638>
 8005fd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fdc:	2000      	movs	r0, #0
 8005fde:	4911      	ldr	r1, [pc, #68]	; (8006024 <_dtoa_r+0x59c>)
 8005fe0:	f7fa f8c2 	bl	8000168 <__aeabi_dsub>
 8005fe4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fe8:	f7fa fce8 	bl	80009bc <__aeabi_dcmplt>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	f040 80b6 	bne.w	800615e <_dtoa_r+0x6d6>
 8005ff2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ff4:	429f      	cmp	r7, r3
 8005ff6:	f43f af7a 	beq.w	8005eee <_dtoa_r+0x466>
 8005ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ffe:	2200      	movs	r2, #0
 8006000:	4b09      	ldr	r3, [pc, #36]	; (8006028 <_dtoa_r+0x5a0>)
 8006002:	f7fa fa69 	bl	80004d8 <__aeabi_dmul>
 8006006:	2200      	movs	r2, #0
 8006008:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800600c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006010:	4b05      	ldr	r3, [pc, #20]	; (8006028 <_dtoa_r+0x5a0>)
 8006012:	f7fa fa61 	bl	80004d8 <__aeabi_dmul>
 8006016:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800601a:	e7c3      	b.n	8005fa4 <_dtoa_r+0x51c>
 800601c:	08007be8 	.word	0x08007be8
 8006020:	08007bc0 	.word	0x08007bc0
 8006024:	3ff00000 	.word	0x3ff00000
 8006028:	40240000 	.word	0x40240000
 800602c:	401c0000 	.word	0x401c0000
 8006030:	40140000 	.word	0x40140000
 8006034:	3fe00000 	.word	0x3fe00000
 8006038:	4630      	mov	r0, r6
 800603a:	4639      	mov	r1, r7
 800603c:	f7fa fa4c 	bl	80004d8 <__aeabi_dmul>
 8006040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006042:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006046:	9c03      	ldr	r4, [sp, #12]
 8006048:	9314      	str	r3, [sp, #80]	; 0x50
 800604a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800604e:	f7fa fcf3 	bl	8000a38 <__aeabi_d2iz>
 8006052:	9015      	str	r0, [sp, #84]	; 0x54
 8006054:	f7fa f9d6 	bl	8000404 <__aeabi_i2d>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006060:	f7fa f882 	bl	8000168 <__aeabi_dsub>
 8006064:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006066:	4606      	mov	r6, r0
 8006068:	3330      	adds	r3, #48	; 0x30
 800606a:	f804 3b01 	strb.w	r3, [r4], #1
 800606e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006070:	460f      	mov	r7, r1
 8006072:	429c      	cmp	r4, r3
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	d124      	bne.n	80060c4 <_dtoa_r+0x63c>
 800607a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800607e:	4baf      	ldr	r3, [pc, #700]	; (800633c <_dtoa_r+0x8b4>)
 8006080:	f7fa f874 	bl	800016c <__adddf3>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4630      	mov	r0, r6
 800608a:	4639      	mov	r1, r7
 800608c:	f7fa fcb4 	bl	80009f8 <__aeabi_dcmpgt>
 8006090:	2800      	cmp	r0, #0
 8006092:	d163      	bne.n	800615c <_dtoa_r+0x6d4>
 8006094:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006098:	2000      	movs	r0, #0
 800609a:	49a8      	ldr	r1, [pc, #672]	; (800633c <_dtoa_r+0x8b4>)
 800609c:	f7fa f864 	bl	8000168 <__aeabi_dsub>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4630      	mov	r0, r6
 80060a6:	4639      	mov	r1, r7
 80060a8:	f7fa fc88 	bl	80009bc <__aeabi_dcmplt>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	f43f af1e 	beq.w	8005eee <_dtoa_r+0x466>
 80060b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80060b4:	1e7b      	subs	r3, r7, #1
 80060b6:	9314      	str	r3, [sp, #80]	; 0x50
 80060b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80060bc:	2b30      	cmp	r3, #48	; 0x30
 80060be:	d0f8      	beq.n	80060b2 <_dtoa_r+0x62a>
 80060c0:	46c3      	mov	fp, r8
 80060c2:	e03b      	b.n	800613c <_dtoa_r+0x6b4>
 80060c4:	4b9e      	ldr	r3, [pc, #632]	; (8006340 <_dtoa_r+0x8b8>)
 80060c6:	f7fa fa07 	bl	80004d8 <__aeabi_dmul>
 80060ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060ce:	e7bc      	b.n	800604a <_dtoa_r+0x5c2>
 80060d0:	9f03      	ldr	r7, [sp, #12]
 80060d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80060d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060da:	4640      	mov	r0, r8
 80060dc:	4649      	mov	r1, r9
 80060de:	f7fa fb25 	bl	800072c <__aeabi_ddiv>
 80060e2:	f7fa fca9 	bl	8000a38 <__aeabi_d2iz>
 80060e6:	4604      	mov	r4, r0
 80060e8:	f7fa f98c 	bl	8000404 <__aeabi_i2d>
 80060ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060f0:	f7fa f9f2 	bl	80004d8 <__aeabi_dmul>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4640      	mov	r0, r8
 80060fa:	4649      	mov	r1, r9
 80060fc:	f7fa f834 	bl	8000168 <__aeabi_dsub>
 8006100:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006104:	f807 6b01 	strb.w	r6, [r7], #1
 8006108:	9e03      	ldr	r6, [sp, #12]
 800610a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800610e:	1bbe      	subs	r6, r7, r6
 8006110:	45b4      	cmp	ip, r6
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	d136      	bne.n	8006186 <_dtoa_r+0x6fe>
 8006118:	f7fa f828 	bl	800016c <__adddf3>
 800611c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006120:	4680      	mov	r8, r0
 8006122:	4689      	mov	r9, r1
 8006124:	f7fa fc68 	bl	80009f8 <__aeabi_dcmpgt>
 8006128:	bb58      	cbnz	r0, 8006182 <_dtoa_r+0x6fa>
 800612a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800612e:	4640      	mov	r0, r8
 8006130:	4649      	mov	r1, r9
 8006132:	f7fa fc39 	bl	80009a8 <__aeabi_dcmpeq>
 8006136:	b108      	cbz	r0, 800613c <_dtoa_r+0x6b4>
 8006138:	07e3      	lsls	r3, r4, #31
 800613a:	d422      	bmi.n	8006182 <_dtoa_r+0x6fa>
 800613c:	4651      	mov	r1, sl
 800613e:	4628      	mov	r0, r5
 8006140:	f000 fbc2 	bl	80068c8 <_Bfree>
 8006144:	2300      	movs	r3, #0
 8006146:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006148:	703b      	strb	r3, [r7, #0]
 800614a:	f10b 0301 	add.w	r3, fp, #1
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006152:	2b00      	cmp	r3, #0
 8006154:	f43f ace6 	beq.w	8005b24 <_dtoa_r+0x9c>
 8006158:	601f      	str	r7, [r3, #0]
 800615a:	e4e3      	b.n	8005b24 <_dtoa_r+0x9c>
 800615c:	4627      	mov	r7, r4
 800615e:	463b      	mov	r3, r7
 8006160:	461f      	mov	r7, r3
 8006162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006166:	2a39      	cmp	r2, #57	; 0x39
 8006168:	d107      	bne.n	800617a <_dtoa_r+0x6f2>
 800616a:	9a03      	ldr	r2, [sp, #12]
 800616c:	429a      	cmp	r2, r3
 800616e:	d1f7      	bne.n	8006160 <_dtoa_r+0x6d8>
 8006170:	2230      	movs	r2, #48	; 0x30
 8006172:	9903      	ldr	r1, [sp, #12]
 8006174:	f108 0801 	add.w	r8, r8, #1
 8006178:	700a      	strb	r2, [r1, #0]
 800617a:	781a      	ldrb	r2, [r3, #0]
 800617c:	3201      	adds	r2, #1
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	e79e      	b.n	80060c0 <_dtoa_r+0x638>
 8006182:	46d8      	mov	r8, fp
 8006184:	e7eb      	b.n	800615e <_dtoa_r+0x6d6>
 8006186:	2200      	movs	r2, #0
 8006188:	4b6d      	ldr	r3, [pc, #436]	; (8006340 <_dtoa_r+0x8b8>)
 800618a:	f7fa f9a5 	bl	80004d8 <__aeabi_dmul>
 800618e:	2200      	movs	r2, #0
 8006190:	2300      	movs	r3, #0
 8006192:	4680      	mov	r8, r0
 8006194:	4689      	mov	r9, r1
 8006196:	f7fa fc07 	bl	80009a8 <__aeabi_dcmpeq>
 800619a:	2800      	cmp	r0, #0
 800619c:	d09b      	beq.n	80060d6 <_dtoa_r+0x64e>
 800619e:	e7cd      	b.n	800613c <_dtoa_r+0x6b4>
 80061a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061a2:	2a00      	cmp	r2, #0
 80061a4:	f000 80c4 	beq.w	8006330 <_dtoa_r+0x8a8>
 80061a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80061aa:	2a01      	cmp	r2, #1
 80061ac:	f300 80a8 	bgt.w	8006300 <_dtoa_r+0x878>
 80061b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80061b2:	2a00      	cmp	r2, #0
 80061b4:	f000 80a0 	beq.w	80062f8 <_dtoa_r+0x870>
 80061b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061bc:	464f      	mov	r7, r9
 80061be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061c2:	2101      	movs	r1, #1
 80061c4:	441a      	add	r2, r3
 80061c6:	4628      	mov	r0, r5
 80061c8:	4499      	add	r9, r3
 80061ca:	9209      	str	r2, [sp, #36]	; 0x24
 80061cc:	f000 fc32 	bl	8006a34 <__i2b>
 80061d0:	4606      	mov	r6, r0
 80061d2:	b15f      	cbz	r7, 80061ec <_dtoa_r+0x764>
 80061d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	dd08      	ble.n	80061ec <_dtoa_r+0x764>
 80061da:	42bb      	cmp	r3, r7
 80061dc:	bfa8      	it	ge
 80061de:	463b      	movge	r3, r7
 80061e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061e2:	eba9 0903 	sub.w	r9, r9, r3
 80061e6:	1aff      	subs	r7, r7, r3
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	9309      	str	r3, [sp, #36]	; 0x24
 80061ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ee:	b1f3      	cbz	r3, 800622e <_dtoa_r+0x7a6>
 80061f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 80a0 	beq.w	8006338 <_dtoa_r+0x8b0>
 80061f8:	2c00      	cmp	r4, #0
 80061fa:	dd10      	ble.n	800621e <_dtoa_r+0x796>
 80061fc:	4631      	mov	r1, r6
 80061fe:	4622      	mov	r2, r4
 8006200:	4628      	mov	r0, r5
 8006202:	f000 fcd5 	bl	8006bb0 <__pow5mult>
 8006206:	4652      	mov	r2, sl
 8006208:	4601      	mov	r1, r0
 800620a:	4606      	mov	r6, r0
 800620c:	4628      	mov	r0, r5
 800620e:	f000 fc27 	bl	8006a60 <__multiply>
 8006212:	4680      	mov	r8, r0
 8006214:	4651      	mov	r1, sl
 8006216:	4628      	mov	r0, r5
 8006218:	f000 fb56 	bl	80068c8 <_Bfree>
 800621c:	46c2      	mov	sl, r8
 800621e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006220:	1b1a      	subs	r2, r3, r4
 8006222:	d004      	beq.n	800622e <_dtoa_r+0x7a6>
 8006224:	4651      	mov	r1, sl
 8006226:	4628      	mov	r0, r5
 8006228:	f000 fcc2 	bl	8006bb0 <__pow5mult>
 800622c:	4682      	mov	sl, r0
 800622e:	2101      	movs	r1, #1
 8006230:	4628      	mov	r0, r5
 8006232:	f000 fbff 	bl	8006a34 <__i2b>
 8006236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006238:	4604      	mov	r4, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	f340 8082 	ble.w	8006344 <_dtoa_r+0x8bc>
 8006240:	461a      	mov	r2, r3
 8006242:	4601      	mov	r1, r0
 8006244:	4628      	mov	r0, r5
 8006246:	f000 fcb3 	bl	8006bb0 <__pow5mult>
 800624a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800624c:	4604      	mov	r4, r0
 800624e:	2b01      	cmp	r3, #1
 8006250:	dd7b      	ble.n	800634a <_dtoa_r+0x8c2>
 8006252:	f04f 0800 	mov.w	r8, #0
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800625c:	6918      	ldr	r0, [r3, #16]
 800625e:	f000 fb9b 	bl	8006998 <__hi0bits>
 8006262:	f1c0 0020 	rsb	r0, r0, #32
 8006266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006268:	4418      	add	r0, r3
 800626a:	f010 001f 	ands.w	r0, r0, #31
 800626e:	f000 8092 	beq.w	8006396 <_dtoa_r+0x90e>
 8006272:	f1c0 0320 	rsb	r3, r0, #32
 8006276:	2b04      	cmp	r3, #4
 8006278:	f340 8085 	ble.w	8006386 <_dtoa_r+0x8fe>
 800627c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800627e:	f1c0 001c 	rsb	r0, r0, #28
 8006282:	4403      	add	r3, r0
 8006284:	4481      	add	r9, r0
 8006286:	4407      	add	r7, r0
 8006288:	9309      	str	r3, [sp, #36]	; 0x24
 800628a:	f1b9 0f00 	cmp.w	r9, #0
 800628e:	dd05      	ble.n	800629c <_dtoa_r+0x814>
 8006290:	4651      	mov	r1, sl
 8006292:	464a      	mov	r2, r9
 8006294:	4628      	mov	r0, r5
 8006296:	f000 fce5 	bl	8006c64 <__lshift>
 800629a:	4682      	mov	sl, r0
 800629c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629e:	2b00      	cmp	r3, #0
 80062a0:	dd05      	ble.n	80062ae <_dtoa_r+0x826>
 80062a2:	4621      	mov	r1, r4
 80062a4:	461a      	mov	r2, r3
 80062a6:	4628      	mov	r0, r5
 80062a8:	f000 fcdc 	bl	8006c64 <__lshift>
 80062ac:	4604      	mov	r4, r0
 80062ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d072      	beq.n	800639a <_dtoa_r+0x912>
 80062b4:	4621      	mov	r1, r4
 80062b6:	4650      	mov	r0, sl
 80062b8:	f000 fd40 	bl	8006d3c <__mcmp>
 80062bc:	2800      	cmp	r0, #0
 80062be:	da6c      	bge.n	800639a <_dtoa_r+0x912>
 80062c0:	2300      	movs	r3, #0
 80062c2:	4651      	mov	r1, sl
 80062c4:	220a      	movs	r2, #10
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 fb20 	bl	800690c <__multadd>
 80062cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ce:	4682      	mov	sl, r0
 80062d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 81ac 	beq.w	8006632 <_dtoa_r+0xbaa>
 80062da:	2300      	movs	r3, #0
 80062dc:	4631      	mov	r1, r6
 80062de:	220a      	movs	r2, #10
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 fb13 	bl	800690c <__multadd>
 80062e6:	9b06      	ldr	r3, [sp, #24]
 80062e8:	4606      	mov	r6, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f300 8093 	bgt.w	8006416 <_dtoa_r+0x98e>
 80062f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	dc59      	bgt.n	80063aa <_dtoa_r+0x922>
 80062f6:	e08e      	b.n	8006416 <_dtoa_r+0x98e>
 80062f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80062fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062fe:	e75d      	b.n	80061bc <_dtoa_r+0x734>
 8006300:	9b08      	ldr	r3, [sp, #32]
 8006302:	1e5c      	subs	r4, r3, #1
 8006304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006306:	42a3      	cmp	r3, r4
 8006308:	bfbf      	itttt	lt
 800630a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800630c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800630e:	1ae3      	sublt	r3, r4, r3
 8006310:	18d2      	addlt	r2, r2, r3
 8006312:	bfa8      	it	ge
 8006314:	1b1c      	subge	r4, r3, r4
 8006316:	9b08      	ldr	r3, [sp, #32]
 8006318:	bfbe      	ittt	lt
 800631a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800631c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800631e:	2400      	movlt	r4, #0
 8006320:	2b00      	cmp	r3, #0
 8006322:	bfb5      	itete	lt
 8006324:	eba9 0703 	sublt.w	r7, r9, r3
 8006328:	464f      	movge	r7, r9
 800632a:	2300      	movlt	r3, #0
 800632c:	9b08      	ldrge	r3, [sp, #32]
 800632e:	e747      	b.n	80061c0 <_dtoa_r+0x738>
 8006330:	464f      	mov	r7, r9
 8006332:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006334:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006336:	e74c      	b.n	80061d2 <_dtoa_r+0x74a>
 8006338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800633a:	e773      	b.n	8006224 <_dtoa_r+0x79c>
 800633c:	3fe00000 	.word	0x3fe00000
 8006340:	40240000 	.word	0x40240000
 8006344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006346:	2b01      	cmp	r3, #1
 8006348:	dc18      	bgt.n	800637c <_dtoa_r+0x8f4>
 800634a:	9b04      	ldr	r3, [sp, #16]
 800634c:	b9b3      	cbnz	r3, 800637c <_dtoa_r+0x8f4>
 800634e:	9b05      	ldr	r3, [sp, #20]
 8006350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006354:	b993      	cbnz	r3, 800637c <_dtoa_r+0x8f4>
 8006356:	9b05      	ldr	r3, [sp, #20]
 8006358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800635c:	0d1b      	lsrs	r3, r3, #20
 800635e:	051b      	lsls	r3, r3, #20
 8006360:	b17b      	cbz	r3, 8006382 <_dtoa_r+0x8fa>
 8006362:	f04f 0801 	mov.w	r8, #1
 8006366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006368:	f109 0901 	add.w	r9, r9, #1
 800636c:	3301      	adds	r3, #1
 800636e:	9309      	str	r3, [sp, #36]	; 0x24
 8006370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006372:	2b00      	cmp	r3, #0
 8006374:	f47f af6f 	bne.w	8006256 <_dtoa_r+0x7ce>
 8006378:	2001      	movs	r0, #1
 800637a:	e774      	b.n	8006266 <_dtoa_r+0x7de>
 800637c:	f04f 0800 	mov.w	r8, #0
 8006380:	e7f6      	b.n	8006370 <_dtoa_r+0x8e8>
 8006382:	4698      	mov	r8, r3
 8006384:	e7f4      	b.n	8006370 <_dtoa_r+0x8e8>
 8006386:	d080      	beq.n	800628a <_dtoa_r+0x802>
 8006388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800638a:	331c      	adds	r3, #28
 800638c:	441a      	add	r2, r3
 800638e:	4499      	add	r9, r3
 8006390:	441f      	add	r7, r3
 8006392:	9209      	str	r2, [sp, #36]	; 0x24
 8006394:	e779      	b.n	800628a <_dtoa_r+0x802>
 8006396:	4603      	mov	r3, r0
 8006398:	e7f6      	b.n	8006388 <_dtoa_r+0x900>
 800639a:	9b08      	ldr	r3, [sp, #32]
 800639c:	2b00      	cmp	r3, #0
 800639e:	dc34      	bgt.n	800640a <_dtoa_r+0x982>
 80063a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	dd31      	ble.n	800640a <_dtoa_r+0x982>
 80063a6:	9b08      	ldr	r3, [sp, #32]
 80063a8:	9306      	str	r3, [sp, #24]
 80063aa:	9b06      	ldr	r3, [sp, #24]
 80063ac:	b963      	cbnz	r3, 80063c8 <_dtoa_r+0x940>
 80063ae:	4621      	mov	r1, r4
 80063b0:	2205      	movs	r2, #5
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 faaa 	bl	800690c <__multadd>
 80063b8:	4601      	mov	r1, r0
 80063ba:	4604      	mov	r4, r0
 80063bc:	4650      	mov	r0, sl
 80063be:	f000 fcbd 	bl	8006d3c <__mcmp>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	f73f adbf 	bgt.w	8005f46 <_dtoa_r+0x4be>
 80063c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063ca:	9f03      	ldr	r7, [sp, #12]
 80063cc:	ea6f 0b03 	mvn.w	fp, r3
 80063d0:	f04f 0800 	mov.w	r8, #0
 80063d4:	4621      	mov	r1, r4
 80063d6:	4628      	mov	r0, r5
 80063d8:	f000 fa76 	bl	80068c8 <_Bfree>
 80063dc:	2e00      	cmp	r6, #0
 80063de:	f43f aead 	beq.w	800613c <_dtoa_r+0x6b4>
 80063e2:	f1b8 0f00 	cmp.w	r8, #0
 80063e6:	d005      	beq.n	80063f4 <_dtoa_r+0x96c>
 80063e8:	45b0      	cmp	r8, r6
 80063ea:	d003      	beq.n	80063f4 <_dtoa_r+0x96c>
 80063ec:	4641      	mov	r1, r8
 80063ee:	4628      	mov	r0, r5
 80063f0:	f000 fa6a 	bl	80068c8 <_Bfree>
 80063f4:	4631      	mov	r1, r6
 80063f6:	4628      	mov	r0, r5
 80063f8:	f000 fa66 	bl	80068c8 <_Bfree>
 80063fc:	e69e      	b.n	800613c <_dtoa_r+0x6b4>
 80063fe:	2400      	movs	r4, #0
 8006400:	4626      	mov	r6, r4
 8006402:	e7e1      	b.n	80063c8 <_dtoa_r+0x940>
 8006404:	46c3      	mov	fp, r8
 8006406:	4626      	mov	r6, r4
 8006408:	e59d      	b.n	8005f46 <_dtoa_r+0x4be>
 800640a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 80c8 	beq.w	80065a2 <_dtoa_r+0xb1a>
 8006412:	9b08      	ldr	r3, [sp, #32]
 8006414:	9306      	str	r3, [sp, #24]
 8006416:	2f00      	cmp	r7, #0
 8006418:	dd05      	ble.n	8006426 <_dtoa_r+0x99e>
 800641a:	4631      	mov	r1, r6
 800641c:	463a      	mov	r2, r7
 800641e:	4628      	mov	r0, r5
 8006420:	f000 fc20 	bl	8006c64 <__lshift>
 8006424:	4606      	mov	r6, r0
 8006426:	f1b8 0f00 	cmp.w	r8, #0
 800642a:	d05b      	beq.n	80064e4 <_dtoa_r+0xa5c>
 800642c:	4628      	mov	r0, r5
 800642e:	6871      	ldr	r1, [r6, #4]
 8006430:	f000 fa0a 	bl	8006848 <_Balloc>
 8006434:	4607      	mov	r7, r0
 8006436:	b928      	cbnz	r0, 8006444 <_dtoa_r+0x9bc>
 8006438:	4602      	mov	r2, r0
 800643a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800643e:	4b81      	ldr	r3, [pc, #516]	; (8006644 <_dtoa_r+0xbbc>)
 8006440:	f7ff bb36 	b.w	8005ab0 <_dtoa_r+0x28>
 8006444:	6932      	ldr	r2, [r6, #16]
 8006446:	f106 010c 	add.w	r1, r6, #12
 800644a:	3202      	adds	r2, #2
 800644c:	0092      	lsls	r2, r2, #2
 800644e:	300c      	adds	r0, #12
 8006450:	f000 ff9e 	bl	8007390 <memcpy>
 8006454:	2201      	movs	r2, #1
 8006456:	4639      	mov	r1, r7
 8006458:	4628      	mov	r0, r5
 800645a:	f000 fc03 	bl	8006c64 <__lshift>
 800645e:	46b0      	mov	r8, r6
 8006460:	4606      	mov	r6, r0
 8006462:	9b03      	ldr	r3, [sp, #12]
 8006464:	9a03      	ldr	r2, [sp, #12]
 8006466:	3301      	adds	r3, #1
 8006468:	9308      	str	r3, [sp, #32]
 800646a:	9b06      	ldr	r3, [sp, #24]
 800646c:	4413      	add	r3, r2
 800646e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006470:	9b04      	ldr	r3, [sp, #16]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	930a      	str	r3, [sp, #40]	; 0x28
 8006478:	9b08      	ldr	r3, [sp, #32]
 800647a:	4621      	mov	r1, r4
 800647c:	3b01      	subs	r3, #1
 800647e:	4650      	mov	r0, sl
 8006480:	9304      	str	r3, [sp, #16]
 8006482:	f7ff fa78 	bl	8005976 <quorem>
 8006486:	4641      	mov	r1, r8
 8006488:	9006      	str	r0, [sp, #24]
 800648a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800648e:	4650      	mov	r0, sl
 8006490:	f000 fc54 	bl	8006d3c <__mcmp>
 8006494:	4632      	mov	r2, r6
 8006496:	9009      	str	r0, [sp, #36]	; 0x24
 8006498:	4621      	mov	r1, r4
 800649a:	4628      	mov	r0, r5
 800649c:	f000 fc6a 	bl	8006d74 <__mdiff>
 80064a0:	68c2      	ldr	r2, [r0, #12]
 80064a2:	4607      	mov	r7, r0
 80064a4:	bb02      	cbnz	r2, 80064e8 <_dtoa_r+0xa60>
 80064a6:	4601      	mov	r1, r0
 80064a8:	4650      	mov	r0, sl
 80064aa:	f000 fc47 	bl	8006d3c <__mcmp>
 80064ae:	4602      	mov	r2, r0
 80064b0:	4639      	mov	r1, r7
 80064b2:	4628      	mov	r0, r5
 80064b4:	920c      	str	r2, [sp, #48]	; 0x30
 80064b6:	f000 fa07 	bl	80068c8 <_Bfree>
 80064ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064be:	9f08      	ldr	r7, [sp, #32]
 80064c0:	ea43 0102 	orr.w	r1, r3, r2
 80064c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c6:	4319      	orrs	r1, r3
 80064c8:	d110      	bne.n	80064ec <_dtoa_r+0xa64>
 80064ca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064ce:	d029      	beq.n	8006524 <_dtoa_r+0xa9c>
 80064d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	dd02      	ble.n	80064dc <_dtoa_r+0xa54>
 80064d6:	9b06      	ldr	r3, [sp, #24]
 80064d8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80064dc:	9b04      	ldr	r3, [sp, #16]
 80064de:	f883 9000 	strb.w	r9, [r3]
 80064e2:	e777      	b.n	80063d4 <_dtoa_r+0x94c>
 80064e4:	4630      	mov	r0, r6
 80064e6:	e7ba      	b.n	800645e <_dtoa_r+0x9d6>
 80064e8:	2201      	movs	r2, #1
 80064ea:	e7e1      	b.n	80064b0 <_dtoa_r+0xa28>
 80064ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	db04      	blt.n	80064fc <_dtoa_r+0xa74>
 80064f2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80064f4:	430b      	orrs	r3, r1
 80064f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064f8:	430b      	orrs	r3, r1
 80064fa:	d120      	bne.n	800653e <_dtoa_r+0xab6>
 80064fc:	2a00      	cmp	r2, #0
 80064fe:	dded      	ble.n	80064dc <_dtoa_r+0xa54>
 8006500:	4651      	mov	r1, sl
 8006502:	2201      	movs	r2, #1
 8006504:	4628      	mov	r0, r5
 8006506:	f000 fbad 	bl	8006c64 <__lshift>
 800650a:	4621      	mov	r1, r4
 800650c:	4682      	mov	sl, r0
 800650e:	f000 fc15 	bl	8006d3c <__mcmp>
 8006512:	2800      	cmp	r0, #0
 8006514:	dc03      	bgt.n	800651e <_dtoa_r+0xa96>
 8006516:	d1e1      	bne.n	80064dc <_dtoa_r+0xa54>
 8006518:	f019 0f01 	tst.w	r9, #1
 800651c:	d0de      	beq.n	80064dc <_dtoa_r+0xa54>
 800651e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006522:	d1d8      	bne.n	80064d6 <_dtoa_r+0xa4e>
 8006524:	2339      	movs	r3, #57	; 0x39
 8006526:	9a04      	ldr	r2, [sp, #16]
 8006528:	7013      	strb	r3, [r2, #0]
 800652a:	463b      	mov	r3, r7
 800652c:	461f      	mov	r7, r3
 800652e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006532:	3b01      	subs	r3, #1
 8006534:	2a39      	cmp	r2, #57	; 0x39
 8006536:	d06b      	beq.n	8006610 <_dtoa_r+0xb88>
 8006538:	3201      	adds	r2, #1
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	e74a      	b.n	80063d4 <_dtoa_r+0x94c>
 800653e:	2a00      	cmp	r2, #0
 8006540:	dd07      	ble.n	8006552 <_dtoa_r+0xaca>
 8006542:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006546:	d0ed      	beq.n	8006524 <_dtoa_r+0xa9c>
 8006548:	9a04      	ldr	r2, [sp, #16]
 800654a:	f109 0301 	add.w	r3, r9, #1
 800654e:	7013      	strb	r3, [r2, #0]
 8006550:	e740      	b.n	80063d4 <_dtoa_r+0x94c>
 8006552:	9b08      	ldr	r3, [sp, #32]
 8006554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006556:	f803 9c01 	strb.w	r9, [r3, #-1]
 800655a:	4293      	cmp	r3, r2
 800655c:	d042      	beq.n	80065e4 <_dtoa_r+0xb5c>
 800655e:	4651      	mov	r1, sl
 8006560:	2300      	movs	r3, #0
 8006562:	220a      	movs	r2, #10
 8006564:	4628      	mov	r0, r5
 8006566:	f000 f9d1 	bl	800690c <__multadd>
 800656a:	45b0      	cmp	r8, r6
 800656c:	4682      	mov	sl, r0
 800656e:	f04f 0300 	mov.w	r3, #0
 8006572:	f04f 020a 	mov.w	r2, #10
 8006576:	4641      	mov	r1, r8
 8006578:	4628      	mov	r0, r5
 800657a:	d107      	bne.n	800658c <_dtoa_r+0xb04>
 800657c:	f000 f9c6 	bl	800690c <__multadd>
 8006580:	4680      	mov	r8, r0
 8006582:	4606      	mov	r6, r0
 8006584:	9b08      	ldr	r3, [sp, #32]
 8006586:	3301      	adds	r3, #1
 8006588:	9308      	str	r3, [sp, #32]
 800658a:	e775      	b.n	8006478 <_dtoa_r+0x9f0>
 800658c:	f000 f9be 	bl	800690c <__multadd>
 8006590:	4631      	mov	r1, r6
 8006592:	4680      	mov	r8, r0
 8006594:	2300      	movs	r3, #0
 8006596:	220a      	movs	r2, #10
 8006598:	4628      	mov	r0, r5
 800659a:	f000 f9b7 	bl	800690c <__multadd>
 800659e:	4606      	mov	r6, r0
 80065a0:	e7f0      	b.n	8006584 <_dtoa_r+0xafc>
 80065a2:	9b08      	ldr	r3, [sp, #32]
 80065a4:	9306      	str	r3, [sp, #24]
 80065a6:	9f03      	ldr	r7, [sp, #12]
 80065a8:	4621      	mov	r1, r4
 80065aa:	4650      	mov	r0, sl
 80065ac:	f7ff f9e3 	bl	8005976 <quorem>
 80065b0:	9b03      	ldr	r3, [sp, #12]
 80065b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80065b6:	f807 9b01 	strb.w	r9, [r7], #1
 80065ba:	1afa      	subs	r2, r7, r3
 80065bc:	9b06      	ldr	r3, [sp, #24]
 80065be:	4293      	cmp	r3, r2
 80065c0:	dd07      	ble.n	80065d2 <_dtoa_r+0xb4a>
 80065c2:	4651      	mov	r1, sl
 80065c4:	2300      	movs	r3, #0
 80065c6:	220a      	movs	r2, #10
 80065c8:	4628      	mov	r0, r5
 80065ca:	f000 f99f 	bl	800690c <__multadd>
 80065ce:	4682      	mov	sl, r0
 80065d0:	e7ea      	b.n	80065a8 <_dtoa_r+0xb20>
 80065d2:	9b06      	ldr	r3, [sp, #24]
 80065d4:	f04f 0800 	mov.w	r8, #0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bfcc      	ite	gt
 80065dc:	461f      	movgt	r7, r3
 80065de:	2701      	movle	r7, #1
 80065e0:	9b03      	ldr	r3, [sp, #12]
 80065e2:	441f      	add	r7, r3
 80065e4:	4651      	mov	r1, sl
 80065e6:	2201      	movs	r2, #1
 80065e8:	4628      	mov	r0, r5
 80065ea:	f000 fb3b 	bl	8006c64 <__lshift>
 80065ee:	4621      	mov	r1, r4
 80065f0:	4682      	mov	sl, r0
 80065f2:	f000 fba3 	bl	8006d3c <__mcmp>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	dc97      	bgt.n	800652a <_dtoa_r+0xaa2>
 80065fa:	d102      	bne.n	8006602 <_dtoa_r+0xb7a>
 80065fc:	f019 0f01 	tst.w	r9, #1
 8006600:	d193      	bne.n	800652a <_dtoa_r+0xaa2>
 8006602:	463b      	mov	r3, r7
 8006604:	461f      	mov	r7, r3
 8006606:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800660a:	2a30      	cmp	r2, #48	; 0x30
 800660c:	d0fa      	beq.n	8006604 <_dtoa_r+0xb7c>
 800660e:	e6e1      	b.n	80063d4 <_dtoa_r+0x94c>
 8006610:	9a03      	ldr	r2, [sp, #12]
 8006612:	429a      	cmp	r2, r3
 8006614:	d18a      	bne.n	800652c <_dtoa_r+0xaa4>
 8006616:	2331      	movs	r3, #49	; 0x31
 8006618:	f10b 0b01 	add.w	fp, fp, #1
 800661c:	e797      	b.n	800654e <_dtoa_r+0xac6>
 800661e:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <_dtoa_r+0xbc0>)
 8006620:	f7ff ba9f 	b.w	8005b62 <_dtoa_r+0xda>
 8006624:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006626:	2b00      	cmp	r3, #0
 8006628:	f47f aa77 	bne.w	8005b1a <_dtoa_r+0x92>
 800662c:	4b07      	ldr	r3, [pc, #28]	; (800664c <_dtoa_r+0xbc4>)
 800662e:	f7ff ba98 	b.w	8005b62 <_dtoa_r+0xda>
 8006632:	9b06      	ldr	r3, [sp, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	dcb6      	bgt.n	80065a6 <_dtoa_r+0xb1e>
 8006638:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800663a:	2b02      	cmp	r3, #2
 800663c:	f73f aeb5 	bgt.w	80063aa <_dtoa_r+0x922>
 8006640:	e7b1      	b.n	80065a6 <_dtoa_r+0xb1e>
 8006642:	bf00      	nop
 8006644:	08007b52 	.word	0x08007b52
 8006648:	08007ab2 	.word	0x08007ab2
 800664c:	08007ad6 	.word	0x08007ad6

08006650 <_free_r>:
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4605      	mov	r5, r0
 8006654:	2900      	cmp	r1, #0
 8006656:	d040      	beq.n	80066da <_free_r+0x8a>
 8006658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800665c:	1f0c      	subs	r4, r1, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	bfb8      	it	lt
 8006662:	18e4      	addlt	r4, r4, r3
 8006664:	f000 f8e4 	bl	8006830 <__malloc_lock>
 8006668:	4a1c      	ldr	r2, [pc, #112]	; (80066dc <_free_r+0x8c>)
 800666a:	6813      	ldr	r3, [r2, #0]
 800666c:	b933      	cbnz	r3, 800667c <_free_r+0x2c>
 800666e:	6063      	str	r3, [r4, #4]
 8006670:	6014      	str	r4, [r2, #0]
 8006672:	4628      	mov	r0, r5
 8006674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006678:	f000 b8e0 	b.w	800683c <__malloc_unlock>
 800667c:	42a3      	cmp	r3, r4
 800667e:	d908      	bls.n	8006692 <_free_r+0x42>
 8006680:	6820      	ldr	r0, [r4, #0]
 8006682:	1821      	adds	r1, r4, r0
 8006684:	428b      	cmp	r3, r1
 8006686:	bf01      	itttt	eq
 8006688:	6819      	ldreq	r1, [r3, #0]
 800668a:	685b      	ldreq	r3, [r3, #4]
 800668c:	1809      	addeq	r1, r1, r0
 800668e:	6021      	streq	r1, [r4, #0]
 8006690:	e7ed      	b.n	800666e <_free_r+0x1e>
 8006692:	461a      	mov	r2, r3
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	b10b      	cbz	r3, 800669c <_free_r+0x4c>
 8006698:	42a3      	cmp	r3, r4
 800669a:	d9fa      	bls.n	8006692 <_free_r+0x42>
 800669c:	6811      	ldr	r1, [r2, #0]
 800669e:	1850      	adds	r0, r2, r1
 80066a0:	42a0      	cmp	r0, r4
 80066a2:	d10b      	bne.n	80066bc <_free_r+0x6c>
 80066a4:	6820      	ldr	r0, [r4, #0]
 80066a6:	4401      	add	r1, r0
 80066a8:	1850      	adds	r0, r2, r1
 80066aa:	4283      	cmp	r3, r0
 80066ac:	6011      	str	r1, [r2, #0]
 80066ae:	d1e0      	bne.n	8006672 <_free_r+0x22>
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	4408      	add	r0, r1
 80066b6:	6010      	str	r0, [r2, #0]
 80066b8:	6053      	str	r3, [r2, #4]
 80066ba:	e7da      	b.n	8006672 <_free_r+0x22>
 80066bc:	d902      	bls.n	80066c4 <_free_r+0x74>
 80066be:	230c      	movs	r3, #12
 80066c0:	602b      	str	r3, [r5, #0]
 80066c2:	e7d6      	b.n	8006672 <_free_r+0x22>
 80066c4:	6820      	ldr	r0, [r4, #0]
 80066c6:	1821      	adds	r1, r4, r0
 80066c8:	428b      	cmp	r3, r1
 80066ca:	bf01      	itttt	eq
 80066cc:	6819      	ldreq	r1, [r3, #0]
 80066ce:	685b      	ldreq	r3, [r3, #4]
 80066d0:	1809      	addeq	r1, r1, r0
 80066d2:	6021      	streq	r1, [r4, #0]
 80066d4:	6063      	str	r3, [r4, #4]
 80066d6:	6054      	str	r4, [r2, #4]
 80066d8:	e7cb      	b.n	8006672 <_free_r+0x22>
 80066da:	bd38      	pop	{r3, r4, r5, pc}
 80066dc:	200004d0 	.word	0x200004d0

080066e0 <malloc>:
 80066e0:	4b02      	ldr	r3, [pc, #8]	; (80066ec <malloc+0xc>)
 80066e2:	4601      	mov	r1, r0
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f000 b823 	b.w	8006730 <_malloc_r>
 80066ea:	bf00      	nop
 80066ec:	20000068 	.word	0x20000068

080066f0 <sbrk_aligned>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	4e0e      	ldr	r6, [pc, #56]	; (800672c <sbrk_aligned+0x3c>)
 80066f4:	460c      	mov	r4, r1
 80066f6:	6831      	ldr	r1, [r6, #0]
 80066f8:	4605      	mov	r5, r0
 80066fa:	b911      	cbnz	r1, 8006702 <sbrk_aligned+0x12>
 80066fc:	f000 fe38 	bl	8007370 <_sbrk_r>
 8006700:	6030      	str	r0, [r6, #0]
 8006702:	4621      	mov	r1, r4
 8006704:	4628      	mov	r0, r5
 8006706:	f000 fe33 	bl	8007370 <_sbrk_r>
 800670a:	1c43      	adds	r3, r0, #1
 800670c:	d00a      	beq.n	8006724 <sbrk_aligned+0x34>
 800670e:	1cc4      	adds	r4, r0, #3
 8006710:	f024 0403 	bic.w	r4, r4, #3
 8006714:	42a0      	cmp	r0, r4
 8006716:	d007      	beq.n	8006728 <sbrk_aligned+0x38>
 8006718:	1a21      	subs	r1, r4, r0
 800671a:	4628      	mov	r0, r5
 800671c:	f000 fe28 	bl	8007370 <_sbrk_r>
 8006720:	3001      	adds	r0, #1
 8006722:	d101      	bne.n	8006728 <sbrk_aligned+0x38>
 8006724:	f04f 34ff 	mov.w	r4, #4294967295
 8006728:	4620      	mov	r0, r4
 800672a:	bd70      	pop	{r4, r5, r6, pc}
 800672c:	200004d4 	.word	0x200004d4

08006730 <_malloc_r>:
 8006730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006734:	1ccd      	adds	r5, r1, #3
 8006736:	f025 0503 	bic.w	r5, r5, #3
 800673a:	3508      	adds	r5, #8
 800673c:	2d0c      	cmp	r5, #12
 800673e:	bf38      	it	cc
 8006740:	250c      	movcc	r5, #12
 8006742:	2d00      	cmp	r5, #0
 8006744:	4607      	mov	r7, r0
 8006746:	db01      	blt.n	800674c <_malloc_r+0x1c>
 8006748:	42a9      	cmp	r1, r5
 800674a:	d905      	bls.n	8006758 <_malloc_r+0x28>
 800674c:	230c      	movs	r3, #12
 800674e:	2600      	movs	r6, #0
 8006750:	603b      	str	r3, [r7, #0]
 8006752:	4630      	mov	r0, r6
 8006754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006758:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800682c <_malloc_r+0xfc>
 800675c:	f000 f868 	bl	8006830 <__malloc_lock>
 8006760:	f8d8 3000 	ldr.w	r3, [r8]
 8006764:	461c      	mov	r4, r3
 8006766:	bb5c      	cbnz	r4, 80067c0 <_malloc_r+0x90>
 8006768:	4629      	mov	r1, r5
 800676a:	4638      	mov	r0, r7
 800676c:	f7ff ffc0 	bl	80066f0 <sbrk_aligned>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	4604      	mov	r4, r0
 8006774:	d155      	bne.n	8006822 <_malloc_r+0xf2>
 8006776:	f8d8 4000 	ldr.w	r4, [r8]
 800677a:	4626      	mov	r6, r4
 800677c:	2e00      	cmp	r6, #0
 800677e:	d145      	bne.n	800680c <_malloc_r+0xdc>
 8006780:	2c00      	cmp	r4, #0
 8006782:	d048      	beq.n	8006816 <_malloc_r+0xe6>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	4631      	mov	r1, r6
 8006788:	4638      	mov	r0, r7
 800678a:	eb04 0903 	add.w	r9, r4, r3
 800678e:	f000 fdef 	bl	8007370 <_sbrk_r>
 8006792:	4581      	cmp	r9, r0
 8006794:	d13f      	bne.n	8006816 <_malloc_r+0xe6>
 8006796:	6821      	ldr	r1, [r4, #0]
 8006798:	4638      	mov	r0, r7
 800679a:	1a6d      	subs	r5, r5, r1
 800679c:	4629      	mov	r1, r5
 800679e:	f7ff ffa7 	bl	80066f0 <sbrk_aligned>
 80067a2:	3001      	adds	r0, #1
 80067a4:	d037      	beq.n	8006816 <_malloc_r+0xe6>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	442b      	add	r3, r5
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	f8d8 3000 	ldr.w	r3, [r8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d038      	beq.n	8006826 <_malloc_r+0xf6>
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	42a2      	cmp	r2, r4
 80067b8:	d12b      	bne.n	8006812 <_malloc_r+0xe2>
 80067ba:	2200      	movs	r2, #0
 80067bc:	605a      	str	r2, [r3, #4]
 80067be:	e00f      	b.n	80067e0 <_malloc_r+0xb0>
 80067c0:	6822      	ldr	r2, [r4, #0]
 80067c2:	1b52      	subs	r2, r2, r5
 80067c4:	d41f      	bmi.n	8006806 <_malloc_r+0xd6>
 80067c6:	2a0b      	cmp	r2, #11
 80067c8:	d917      	bls.n	80067fa <_malloc_r+0xca>
 80067ca:	1961      	adds	r1, r4, r5
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	6025      	str	r5, [r4, #0]
 80067d0:	bf18      	it	ne
 80067d2:	6059      	strne	r1, [r3, #4]
 80067d4:	6863      	ldr	r3, [r4, #4]
 80067d6:	bf08      	it	eq
 80067d8:	f8c8 1000 	streq.w	r1, [r8]
 80067dc:	5162      	str	r2, [r4, r5]
 80067de:	604b      	str	r3, [r1, #4]
 80067e0:	4638      	mov	r0, r7
 80067e2:	f104 060b 	add.w	r6, r4, #11
 80067e6:	f000 f829 	bl	800683c <__malloc_unlock>
 80067ea:	f026 0607 	bic.w	r6, r6, #7
 80067ee:	1d23      	adds	r3, r4, #4
 80067f0:	1af2      	subs	r2, r6, r3
 80067f2:	d0ae      	beq.n	8006752 <_malloc_r+0x22>
 80067f4:	1b9b      	subs	r3, r3, r6
 80067f6:	50a3      	str	r3, [r4, r2]
 80067f8:	e7ab      	b.n	8006752 <_malloc_r+0x22>
 80067fa:	42a3      	cmp	r3, r4
 80067fc:	6862      	ldr	r2, [r4, #4]
 80067fe:	d1dd      	bne.n	80067bc <_malloc_r+0x8c>
 8006800:	f8c8 2000 	str.w	r2, [r8]
 8006804:	e7ec      	b.n	80067e0 <_malloc_r+0xb0>
 8006806:	4623      	mov	r3, r4
 8006808:	6864      	ldr	r4, [r4, #4]
 800680a:	e7ac      	b.n	8006766 <_malloc_r+0x36>
 800680c:	4634      	mov	r4, r6
 800680e:	6876      	ldr	r6, [r6, #4]
 8006810:	e7b4      	b.n	800677c <_malloc_r+0x4c>
 8006812:	4613      	mov	r3, r2
 8006814:	e7cc      	b.n	80067b0 <_malloc_r+0x80>
 8006816:	230c      	movs	r3, #12
 8006818:	4638      	mov	r0, r7
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	f000 f80e 	bl	800683c <__malloc_unlock>
 8006820:	e797      	b.n	8006752 <_malloc_r+0x22>
 8006822:	6025      	str	r5, [r4, #0]
 8006824:	e7dc      	b.n	80067e0 <_malloc_r+0xb0>
 8006826:	605b      	str	r3, [r3, #4]
 8006828:	deff      	udf	#255	; 0xff
 800682a:	bf00      	nop
 800682c:	200004d0 	.word	0x200004d0

08006830 <__malloc_lock>:
 8006830:	4801      	ldr	r0, [pc, #4]	; (8006838 <__malloc_lock+0x8>)
 8006832:	f7ff b890 	b.w	8005956 <__retarget_lock_acquire_recursive>
 8006836:	bf00      	nop
 8006838:	200004cc 	.word	0x200004cc

0800683c <__malloc_unlock>:
 800683c:	4801      	ldr	r0, [pc, #4]	; (8006844 <__malloc_unlock+0x8>)
 800683e:	f7ff b88b 	b.w	8005958 <__retarget_lock_release_recursive>
 8006842:	bf00      	nop
 8006844:	200004cc 	.word	0x200004cc

08006848 <_Balloc>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	69c6      	ldr	r6, [r0, #28]
 800684c:	4604      	mov	r4, r0
 800684e:	460d      	mov	r5, r1
 8006850:	b976      	cbnz	r6, 8006870 <_Balloc+0x28>
 8006852:	2010      	movs	r0, #16
 8006854:	f7ff ff44 	bl	80066e0 <malloc>
 8006858:	4602      	mov	r2, r0
 800685a:	61e0      	str	r0, [r4, #28]
 800685c:	b920      	cbnz	r0, 8006868 <_Balloc+0x20>
 800685e:	216b      	movs	r1, #107	; 0x6b
 8006860:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <_Balloc+0x78>)
 8006862:	4818      	ldr	r0, [pc, #96]	; (80068c4 <_Balloc+0x7c>)
 8006864:	f000 fda2 	bl	80073ac <__assert_func>
 8006868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800686c:	6006      	str	r6, [r0, #0]
 800686e:	60c6      	str	r6, [r0, #12]
 8006870:	69e6      	ldr	r6, [r4, #28]
 8006872:	68f3      	ldr	r3, [r6, #12]
 8006874:	b183      	cbz	r3, 8006898 <_Balloc+0x50>
 8006876:	69e3      	ldr	r3, [r4, #28]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800687e:	b9b8      	cbnz	r0, 80068b0 <_Balloc+0x68>
 8006880:	2101      	movs	r1, #1
 8006882:	fa01 f605 	lsl.w	r6, r1, r5
 8006886:	1d72      	adds	r2, r6, #5
 8006888:	4620      	mov	r0, r4
 800688a:	0092      	lsls	r2, r2, #2
 800688c:	f000 fdac 	bl	80073e8 <_calloc_r>
 8006890:	b160      	cbz	r0, 80068ac <_Balloc+0x64>
 8006892:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006896:	e00e      	b.n	80068b6 <_Balloc+0x6e>
 8006898:	2221      	movs	r2, #33	; 0x21
 800689a:	2104      	movs	r1, #4
 800689c:	4620      	mov	r0, r4
 800689e:	f000 fda3 	bl	80073e8 <_calloc_r>
 80068a2:	69e3      	ldr	r3, [r4, #28]
 80068a4:	60f0      	str	r0, [r6, #12]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e4      	bne.n	8006876 <_Balloc+0x2e>
 80068ac:	2000      	movs	r0, #0
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	6802      	ldr	r2, [r0, #0]
 80068b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068b6:	2300      	movs	r3, #0
 80068b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068bc:	e7f7      	b.n	80068ae <_Balloc+0x66>
 80068be:	bf00      	nop
 80068c0:	08007ae3 	.word	0x08007ae3
 80068c4:	08007b63 	.word	0x08007b63

080068c8 <_Bfree>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	69c6      	ldr	r6, [r0, #28]
 80068cc:	4605      	mov	r5, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	b976      	cbnz	r6, 80068f0 <_Bfree+0x28>
 80068d2:	2010      	movs	r0, #16
 80068d4:	f7ff ff04 	bl	80066e0 <malloc>
 80068d8:	4602      	mov	r2, r0
 80068da:	61e8      	str	r0, [r5, #28]
 80068dc:	b920      	cbnz	r0, 80068e8 <_Bfree+0x20>
 80068de:	218f      	movs	r1, #143	; 0x8f
 80068e0:	4b08      	ldr	r3, [pc, #32]	; (8006904 <_Bfree+0x3c>)
 80068e2:	4809      	ldr	r0, [pc, #36]	; (8006908 <_Bfree+0x40>)
 80068e4:	f000 fd62 	bl	80073ac <__assert_func>
 80068e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068ec:	6006      	str	r6, [r0, #0]
 80068ee:	60c6      	str	r6, [r0, #12]
 80068f0:	b13c      	cbz	r4, 8006902 <_Bfree+0x3a>
 80068f2:	69eb      	ldr	r3, [r5, #28]
 80068f4:	6862      	ldr	r2, [r4, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068fc:	6021      	str	r1, [r4, #0]
 80068fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006902:	bd70      	pop	{r4, r5, r6, pc}
 8006904:	08007ae3 	.word	0x08007ae3
 8006908:	08007b63 	.word	0x08007b63

0800690c <__multadd>:
 800690c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006910:	4607      	mov	r7, r0
 8006912:	460c      	mov	r4, r1
 8006914:	461e      	mov	r6, r3
 8006916:	2000      	movs	r0, #0
 8006918:	690d      	ldr	r5, [r1, #16]
 800691a:	f101 0c14 	add.w	ip, r1, #20
 800691e:	f8dc 3000 	ldr.w	r3, [ip]
 8006922:	3001      	adds	r0, #1
 8006924:	b299      	uxth	r1, r3
 8006926:	fb02 6101 	mla	r1, r2, r1, r6
 800692a:	0c1e      	lsrs	r6, r3, #16
 800692c:	0c0b      	lsrs	r3, r1, #16
 800692e:	fb02 3306 	mla	r3, r2, r6, r3
 8006932:	b289      	uxth	r1, r1
 8006934:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006938:	4285      	cmp	r5, r0
 800693a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800693e:	f84c 1b04 	str.w	r1, [ip], #4
 8006942:	dcec      	bgt.n	800691e <__multadd+0x12>
 8006944:	b30e      	cbz	r6, 800698a <__multadd+0x7e>
 8006946:	68a3      	ldr	r3, [r4, #8]
 8006948:	42ab      	cmp	r3, r5
 800694a:	dc19      	bgt.n	8006980 <__multadd+0x74>
 800694c:	6861      	ldr	r1, [r4, #4]
 800694e:	4638      	mov	r0, r7
 8006950:	3101      	adds	r1, #1
 8006952:	f7ff ff79 	bl	8006848 <_Balloc>
 8006956:	4680      	mov	r8, r0
 8006958:	b928      	cbnz	r0, 8006966 <__multadd+0x5a>
 800695a:	4602      	mov	r2, r0
 800695c:	21ba      	movs	r1, #186	; 0xba
 800695e:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <__multadd+0x84>)
 8006960:	480c      	ldr	r0, [pc, #48]	; (8006994 <__multadd+0x88>)
 8006962:	f000 fd23 	bl	80073ac <__assert_func>
 8006966:	6922      	ldr	r2, [r4, #16]
 8006968:	f104 010c 	add.w	r1, r4, #12
 800696c:	3202      	adds	r2, #2
 800696e:	0092      	lsls	r2, r2, #2
 8006970:	300c      	adds	r0, #12
 8006972:	f000 fd0d 	bl	8007390 <memcpy>
 8006976:	4621      	mov	r1, r4
 8006978:	4638      	mov	r0, r7
 800697a:	f7ff ffa5 	bl	80068c8 <_Bfree>
 800697e:	4644      	mov	r4, r8
 8006980:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006984:	3501      	adds	r5, #1
 8006986:	615e      	str	r6, [r3, #20]
 8006988:	6125      	str	r5, [r4, #16]
 800698a:	4620      	mov	r0, r4
 800698c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006990:	08007b52 	.word	0x08007b52
 8006994:	08007b63 	.word	0x08007b63

08006998 <__hi0bits>:
 8006998:	0c02      	lsrs	r2, r0, #16
 800699a:	0412      	lsls	r2, r2, #16
 800699c:	4603      	mov	r3, r0
 800699e:	b9ca      	cbnz	r2, 80069d4 <__hi0bits+0x3c>
 80069a0:	0403      	lsls	r3, r0, #16
 80069a2:	2010      	movs	r0, #16
 80069a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80069a8:	bf04      	itt	eq
 80069aa:	021b      	lsleq	r3, r3, #8
 80069ac:	3008      	addeq	r0, #8
 80069ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80069b2:	bf04      	itt	eq
 80069b4:	011b      	lsleq	r3, r3, #4
 80069b6:	3004      	addeq	r0, #4
 80069b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80069bc:	bf04      	itt	eq
 80069be:	009b      	lsleq	r3, r3, #2
 80069c0:	3002      	addeq	r0, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	db05      	blt.n	80069d2 <__hi0bits+0x3a>
 80069c6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80069ca:	f100 0001 	add.w	r0, r0, #1
 80069ce:	bf08      	it	eq
 80069d0:	2020      	moveq	r0, #32
 80069d2:	4770      	bx	lr
 80069d4:	2000      	movs	r0, #0
 80069d6:	e7e5      	b.n	80069a4 <__hi0bits+0xc>

080069d8 <__lo0bits>:
 80069d8:	6803      	ldr	r3, [r0, #0]
 80069da:	4602      	mov	r2, r0
 80069dc:	f013 0007 	ands.w	r0, r3, #7
 80069e0:	d00b      	beq.n	80069fa <__lo0bits+0x22>
 80069e2:	07d9      	lsls	r1, r3, #31
 80069e4:	d421      	bmi.n	8006a2a <__lo0bits+0x52>
 80069e6:	0798      	lsls	r0, r3, #30
 80069e8:	bf49      	itett	mi
 80069ea:	085b      	lsrmi	r3, r3, #1
 80069ec:	089b      	lsrpl	r3, r3, #2
 80069ee:	2001      	movmi	r0, #1
 80069f0:	6013      	strmi	r3, [r2, #0]
 80069f2:	bf5c      	itt	pl
 80069f4:	2002      	movpl	r0, #2
 80069f6:	6013      	strpl	r3, [r2, #0]
 80069f8:	4770      	bx	lr
 80069fa:	b299      	uxth	r1, r3
 80069fc:	b909      	cbnz	r1, 8006a02 <__lo0bits+0x2a>
 80069fe:	2010      	movs	r0, #16
 8006a00:	0c1b      	lsrs	r3, r3, #16
 8006a02:	b2d9      	uxtb	r1, r3
 8006a04:	b909      	cbnz	r1, 8006a0a <__lo0bits+0x32>
 8006a06:	3008      	adds	r0, #8
 8006a08:	0a1b      	lsrs	r3, r3, #8
 8006a0a:	0719      	lsls	r1, r3, #28
 8006a0c:	bf04      	itt	eq
 8006a0e:	091b      	lsreq	r3, r3, #4
 8006a10:	3004      	addeq	r0, #4
 8006a12:	0799      	lsls	r1, r3, #30
 8006a14:	bf04      	itt	eq
 8006a16:	089b      	lsreq	r3, r3, #2
 8006a18:	3002      	addeq	r0, #2
 8006a1a:	07d9      	lsls	r1, r3, #31
 8006a1c:	d403      	bmi.n	8006a26 <__lo0bits+0x4e>
 8006a1e:	085b      	lsrs	r3, r3, #1
 8006a20:	f100 0001 	add.w	r0, r0, #1
 8006a24:	d003      	beq.n	8006a2e <__lo0bits+0x56>
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	4770      	bx	lr
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	4770      	bx	lr
 8006a2e:	2020      	movs	r0, #32
 8006a30:	4770      	bx	lr
	...

08006a34 <__i2b>:
 8006a34:	b510      	push	{r4, lr}
 8006a36:	460c      	mov	r4, r1
 8006a38:	2101      	movs	r1, #1
 8006a3a:	f7ff ff05 	bl	8006848 <_Balloc>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	b928      	cbnz	r0, 8006a4e <__i2b+0x1a>
 8006a42:	f240 1145 	movw	r1, #325	; 0x145
 8006a46:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <__i2b+0x24>)
 8006a48:	4804      	ldr	r0, [pc, #16]	; (8006a5c <__i2b+0x28>)
 8006a4a:	f000 fcaf 	bl	80073ac <__assert_func>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	6144      	str	r4, [r0, #20]
 8006a52:	6103      	str	r3, [r0, #16]
 8006a54:	bd10      	pop	{r4, pc}
 8006a56:	bf00      	nop
 8006a58:	08007b52 	.word	0x08007b52
 8006a5c:	08007b63 	.word	0x08007b63

08006a60 <__multiply>:
 8006a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a64:	4691      	mov	r9, r2
 8006a66:	690a      	ldr	r2, [r1, #16]
 8006a68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	bfbe      	ittt	lt
 8006a72:	460b      	movlt	r3, r1
 8006a74:	464c      	movlt	r4, r9
 8006a76:	4699      	movlt	r9, r3
 8006a78:	6927      	ldr	r7, [r4, #16]
 8006a7a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a7e:	68a3      	ldr	r3, [r4, #8]
 8006a80:	6861      	ldr	r1, [r4, #4]
 8006a82:	eb07 060a 	add.w	r6, r7, sl
 8006a86:	42b3      	cmp	r3, r6
 8006a88:	b085      	sub	sp, #20
 8006a8a:	bfb8      	it	lt
 8006a8c:	3101      	addlt	r1, #1
 8006a8e:	f7ff fedb 	bl	8006848 <_Balloc>
 8006a92:	b930      	cbnz	r0, 8006aa2 <__multiply+0x42>
 8006a94:	4602      	mov	r2, r0
 8006a96:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006a9a:	4b43      	ldr	r3, [pc, #268]	; (8006ba8 <__multiply+0x148>)
 8006a9c:	4843      	ldr	r0, [pc, #268]	; (8006bac <__multiply+0x14c>)
 8006a9e:	f000 fc85 	bl	80073ac <__assert_func>
 8006aa2:	f100 0514 	add.w	r5, r0, #20
 8006aa6:	462b      	mov	r3, r5
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006aae:	4543      	cmp	r3, r8
 8006ab0:	d321      	bcc.n	8006af6 <__multiply+0x96>
 8006ab2:	f104 0314 	add.w	r3, r4, #20
 8006ab6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006aba:	f109 0314 	add.w	r3, r9, #20
 8006abe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ac2:	9202      	str	r2, [sp, #8]
 8006ac4:	1b3a      	subs	r2, r7, r4
 8006ac6:	3a15      	subs	r2, #21
 8006ac8:	f022 0203 	bic.w	r2, r2, #3
 8006acc:	3204      	adds	r2, #4
 8006ace:	f104 0115 	add.w	r1, r4, #21
 8006ad2:	428f      	cmp	r7, r1
 8006ad4:	bf38      	it	cc
 8006ad6:	2204      	movcc	r2, #4
 8006ad8:	9201      	str	r2, [sp, #4]
 8006ada:	9a02      	ldr	r2, [sp, #8]
 8006adc:	9303      	str	r3, [sp, #12]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d80c      	bhi.n	8006afc <__multiply+0x9c>
 8006ae2:	2e00      	cmp	r6, #0
 8006ae4:	dd03      	ble.n	8006aee <__multiply+0x8e>
 8006ae6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d05a      	beq.n	8006ba4 <__multiply+0x144>
 8006aee:	6106      	str	r6, [r0, #16]
 8006af0:	b005      	add	sp, #20
 8006af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af6:	f843 2b04 	str.w	r2, [r3], #4
 8006afa:	e7d8      	b.n	8006aae <__multiply+0x4e>
 8006afc:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b00:	f1ba 0f00 	cmp.w	sl, #0
 8006b04:	d023      	beq.n	8006b4e <__multiply+0xee>
 8006b06:	46a9      	mov	r9, r5
 8006b08:	f04f 0c00 	mov.w	ip, #0
 8006b0c:	f104 0e14 	add.w	lr, r4, #20
 8006b10:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b14:	f8d9 1000 	ldr.w	r1, [r9]
 8006b18:	fa1f fb82 	uxth.w	fp, r2
 8006b1c:	b289      	uxth	r1, r1
 8006b1e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b22:	4461      	add	r1, ip
 8006b24:	f8d9 c000 	ldr.w	ip, [r9]
 8006b28:	0c12      	lsrs	r2, r2, #16
 8006b2a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006b2e:	fb0a c202 	mla	r2, sl, r2, ip
 8006b32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b36:	b289      	uxth	r1, r1
 8006b38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b3c:	4577      	cmp	r7, lr
 8006b3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b42:	f849 1b04 	str.w	r1, [r9], #4
 8006b46:	d8e3      	bhi.n	8006b10 <__multiply+0xb0>
 8006b48:	9a01      	ldr	r2, [sp, #4]
 8006b4a:	f845 c002 	str.w	ip, [r5, r2]
 8006b4e:	9a03      	ldr	r2, [sp, #12]
 8006b50:	3304      	adds	r3, #4
 8006b52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b56:	f1b9 0f00 	cmp.w	r9, #0
 8006b5a:	d021      	beq.n	8006ba0 <__multiply+0x140>
 8006b5c:	46ae      	mov	lr, r5
 8006b5e:	f04f 0a00 	mov.w	sl, #0
 8006b62:	6829      	ldr	r1, [r5, #0]
 8006b64:	f104 0c14 	add.w	ip, r4, #20
 8006b68:	f8bc b000 	ldrh.w	fp, [ip]
 8006b6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b70:	b289      	uxth	r1, r1
 8006b72:	fb09 220b 	mla	r2, r9, fp, r2
 8006b76:	4452      	add	r2, sl
 8006b78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b7c:	f84e 1b04 	str.w	r1, [lr], #4
 8006b80:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b88:	f8be 1000 	ldrh.w	r1, [lr]
 8006b8c:	4567      	cmp	r7, ip
 8006b8e:	fb09 110a 	mla	r1, r9, sl, r1
 8006b92:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006b96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b9a:	d8e5      	bhi.n	8006b68 <__multiply+0x108>
 8006b9c:	9a01      	ldr	r2, [sp, #4]
 8006b9e:	50a9      	str	r1, [r5, r2]
 8006ba0:	3504      	adds	r5, #4
 8006ba2:	e79a      	b.n	8006ada <__multiply+0x7a>
 8006ba4:	3e01      	subs	r6, #1
 8006ba6:	e79c      	b.n	8006ae2 <__multiply+0x82>
 8006ba8:	08007b52 	.word	0x08007b52
 8006bac:	08007b63 	.word	0x08007b63

08006bb0 <__pow5mult>:
 8006bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb4:	4615      	mov	r5, r2
 8006bb6:	f012 0203 	ands.w	r2, r2, #3
 8006bba:	4606      	mov	r6, r0
 8006bbc:	460f      	mov	r7, r1
 8006bbe:	d007      	beq.n	8006bd0 <__pow5mult+0x20>
 8006bc0:	4c25      	ldr	r4, [pc, #148]	; (8006c58 <__pow5mult+0xa8>)
 8006bc2:	3a01      	subs	r2, #1
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bca:	f7ff fe9f 	bl	800690c <__multadd>
 8006bce:	4607      	mov	r7, r0
 8006bd0:	10ad      	asrs	r5, r5, #2
 8006bd2:	d03d      	beq.n	8006c50 <__pow5mult+0xa0>
 8006bd4:	69f4      	ldr	r4, [r6, #28]
 8006bd6:	b97c      	cbnz	r4, 8006bf8 <__pow5mult+0x48>
 8006bd8:	2010      	movs	r0, #16
 8006bda:	f7ff fd81 	bl	80066e0 <malloc>
 8006bde:	4602      	mov	r2, r0
 8006be0:	61f0      	str	r0, [r6, #28]
 8006be2:	b928      	cbnz	r0, 8006bf0 <__pow5mult+0x40>
 8006be4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006be8:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <__pow5mult+0xac>)
 8006bea:	481d      	ldr	r0, [pc, #116]	; (8006c60 <__pow5mult+0xb0>)
 8006bec:	f000 fbde 	bl	80073ac <__assert_func>
 8006bf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bf4:	6004      	str	r4, [r0, #0]
 8006bf6:	60c4      	str	r4, [r0, #12]
 8006bf8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006bfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c00:	b94c      	cbnz	r4, 8006c16 <__pow5mult+0x66>
 8006c02:	f240 2171 	movw	r1, #625	; 0x271
 8006c06:	4630      	mov	r0, r6
 8006c08:	f7ff ff14 	bl	8006a34 <__i2b>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4604      	mov	r4, r0
 8006c10:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c14:	6003      	str	r3, [r0, #0]
 8006c16:	f04f 0900 	mov.w	r9, #0
 8006c1a:	07eb      	lsls	r3, r5, #31
 8006c1c:	d50a      	bpl.n	8006c34 <__pow5mult+0x84>
 8006c1e:	4639      	mov	r1, r7
 8006c20:	4622      	mov	r2, r4
 8006c22:	4630      	mov	r0, r6
 8006c24:	f7ff ff1c 	bl	8006a60 <__multiply>
 8006c28:	4680      	mov	r8, r0
 8006c2a:	4639      	mov	r1, r7
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	f7ff fe4b 	bl	80068c8 <_Bfree>
 8006c32:	4647      	mov	r7, r8
 8006c34:	106d      	asrs	r5, r5, #1
 8006c36:	d00b      	beq.n	8006c50 <__pow5mult+0xa0>
 8006c38:	6820      	ldr	r0, [r4, #0]
 8006c3a:	b938      	cbnz	r0, 8006c4c <__pow5mult+0x9c>
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4630      	mov	r0, r6
 8006c42:	f7ff ff0d 	bl	8006a60 <__multiply>
 8006c46:	6020      	str	r0, [r4, #0]
 8006c48:	f8c0 9000 	str.w	r9, [r0]
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	e7e4      	b.n	8006c1a <__pow5mult+0x6a>
 8006c50:	4638      	mov	r0, r7
 8006c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c56:	bf00      	nop
 8006c58:	08007cb0 	.word	0x08007cb0
 8006c5c:	08007ae3 	.word	0x08007ae3
 8006c60:	08007b63 	.word	0x08007b63

08006c64 <__lshift>:
 8006c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c68:	460c      	mov	r4, r1
 8006c6a:	4607      	mov	r7, r0
 8006c6c:	4691      	mov	r9, r2
 8006c6e:	6923      	ldr	r3, [r4, #16]
 8006c70:	6849      	ldr	r1, [r1, #4]
 8006c72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c76:	68a3      	ldr	r3, [r4, #8]
 8006c78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c7c:	f108 0601 	add.w	r6, r8, #1
 8006c80:	42b3      	cmp	r3, r6
 8006c82:	db0b      	blt.n	8006c9c <__lshift+0x38>
 8006c84:	4638      	mov	r0, r7
 8006c86:	f7ff fddf 	bl	8006848 <_Balloc>
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	b948      	cbnz	r0, 8006ca2 <__lshift+0x3e>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006c94:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <__lshift+0xd0>)
 8006c96:	4828      	ldr	r0, [pc, #160]	; (8006d38 <__lshift+0xd4>)
 8006c98:	f000 fb88 	bl	80073ac <__assert_func>
 8006c9c:	3101      	adds	r1, #1
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	e7ee      	b.n	8006c80 <__lshift+0x1c>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f100 0114 	add.w	r1, r0, #20
 8006ca8:	f100 0210 	add.w	r2, r0, #16
 8006cac:	4618      	mov	r0, r3
 8006cae:	4553      	cmp	r3, sl
 8006cb0:	db33      	blt.n	8006d1a <__lshift+0xb6>
 8006cb2:	6920      	ldr	r0, [r4, #16]
 8006cb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cb8:	f104 0314 	add.w	r3, r4, #20
 8006cbc:	f019 091f 	ands.w	r9, r9, #31
 8006cc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cc8:	d02b      	beq.n	8006d22 <__lshift+0xbe>
 8006cca:	468a      	mov	sl, r1
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f1c9 0e20 	rsb	lr, r9, #32
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	fa00 f009 	lsl.w	r0, r0, r9
 8006cd8:	4310      	orrs	r0, r2
 8006cda:	f84a 0b04 	str.w	r0, [sl], #4
 8006cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce2:	459c      	cmp	ip, r3
 8006ce4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ce8:	d8f3      	bhi.n	8006cd2 <__lshift+0x6e>
 8006cea:	ebac 0304 	sub.w	r3, ip, r4
 8006cee:	3b15      	subs	r3, #21
 8006cf0:	f023 0303 	bic.w	r3, r3, #3
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	f104 0015 	add.w	r0, r4, #21
 8006cfa:	4584      	cmp	ip, r0
 8006cfc:	bf38      	it	cc
 8006cfe:	2304      	movcc	r3, #4
 8006d00:	50ca      	str	r2, [r1, r3]
 8006d02:	b10a      	cbz	r2, 8006d08 <__lshift+0xa4>
 8006d04:	f108 0602 	add.w	r6, r8, #2
 8006d08:	3e01      	subs	r6, #1
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	612e      	str	r6, [r5, #16]
 8006d10:	f7ff fdda 	bl	80068c8 <_Bfree>
 8006d14:	4628      	mov	r0, r5
 8006d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d1e:	3301      	adds	r3, #1
 8006d20:	e7c5      	b.n	8006cae <__lshift+0x4a>
 8006d22:	3904      	subs	r1, #4
 8006d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d28:	459c      	cmp	ip, r3
 8006d2a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d2e:	d8f9      	bhi.n	8006d24 <__lshift+0xc0>
 8006d30:	e7ea      	b.n	8006d08 <__lshift+0xa4>
 8006d32:	bf00      	nop
 8006d34:	08007b52 	.word	0x08007b52
 8006d38:	08007b63 	.word	0x08007b63

08006d3c <__mcmp>:
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	690a      	ldr	r2, [r1, #16]
 8006d40:	6900      	ldr	r0, [r0, #16]
 8006d42:	b530      	push	{r4, r5, lr}
 8006d44:	1a80      	subs	r0, r0, r2
 8006d46:	d10d      	bne.n	8006d64 <__mcmp+0x28>
 8006d48:	3314      	adds	r3, #20
 8006d4a:	3114      	adds	r1, #20
 8006d4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d5c:	4295      	cmp	r5, r2
 8006d5e:	d002      	beq.n	8006d66 <__mcmp+0x2a>
 8006d60:	d304      	bcc.n	8006d6c <__mcmp+0x30>
 8006d62:	2001      	movs	r0, #1
 8006d64:	bd30      	pop	{r4, r5, pc}
 8006d66:	42a3      	cmp	r3, r4
 8006d68:	d3f4      	bcc.n	8006d54 <__mcmp+0x18>
 8006d6a:	e7fb      	b.n	8006d64 <__mcmp+0x28>
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	e7f8      	b.n	8006d64 <__mcmp+0x28>
	...

08006d74 <__mdiff>:
 8006d74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	460d      	mov	r5, r1
 8006d7a:	4607      	mov	r7, r0
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	4628      	mov	r0, r5
 8006d80:	4614      	mov	r4, r2
 8006d82:	f7ff ffdb 	bl	8006d3c <__mcmp>
 8006d86:	1e06      	subs	r6, r0, #0
 8006d88:	d111      	bne.n	8006dae <__mdiff+0x3a>
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	f7ff fd5b 	bl	8006848 <_Balloc>
 8006d92:	4602      	mov	r2, r0
 8006d94:	b928      	cbnz	r0, 8006da2 <__mdiff+0x2e>
 8006d96:	f240 2137 	movw	r1, #567	; 0x237
 8006d9a:	4b3a      	ldr	r3, [pc, #232]	; (8006e84 <__mdiff+0x110>)
 8006d9c:	483a      	ldr	r0, [pc, #232]	; (8006e88 <__mdiff+0x114>)
 8006d9e:	f000 fb05 	bl	80073ac <__assert_func>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006da8:	4610      	mov	r0, r2
 8006daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dae:	bfa4      	itt	ge
 8006db0:	4623      	movge	r3, r4
 8006db2:	462c      	movge	r4, r5
 8006db4:	4638      	mov	r0, r7
 8006db6:	6861      	ldr	r1, [r4, #4]
 8006db8:	bfa6      	itte	ge
 8006dba:	461d      	movge	r5, r3
 8006dbc:	2600      	movge	r6, #0
 8006dbe:	2601      	movlt	r6, #1
 8006dc0:	f7ff fd42 	bl	8006848 <_Balloc>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	b918      	cbnz	r0, 8006dd0 <__mdiff+0x5c>
 8006dc8:	f240 2145 	movw	r1, #581	; 0x245
 8006dcc:	4b2d      	ldr	r3, [pc, #180]	; (8006e84 <__mdiff+0x110>)
 8006dce:	e7e5      	b.n	8006d9c <__mdiff+0x28>
 8006dd0:	f102 0814 	add.w	r8, r2, #20
 8006dd4:	46c2      	mov	sl, r8
 8006dd6:	f04f 0c00 	mov.w	ip, #0
 8006dda:	6927      	ldr	r7, [r4, #16]
 8006ddc:	60c6      	str	r6, [r0, #12]
 8006dde:	692e      	ldr	r6, [r5, #16]
 8006de0:	f104 0014 	add.w	r0, r4, #20
 8006de4:	f105 0914 	add.w	r9, r5, #20
 8006de8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006dec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006df0:	3410      	adds	r4, #16
 8006df2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006df6:	f859 3b04 	ldr.w	r3, [r9], #4
 8006dfa:	fa1f f18b 	uxth.w	r1, fp
 8006dfe:	4461      	add	r1, ip
 8006e00:	fa1f fc83 	uxth.w	ip, r3
 8006e04:	0c1b      	lsrs	r3, r3, #16
 8006e06:	eba1 010c 	sub.w	r1, r1, ip
 8006e0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e0e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006e12:	b289      	uxth	r1, r1
 8006e14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006e18:	454e      	cmp	r6, r9
 8006e1a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006e1e:	f84a 1b04 	str.w	r1, [sl], #4
 8006e22:	d8e6      	bhi.n	8006df2 <__mdiff+0x7e>
 8006e24:	1b73      	subs	r3, r6, r5
 8006e26:	3b15      	subs	r3, #21
 8006e28:	f023 0303 	bic.w	r3, r3, #3
 8006e2c:	3515      	adds	r5, #21
 8006e2e:	3304      	adds	r3, #4
 8006e30:	42ae      	cmp	r6, r5
 8006e32:	bf38      	it	cc
 8006e34:	2304      	movcc	r3, #4
 8006e36:	4418      	add	r0, r3
 8006e38:	4443      	add	r3, r8
 8006e3a:	461e      	mov	r6, r3
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	4575      	cmp	r5, lr
 8006e40:	d30e      	bcc.n	8006e60 <__mdiff+0xec>
 8006e42:	f10e 0103 	add.w	r1, lr, #3
 8006e46:	1a09      	subs	r1, r1, r0
 8006e48:	f021 0103 	bic.w	r1, r1, #3
 8006e4c:	3803      	subs	r0, #3
 8006e4e:	4586      	cmp	lr, r0
 8006e50:	bf38      	it	cc
 8006e52:	2100      	movcc	r1, #0
 8006e54:	440b      	add	r3, r1
 8006e56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e5a:	b189      	cbz	r1, 8006e80 <__mdiff+0x10c>
 8006e5c:	6117      	str	r7, [r2, #16]
 8006e5e:	e7a3      	b.n	8006da8 <__mdiff+0x34>
 8006e60:	f855 8b04 	ldr.w	r8, [r5], #4
 8006e64:	fa1f f188 	uxth.w	r1, r8
 8006e68:	4461      	add	r1, ip
 8006e6a:	140c      	asrs	r4, r1, #16
 8006e6c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e70:	b289      	uxth	r1, r1
 8006e72:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006e76:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006e7a:	f846 1b04 	str.w	r1, [r6], #4
 8006e7e:	e7de      	b.n	8006e3e <__mdiff+0xca>
 8006e80:	3f01      	subs	r7, #1
 8006e82:	e7e8      	b.n	8006e56 <__mdiff+0xe2>
 8006e84:	08007b52 	.word	0x08007b52
 8006e88:	08007b63 	.word	0x08007b63

08006e8c <__d2b>:
 8006e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e8e:	2101      	movs	r1, #1
 8006e90:	4617      	mov	r7, r2
 8006e92:	461c      	mov	r4, r3
 8006e94:	9e08      	ldr	r6, [sp, #32]
 8006e96:	f7ff fcd7 	bl	8006848 <_Balloc>
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	b930      	cbnz	r0, 8006eac <__d2b+0x20>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	f240 310f 	movw	r1, #783	; 0x30f
 8006ea4:	4b22      	ldr	r3, [pc, #136]	; (8006f30 <__d2b+0xa4>)
 8006ea6:	4823      	ldr	r0, [pc, #140]	; (8006f34 <__d2b+0xa8>)
 8006ea8:	f000 fa80 	bl	80073ac <__assert_func>
 8006eac:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006eb0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006eb4:	bb24      	cbnz	r4, 8006f00 <__d2b+0x74>
 8006eb6:	2f00      	cmp	r7, #0
 8006eb8:	9301      	str	r3, [sp, #4]
 8006eba:	d026      	beq.n	8006f0a <__d2b+0x7e>
 8006ebc:	4668      	mov	r0, sp
 8006ebe:	9700      	str	r7, [sp, #0]
 8006ec0:	f7ff fd8a 	bl	80069d8 <__lo0bits>
 8006ec4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ec8:	b1e8      	cbz	r0, 8006f06 <__d2b+0x7a>
 8006eca:	f1c0 0320 	rsb	r3, r0, #32
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	430b      	orrs	r3, r1
 8006ed4:	40c2      	lsrs	r2, r0
 8006ed6:	616b      	str	r3, [r5, #20]
 8006ed8:	9201      	str	r2, [sp, #4]
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bf14      	ite	ne
 8006ee0:	2102      	movne	r1, #2
 8006ee2:	2101      	moveq	r1, #1
 8006ee4:	61ab      	str	r3, [r5, #24]
 8006ee6:	6129      	str	r1, [r5, #16]
 8006ee8:	b1bc      	cbz	r4, 8006f1a <__d2b+0x8e>
 8006eea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006eee:	4404      	add	r4, r0
 8006ef0:	6034      	str	r4, [r6, #0]
 8006ef2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef8:	6018      	str	r0, [r3, #0]
 8006efa:	4628      	mov	r0, r5
 8006efc:	b003      	add	sp, #12
 8006efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f04:	e7d7      	b.n	8006eb6 <__d2b+0x2a>
 8006f06:	6169      	str	r1, [r5, #20]
 8006f08:	e7e7      	b.n	8006eda <__d2b+0x4e>
 8006f0a:	a801      	add	r0, sp, #4
 8006f0c:	f7ff fd64 	bl	80069d8 <__lo0bits>
 8006f10:	9b01      	ldr	r3, [sp, #4]
 8006f12:	2101      	movs	r1, #1
 8006f14:	616b      	str	r3, [r5, #20]
 8006f16:	3020      	adds	r0, #32
 8006f18:	e7e5      	b.n	8006ee6 <__d2b+0x5a>
 8006f1a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f1e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006f22:	6030      	str	r0, [r6, #0]
 8006f24:	6918      	ldr	r0, [r3, #16]
 8006f26:	f7ff fd37 	bl	8006998 <__hi0bits>
 8006f2a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006f2e:	e7e2      	b.n	8006ef6 <__d2b+0x6a>
 8006f30:	08007b52 	.word	0x08007b52
 8006f34:	08007b63 	.word	0x08007b63

08006f38 <__ssputs_r>:
 8006f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f3c:	461f      	mov	r7, r3
 8006f3e:	688e      	ldr	r6, [r1, #8]
 8006f40:	4682      	mov	sl, r0
 8006f42:	42be      	cmp	r6, r7
 8006f44:	460c      	mov	r4, r1
 8006f46:	4690      	mov	r8, r2
 8006f48:	680b      	ldr	r3, [r1, #0]
 8006f4a:	d82c      	bhi.n	8006fa6 <__ssputs_r+0x6e>
 8006f4c:	898a      	ldrh	r2, [r1, #12]
 8006f4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f52:	d026      	beq.n	8006fa2 <__ssputs_r+0x6a>
 8006f54:	6965      	ldr	r5, [r4, #20]
 8006f56:	6909      	ldr	r1, [r1, #16]
 8006f58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f5c:	eba3 0901 	sub.w	r9, r3, r1
 8006f60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f64:	1c7b      	adds	r3, r7, #1
 8006f66:	444b      	add	r3, r9
 8006f68:	106d      	asrs	r5, r5, #1
 8006f6a:	429d      	cmp	r5, r3
 8006f6c:	bf38      	it	cc
 8006f6e:	461d      	movcc	r5, r3
 8006f70:	0553      	lsls	r3, r2, #21
 8006f72:	d527      	bpl.n	8006fc4 <__ssputs_r+0x8c>
 8006f74:	4629      	mov	r1, r5
 8006f76:	f7ff fbdb 	bl	8006730 <_malloc_r>
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	b360      	cbz	r0, 8006fd8 <__ssputs_r+0xa0>
 8006f7e:	464a      	mov	r2, r9
 8006f80:	6921      	ldr	r1, [r4, #16]
 8006f82:	f000 fa05 	bl	8007390 <memcpy>
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f90:	81a3      	strh	r3, [r4, #12]
 8006f92:	6126      	str	r6, [r4, #16]
 8006f94:	444e      	add	r6, r9
 8006f96:	6026      	str	r6, [r4, #0]
 8006f98:	463e      	mov	r6, r7
 8006f9a:	6165      	str	r5, [r4, #20]
 8006f9c:	eba5 0509 	sub.w	r5, r5, r9
 8006fa0:	60a5      	str	r5, [r4, #8]
 8006fa2:	42be      	cmp	r6, r7
 8006fa4:	d900      	bls.n	8006fa8 <__ssputs_r+0x70>
 8006fa6:	463e      	mov	r6, r7
 8006fa8:	4632      	mov	r2, r6
 8006faa:	4641      	mov	r1, r8
 8006fac:	6820      	ldr	r0, [r4, #0]
 8006fae:	f000 f9c5 	bl	800733c <memmove>
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	68a3      	ldr	r3, [r4, #8]
 8006fb6:	1b9b      	subs	r3, r3, r6
 8006fb8:	60a3      	str	r3, [r4, #8]
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	4433      	add	r3, r6
 8006fbe:	6023      	str	r3, [r4, #0]
 8006fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc4:	462a      	mov	r2, r5
 8006fc6:	f000 fa35 	bl	8007434 <_realloc_r>
 8006fca:	4606      	mov	r6, r0
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d1e0      	bne.n	8006f92 <__ssputs_r+0x5a>
 8006fd0:	4650      	mov	r0, sl
 8006fd2:	6921      	ldr	r1, [r4, #16]
 8006fd4:	f7ff fb3c 	bl	8006650 <_free_r>
 8006fd8:	230c      	movs	r3, #12
 8006fda:	f8ca 3000 	str.w	r3, [sl]
 8006fde:	89a3      	ldrh	r3, [r4, #12]
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fe8:	81a3      	strh	r3, [r4, #12]
 8006fea:	e7e9      	b.n	8006fc0 <__ssputs_r+0x88>

08006fec <_svfiprintf_r>:
 8006fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff0:	4698      	mov	r8, r3
 8006ff2:	898b      	ldrh	r3, [r1, #12]
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	061b      	lsls	r3, r3, #24
 8006ff8:	460d      	mov	r5, r1
 8006ffa:	4614      	mov	r4, r2
 8006ffc:	b09d      	sub	sp, #116	; 0x74
 8006ffe:	d50e      	bpl.n	800701e <_svfiprintf_r+0x32>
 8007000:	690b      	ldr	r3, [r1, #16]
 8007002:	b963      	cbnz	r3, 800701e <_svfiprintf_r+0x32>
 8007004:	2140      	movs	r1, #64	; 0x40
 8007006:	f7ff fb93 	bl	8006730 <_malloc_r>
 800700a:	6028      	str	r0, [r5, #0]
 800700c:	6128      	str	r0, [r5, #16]
 800700e:	b920      	cbnz	r0, 800701a <_svfiprintf_r+0x2e>
 8007010:	230c      	movs	r3, #12
 8007012:	603b      	str	r3, [r7, #0]
 8007014:	f04f 30ff 	mov.w	r0, #4294967295
 8007018:	e0d0      	b.n	80071bc <_svfiprintf_r+0x1d0>
 800701a:	2340      	movs	r3, #64	; 0x40
 800701c:	616b      	str	r3, [r5, #20]
 800701e:	2300      	movs	r3, #0
 8007020:	9309      	str	r3, [sp, #36]	; 0x24
 8007022:	2320      	movs	r3, #32
 8007024:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007028:	2330      	movs	r3, #48	; 0x30
 800702a:	f04f 0901 	mov.w	r9, #1
 800702e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007032:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80071d4 <_svfiprintf_r+0x1e8>
 8007036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800703a:	4623      	mov	r3, r4
 800703c:	469a      	mov	sl, r3
 800703e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007042:	b10a      	cbz	r2, 8007048 <_svfiprintf_r+0x5c>
 8007044:	2a25      	cmp	r2, #37	; 0x25
 8007046:	d1f9      	bne.n	800703c <_svfiprintf_r+0x50>
 8007048:	ebba 0b04 	subs.w	fp, sl, r4
 800704c:	d00b      	beq.n	8007066 <_svfiprintf_r+0x7a>
 800704e:	465b      	mov	r3, fp
 8007050:	4622      	mov	r2, r4
 8007052:	4629      	mov	r1, r5
 8007054:	4638      	mov	r0, r7
 8007056:	f7ff ff6f 	bl	8006f38 <__ssputs_r>
 800705a:	3001      	adds	r0, #1
 800705c:	f000 80a9 	beq.w	80071b2 <_svfiprintf_r+0x1c6>
 8007060:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007062:	445a      	add	r2, fp
 8007064:	9209      	str	r2, [sp, #36]	; 0x24
 8007066:	f89a 3000 	ldrb.w	r3, [sl]
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80a1 	beq.w	80071b2 <_svfiprintf_r+0x1c6>
 8007070:	2300      	movs	r3, #0
 8007072:	f04f 32ff 	mov.w	r2, #4294967295
 8007076:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800707a:	f10a 0a01 	add.w	sl, sl, #1
 800707e:	9304      	str	r3, [sp, #16]
 8007080:	9307      	str	r3, [sp, #28]
 8007082:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007086:	931a      	str	r3, [sp, #104]	; 0x68
 8007088:	4654      	mov	r4, sl
 800708a:	2205      	movs	r2, #5
 800708c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007090:	4850      	ldr	r0, [pc, #320]	; (80071d4 <_svfiprintf_r+0x1e8>)
 8007092:	f7fe fc62 	bl	800595a <memchr>
 8007096:	9a04      	ldr	r2, [sp, #16]
 8007098:	b9d8      	cbnz	r0, 80070d2 <_svfiprintf_r+0xe6>
 800709a:	06d0      	lsls	r0, r2, #27
 800709c:	bf44      	itt	mi
 800709e:	2320      	movmi	r3, #32
 80070a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a4:	0711      	lsls	r1, r2, #28
 80070a6:	bf44      	itt	mi
 80070a8:	232b      	movmi	r3, #43	; 0x2b
 80070aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ae:	f89a 3000 	ldrb.w	r3, [sl]
 80070b2:	2b2a      	cmp	r3, #42	; 0x2a
 80070b4:	d015      	beq.n	80070e2 <_svfiprintf_r+0xf6>
 80070b6:	4654      	mov	r4, sl
 80070b8:	2000      	movs	r0, #0
 80070ba:	f04f 0c0a 	mov.w	ip, #10
 80070be:	9a07      	ldr	r2, [sp, #28]
 80070c0:	4621      	mov	r1, r4
 80070c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c6:	3b30      	subs	r3, #48	; 0x30
 80070c8:	2b09      	cmp	r3, #9
 80070ca:	d94d      	bls.n	8007168 <_svfiprintf_r+0x17c>
 80070cc:	b1b0      	cbz	r0, 80070fc <_svfiprintf_r+0x110>
 80070ce:	9207      	str	r2, [sp, #28]
 80070d0:	e014      	b.n	80070fc <_svfiprintf_r+0x110>
 80070d2:	eba0 0308 	sub.w	r3, r0, r8
 80070d6:	fa09 f303 	lsl.w	r3, r9, r3
 80070da:	4313      	orrs	r3, r2
 80070dc:	46a2      	mov	sl, r4
 80070de:	9304      	str	r3, [sp, #16]
 80070e0:	e7d2      	b.n	8007088 <_svfiprintf_r+0x9c>
 80070e2:	9b03      	ldr	r3, [sp, #12]
 80070e4:	1d19      	adds	r1, r3, #4
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	9103      	str	r1, [sp, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bfbb      	ittet	lt
 80070ee:	425b      	neglt	r3, r3
 80070f0:	f042 0202 	orrlt.w	r2, r2, #2
 80070f4:	9307      	strge	r3, [sp, #28]
 80070f6:	9307      	strlt	r3, [sp, #28]
 80070f8:	bfb8      	it	lt
 80070fa:	9204      	strlt	r2, [sp, #16]
 80070fc:	7823      	ldrb	r3, [r4, #0]
 80070fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007100:	d10c      	bne.n	800711c <_svfiprintf_r+0x130>
 8007102:	7863      	ldrb	r3, [r4, #1]
 8007104:	2b2a      	cmp	r3, #42	; 0x2a
 8007106:	d134      	bne.n	8007172 <_svfiprintf_r+0x186>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	3402      	adds	r4, #2
 800710c:	1d1a      	adds	r2, r3, #4
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	9203      	str	r2, [sp, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	bfb8      	it	lt
 8007116:	f04f 33ff 	movlt.w	r3, #4294967295
 800711a:	9305      	str	r3, [sp, #20]
 800711c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80071d8 <_svfiprintf_r+0x1ec>
 8007120:	2203      	movs	r2, #3
 8007122:	4650      	mov	r0, sl
 8007124:	7821      	ldrb	r1, [r4, #0]
 8007126:	f7fe fc18 	bl	800595a <memchr>
 800712a:	b138      	cbz	r0, 800713c <_svfiprintf_r+0x150>
 800712c:	2240      	movs	r2, #64	; 0x40
 800712e:	9b04      	ldr	r3, [sp, #16]
 8007130:	eba0 000a 	sub.w	r0, r0, sl
 8007134:	4082      	lsls	r2, r0
 8007136:	4313      	orrs	r3, r2
 8007138:	3401      	adds	r4, #1
 800713a:	9304      	str	r3, [sp, #16]
 800713c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007140:	2206      	movs	r2, #6
 8007142:	4826      	ldr	r0, [pc, #152]	; (80071dc <_svfiprintf_r+0x1f0>)
 8007144:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007148:	f7fe fc07 	bl	800595a <memchr>
 800714c:	2800      	cmp	r0, #0
 800714e:	d038      	beq.n	80071c2 <_svfiprintf_r+0x1d6>
 8007150:	4b23      	ldr	r3, [pc, #140]	; (80071e0 <_svfiprintf_r+0x1f4>)
 8007152:	bb1b      	cbnz	r3, 800719c <_svfiprintf_r+0x1b0>
 8007154:	9b03      	ldr	r3, [sp, #12]
 8007156:	3307      	adds	r3, #7
 8007158:	f023 0307 	bic.w	r3, r3, #7
 800715c:	3308      	adds	r3, #8
 800715e:	9303      	str	r3, [sp, #12]
 8007160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007162:	4433      	add	r3, r6
 8007164:	9309      	str	r3, [sp, #36]	; 0x24
 8007166:	e768      	b.n	800703a <_svfiprintf_r+0x4e>
 8007168:	460c      	mov	r4, r1
 800716a:	2001      	movs	r0, #1
 800716c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007170:	e7a6      	b.n	80070c0 <_svfiprintf_r+0xd4>
 8007172:	2300      	movs	r3, #0
 8007174:	f04f 0c0a 	mov.w	ip, #10
 8007178:	4619      	mov	r1, r3
 800717a:	3401      	adds	r4, #1
 800717c:	9305      	str	r3, [sp, #20]
 800717e:	4620      	mov	r0, r4
 8007180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007184:	3a30      	subs	r2, #48	; 0x30
 8007186:	2a09      	cmp	r2, #9
 8007188:	d903      	bls.n	8007192 <_svfiprintf_r+0x1a6>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0c6      	beq.n	800711c <_svfiprintf_r+0x130>
 800718e:	9105      	str	r1, [sp, #20]
 8007190:	e7c4      	b.n	800711c <_svfiprintf_r+0x130>
 8007192:	4604      	mov	r4, r0
 8007194:	2301      	movs	r3, #1
 8007196:	fb0c 2101 	mla	r1, ip, r1, r2
 800719a:	e7f0      	b.n	800717e <_svfiprintf_r+0x192>
 800719c:	ab03      	add	r3, sp, #12
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	462a      	mov	r2, r5
 80071a2:	4638      	mov	r0, r7
 80071a4:	4b0f      	ldr	r3, [pc, #60]	; (80071e4 <_svfiprintf_r+0x1f8>)
 80071a6:	a904      	add	r1, sp, #16
 80071a8:	f7fd fe5c 	bl	8004e64 <_printf_float>
 80071ac:	1c42      	adds	r2, r0, #1
 80071ae:	4606      	mov	r6, r0
 80071b0:	d1d6      	bne.n	8007160 <_svfiprintf_r+0x174>
 80071b2:	89ab      	ldrh	r3, [r5, #12]
 80071b4:	065b      	lsls	r3, r3, #25
 80071b6:	f53f af2d 	bmi.w	8007014 <_svfiprintf_r+0x28>
 80071ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071bc:	b01d      	add	sp, #116	; 0x74
 80071be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c2:	ab03      	add	r3, sp, #12
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	462a      	mov	r2, r5
 80071c8:	4638      	mov	r0, r7
 80071ca:	4b06      	ldr	r3, [pc, #24]	; (80071e4 <_svfiprintf_r+0x1f8>)
 80071cc:	a904      	add	r1, sp, #16
 80071ce:	f7fe f8e9 	bl	80053a4 <_printf_i>
 80071d2:	e7eb      	b.n	80071ac <_svfiprintf_r+0x1c0>
 80071d4:	08007cbc 	.word	0x08007cbc
 80071d8:	08007cc2 	.word	0x08007cc2
 80071dc:	08007cc6 	.word	0x08007cc6
 80071e0:	08004e65 	.word	0x08004e65
 80071e4:	08006f39 	.word	0x08006f39

080071e8 <__sflush_r>:
 80071e8:	898a      	ldrh	r2, [r1, #12]
 80071ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ec:	4605      	mov	r5, r0
 80071ee:	0710      	lsls	r0, r2, #28
 80071f0:	460c      	mov	r4, r1
 80071f2:	d457      	bmi.n	80072a4 <__sflush_r+0xbc>
 80071f4:	684b      	ldr	r3, [r1, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	dc04      	bgt.n	8007204 <__sflush_r+0x1c>
 80071fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	dc01      	bgt.n	8007204 <__sflush_r+0x1c>
 8007200:	2000      	movs	r0, #0
 8007202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007206:	2e00      	cmp	r6, #0
 8007208:	d0fa      	beq.n	8007200 <__sflush_r+0x18>
 800720a:	2300      	movs	r3, #0
 800720c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007210:	682f      	ldr	r7, [r5, #0]
 8007212:	6a21      	ldr	r1, [r4, #32]
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	d032      	beq.n	800727e <__sflush_r+0x96>
 8007218:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	075a      	lsls	r2, r3, #29
 800721e:	d505      	bpl.n	800722c <__sflush_r+0x44>
 8007220:	6863      	ldr	r3, [r4, #4]
 8007222:	1ac0      	subs	r0, r0, r3
 8007224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007226:	b10b      	cbz	r3, 800722c <__sflush_r+0x44>
 8007228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800722a:	1ac0      	subs	r0, r0, r3
 800722c:	2300      	movs	r3, #0
 800722e:	4602      	mov	r2, r0
 8007230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007232:	4628      	mov	r0, r5
 8007234:	6a21      	ldr	r1, [r4, #32]
 8007236:	47b0      	blx	r6
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	d106      	bne.n	800724c <__sflush_r+0x64>
 800723e:	6829      	ldr	r1, [r5, #0]
 8007240:	291d      	cmp	r1, #29
 8007242:	d82b      	bhi.n	800729c <__sflush_r+0xb4>
 8007244:	4a28      	ldr	r2, [pc, #160]	; (80072e8 <__sflush_r+0x100>)
 8007246:	410a      	asrs	r2, r1
 8007248:	07d6      	lsls	r6, r2, #31
 800724a:	d427      	bmi.n	800729c <__sflush_r+0xb4>
 800724c:	2200      	movs	r2, #0
 800724e:	6062      	str	r2, [r4, #4]
 8007250:	6922      	ldr	r2, [r4, #16]
 8007252:	04d9      	lsls	r1, r3, #19
 8007254:	6022      	str	r2, [r4, #0]
 8007256:	d504      	bpl.n	8007262 <__sflush_r+0x7a>
 8007258:	1c42      	adds	r2, r0, #1
 800725a:	d101      	bne.n	8007260 <__sflush_r+0x78>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	b903      	cbnz	r3, 8007262 <__sflush_r+0x7a>
 8007260:	6560      	str	r0, [r4, #84]	; 0x54
 8007262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007264:	602f      	str	r7, [r5, #0]
 8007266:	2900      	cmp	r1, #0
 8007268:	d0ca      	beq.n	8007200 <__sflush_r+0x18>
 800726a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800726e:	4299      	cmp	r1, r3
 8007270:	d002      	beq.n	8007278 <__sflush_r+0x90>
 8007272:	4628      	mov	r0, r5
 8007274:	f7ff f9ec 	bl	8006650 <_free_r>
 8007278:	2000      	movs	r0, #0
 800727a:	6360      	str	r0, [r4, #52]	; 0x34
 800727c:	e7c1      	b.n	8007202 <__sflush_r+0x1a>
 800727e:	2301      	movs	r3, #1
 8007280:	4628      	mov	r0, r5
 8007282:	47b0      	blx	r6
 8007284:	1c41      	adds	r1, r0, #1
 8007286:	d1c8      	bne.n	800721a <__sflush_r+0x32>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0c5      	beq.n	800721a <__sflush_r+0x32>
 800728e:	2b1d      	cmp	r3, #29
 8007290:	d001      	beq.n	8007296 <__sflush_r+0xae>
 8007292:	2b16      	cmp	r3, #22
 8007294:	d101      	bne.n	800729a <__sflush_r+0xb2>
 8007296:	602f      	str	r7, [r5, #0]
 8007298:	e7b2      	b.n	8007200 <__sflush_r+0x18>
 800729a:	89a3      	ldrh	r3, [r4, #12]
 800729c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072a0:	81a3      	strh	r3, [r4, #12]
 80072a2:	e7ae      	b.n	8007202 <__sflush_r+0x1a>
 80072a4:	690f      	ldr	r7, [r1, #16]
 80072a6:	2f00      	cmp	r7, #0
 80072a8:	d0aa      	beq.n	8007200 <__sflush_r+0x18>
 80072aa:	0793      	lsls	r3, r2, #30
 80072ac:	bf18      	it	ne
 80072ae:	2300      	movne	r3, #0
 80072b0:	680e      	ldr	r6, [r1, #0]
 80072b2:	bf08      	it	eq
 80072b4:	694b      	ldreq	r3, [r1, #20]
 80072b6:	1bf6      	subs	r6, r6, r7
 80072b8:	600f      	str	r7, [r1, #0]
 80072ba:	608b      	str	r3, [r1, #8]
 80072bc:	2e00      	cmp	r6, #0
 80072be:	dd9f      	ble.n	8007200 <__sflush_r+0x18>
 80072c0:	4633      	mov	r3, r6
 80072c2:	463a      	mov	r2, r7
 80072c4:	4628      	mov	r0, r5
 80072c6:	6a21      	ldr	r1, [r4, #32]
 80072c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80072cc:	47e0      	blx	ip
 80072ce:	2800      	cmp	r0, #0
 80072d0:	dc06      	bgt.n	80072e0 <__sflush_r+0xf8>
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072dc:	81a3      	strh	r3, [r4, #12]
 80072de:	e790      	b.n	8007202 <__sflush_r+0x1a>
 80072e0:	4407      	add	r7, r0
 80072e2:	1a36      	subs	r6, r6, r0
 80072e4:	e7ea      	b.n	80072bc <__sflush_r+0xd4>
 80072e6:	bf00      	nop
 80072e8:	dfbffffe 	.word	0xdfbffffe

080072ec <_fflush_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	690b      	ldr	r3, [r1, #16]
 80072f0:	4605      	mov	r5, r0
 80072f2:	460c      	mov	r4, r1
 80072f4:	b913      	cbnz	r3, 80072fc <_fflush_r+0x10>
 80072f6:	2500      	movs	r5, #0
 80072f8:	4628      	mov	r0, r5
 80072fa:	bd38      	pop	{r3, r4, r5, pc}
 80072fc:	b118      	cbz	r0, 8007306 <_fflush_r+0x1a>
 80072fe:	6a03      	ldr	r3, [r0, #32]
 8007300:	b90b      	cbnz	r3, 8007306 <_fflush_r+0x1a>
 8007302:	f7fe f9fd 	bl	8005700 <__sinit>
 8007306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0f3      	beq.n	80072f6 <_fflush_r+0xa>
 800730e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007310:	07d0      	lsls	r0, r2, #31
 8007312:	d404      	bmi.n	800731e <_fflush_r+0x32>
 8007314:	0599      	lsls	r1, r3, #22
 8007316:	d402      	bmi.n	800731e <_fflush_r+0x32>
 8007318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800731a:	f7fe fb1c 	bl	8005956 <__retarget_lock_acquire_recursive>
 800731e:	4628      	mov	r0, r5
 8007320:	4621      	mov	r1, r4
 8007322:	f7ff ff61 	bl	80071e8 <__sflush_r>
 8007326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007328:	4605      	mov	r5, r0
 800732a:	07da      	lsls	r2, r3, #31
 800732c:	d4e4      	bmi.n	80072f8 <_fflush_r+0xc>
 800732e:	89a3      	ldrh	r3, [r4, #12]
 8007330:	059b      	lsls	r3, r3, #22
 8007332:	d4e1      	bmi.n	80072f8 <_fflush_r+0xc>
 8007334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007336:	f7fe fb0f 	bl	8005958 <__retarget_lock_release_recursive>
 800733a:	e7dd      	b.n	80072f8 <_fflush_r+0xc>

0800733c <memmove>:
 800733c:	4288      	cmp	r0, r1
 800733e:	b510      	push	{r4, lr}
 8007340:	eb01 0402 	add.w	r4, r1, r2
 8007344:	d902      	bls.n	800734c <memmove+0x10>
 8007346:	4284      	cmp	r4, r0
 8007348:	4623      	mov	r3, r4
 800734a:	d807      	bhi.n	800735c <memmove+0x20>
 800734c:	1e43      	subs	r3, r0, #1
 800734e:	42a1      	cmp	r1, r4
 8007350:	d008      	beq.n	8007364 <memmove+0x28>
 8007352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800735a:	e7f8      	b.n	800734e <memmove+0x12>
 800735c:	4601      	mov	r1, r0
 800735e:	4402      	add	r2, r0
 8007360:	428a      	cmp	r2, r1
 8007362:	d100      	bne.n	8007366 <memmove+0x2a>
 8007364:	bd10      	pop	{r4, pc}
 8007366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800736a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800736e:	e7f7      	b.n	8007360 <memmove+0x24>

08007370 <_sbrk_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	2300      	movs	r3, #0
 8007374:	4d05      	ldr	r5, [pc, #20]	; (800738c <_sbrk_r+0x1c>)
 8007376:	4604      	mov	r4, r0
 8007378:	4608      	mov	r0, r1
 800737a:	602b      	str	r3, [r5, #0]
 800737c:	f7fa fb52 	bl	8001a24 <_sbrk>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_sbrk_r+0x1a>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	b103      	cbz	r3, 800738a <_sbrk_r+0x1a>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	200004c8 	.word	0x200004c8

08007390 <memcpy>:
 8007390:	440a      	add	r2, r1
 8007392:	4291      	cmp	r1, r2
 8007394:	f100 33ff 	add.w	r3, r0, #4294967295
 8007398:	d100      	bne.n	800739c <memcpy+0xc>
 800739a:	4770      	bx	lr
 800739c:	b510      	push	{r4, lr}
 800739e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073a2:	4291      	cmp	r1, r2
 80073a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a8:	d1f9      	bne.n	800739e <memcpy+0xe>
 80073aa:	bd10      	pop	{r4, pc}

080073ac <__assert_func>:
 80073ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073ae:	4614      	mov	r4, r2
 80073b0:	461a      	mov	r2, r3
 80073b2:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <__assert_func+0x2c>)
 80073b4:	4605      	mov	r5, r0
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68d8      	ldr	r0, [r3, #12]
 80073ba:	b14c      	cbz	r4, 80073d0 <__assert_func+0x24>
 80073bc:	4b07      	ldr	r3, [pc, #28]	; (80073dc <__assert_func+0x30>)
 80073be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073c2:	9100      	str	r1, [sp, #0]
 80073c4:	462b      	mov	r3, r5
 80073c6:	4906      	ldr	r1, [pc, #24]	; (80073e0 <__assert_func+0x34>)
 80073c8:	f000 f870 	bl	80074ac <fiprintf>
 80073cc:	f000 f880 	bl	80074d0 <abort>
 80073d0:	4b04      	ldr	r3, [pc, #16]	; (80073e4 <__assert_func+0x38>)
 80073d2:	461c      	mov	r4, r3
 80073d4:	e7f3      	b.n	80073be <__assert_func+0x12>
 80073d6:	bf00      	nop
 80073d8:	20000068 	.word	0x20000068
 80073dc:	08007cd7 	.word	0x08007cd7
 80073e0:	08007ce4 	.word	0x08007ce4
 80073e4:	08007d12 	.word	0x08007d12

080073e8 <_calloc_r>:
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	fba1 5402 	umull	r5, r4, r1, r2
 80073ee:	b934      	cbnz	r4, 80073fe <_calloc_r+0x16>
 80073f0:	4629      	mov	r1, r5
 80073f2:	f7ff f99d 	bl	8006730 <_malloc_r>
 80073f6:	4606      	mov	r6, r0
 80073f8:	b928      	cbnz	r0, 8007406 <_calloc_r+0x1e>
 80073fa:	4630      	mov	r0, r6
 80073fc:	bd70      	pop	{r4, r5, r6, pc}
 80073fe:	220c      	movs	r2, #12
 8007400:	2600      	movs	r6, #0
 8007402:	6002      	str	r2, [r0, #0]
 8007404:	e7f9      	b.n	80073fa <_calloc_r+0x12>
 8007406:	462a      	mov	r2, r5
 8007408:	4621      	mov	r1, r4
 800740a:	f7fe fa26 	bl	800585a <memset>
 800740e:	e7f4      	b.n	80073fa <_calloc_r+0x12>

08007410 <__ascii_mbtowc>:
 8007410:	b082      	sub	sp, #8
 8007412:	b901      	cbnz	r1, 8007416 <__ascii_mbtowc+0x6>
 8007414:	a901      	add	r1, sp, #4
 8007416:	b142      	cbz	r2, 800742a <__ascii_mbtowc+0x1a>
 8007418:	b14b      	cbz	r3, 800742e <__ascii_mbtowc+0x1e>
 800741a:	7813      	ldrb	r3, [r2, #0]
 800741c:	600b      	str	r3, [r1, #0]
 800741e:	7812      	ldrb	r2, [r2, #0]
 8007420:	1e10      	subs	r0, r2, #0
 8007422:	bf18      	it	ne
 8007424:	2001      	movne	r0, #1
 8007426:	b002      	add	sp, #8
 8007428:	4770      	bx	lr
 800742a:	4610      	mov	r0, r2
 800742c:	e7fb      	b.n	8007426 <__ascii_mbtowc+0x16>
 800742e:	f06f 0001 	mvn.w	r0, #1
 8007432:	e7f8      	b.n	8007426 <__ascii_mbtowc+0x16>

08007434 <_realloc_r>:
 8007434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007438:	4680      	mov	r8, r0
 800743a:	4614      	mov	r4, r2
 800743c:	460e      	mov	r6, r1
 800743e:	b921      	cbnz	r1, 800744a <_realloc_r+0x16>
 8007440:	4611      	mov	r1, r2
 8007442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007446:	f7ff b973 	b.w	8006730 <_malloc_r>
 800744a:	b92a      	cbnz	r2, 8007458 <_realloc_r+0x24>
 800744c:	f7ff f900 	bl	8006650 <_free_r>
 8007450:	4625      	mov	r5, r4
 8007452:	4628      	mov	r0, r5
 8007454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007458:	f000 f841 	bl	80074de <_malloc_usable_size_r>
 800745c:	4284      	cmp	r4, r0
 800745e:	4607      	mov	r7, r0
 8007460:	d802      	bhi.n	8007468 <_realloc_r+0x34>
 8007462:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007466:	d812      	bhi.n	800748e <_realloc_r+0x5a>
 8007468:	4621      	mov	r1, r4
 800746a:	4640      	mov	r0, r8
 800746c:	f7ff f960 	bl	8006730 <_malloc_r>
 8007470:	4605      	mov	r5, r0
 8007472:	2800      	cmp	r0, #0
 8007474:	d0ed      	beq.n	8007452 <_realloc_r+0x1e>
 8007476:	42bc      	cmp	r4, r7
 8007478:	4622      	mov	r2, r4
 800747a:	4631      	mov	r1, r6
 800747c:	bf28      	it	cs
 800747e:	463a      	movcs	r2, r7
 8007480:	f7ff ff86 	bl	8007390 <memcpy>
 8007484:	4631      	mov	r1, r6
 8007486:	4640      	mov	r0, r8
 8007488:	f7ff f8e2 	bl	8006650 <_free_r>
 800748c:	e7e1      	b.n	8007452 <_realloc_r+0x1e>
 800748e:	4635      	mov	r5, r6
 8007490:	e7df      	b.n	8007452 <_realloc_r+0x1e>

08007492 <__ascii_wctomb>:
 8007492:	4603      	mov	r3, r0
 8007494:	4608      	mov	r0, r1
 8007496:	b141      	cbz	r1, 80074aa <__ascii_wctomb+0x18>
 8007498:	2aff      	cmp	r2, #255	; 0xff
 800749a:	d904      	bls.n	80074a6 <__ascii_wctomb+0x14>
 800749c:	228a      	movs	r2, #138	; 0x8a
 800749e:	f04f 30ff 	mov.w	r0, #4294967295
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	4770      	bx	lr
 80074a6:	2001      	movs	r0, #1
 80074a8:	700a      	strb	r2, [r1, #0]
 80074aa:	4770      	bx	lr

080074ac <fiprintf>:
 80074ac:	b40e      	push	{r1, r2, r3}
 80074ae:	b503      	push	{r0, r1, lr}
 80074b0:	4601      	mov	r1, r0
 80074b2:	ab03      	add	r3, sp, #12
 80074b4:	4805      	ldr	r0, [pc, #20]	; (80074cc <fiprintf+0x20>)
 80074b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ba:	6800      	ldr	r0, [r0, #0]
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	f000 f83d 	bl	800753c <_vfiprintf_r>
 80074c2:	b002      	add	sp, #8
 80074c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074c8:	b003      	add	sp, #12
 80074ca:	4770      	bx	lr
 80074cc:	20000068 	.word	0x20000068

080074d0 <abort>:
 80074d0:	2006      	movs	r0, #6
 80074d2:	b508      	push	{r3, lr}
 80074d4:	f000 fa0a 	bl	80078ec <raise>
 80074d8:	2001      	movs	r0, #1
 80074da:	f7fa fa30 	bl	800193e <_exit>

080074de <_malloc_usable_size_r>:
 80074de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e2:	1f18      	subs	r0, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	bfbc      	itt	lt
 80074e8:	580b      	ldrlt	r3, [r1, r0]
 80074ea:	18c0      	addlt	r0, r0, r3
 80074ec:	4770      	bx	lr

080074ee <__sfputc_r>:
 80074ee:	6893      	ldr	r3, [r2, #8]
 80074f0:	b410      	push	{r4}
 80074f2:	3b01      	subs	r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	6093      	str	r3, [r2, #8]
 80074f8:	da07      	bge.n	800750a <__sfputc_r+0x1c>
 80074fa:	6994      	ldr	r4, [r2, #24]
 80074fc:	42a3      	cmp	r3, r4
 80074fe:	db01      	blt.n	8007504 <__sfputc_r+0x16>
 8007500:	290a      	cmp	r1, #10
 8007502:	d102      	bne.n	800750a <__sfputc_r+0x1c>
 8007504:	bc10      	pop	{r4}
 8007506:	f000 b933 	b.w	8007770 <__swbuf_r>
 800750a:	6813      	ldr	r3, [r2, #0]
 800750c:	1c58      	adds	r0, r3, #1
 800750e:	6010      	str	r0, [r2, #0]
 8007510:	7019      	strb	r1, [r3, #0]
 8007512:	4608      	mov	r0, r1
 8007514:	bc10      	pop	{r4}
 8007516:	4770      	bx	lr

08007518 <__sfputs_r>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	4606      	mov	r6, r0
 800751c:	460f      	mov	r7, r1
 800751e:	4614      	mov	r4, r2
 8007520:	18d5      	adds	r5, r2, r3
 8007522:	42ac      	cmp	r4, r5
 8007524:	d101      	bne.n	800752a <__sfputs_r+0x12>
 8007526:	2000      	movs	r0, #0
 8007528:	e007      	b.n	800753a <__sfputs_r+0x22>
 800752a:	463a      	mov	r2, r7
 800752c:	4630      	mov	r0, r6
 800752e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007532:	f7ff ffdc 	bl	80074ee <__sfputc_r>
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	d1f3      	bne.n	8007522 <__sfputs_r+0xa>
 800753a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800753c <_vfiprintf_r>:
 800753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	460d      	mov	r5, r1
 8007542:	4614      	mov	r4, r2
 8007544:	4698      	mov	r8, r3
 8007546:	4606      	mov	r6, r0
 8007548:	b09d      	sub	sp, #116	; 0x74
 800754a:	b118      	cbz	r0, 8007554 <_vfiprintf_r+0x18>
 800754c:	6a03      	ldr	r3, [r0, #32]
 800754e:	b90b      	cbnz	r3, 8007554 <_vfiprintf_r+0x18>
 8007550:	f7fe f8d6 	bl	8005700 <__sinit>
 8007554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007556:	07d9      	lsls	r1, r3, #31
 8007558:	d405      	bmi.n	8007566 <_vfiprintf_r+0x2a>
 800755a:	89ab      	ldrh	r3, [r5, #12]
 800755c:	059a      	lsls	r2, r3, #22
 800755e:	d402      	bmi.n	8007566 <_vfiprintf_r+0x2a>
 8007560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007562:	f7fe f9f8 	bl	8005956 <__retarget_lock_acquire_recursive>
 8007566:	89ab      	ldrh	r3, [r5, #12]
 8007568:	071b      	lsls	r3, r3, #28
 800756a:	d501      	bpl.n	8007570 <_vfiprintf_r+0x34>
 800756c:	692b      	ldr	r3, [r5, #16]
 800756e:	b99b      	cbnz	r3, 8007598 <_vfiprintf_r+0x5c>
 8007570:	4629      	mov	r1, r5
 8007572:	4630      	mov	r0, r6
 8007574:	f000 f93a 	bl	80077ec <__swsetup_r>
 8007578:	b170      	cbz	r0, 8007598 <_vfiprintf_r+0x5c>
 800757a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800757c:	07dc      	lsls	r4, r3, #31
 800757e:	d504      	bpl.n	800758a <_vfiprintf_r+0x4e>
 8007580:	f04f 30ff 	mov.w	r0, #4294967295
 8007584:	b01d      	add	sp, #116	; 0x74
 8007586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	0598      	lsls	r0, r3, #22
 800758e:	d4f7      	bmi.n	8007580 <_vfiprintf_r+0x44>
 8007590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007592:	f7fe f9e1 	bl	8005958 <__retarget_lock_release_recursive>
 8007596:	e7f3      	b.n	8007580 <_vfiprintf_r+0x44>
 8007598:	2300      	movs	r3, #0
 800759a:	9309      	str	r3, [sp, #36]	; 0x24
 800759c:	2320      	movs	r3, #32
 800759e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075a2:	2330      	movs	r3, #48	; 0x30
 80075a4:	f04f 0901 	mov.w	r9, #1
 80075a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800775c <_vfiprintf_r+0x220>
 80075b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075b4:	4623      	mov	r3, r4
 80075b6:	469a      	mov	sl, r3
 80075b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075bc:	b10a      	cbz	r2, 80075c2 <_vfiprintf_r+0x86>
 80075be:	2a25      	cmp	r2, #37	; 0x25
 80075c0:	d1f9      	bne.n	80075b6 <_vfiprintf_r+0x7a>
 80075c2:	ebba 0b04 	subs.w	fp, sl, r4
 80075c6:	d00b      	beq.n	80075e0 <_vfiprintf_r+0xa4>
 80075c8:	465b      	mov	r3, fp
 80075ca:	4622      	mov	r2, r4
 80075cc:	4629      	mov	r1, r5
 80075ce:	4630      	mov	r0, r6
 80075d0:	f7ff ffa2 	bl	8007518 <__sfputs_r>
 80075d4:	3001      	adds	r0, #1
 80075d6:	f000 80a9 	beq.w	800772c <_vfiprintf_r+0x1f0>
 80075da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075dc:	445a      	add	r2, fp
 80075de:	9209      	str	r2, [sp, #36]	; 0x24
 80075e0:	f89a 3000 	ldrb.w	r3, [sl]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80a1 	beq.w	800772c <_vfiprintf_r+0x1f0>
 80075ea:	2300      	movs	r3, #0
 80075ec:	f04f 32ff 	mov.w	r2, #4294967295
 80075f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075f4:	f10a 0a01 	add.w	sl, sl, #1
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	9307      	str	r3, [sp, #28]
 80075fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007600:	931a      	str	r3, [sp, #104]	; 0x68
 8007602:	4654      	mov	r4, sl
 8007604:	2205      	movs	r2, #5
 8007606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800760a:	4854      	ldr	r0, [pc, #336]	; (800775c <_vfiprintf_r+0x220>)
 800760c:	f7fe f9a5 	bl	800595a <memchr>
 8007610:	9a04      	ldr	r2, [sp, #16]
 8007612:	b9d8      	cbnz	r0, 800764c <_vfiprintf_r+0x110>
 8007614:	06d1      	lsls	r1, r2, #27
 8007616:	bf44      	itt	mi
 8007618:	2320      	movmi	r3, #32
 800761a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800761e:	0713      	lsls	r3, r2, #28
 8007620:	bf44      	itt	mi
 8007622:	232b      	movmi	r3, #43	; 0x2b
 8007624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007628:	f89a 3000 	ldrb.w	r3, [sl]
 800762c:	2b2a      	cmp	r3, #42	; 0x2a
 800762e:	d015      	beq.n	800765c <_vfiprintf_r+0x120>
 8007630:	4654      	mov	r4, sl
 8007632:	2000      	movs	r0, #0
 8007634:	f04f 0c0a 	mov.w	ip, #10
 8007638:	9a07      	ldr	r2, [sp, #28]
 800763a:	4621      	mov	r1, r4
 800763c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007640:	3b30      	subs	r3, #48	; 0x30
 8007642:	2b09      	cmp	r3, #9
 8007644:	d94d      	bls.n	80076e2 <_vfiprintf_r+0x1a6>
 8007646:	b1b0      	cbz	r0, 8007676 <_vfiprintf_r+0x13a>
 8007648:	9207      	str	r2, [sp, #28]
 800764a:	e014      	b.n	8007676 <_vfiprintf_r+0x13a>
 800764c:	eba0 0308 	sub.w	r3, r0, r8
 8007650:	fa09 f303 	lsl.w	r3, r9, r3
 8007654:	4313      	orrs	r3, r2
 8007656:	46a2      	mov	sl, r4
 8007658:	9304      	str	r3, [sp, #16]
 800765a:	e7d2      	b.n	8007602 <_vfiprintf_r+0xc6>
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	1d19      	adds	r1, r3, #4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	9103      	str	r1, [sp, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	bfbb      	ittet	lt
 8007668:	425b      	neglt	r3, r3
 800766a:	f042 0202 	orrlt.w	r2, r2, #2
 800766e:	9307      	strge	r3, [sp, #28]
 8007670:	9307      	strlt	r3, [sp, #28]
 8007672:	bfb8      	it	lt
 8007674:	9204      	strlt	r2, [sp, #16]
 8007676:	7823      	ldrb	r3, [r4, #0]
 8007678:	2b2e      	cmp	r3, #46	; 0x2e
 800767a:	d10c      	bne.n	8007696 <_vfiprintf_r+0x15a>
 800767c:	7863      	ldrb	r3, [r4, #1]
 800767e:	2b2a      	cmp	r3, #42	; 0x2a
 8007680:	d134      	bne.n	80076ec <_vfiprintf_r+0x1b0>
 8007682:	9b03      	ldr	r3, [sp, #12]
 8007684:	3402      	adds	r4, #2
 8007686:	1d1a      	adds	r2, r3, #4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	9203      	str	r2, [sp, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	bfb8      	it	lt
 8007690:	f04f 33ff 	movlt.w	r3, #4294967295
 8007694:	9305      	str	r3, [sp, #20]
 8007696:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007760 <_vfiprintf_r+0x224>
 800769a:	2203      	movs	r2, #3
 800769c:	4650      	mov	r0, sl
 800769e:	7821      	ldrb	r1, [r4, #0]
 80076a0:	f7fe f95b 	bl	800595a <memchr>
 80076a4:	b138      	cbz	r0, 80076b6 <_vfiprintf_r+0x17a>
 80076a6:	2240      	movs	r2, #64	; 0x40
 80076a8:	9b04      	ldr	r3, [sp, #16]
 80076aa:	eba0 000a 	sub.w	r0, r0, sl
 80076ae:	4082      	lsls	r2, r0
 80076b0:	4313      	orrs	r3, r2
 80076b2:	3401      	adds	r4, #1
 80076b4:	9304      	str	r3, [sp, #16]
 80076b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ba:	2206      	movs	r2, #6
 80076bc:	4829      	ldr	r0, [pc, #164]	; (8007764 <_vfiprintf_r+0x228>)
 80076be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076c2:	f7fe f94a 	bl	800595a <memchr>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d03f      	beq.n	800774a <_vfiprintf_r+0x20e>
 80076ca:	4b27      	ldr	r3, [pc, #156]	; (8007768 <_vfiprintf_r+0x22c>)
 80076cc:	bb1b      	cbnz	r3, 8007716 <_vfiprintf_r+0x1da>
 80076ce:	9b03      	ldr	r3, [sp, #12]
 80076d0:	3307      	adds	r3, #7
 80076d2:	f023 0307 	bic.w	r3, r3, #7
 80076d6:	3308      	adds	r3, #8
 80076d8:	9303      	str	r3, [sp, #12]
 80076da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076dc:	443b      	add	r3, r7
 80076de:	9309      	str	r3, [sp, #36]	; 0x24
 80076e0:	e768      	b.n	80075b4 <_vfiprintf_r+0x78>
 80076e2:	460c      	mov	r4, r1
 80076e4:	2001      	movs	r0, #1
 80076e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ea:	e7a6      	b.n	800763a <_vfiprintf_r+0xfe>
 80076ec:	2300      	movs	r3, #0
 80076ee:	f04f 0c0a 	mov.w	ip, #10
 80076f2:	4619      	mov	r1, r3
 80076f4:	3401      	adds	r4, #1
 80076f6:	9305      	str	r3, [sp, #20]
 80076f8:	4620      	mov	r0, r4
 80076fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076fe:	3a30      	subs	r2, #48	; 0x30
 8007700:	2a09      	cmp	r2, #9
 8007702:	d903      	bls.n	800770c <_vfiprintf_r+0x1d0>
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0c6      	beq.n	8007696 <_vfiprintf_r+0x15a>
 8007708:	9105      	str	r1, [sp, #20]
 800770a:	e7c4      	b.n	8007696 <_vfiprintf_r+0x15a>
 800770c:	4604      	mov	r4, r0
 800770e:	2301      	movs	r3, #1
 8007710:	fb0c 2101 	mla	r1, ip, r1, r2
 8007714:	e7f0      	b.n	80076f8 <_vfiprintf_r+0x1bc>
 8007716:	ab03      	add	r3, sp, #12
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	462a      	mov	r2, r5
 800771c:	4630      	mov	r0, r6
 800771e:	4b13      	ldr	r3, [pc, #76]	; (800776c <_vfiprintf_r+0x230>)
 8007720:	a904      	add	r1, sp, #16
 8007722:	f7fd fb9f 	bl	8004e64 <_printf_float>
 8007726:	4607      	mov	r7, r0
 8007728:	1c78      	adds	r0, r7, #1
 800772a:	d1d6      	bne.n	80076da <_vfiprintf_r+0x19e>
 800772c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800772e:	07d9      	lsls	r1, r3, #31
 8007730:	d405      	bmi.n	800773e <_vfiprintf_r+0x202>
 8007732:	89ab      	ldrh	r3, [r5, #12]
 8007734:	059a      	lsls	r2, r3, #22
 8007736:	d402      	bmi.n	800773e <_vfiprintf_r+0x202>
 8007738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800773a:	f7fe f90d 	bl	8005958 <__retarget_lock_release_recursive>
 800773e:	89ab      	ldrh	r3, [r5, #12]
 8007740:	065b      	lsls	r3, r3, #25
 8007742:	f53f af1d 	bmi.w	8007580 <_vfiprintf_r+0x44>
 8007746:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007748:	e71c      	b.n	8007584 <_vfiprintf_r+0x48>
 800774a:	ab03      	add	r3, sp, #12
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	462a      	mov	r2, r5
 8007750:	4630      	mov	r0, r6
 8007752:	4b06      	ldr	r3, [pc, #24]	; (800776c <_vfiprintf_r+0x230>)
 8007754:	a904      	add	r1, sp, #16
 8007756:	f7fd fe25 	bl	80053a4 <_printf_i>
 800775a:	e7e4      	b.n	8007726 <_vfiprintf_r+0x1ea>
 800775c:	08007cbc 	.word	0x08007cbc
 8007760:	08007cc2 	.word	0x08007cc2
 8007764:	08007cc6 	.word	0x08007cc6
 8007768:	08004e65 	.word	0x08004e65
 800776c:	08007519 	.word	0x08007519

08007770 <__swbuf_r>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	460e      	mov	r6, r1
 8007774:	4614      	mov	r4, r2
 8007776:	4605      	mov	r5, r0
 8007778:	b118      	cbz	r0, 8007782 <__swbuf_r+0x12>
 800777a:	6a03      	ldr	r3, [r0, #32]
 800777c:	b90b      	cbnz	r3, 8007782 <__swbuf_r+0x12>
 800777e:	f7fd ffbf 	bl	8005700 <__sinit>
 8007782:	69a3      	ldr	r3, [r4, #24]
 8007784:	60a3      	str	r3, [r4, #8]
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	071a      	lsls	r2, r3, #28
 800778a:	d525      	bpl.n	80077d8 <__swbuf_r+0x68>
 800778c:	6923      	ldr	r3, [r4, #16]
 800778e:	b31b      	cbz	r3, 80077d8 <__swbuf_r+0x68>
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	6922      	ldr	r2, [r4, #16]
 8007794:	b2f6      	uxtb	r6, r6
 8007796:	1a98      	subs	r0, r3, r2
 8007798:	6963      	ldr	r3, [r4, #20]
 800779a:	4637      	mov	r7, r6
 800779c:	4283      	cmp	r3, r0
 800779e:	dc04      	bgt.n	80077aa <__swbuf_r+0x3a>
 80077a0:	4621      	mov	r1, r4
 80077a2:	4628      	mov	r0, r5
 80077a4:	f7ff fda2 	bl	80072ec <_fflush_r>
 80077a8:	b9e0      	cbnz	r0, 80077e4 <__swbuf_r+0x74>
 80077aa:	68a3      	ldr	r3, [r4, #8]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	60a3      	str	r3, [r4, #8]
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	6022      	str	r2, [r4, #0]
 80077b6:	701e      	strb	r6, [r3, #0]
 80077b8:	6962      	ldr	r2, [r4, #20]
 80077ba:	1c43      	adds	r3, r0, #1
 80077bc:	429a      	cmp	r2, r3
 80077be:	d004      	beq.n	80077ca <__swbuf_r+0x5a>
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	07db      	lsls	r3, r3, #31
 80077c4:	d506      	bpl.n	80077d4 <__swbuf_r+0x64>
 80077c6:	2e0a      	cmp	r6, #10
 80077c8:	d104      	bne.n	80077d4 <__swbuf_r+0x64>
 80077ca:	4621      	mov	r1, r4
 80077cc:	4628      	mov	r0, r5
 80077ce:	f7ff fd8d 	bl	80072ec <_fflush_r>
 80077d2:	b938      	cbnz	r0, 80077e4 <__swbuf_r+0x74>
 80077d4:	4638      	mov	r0, r7
 80077d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077d8:	4621      	mov	r1, r4
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 f806 	bl	80077ec <__swsetup_r>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d0d5      	beq.n	8007790 <__swbuf_r+0x20>
 80077e4:	f04f 37ff 	mov.w	r7, #4294967295
 80077e8:	e7f4      	b.n	80077d4 <__swbuf_r+0x64>
	...

080077ec <__swsetup_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4b2a      	ldr	r3, [pc, #168]	; (8007898 <__swsetup_r+0xac>)
 80077f0:	4605      	mov	r5, r0
 80077f2:	6818      	ldr	r0, [r3, #0]
 80077f4:	460c      	mov	r4, r1
 80077f6:	b118      	cbz	r0, 8007800 <__swsetup_r+0x14>
 80077f8:	6a03      	ldr	r3, [r0, #32]
 80077fa:	b90b      	cbnz	r3, 8007800 <__swsetup_r+0x14>
 80077fc:	f7fd ff80 	bl	8005700 <__sinit>
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007806:	0718      	lsls	r0, r3, #28
 8007808:	d422      	bmi.n	8007850 <__swsetup_r+0x64>
 800780a:	06d9      	lsls	r1, r3, #27
 800780c:	d407      	bmi.n	800781e <__swsetup_r+0x32>
 800780e:	2309      	movs	r3, #9
 8007810:	602b      	str	r3, [r5, #0]
 8007812:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007816:	f04f 30ff 	mov.w	r0, #4294967295
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	e034      	b.n	8007888 <__swsetup_r+0x9c>
 800781e:	0758      	lsls	r0, r3, #29
 8007820:	d512      	bpl.n	8007848 <__swsetup_r+0x5c>
 8007822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007824:	b141      	cbz	r1, 8007838 <__swsetup_r+0x4c>
 8007826:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800782a:	4299      	cmp	r1, r3
 800782c:	d002      	beq.n	8007834 <__swsetup_r+0x48>
 800782e:	4628      	mov	r0, r5
 8007830:	f7fe ff0e 	bl	8006650 <_free_r>
 8007834:	2300      	movs	r3, #0
 8007836:	6363      	str	r3, [r4, #52]	; 0x34
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	2300      	movs	r3, #0
 8007842:	6063      	str	r3, [r4, #4]
 8007844:	6923      	ldr	r3, [r4, #16]
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	f043 0308 	orr.w	r3, r3, #8
 800784e:	81a3      	strh	r3, [r4, #12]
 8007850:	6923      	ldr	r3, [r4, #16]
 8007852:	b94b      	cbnz	r3, 8007868 <__swsetup_r+0x7c>
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800785a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800785e:	d003      	beq.n	8007868 <__swsetup_r+0x7c>
 8007860:	4621      	mov	r1, r4
 8007862:	4628      	mov	r0, r5
 8007864:	f000 f883 	bl	800796e <__smakebuf_r>
 8007868:	89a0      	ldrh	r0, [r4, #12]
 800786a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800786e:	f010 0301 	ands.w	r3, r0, #1
 8007872:	d00a      	beq.n	800788a <__swsetup_r+0x9e>
 8007874:	2300      	movs	r3, #0
 8007876:	60a3      	str	r3, [r4, #8]
 8007878:	6963      	ldr	r3, [r4, #20]
 800787a:	425b      	negs	r3, r3
 800787c:	61a3      	str	r3, [r4, #24]
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	b943      	cbnz	r3, 8007894 <__swsetup_r+0xa8>
 8007882:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007886:	d1c4      	bne.n	8007812 <__swsetup_r+0x26>
 8007888:	bd38      	pop	{r3, r4, r5, pc}
 800788a:	0781      	lsls	r1, r0, #30
 800788c:	bf58      	it	pl
 800788e:	6963      	ldrpl	r3, [r4, #20]
 8007890:	60a3      	str	r3, [r4, #8]
 8007892:	e7f4      	b.n	800787e <__swsetup_r+0x92>
 8007894:	2000      	movs	r0, #0
 8007896:	e7f7      	b.n	8007888 <__swsetup_r+0x9c>
 8007898:	20000068 	.word	0x20000068

0800789c <_raise_r>:
 800789c:	291f      	cmp	r1, #31
 800789e:	b538      	push	{r3, r4, r5, lr}
 80078a0:	4604      	mov	r4, r0
 80078a2:	460d      	mov	r5, r1
 80078a4:	d904      	bls.n	80078b0 <_raise_r+0x14>
 80078a6:	2316      	movs	r3, #22
 80078a8:	6003      	str	r3, [r0, #0]
 80078aa:	f04f 30ff 	mov.w	r0, #4294967295
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
 80078b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80078b2:	b112      	cbz	r2, 80078ba <_raise_r+0x1e>
 80078b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078b8:	b94b      	cbnz	r3, 80078ce <_raise_r+0x32>
 80078ba:	4620      	mov	r0, r4
 80078bc:	f000 f830 	bl	8007920 <_getpid_r>
 80078c0:	462a      	mov	r2, r5
 80078c2:	4601      	mov	r1, r0
 80078c4:	4620      	mov	r0, r4
 80078c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078ca:	f000 b817 	b.w	80078fc <_kill_r>
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d00a      	beq.n	80078e8 <_raise_r+0x4c>
 80078d2:	1c59      	adds	r1, r3, #1
 80078d4:	d103      	bne.n	80078de <_raise_r+0x42>
 80078d6:	2316      	movs	r3, #22
 80078d8:	6003      	str	r3, [r0, #0]
 80078da:	2001      	movs	r0, #1
 80078dc:	e7e7      	b.n	80078ae <_raise_r+0x12>
 80078de:	2400      	movs	r4, #0
 80078e0:	4628      	mov	r0, r5
 80078e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078e6:	4798      	blx	r3
 80078e8:	2000      	movs	r0, #0
 80078ea:	e7e0      	b.n	80078ae <_raise_r+0x12>

080078ec <raise>:
 80078ec:	4b02      	ldr	r3, [pc, #8]	; (80078f8 <raise+0xc>)
 80078ee:	4601      	mov	r1, r0
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	f7ff bfd3 	b.w	800789c <_raise_r>
 80078f6:	bf00      	nop
 80078f8:	20000068 	.word	0x20000068

080078fc <_kill_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	2300      	movs	r3, #0
 8007900:	4d06      	ldr	r5, [pc, #24]	; (800791c <_kill_r+0x20>)
 8007902:	4604      	mov	r4, r0
 8007904:	4608      	mov	r0, r1
 8007906:	4611      	mov	r1, r2
 8007908:	602b      	str	r3, [r5, #0]
 800790a:	f7fa f808 	bl	800191e <_kill>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	d102      	bne.n	8007918 <_kill_r+0x1c>
 8007912:	682b      	ldr	r3, [r5, #0]
 8007914:	b103      	cbz	r3, 8007918 <_kill_r+0x1c>
 8007916:	6023      	str	r3, [r4, #0]
 8007918:	bd38      	pop	{r3, r4, r5, pc}
 800791a:	bf00      	nop
 800791c:	200004c8 	.word	0x200004c8

08007920 <_getpid_r>:
 8007920:	f7f9 bff6 	b.w	8001910 <_getpid>

08007924 <__swhatbuf_r>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	460c      	mov	r4, r1
 8007928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792c:	4615      	mov	r5, r2
 800792e:	2900      	cmp	r1, #0
 8007930:	461e      	mov	r6, r3
 8007932:	b096      	sub	sp, #88	; 0x58
 8007934:	da0c      	bge.n	8007950 <__swhatbuf_r+0x2c>
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	2100      	movs	r1, #0
 800793a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800793e:	bf0c      	ite	eq
 8007940:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007944:	2340      	movne	r3, #64	; 0x40
 8007946:	2000      	movs	r0, #0
 8007948:	6031      	str	r1, [r6, #0]
 800794a:	602b      	str	r3, [r5, #0]
 800794c:	b016      	add	sp, #88	; 0x58
 800794e:	bd70      	pop	{r4, r5, r6, pc}
 8007950:	466a      	mov	r2, sp
 8007952:	f000 f849 	bl	80079e8 <_fstat_r>
 8007956:	2800      	cmp	r0, #0
 8007958:	dbed      	blt.n	8007936 <__swhatbuf_r+0x12>
 800795a:	9901      	ldr	r1, [sp, #4]
 800795c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007960:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007964:	4259      	negs	r1, r3
 8007966:	4159      	adcs	r1, r3
 8007968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800796c:	e7eb      	b.n	8007946 <__swhatbuf_r+0x22>

0800796e <__smakebuf_r>:
 800796e:	898b      	ldrh	r3, [r1, #12]
 8007970:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007972:	079d      	lsls	r5, r3, #30
 8007974:	4606      	mov	r6, r0
 8007976:	460c      	mov	r4, r1
 8007978:	d507      	bpl.n	800798a <__smakebuf_r+0x1c>
 800797a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800797e:	6023      	str	r3, [r4, #0]
 8007980:	6123      	str	r3, [r4, #16]
 8007982:	2301      	movs	r3, #1
 8007984:	6163      	str	r3, [r4, #20]
 8007986:	b002      	add	sp, #8
 8007988:	bd70      	pop	{r4, r5, r6, pc}
 800798a:	466a      	mov	r2, sp
 800798c:	ab01      	add	r3, sp, #4
 800798e:	f7ff ffc9 	bl	8007924 <__swhatbuf_r>
 8007992:	9900      	ldr	r1, [sp, #0]
 8007994:	4605      	mov	r5, r0
 8007996:	4630      	mov	r0, r6
 8007998:	f7fe feca 	bl	8006730 <_malloc_r>
 800799c:	b948      	cbnz	r0, 80079b2 <__smakebuf_r+0x44>
 800799e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a2:	059a      	lsls	r2, r3, #22
 80079a4:	d4ef      	bmi.n	8007986 <__smakebuf_r+0x18>
 80079a6:	f023 0303 	bic.w	r3, r3, #3
 80079aa:	f043 0302 	orr.w	r3, r3, #2
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	e7e3      	b.n	800797a <__smakebuf_r+0xc>
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	6020      	str	r0, [r4, #0]
 80079b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ba:	81a3      	strh	r3, [r4, #12]
 80079bc:	9b00      	ldr	r3, [sp, #0]
 80079be:	6120      	str	r0, [r4, #16]
 80079c0:	6163      	str	r3, [r4, #20]
 80079c2:	9b01      	ldr	r3, [sp, #4]
 80079c4:	b15b      	cbz	r3, 80079de <__smakebuf_r+0x70>
 80079c6:	4630      	mov	r0, r6
 80079c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079cc:	f000 f81e 	bl	8007a0c <_isatty_r>
 80079d0:	b128      	cbz	r0, 80079de <__smakebuf_r+0x70>
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	f023 0303 	bic.w	r3, r3, #3
 80079d8:	f043 0301 	orr.w	r3, r3, #1
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	431d      	orrs	r5, r3
 80079e2:	81a5      	strh	r5, [r4, #12]
 80079e4:	e7cf      	b.n	8007986 <__smakebuf_r+0x18>
	...

080079e8 <_fstat_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	2300      	movs	r3, #0
 80079ec:	4d06      	ldr	r5, [pc, #24]	; (8007a08 <_fstat_r+0x20>)
 80079ee:	4604      	mov	r4, r0
 80079f0:	4608      	mov	r0, r1
 80079f2:	4611      	mov	r1, r2
 80079f4:	602b      	str	r3, [r5, #0]
 80079f6:	f7f9 fff0 	bl	80019da <_fstat>
 80079fa:	1c43      	adds	r3, r0, #1
 80079fc:	d102      	bne.n	8007a04 <_fstat_r+0x1c>
 80079fe:	682b      	ldr	r3, [r5, #0]
 8007a00:	b103      	cbz	r3, 8007a04 <_fstat_r+0x1c>
 8007a02:	6023      	str	r3, [r4, #0]
 8007a04:	bd38      	pop	{r3, r4, r5, pc}
 8007a06:	bf00      	nop
 8007a08:	200004c8 	.word	0x200004c8

08007a0c <_isatty_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4d05      	ldr	r5, [pc, #20]	; (8007a28 <_isatty_r+0x1c>)
 8007a12:	4604      	mov	r4, r0
 8007a14:	4608      	mov	r0, r1
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	f7f9 ffee 	bl	80019f8 <_isatty>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_isatty_r+0x1a>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_isatty_r+0x1a>
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	200004c8 	.word	0x200004c8

08007a2c <_init>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	bf00      	nop
 8007a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a32:	bc08      	pop	{r3}
 8007a34:	469e      	mov	lr, r3
 8007a36:	4770      	bx	lr

08007a38 <_fini>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr
