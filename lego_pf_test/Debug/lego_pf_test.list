
lego_pf_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b7c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08007c90  08007c90  00017c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008044  08008044  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  08008044  08008044  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008044  08008044  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008044  08008044  00018044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800804c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001fc  08008248  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08008248  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdc5  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e78  00000000  00000000  0002d02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  0002eea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a7a  00000000  00000000  0002fc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001873d  00000000  00000000  0003068a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7b1  00000000  00000000  00048dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c49f  00000000  00000000  00057578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004940  00000000  00000000  000e3a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e8358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007c74 	.word	0x08007c74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	08007c74 	.word	0x08007c74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <user_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void user_init(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	char str1[7] = "\nINIT;\n";
 8000a8e:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <user_init+0x4c>)
 8000a90:	463b      	mov	r3, r7
 8000a92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a96:	6018      	str	r0, [r3, #0]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	8019      	strh	r1, [r3, #0]
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	0c0a      	lsrs	r2, r1, #16
 8000aa0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 1000);
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fb53 	bl	8000150 <strlen>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	4639      	mov	r1, r7
 8000ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <user_init+0x50>)
 8000ab6:	f003 fc09 	bl	80042cc <HAL_UART_Transmit>

    all_led_on();
 8000aba:	f000 f80f 	bl	8000adc <all_led_on>
    HAL_Delay(1000);
 8000abe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac2:	f001 f983 	bl	8001dcc <HAL_Delay>
    all_led_off();
 8000ac6:	f000 f82b 	bl	8000b20 <all_led_off>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	08007c90 	.word	0x08007c90
 8000ad8:	200002f0 	.word	0x200002f0

08000adc <all_led_on>:

void all_led_on(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET); //revers t.k pc13
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <all_led_on+0x3c>)
 8000ae8:	f001 fcef 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2102      	movs	r1, #2
 8000af0:	480a      	ldr	r0, [pc, #40]	; (8000b1c <all_led_on+0x40>)
 8000af2:	f001 fcea 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2108      	movs	r1, #8
 8000afa:	4808      	ldr	r0, [pc, #32]	; (8000b1c <all_led_on+0x40>)
 8000afc:	f001 fce5 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2120      	movs	r1, #32
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <all_led_on+0x40>)
 8000b06:	f001 fce0 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2140      	movs	r1, #64	; 0x40
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <all_led_on+0x40>)
 8000b10:	f001 fcdb 	bl	80024ca <HAL_GPIO_WritePin>
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40011000 	.word	0x40011000
 8000b1c:	40010800 	.word	0x40010800

08000b20 <all_led_off>:

void all_led_off(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET); //revers t.k pc13
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2a:	480c      	ldr	r0, [pc, #48]	; (8000b5c <all_led_off+0x3c>)
 8000b2c:	f001 fccd 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2102      	movs	r1, #2
 8000b34:	480a      	ldr	r0, [pc, #40]	; (8000b60 <all_led_off+0x40>)
 8000b36:	f001 fcc8 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	4808      	ldr	r0, [pc, #32]	; (8000b60 <all_led_off+0x40>)
 8000b40:	f001 fcc3 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2120      	movs	r1, #32
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <all_led_off+0x40>)
 8000b4a:	f001 fcbe 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4803      	ldr	r0, [pc, #12]	; (8000b60 <all_led_off+0x40>)
 8000b54:	f001 fcb9 	bl	80024ca <HAL_GPIO_WritePin>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40011000 	.word	0x40011000
 8000b60:	40010800 	.word	0x40010800

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b68:	f001 f8ce 	bl	8001d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6c:	f000 f83c 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b70:	f000 fa5c 	bl	800102c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b74:	f000 f87e 	bl	8000c74 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b78:	f000 f91c 	bl	8000db4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000b7c:	f000 fa2c 	bl	8000fd8 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000b80:	f000 f9b4 	bl	8000eec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  user_init();
 8000b84:	f7ff ff80 	bl	8000a88 <user_init>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                  //servo
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4814      	ldr	r0, [pc, #80]	; (8000bdc <main+0x78>)
 8000b8c:	f002 f990 	bl	8002eb0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(an1_GPIO_Port, an1_Pin, GPIO_PIN_RESET); //servo
 8000b90:	2200      	movs	r2, #0
 8000b92:	2120      	movs	r1, #32
 8000b94:	4812      	ldr	r0, [pc, #72]	; (8000be0 <main+0x7c>)
 8000b96:	f001 fc98 	bl	80024ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(an2_GPIO_Port, an2_Pin, GPIO_PIN_RESET); //servo
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2110      	movs	r1, #16
 8000b9e:	4810      	ldr	r0, [pc, #64]	; (8000be0 <main+0x7c>)
 8000ba0:	f001 fc93 	bl	80024ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_RESET); //servo
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <main+0x7c>)
 8000baa:	f001 fc8e 	bl	80024ca <HAL_GPIO_WritePin>


  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <main+0x80>)
 8000bb2:	f002 fa77 	bl	80030a4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	480a      	ldr	r0, [pc, #40]	; (8000be4 <main+0x80>)
 8000bba:	f002 fa73 	bl	80030a4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000bbe:	2108      	movs	r1, #8
 8000bc0:	4808      	ldr	r0, [pc, #32]	; (8000be4 <main+0x80>)
 8000bc2:	f002 fa6f 	bl	80030a4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000bc6:	210c      	movs	r1, #12
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <main+0x80>)
 8000bca:	f002 fa6b 	bl	80030a4 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  hnd_pfm_for_motor_1();
 8000bce:	f000 fb25 	bl	800121c <hnd_pfm_for_motor_1>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f001 f8fa 	bl	8001dcc <HAL_Delay>
	  hnd_pfm_for_motor_1();
 8000bd8:	e7f9      	b.n	8000bce <main+0x6a>
 8000bda:	bf00      	nop
 8000bdc:	200002a8 	.word	0x200002a8
 8000be0:	40010c00 	.word	0x40010c00
 8000be4:	20000218 	.word	0x20000218

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b090      	sub	sp, #64	; 0x40
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0318 	add.w	r3, r7, #24
 8000bf2:	2228      	movs	r2, #40	; 0x28
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f004 ff53 	bl	8005aa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fc85 	bl	8002540 <HAL_RCC_OscConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c3c:	f000 fdde 	bl	80017fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c40:	230f      	movs	r3, #15
 8000c42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c44:	2302      	movs	r3, #2
 8000c46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fef2 	bl	8002a44 <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c66:	f000 fdc9 	bl	80017fc <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3740      	adds	r7, #64	; 0x40
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c92:	463b      	mov	r3, r7
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c9e:	4b43      	ldr	r3, [pc, #268]	; (8000dac <MX_TIM1_Init+0x138>)
 8000ca0:	4a43      	ldr	r2, [pc, #268]	; (8000db0 <MX_TIM1_Init+0x13c>)
 8000ca2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000ca4:	4b41      	ldr	r3, [pc, #260]	; (8000dac <MX_TIM1_Init+0x138>)
 8000ca6:	2247      	movs	r2, #71	; 0x47
 8000ca8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b40      	ldr	r3, [pc, #256]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000-1;
 8000cb0:	4b3e      	ldr	r3, [pc, #248]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cb2:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000cb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cbe:	4b3b      	ldr	r3, [pc, #236]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc4:	4b39      	ldr	r3, [pc, #228]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cca:	4838      	ldr	r0, [pc, #224]	; (8000dac <MX_TIM1_Init+0x138>)
 8000ccc:	f002 f848 	bl	8002d60 <HAL_TIM_Base_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000cd6:	f000 fd91 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cde:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4831      	ldr	r0, [pc, #196]	; (8000dac <MX_TIM1_Init+0x138>)
 8000ce8:	f002 fd4e 	bl	8003788 <HAL_TIM_ConfigClockSource>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000cf2:	f000 fd83 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000cf6:	482d      	ldr	r0, [pc, #180]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cf8:	f002 f97c 	bl	8002ff4 <HAL_TIM_IC_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000d02:	f000 fd7b 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4619      	mov	r1, r3
 8000d14:	4825      	ldr	r0, [pc, #148]	; (8000dac <MX_TIM1_Init+0x138>)
 8000d16:	f003 fa19 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000d20:	f000 fd6c 	bl	80017fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	4619      	mov	r1, r3
 8000d3a:	481c      	ldr	r0, [pc, #112]	; (8000dac <MX_TIM1_Init+0x138>)
 8000d3c:	f002 fbc6 	bl	80034cc <HAL_TIM_IC_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000d46:	f000 fd59 	bl	80017fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	2204      	movs	r2, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4814      	ldr	r0, [pc, #80]	; (8000dac <MX_TIM1_Init+0x138>)
 8000d5a:	f002 fbb7 	bl	80034cc <HAL_TIM_IC_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000d64:	f000 fd4a 	bl	80017fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	2208      	movs	r2, #8
 8000d74:	4619      	mov	r1, r3
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <MX_TIM1_Init+0x138>)
 8000d78:	f002 fba8 	bl	80034cc <HAL_TIM_IC_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000d82:	f000 fd3b 	bl	80017fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d86:	2302      	movs	r3, #2
 8000d88:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	220c      	movs	r2, #12
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_TIM1_Init+0x138>)
 8000d96:	f002 fb99 	bl	80034cc <HAL_TIM_IC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000da0:	f000 fd2c 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000218 	.word	0x20000218
 8000db0:	40012c00 	.word	0x40012c00

08000db4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dde:	4b42      	ldr	r3, [pc, #264]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000de6:	4b40      	ldr	r3, [pc, #256]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000de8:	2247      	movs	r2, #71	; 0x47
 8000dea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b3e      	ldr	r3, [pc, #248]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000-1;
 8000df2:	4b3d      	ldr	r3, [pc, #244]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000df4:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000df8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e00:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e06:	4838      	ldr	r0, [pc, #224]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000e08:	f001 ffaa 	bl	8002d60 <HAL_TIM_Base_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000e12:	f000 fcf3 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e1c:	f107 0318 	add.w	r3, r7, #24
 8000e20:	4619      	mov	r1, r3
 8000e22:	4831      	ldr	r0, [pc, #196]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000e24:	f002 fcb0 	bl	8003788 <HAL_TIM_ConfigClockSource>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e2e:	f000 fce5 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e32:	482d      	ldr	r0, [pc, #180]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000e34:	f002 f8de 	bl	8002ff4 <HAL_TIM_IC_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e3e:	f000 fcdd 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4825      	ldr	r0, [pc, #148]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000e52:	f003 f97b 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000e5c:	f000 fcce 	bl	80017fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e60:	2300      	movs	r3, #0
 8000e62:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e64:	2301      	movs	r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	4619      	mov	r1, r3
 8000e76:	481c      	ldr	r0, [pc, #112]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000e78:	f002 fb28 	bl	80034cc <HAL_TIM_IC_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000e82:	f000 fcbb 	bl	80017fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e86:	2302      	movs	r3, #2
 8000e88:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2204      	movs	r2, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4814      	ldr	r0, [pc, #80]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000e96:	f002 fb19 	bl	80034cc <HAL_TIM_IC_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000ea0:	f000 fcac 	bl	80017fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	2208      	movs	r2, #8
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000eb4:	f002 fb0a 	bl	80034cc <HAL_TIM_IC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8000ebe:	f000 fc9d 	bl	80017fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	220c      	movs	r2, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_TIM2_Init+0x134>)
 8000ed2:	f002 fafb 	bl	80034cc <HAL_TIM_IC_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8000edc:	f000 fc8e 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	3728      	adds	r7, #40	; 0x28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000260 	.word	0x20000260

08000eec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08e      	sub	sp, #56	; 0x38
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <MX_TIM4_Init+0xe4>)
 8000f1e:	4a2d      	ldr	r2, [pc, #180]	; (8000fd4 <MX_TIM4_Init+0xe8>)
 8000f20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1-1;
 8000f22:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <MX_TIM4_Init+0xe4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <MX_TIM4_Init+0xe4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 62600;
 8000f2e:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <MX_TIM4_Init+0xe4>)
 8000f30:	f24f 4288 	movw	r2, #62600	; 0xf488
 8000f34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <MX_TIM4_Init+0xe4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <MX_TIM4_Init+0xe4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f42:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <MX_TIM4_Init+0xe4>)
 8000f44:	f001 ff0c 	bl	8002d60 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000f4e:	f000 fc55 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <MX_TIM4_Init+0xe4>)
 8000f60:	f002 fc12 	bl	8003788 <HAL_TIM_ConfigClockSource>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000f6a:	f000 fc47 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f6e:	4818      	ldr	r0, [pc, #96]	; (8000fd0 <MX_TIM4_Init+0xe4>)
 8000f70:	f001 ff45 	bl	8002dfe <HAL_TIM_PWM_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f7a:	f000 fc3f 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <MX_TIM4_Init+0xe4>)
 8000f8e:	f003 f8dd 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f98:	f000 fc30 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9c:	2360      	movs	r3, #96	; 0x60
 8000f9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <MX_TIM4_Init+0xe4>)
 8000fb4:	f002 fb26 	bl	8003604 <HAL_TIM_PWM_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000fbe:	f000 fc1d 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fc2:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <MX_TIM4_Init+0xe4>)
 8000fc4:	f000 fce0 	bl	8001988 <HAL_TIM_MspPostInit>

}
 8000fc8:	bf00      	nop
 8000fca:	3738      	adds	r7, #56	; 0x38
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200002a8 	.word	0x200002a8
 8000fd4:	40000800 	.word	0x40000800

08000fd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_USART3_UART_Init+0x4c>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <MX_USART3_UART_Init+0x50>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <MX_USART3_UART_Init+0x4c>)
 8000fe4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_USART3_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_USART3_UART_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <MX_USART3_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_USART3_UART_Init+0x4c>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <MX_USART3_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_USART3_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_USART3_UART_Init+0x4c>)
 8001010:	f003 f90c 	bl	800422c <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800101a:	f000 fbef 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200002f0 	.word	0x200002f0
 8001028:	40004800 	.word	0x40004800

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001040:	4b48      	ldr	r3, [pc, #288]	; (8001164 <MX_GPIO_Init+0x138>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a47      	ldr	r2, [pc, #284]	; (8001164 <MX_GPIO_Init+0x138>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b45      	ldr	r3, [pc, #276]	; (8001164 <MX_GPIO_Init+0x138>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001058:	4b42      	ldr	r3, [pc, #264]	; (8001164 <MX_GPIO_Init+0x138>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a41      	ldr	r2, [pc, #260]	; (8001164 <MX_GPIO_Init+0x138>)
 800105e:	f043 0320 	orr.w	r3, r3, #32
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <MX_GPIO_Init+0x138>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <MX_GPIO_Init+0x138>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a3b      	ldr	r2, [pc, #236]	; (8001164 <MX_GPIO_Init+0x138>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b39      	ldr	r3, [pc, #228]	; (8001164 <MX_GPIO_Init+0x138>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <MX_GPIO_Init+0x138>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a35      	ldr	r2, [pc, #212]	; (8001164 <MX_GPIO_Init+0x138>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b33      	ldr	r3, [pc, #204]	; (8001164 <MX_GPIO_Init+0x138>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a6:	4830      	ldr	r0, [pc, #192]	; (8001168 <MX_GPIO_Init+0x13c>)
 80010a8:	f001 fa0f 	bl	80024ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_Pin|led2_Pin|led3_Pin|led4_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	216a      	movs	r1, #106	; 0x6a
 80010b0:	482e      	ldr	r0, [pc, #184]	; (800116c <MX_GPIO_Init+0x140>)
 80010b2:	f001 fa0a 	bl	80024ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, stby_Pin|an2_Pin|an1_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2138      	movs	r1, #56	; 0x38
 80010ba:	482d      	ldr	r0, [pc, #180]	; (8001170 <MX_GPIO_Init+0x144>)
 80010bc:	f001 fa05 	bl	80024ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80010c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	4619      	mov	r1, r3
 80010d8:	4823      	ldr	r0, [pc, #140]	; (8001168 <MX_GPIO_Init+0x13c>)
 80010da:	f001 f85b 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin led2_Pin led3_Pin led4_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin|led4_Pin;
 80010de:	236a      	movs	r3, #106	; 0x6a
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0310 	add.w	r3, r7, #16
 80010f2:	4619      	mov	r1, r3
 80010f4:	481d      	ldr	r0, [pc, #116]	; (800116c <MX_GPIO_Init+0x140>)
 80010f6:	f001 f84d 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80010fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_GPIO_Init+0x148>)
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4619      	mov	r1, r3
 800110e:	4817      	ldr	r0, [pc, #92]	; (800116c <MX_GPIO_Init+0x140>)
 8001110:	f001 f840 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : stby_Pin an2_Pin an1_Pin */
  GPIO_InitStruct.Pin = stby_Pin|an2_Pin|an1_Pin;
 8001114:	2338      	movs	r3, #56	; 0x38
 8001116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2302      	movs	r3, #2
 8001122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	4811      	ldr	r0, [pc, #68]	; (8001170 <MX_GPIO_Init+0x144>)
 800112c:	f001 f832 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : in2_Pin in1_Pin */
  GPIO_InitStruct.Pin = in2_Pin|in1_Pin;
 8001130:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001134:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	4619      	mov	r1, r3
 8001144:	480a      	ldr	r0, [pc, #40]	; (8001170 <MX_GPIO_Init+0x144>)
 8001146:	f001 f825 	bl	8002194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	2028      	movs	r0, #40	; 0x28
 8001150:	f000 ff37 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001154:	2028      	movs	r0, #40	; 0x28
 8001156:	f000 ff50 	bl	8001ffa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115a:	bf00      	nop
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	40011000 	.word	0x40011000
 800116c:	40010800 	.word	0x40010800
 8001170:	40010c00 	.word	0x40010c00
 8001174:	10110000 	.word	0x10110000

08001178 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  if (huart == &huart3)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_UART_RxCpltCallback+0x48>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d116      	bne.n	80011b6 <HAL_UART_RxCpltCallback+0x3e>
  {
    dataReceived=1;
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_UART_RxCpltCallback+0x4c>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]

    if( dataTransmitted != 0 )
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_UART_RxCpltCallback+0x50>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00a      	beq.n	80011ac <HAL_UART_RxCpltCallback+0x34>
    {
      HAL_UART_Transmit_IT(&huart3, str_uart_buffer, 1);
 8001196:	2201      	movs	r2, #1
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <HAL_UART_RxCpltCallback+0x54>)
 800119a:	4809      	ldr	r0, [pc, #36]	; (80011c0 <HAL_UART_RxCpltCallback+0x48>)
 800119c:	f003 f919 	bl	80043d2 <HAL_UART_Transmit_IT>
      dataReceived=0;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_UART_RxCpltCallback+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
      dataTransmitted=0;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_UART_RxCpltCallback+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
    }

    HAL_UART_Receive_IT (&huart3, str_uart_buffer, 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	4907      	ldr	r1, [pc, #28]	; (80011cc <HAL_UART_RxCpltCallback+0x54>)
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <HAL_UART_RxCpltCallback+0x48>)
 80011b2:	f003 f943 	bl	800443c <HAL_UART_Receive_IT>
  }
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200002f0 	.word	0x200002f0
 80011c4:	20000338 	.word	0x20000338
 80011c8:	20000000 	.word	0x20000000
 80011cc:	2000033c 	.word	0x2000033c

080011d0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  if(huart == &huart3)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a0c      	ldr	r2, [pc, #48]	; (800120c <HAL_UART_TxCpltCallback+0x3c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d111      	bne.n	8001204 <HAL_UART_TxCpltCallback+0x34>
  {
    dataTransmitted=1;
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_UART_TxCpltCallback+0x40>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]

    if( dataReceived != 0 )
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_UART_TxCpltCallback+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_UART_TxCpltCallback+0x34>
    {
      HAL_UART_Transmit_IT(&huart3, str_uart_buffer, 1);
 80011ee:	2201      	movs	r2, #1
 80011f0:	4909      	ldr	r1, [pc, #36]	; (8001218 <HAL_UART_TxCpltCallback+0x48>)
 80011f2:	4806      	ldr	r0, [pc, #24]	; (800120c <HAL_UART_TxCpltCallback+0x3c>)
 80011f4:	f003 f8ed 	bl	80043d2 <HAL_UART_Transmit_IT>
      dataReceived=0;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_UART_TxCpltCallback+0x44>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
      dataTransmitted=0;
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <HAL_UART_TxCpltCallback+0x40>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200002f0 	.word	0x200002f0
 8001210:	20000000 	.word	0x20000000
 8001214:	20000338 	.word	0x20000338
 8001218:	2000033c 	.word	0x2000033c

0800121c <hnd_pfm_for_motor_1>:
	}

}
*/

void hnd_pfm_for_motor_1(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
	enum state_pwm current_state = pwm_input_hnd_R();
 8001222:	f000 f81b 	bl	800125c <pwm_input_hnd_R>
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	enum state_pwm current_signal = pwm_input_hnd_L();
 800122a:	f000 f83b 	bl	80012a4 <pwm_input_hnd_L>
 800122e:	4603      	mov	r3, r0
 8001230:	71bb      	strb	r3, [r7, #6]
	transition_callback worker = FSM_table[current_state][current_signal].worker;
 8001232:	79fa      	ldrb	r2, [r7, #7]
 8001234:	79b9      	ldrb	r1, [r7, #6]
 8001236:	4808      	ldr	r0, [pc, #32]	; (8001258 <hnd_pfm_for_motor_1+0x3c>)
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	440b      	add	r3, r1
 8001240:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001244:	603b      	str	r3, [r7, #0]
	if (worker != NULL) {
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <hnd_pfm_for_motor_1+0x34>
		worker();
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	4798      	blx	r3
	}
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000004 	.word	0x20000004

0800125c <pwm_input_hnd_R>:

enum state_pwm pwm_input_hnd_R(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af02      	add	r7, sp, #8
	GPIO_PinState state1 = HAL_GPIO_ReadPin(in1_GPIO_Port, in1_Pin);
 8001262:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001266:	480a      	ldr	r0, [pc, #40]	; (8001290 <pwm_input_hnd_R+0x34>)
 8001268:	f001 f918 	bl	800249c <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	71fb      	strb	r3, [r7, #7]
	return pwm_in_hnd_i(state1, &last_state1, &changes_count1, &last_time1, &statepwm1, 1);
 8001270:	79f8      	ldrb	r0, [r7, #7]
 8001272:	2301      	movs	r3, #1
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <pwm_input_hnd_R+0x38>)
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <pwm_input_hnd_R+0x3c>)
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <pwm_input_hnd_R+0x40>)
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <pwm_input_hnd_R+0x44>)
 8001280:	f000 f834 	bl	80012ec <pwm_in_hnd_i>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40010c00 	.word	0x40010c00
 8001294:	20000001 	.word	0x20000001
 8001298:	20000348 	.word	0x20000348
 800129c:	20000352 	.word	0x20000352
 80012a0:	20000350 	.word	0x20000350

080012a4 <pwm_input_hnd_L>:

enum state_pwm pwm_input_hnd_L(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af02      	add	r7, sp, #8
	GPIO_PinState state2 = HAL_GPIO_ReadPin(in2_GPIO_Port, in2_Pin);
 80012aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ae:	480a      	ldr	r0, [pc, #40]	; (80012d8 <pwm_input_hnd_L+0x34>)
 80012b0:	f001 f8f4 	bl	800249c <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
	return pwm_in_hnd_i(state2, &last_state2, &changes_count2, &last_time2, &statepwm2, 2);
 80012b8:	79f8      	ldrb	r0, [r7, #7]
 80012ba:	2302      	movs	r3, #2
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <pwm_input_hnd_L+0x38>)
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <pwm_input_hnd_L+0x3c>)
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <pwm_input_hnd_L+0x40>)
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <pwm_input_hnd_L+0x44>)
 80012c8:	f000 f810 	bl	80012ec <pwm_in_hnd_i>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40010c00 	.word	0x40010c00
 80012dc:	20000002 	.word	0x20000002
 80012e0:	2000034c 	.word	0x2000034c
 80012e4:	20000353 	.word	0x20000353
 80012e8:	20000351 	.word	0x20000351

080012ec <pwm_in_hnd_i>:

enum state_pwm pwm_in_hnd_i(
		GPIO_PinState state, GPIO_PinState *last_state,
		uint8_t *changes_count, uint32_t *last_time,
		volatile enum state_pwm *statepwm, uint8_t type) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	4603      	mov	r3, r0
 80012fa:	73fb      	strb	r3, [r7, #15]
	uint32_t current_time = HAL_GetTick();
 80012fc:	f000 fd5c 	bl	8001db8 <HAL_GetTick>
 8001300:	6178      	str	r0, [r7, #20]

    // Проверка изменения состояния входов
    if (state != *last_state) {
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	429a      	cmp	r2, r3
 800130a:	d008      	beq.n	800131e <pwm_in_hnd_i+0x32>
        *last_state = state;
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	7bfa      	ldrb	r2, [r7, #15]
 8001310:	701a      	strb	r2, [r3, #0]
        (*changes_count)++;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	b2da      	uxtb	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	701a      	strb	r2, [r3, #0]
    }

    // Проверяем обновление состояния сигнала каждые 10 мс
    if ((int32_t)(current_time - *last_time) > 10) {
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b0a      	cmp	r3, #10
 8001328:	dd19      	ble.n	800135e <pwm_in_hnd_i+0x72>

		// Если был зафиксирован Ш�?М, не сбрасываем его до статичного сигнала
        if (*changes_count > 5) {
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b05      	cmp	r3, #5
 8001330:	d903      	bls.n	800133a <pwm_in_hnd_i+0x4e>
        	*statepwm = PWM;
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e00b      	b.n	8001352 <pwm_in_hnd_i+0x66>
        } else if (*changes_count == 0) {  // Если сигнал полностью стабилен, сбрасываем PWM
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d107      	bne.n	8001352 <pwm_in_hnd_i+0x66>
        	*statepwm = (state == GPIO_PIN_SET) ? HIGH : LOW;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <pwm_in_hnd_i+0x60>
 8001348:	2200      	movs	r2, #0
 800134a:	e000      	b.n	800134e <pwm_in_hnd_i+0x62>
 800134c:	2202      	movs	r2, #2
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	701a      	strb	r2, [r3, #0]
        }


        *last_time = current_time;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	601a      	str	r2, [r3, #0]
        // Сбрасываем счетчик изменений
        *changes_count = 0;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
	}

	switch(*statepwm)
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d042      	beq.n	80013ee <pwm_in_hnd_i+0x102>
 8001368:	2b02      	cmp	r3, #2
 800136a:	dc5e      	bgt.n	800142a <pwm_in_hnd_i+0x13e>
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <pwm_in_hnd_i+0x8a>
 8001370:	2b01      	cmp	r3, #1
 8001372:	d01e      	beq.n	80013b2 <pwm_in_hnd_i+0xc6>
 8001374:	e059      	b.n	800142a <pwm_in_hnd_i+0x13e>
	{
	    case HIGH: {
	    	switch (type) {
 8001376:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800137a:	2b01      	cmp	r3, #1
 800137c:	d002      	beq.n	8001384 <pwm_in_hnd_i+0x98>
 800137e:	2b02      	cmp	r3, #2
 8001380:	d00b      	beq.n	800139a <pwm_in_hnd_i+0xae>
				}
				break;
			}

	    }
	    break;
 8001382:	e052      	b.n	800142a <pwm_in_hnd_i+0x13e>
			    	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	2102      	movs	r1, #2
 8001388:	482b      	ldr	r0, [pc, #172]	; (8001438 <pwm_in_hnd_i+0x14c>)
 800138a:	f001 f89e 	bl	80024ca <HAL_GPIO_WritePin>
			    	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2108      	movs	r1, #8
 8001392:	4829      	ldr	r0, [pc, #164]	; (8001438 <pwm_in_hnd_i+0x14c>)
 8001394:	f001 f899 	bl	80024ca <HAL_GPIO_WritePin>
				break;
 8001398:	e00a      	b.n	80013b0 <pwm_in_hnd_i+0xc4>
			    	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	2120      	movs	r1, #32
 800139e:	4826      	ldr	r0, [pc, #152]	; (8001438 <pwm_in_hnd_i+0x14c>)
 80013a0:	f001 f893 	bl	80024ca <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2140      	movs	r1, #64	; 0x40
 80013a8:	4823      	ldr	r0, [pc, #140]	; (8001438 <pwm_in_hnd_i+0x14c>)
 80013aa:	f001 f88e 	bl	80024ca <HAL_GPIO_WritePin>
				break;
 80013ae:	bf00      	nop
	    break;
 80013b0:	e03b      	b.n	800142a <pwm_in_hnd_i+0x13e>
	    case PWM: {
	    	switch (type) {
 80013b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d002      	beq.n	80013c0 <pwm_in_hnd_i+0xd4>
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d00b      	beq.n	80013d6 <pwm_in_hnd_i+0xea>
				}
				break;
			}

	    }
	    break;
 80013be:	e034      	b.n	800142a <pwm_in_hnd_i+0x13e>
			    	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2102      	movs	r1, #2
 80013c4:	481c      	ldr	r0, [pc, #112]	; (8001438 <pwm_in_hnd_i+0x14c>)
 80013c6:	f001 f880 	bl	80024ca <HAL_GPIO_WritePin>
			    	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	2108      	movs	r1, #8
 80013ce:	481a      	ldr	r0, [pc, #104]	; (8001438 <pwm_in_hnd_i+0x14c>)
 80013d0:	f001 f87b 	bl	80024ca <HAL_GPIO_WritePin>
				break;
 80013d4:	e00a      	b.n	80013ec <pwm_in_hnd_i+0x100>
			    	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2120      	movs	r1, #32
 80013da:	4817      	ldr	r0, [pc, #92]	; (8001438 <pwm_in_hnd_i+0x14c>)
 80013dc:	f001 f875 	bl	80024ca <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	2140      	movs	r1, #64	; 0x40
 80013e4:	4814      	ldr	r0, [pc, #80]	; (8001438 <pwm_in_hnd_i+0x14c>)
 80013e6:	f001 f870 	bl	80024ca <HAL_GPIO_WritePin>
				break;
 80013ea:	bf00      	nop
	    break;
 80013ec:	e01d      	b.n	800142a <pwm_in_hnd_i+0x13e>
	    case LOW: {
	    	switch (type) {
 80013ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d002      	beq.n	80013fc <pwm_in_hnd_i+0x110>
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d00b      	beq.n	8001412 <pwm_in_hnd_i+0x126>
				}
				break;
			}

	    }
	    break;
 80013fa:	e015      	b.n	8001428 <pwm_in_hnd_i+0x13c>
			    	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2102      	movs	r1, #2
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <pwm_in_hnd_i+0x14c>)
 8001402:	f001 f862 	bl	80024ca <HAL_GPIO_WritePin>
			    	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8001406:	2201      	movs	r2, #1
 8001408:	2108      	movs	r1, #8
 800140a:	480b      	ldr	r0, [pc, #44]	; (8001438 <pwm_in_hnd_i+0x14c>)
 800140c:	f001 f85d 	bl	80024ca <HAL_GPIO_WritePin>
				break;
 8001410:	e00a      	b.n	8001428 <pwm_in_hnd_i+0x13c>
			    	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	2120      	movs	r1, #32
 8001416:	4808      	ldr	r0, [pc, #32]	; (8001438 <pwm_in_hnd_i+0x14c>)
 8001418:	f001 f857 	bl	80024ca <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2140      	movs	r1, #64	; 0x40
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <pwm_in_hnd_i+0x14c>)
 8001422:	f001 f852 	bl	80024ca <HAL_GPIO_WritePin>
				break;
 8001426:	bf00      	nop
	    break;
 8001428:	bf00      	nop
	}

	return *statepwm;
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3

}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40010800 	.word	0x40010800

0800143c <hal_tim_set_compare>:

void hal_tim_set_compare(uint16_t pwm) {
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm);
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <hal_tim_set_compare+0x1c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	88fa      	ldrh	r2, [r7, #6]
 800144c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	200002a8 	.word	0x200002a8

0800145c <state_zero>:

void state_zero(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2108      	movs	r1, #8
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <state_zero+0x2c>)
 8001466:	f001 f830 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(an1_GPIO_Port, an1_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2120      	movs	r1, #32
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <state_zero+0x2c>)
 8001470:	f001 f82b 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(an2_GPIO_Port, an2_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2110      	movs	r1, #16
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <state_zero+0x2c>)
 800147a:	f001 f826 	bl	80024ca <HAL_GPIO_WritePin>
	hal_tim_set_compare(0);
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff ffdc 	bl	800143c <hal_tim_set_compare>
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40010c00 	.word	0x40010c00

0800148c <enable_L>:

void enable_L(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(an1_GPIO_Port, an1_Pin, GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	2120      	movs	r1, #32
 8001494:	4807      	ldr	r0, [pc, #28]	; (80014b4 <enable_L+0x28>)
 8001496:	f001 f818 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(an2_GPIO_Port, an2_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2110      	movs	r1, #16
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <enable_L+0x28>)
 80014a0:	f001 f813 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2108      	movs	r1, #8
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <enable_L+0x28>)
 80014aa:	f001 f80e 	bl	80024ca <HAL_GPIO_WritePin>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40010c00 	.word	0x40010c00

080014b8 <enable_R>:

void enable_R(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(an1_GPIO_Port, an1_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2120      	movs	r1, #32
 80014c0:	4807      	ldr	r0, [pc, #28]	; (80014e0 <enable_R+0x28>)
 80014c2:	f001 f802 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(an2_GPIO_Port, an2_Pin, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2110      	movs	r1, #16
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <enable_R+0x28>)
 80014cc:	f000 fffd 	bl	80024ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2108      	movs	r1, #8
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <enable_R+0x28>)
 80014d6:	f000 fff8 	bl	80024ca <HAL_GPIO_WritePin>
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40010c00 	.word	0x40010c00

080014e4 <state_MAX_L>:

void state_MAX_L(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	enable_L();
 80014e8:	f7ff ffd0 	bl	800148c <enable_L>
	hal_tim_set_compare(PERIOD_MAX);
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <state_MAX_L+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ffa2 	bl	800143c <hal_tim_set_compare>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200002a8 	.word	0x200002a8

08001500 <state_MAX_R>:

void state_MAX_R(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	enable_R();
 8001504:	f7ff ffd8 	bl	80014b8 <enable_R>
	hal_tim_set_compare(PERIOD_MAX);
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <state_MAX_R+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	b29b      	uxth	r3, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ff94 	bl	800143c <hal_tim_set_compare>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200002a8 	.word	0x200002a8

0800151c <state_PWM_L>:

void state_PWM_L(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
	enable_L();
 8001522:	f7ff ffb3 	bl	800148c <enable_L>
	uint16_t pwm1 = falling_to_pwm(falling11, 3);
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <state_PWM_L+0x2c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2103      	movs	r1, #3
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f825 	bl	800157c <falling_to_pwm>
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
	hal_tim_set_compare(pwm1);
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff7f 	bl	800143c <hal_tim_set_compare>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000340 	.word	0x20000340

0800154c <state_PWM_R>:

void state_PWM_R(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
	enable_R();
 8001552:	f7ff ffb1 	bl	80014b8 <enable_R>
	uint16_t pwm1 = falling_to_pwm(falling12, 4);
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <state_PWM_R+0x2c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2104      	movs	r1, #4
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f80d 	bl	800157c <falling_to_pwm>
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
	hal_tim_set_compare(pwm1);
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff67 	bl	800143c <hal_tim_set_compare>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000344 	.word	0x20000344

0800157c <falling_to_pwm>:


uint16_t falling_to_pwm(uint32_t falling, uint8_t type) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
	uint16_t pwm1 = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	81fb      	strh	r3, [r7, #14]

	print_uart_data(falling, type);
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	4619      	mov	r1, r3
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f903 	bl	800179c <print_uart_data>

	if(1600 >= falling && falling >= 1400) {
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800159c:	d80f      	bhi.n	80015be <falling_to_pwm+0x42>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80015a4:	d30b      	bcc.n	80015be <falling_to_pwm+0x42>
		pwm1 = PERIOD_MAX * 389 / 1000;
 80015a6:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <falling_to_pwm+0x114>)
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	f240 1285 	movw	r2, #389	; 0x185
 80015ae:	fb02 f303 	mul.w	r3, r2, r3
 80015b2:	4a38      	ldr	r2, [pc, #224]	; (8001694 <falling_to_pwm+0x118>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	099b      	lsrs	r3, r3, #6
 80015ba:	81fb      	strh	r3, [r7, #14]
 80015bc:	e063      	b.n	8001686 <falling_to_pwm+0x10a>
	} else if(1350 >= falling && falling >= 1150) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f240 5246 	movw	r2, #1350	; 0x546
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d80d      	bhi.n	80015e4 <falling_to_pwm+0x68>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f240 427d 	movw	r2, #1149	; 0x47d
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d908      	bls.n	80015e4 <falling_to_pwm+0x68>
		pwm1 = PERIOD_MAX * 512 / 1000;
 80015d2:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <falling_to_pwm+0x114>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	025b      	lsls	r3, r3, #9
 80015d8:	4a2e      	ldr	r2, [pc, #184]	; (8001694 <falling_to_pwm+0x118>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	099b      	lsrs	r3, r3, #6
 80015e0:	81fb      	strh	r3, [r7, #14]
 80015e2:	e050      	b.n	8001686 <falling_to_pwm+0x10a>
	} else if(1100 >= falling && falling >= 900) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f240 424c 	movw	r2, #1100	; 0x44c
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d80f      	bhi.n	800160e <falling_to_pwm+0x92>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80015f4:	d30b      	bcc.n	800160e <falling_to_pwm+0x92>
		pwm1 = PERIOD_MAX * 630 / 1000;
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <falling_to_pwm+0x114>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f240 2276 	movw	r2, #630	; 0x276
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	4a24      	ldr	r2, [pc, #144]	; (8001694 <falling_to_pwm+0x118>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	81fb      	strh	r3, [r7, #14]
 800160c:	e03b      	b.n	8001686 <falling_to_pwm+0x10a>
	} else if(850 >= falling && falling >= 650) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f240 3252 	movw	r2, #850	; 0x352
 8001614:	4293      	cmp	r3, r2
 8001616:	d810      	bhi.n	800163a <falling_to_pwm+0xbe>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f240 2289 	movw	r2, #649	; 0x289
 800161e:	4293      	cmp	r3, r2
 8001620:	d90b      	bls.n	800163a <falling_to_pwm+0xbe>
		pwm1 = PERIOD_MAX * 750 / 1000;
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <falling_to_pwm+0x114>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f240 22ee 	movw	r2, #750	; 0x2ee
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	4a19      	ldr	r2, [pc, #100]	; (8001694 <falling_to_pwm+0x118>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	099b      	lsrs	r3, r3, #6
 8001636:	81fb      	strh	r3, [r7, #14]
 8001638:	e025      	b.n	8001686 <falling_to_pwm+0x10a>
	} else if(600 >= falling && falling >= 400) {
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001640:	d80f      	bhi.n	8001662 <falling_to_pwm+0xe6>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001648:	d30b      	bcc.n	8001662 <falling_to_pwm+0xe6>
		pwm1 = PERIOD_MAX * 872 / 1000;
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <falling_to_pwm+0x114>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	f44f 725a 	mov.w	r2, #872	; 0x368
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <falling_to_pwm+0x118>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	81fb      	strh	r3, [r7, #14]
 8001660:	e011      	b.n	8001686 <falling_to_pwm+0x10a>
	} else if(350 >= falling && falling >= 150) {
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001668:	d80d      	bhi.n	8001686 <falling_to_pwm+0x10a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b95      	cmp	r3, #149	; 0x95
 800166e:	d90a      	bls.n	8001686 <falling_to_pwm+0x10a>
		pwm1 = PERIOD_MAX * 950 / 1000;
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <falling_to_pwm+0x114>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	4a05      	ldr	r2, [pc, #20]	; (8001694 <falling_to_pwm+0x118>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	099b      	lsrs	r3, r3, #6
 8001684:	81fb      	strh	r3, [r7, #14]
	}
	return pwm1;
 8001686:	89fb      	ldrh	r3, [r7, #14]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200002a8 	.word	0x200002a8
 8001694:	10624dd3 	.word	0x10624dd3

08001698 <HAL_TIM_IC_CaptureCallback>:

uint32_t arr_falling1 = 0;
uint32_t arr_falling2 = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af02      	add	r7, sp, #8
 800169e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1 ) {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_TIM_IC_CaptureCallback+0x80>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d131      	bne.n	800170e <HAL_TIM_IC_CaptureCallback+0x76>

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7f1b      	ldrb	r3, [r3, #28]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d103      	bne.n	80016ba <HAL_TIM_IC_CaptureCallback+0x22>
			__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_TIM_IC_CaptureCallback+0x84>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7f1b      	ldrb	r3, [r3, #28]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d10c      	bne.n	80016dc <HAL_TIM_IC_CaptureCallback+0x44>
			uint32_t falling0 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 80016c2:	2104      	movs	r1, #4
 80016c4:	4815      	ldr	r0, [pc, #84]	; (800171c <HAL_TIM_IC_CaptureCallback+0x84>)
 80016c6:	f002 f927 	bl	8003918 <HAL_TIM_ReadCapturedValue>
 80016ca:	60f8      	str	r0, [r7, #12]
			fill_arr(&counter1, &arr_falling1, &falling11, falling0, 1);
 80016cc:	2301      	movs	r3, #1
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4a13      	ldr	r2, [pc, #76]	; (8001720 <HAL_TIM_IC_CaptureCallback+0x88>)
 80016d4:	4913      	ldr	r1, [pc, #76]	; (8001724 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80016d6:	4814      	ldr	r0, [pc, #80]	; (8001728 <HAL_TIM_IC_CaptureCallback+0x90>)
 80016d8:	f000 f82e 	bl	8001738 <fill_arr>
			//print_uart_data(falling0, 2);
		 }

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7f1b      	ldrb	r3, [r3, #28]
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d103      	bne.n	80016ec <HAL_TIM_IC_CaptureCallback+0x54>
			__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_TIM_IC_CaptureCallback+0x84>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2200      	movs	r2, #0
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7f1b      	ldrb	r3, [r3, #28]
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d10c      	bne.n	800170e <HAL_TIM_IC_CaptureCallback+0x76>
			uint32_t falling0 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_4);
 80016f4:	210c      	movs	r1, #12
 80016f6:	4809      	ldr	r0, [pc, #36]	; (800171c <HAL_TIM_IC_CaptureCallback+0x84>)
 80016f8:	f002 f90e 	bl	8003918 <HAL_TIM_ReadCapturedValue>
 80016fc:	60b8      	str	r0, [r7, #8]
			fill_arr(&counter2, &arr_falling2, &falling12, falling0, 2);
 80016fe:	2302      	movs	r3, #2
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_TIM_IC_CaptureCallback+0x94>)
 8001706:	490a      	ldr	r1, [pc, #40]	; (8001730 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001708:	480a      	ldr	r0, [pc, #40]	; (8001734 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800170a:	f000 f815 	bl	8001738 <fill_arr>

		 }
	 }
*/

}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40012c00 	.word	0x40012c00
 800171c:	20000218 	.word	0x20000218
 8001720:	20000340 	.word	0x20000340
 8001724:	20000358 	.word	0x20000358
 8001728:	20000354 	.word	0x20000354
 800172c:	20000344 	.word	0x20000344
 8001730:	2000035c 	.word	0x2000035c
 8001734:	20000355 	.word	0x20000355

08001738 <fill_arr>:

void fill_arr(uint8_t *counter, uint32_t *arr_falling, volatile uint32_t *falling, uint32_t falling0, uint8_t type) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]

	*arr_falling += falling0;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	441a      	add	r2, r3
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	601a      	str	r2, [r3, #0]
	(*counter)++;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	b2da      	uxtb	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	701a      	strb	r2, [r3, #0]
    if (*counter == size_arr) {
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b0a      	cmp	r3, #10
 8001764:	d114      	bne.n	8001790 <fill_arr+0x58>
        *falling = *arr_falling / size_arr;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <fill_arr+0x60>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	08da      	lsrs	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	601a      	str	r2, [r3, #0]

        *counter = 0;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
        *arr_falling = 0;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

        print_uart_data(*falling, type);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	7e3a      	ldrb	r2, [r7, #24]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f806 	bl	800179c <print_uart_data>
    }
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	cccccccd 	.word	0xcccccccd

0800179c <print_uart_data>:
    }
}
*/


void print_uart_data(uint32_t falling, uint8_t num) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b094      	sub	sp, #80	; 0x50
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	70fb      	strb	r3, [r7, #3]
	char str1[63] = {0,};
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	223b      	movs	r2, #59	; 0x3b
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f004 f974 	bl	8005aa2 <memset>
    snprintf(str1, 63, "\nResult %d= %lu\n", num, falling);
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	f107 0008 	add.w	r0, r7, #8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <print_uart_data+0x58>)
 80017c8:	213f      	movs	r1, #63	; 0x3f
 80017ca:	f004 f8f3 	bl	80059b4 <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 1000);
 80017ce:	f107 0308 	add.w	r3, r7, #8
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fcbc 	bl	8000150 <strlen>
 80017d8:	4603      	mov	r3, r0
 80017da:	b29a      	uxth	r2, r3
 80017dc:	f107 0108 	add.w	r1, r7, #8
 80017e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <print_uart_data+0x5c>)
 80017e6:	f002 fd71 	bl	80042cc <HAL_UART_Transmit>
}
 80017ea:	bf00      	nop
 80017ec:	3748      	adds	r7, #72	; 0x48
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	08007c98 	.word	0x08007c98
 80017f8:	200002f0 	.word	0x200002f0

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	e7fe      	b.n	8001804 <Error_Handler+0x8>
	...

08001808 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_MspInit+0x5c>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	4a14      	ldr	r2, [pc, #80]	; (8001864 <HAL_MspInit+0x5c>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6193      	str	r3, [r2, #24]
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_MspInit+0x5c>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_MspInit+0x5c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_MspInit+0x5c>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	61d3      	str	r3, [r2, #28]
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_MspInit+0x5c>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <HAL_MspInit+0x60>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_MspInit+0x60>)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000

0800186c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08c      	sub	sp, #48	; 0x30
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0320 	add.w	r3, r7, #32
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a3c      	ldr	r2, [pc, #240]	; (8001978 <HAL_TIM_Base_MspInit+0x10c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d12d      	bne.n	80018e8 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800188c:	4b3b      	ldr	r3, [pc, #236]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a3a      	ldr	r2, [pc, #232]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 8001892:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b38      	ldr	r3, [pc, #224]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b35      	ldr	r3, [pc, #212]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a34      	ldr	r2, [pc, #208]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80018bc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80018c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0320 	add.w	r3, r7, #32
 80018ce:	4619      	mov	r1, r3
 80018d0:	482b      	ldr	r0, [pc, #172]	; (8001980 <HAL_TIM_Base_MspInit+0x114>)
 80018d2:	f000 fc5f 	bl	8002194 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	201b      	movs	r0, #27
 80018dc:	f000 fb71 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018e0:	201b      	movs	r0, #27
 80018e2:	f000 fb8a 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018e6:	e042      	b.n	800196e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f0:	d12c      	bne.n	800194c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018f2:	4b22      	ldr	r3, [pc, #136]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a21      	ldr	r2, [pc, #132]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b1f      	ldr	r3, [pc, #124]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	4b1c      	ldr	r3, [pc, #112]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4a1b      	ldr	r2, [pc, #108]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6193      	str	r3, [r2, #24]
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001922:	2305      	movs	r3, #5
 8001924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 0320 	add.w	r3, r7, #32
 8001932:	4619      	mov	r1, r3
 8001934:	4812      	ldr	r0, [pc, #72]	; (8001980 <HAL_TIM_Base_MspInit+0x114>)
 8001936:	f000 fc2d 	bl	8002194 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	201c      	movs	r0, #28
 8001940:	f000 fb3f 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001944:	201c      	movs	r0, #28
 8001946:	f000 fb58 	bl	8001ffa <HAL_NVIC_EnableIRQ>
}
 800194a:	e010      	b.n	800196e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM4)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <HAL_TIM_Base_MspInit+0x118>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10b      	bne.n	800196e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_TIM_Base_MspInit+0x110>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
}
 800196e:	bf00      	nop
 8001970:	3730      	adds	r7, #48	; 0x30
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40012c00 	.word	0x40012c00
 800197c:	40021000 	.word	0x40021000
 8001980:	40010800 	.word	0x40010800
 8001984:	40000800 	.word	0x40000800

08001988 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <HAL_TIM_MspPostInit+0x58>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d117      	bne.n	80019d8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a8:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <HAL_TIM_MspPostInit+0x5c>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <HAL_TIM_MspPostInit+0x5c>)
 80019ae:	f043 0308 	orr.w	r3, r3, #8
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_TIM_MspPostInit+0x5c>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019c0:	2340      	movs	r3, #64	; 0x40
 80019c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4619      	mov	r1, r3
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <HAL_TIM_MspPostInit+0x60>)
 80019d4:	f000 fbde 	bl	8002194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019d8:	bf00      	nop
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40000800 	.word	0x40000800
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010c00 	.word	0x40010c00

080019ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a20      	ldr	r2, [pc, #128]	; (8001a88 <HAL_UART_MspInit+0x9c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d139      	bne.n	8001a80 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <HAL_UART_MspInit+0xa0>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <HAL_UART_MspInit+0xa0>)
 8001a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a16:	61d3      	str	r3, [r2, #28]
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <HAL_UART_MspInit+0xa0>)
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_UART_MspInit+0xa0>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <HAL_UART_MspInit+0xa0>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_UART_MspInit+0xa0>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480f      	ldr	r0, [pc, #60]	; (8001a90 <HAL_UART_MspInit+0xa4>)
 8001a52:	f000 fb9f 	bl	8002194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4809      	ldr	r0, [pc, #36]	; (8001a90 <HAL_UART_MspInit+0xa4>)
 8001a6c:	f000 fb92 	bl	8002194 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	2027      	movs	r0, #39	; 0x27
 8001a76:	f000 faa4 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a7a:	2027      	movs	r0, #39	; 0x27
 8001a7c:	f000 fabd 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40004800 	.word	0x40004800
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010c00 	.word	0x40010c00

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a98:	e7fe      	b.n	8001a98 <NMI_Handler+0x4>

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ada:	f000 f95b 	bl	8001d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <TIM1_CC_IRQHandler+0x10>)
 8001aea:	f001 fbe7 	bl	80032bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000218 	.word	0x20000218

08001af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <TIM2_IRQHandler+0x10>)
 8001afe:	f001 fbdd 	bl	80032bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000260 	.word	0x20000260

08001b0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <USART3_IRQHandler+0x10>)
 8001b12:	f002 fcb9 	bl	8004488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200002f0 	.word	0x200002f0

08001b20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8001b24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b28:	f000 fce8 	bl	80024fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return 1;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <_kill>:

int _kill(int pid, int sig)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b48:	f003 fffe 	bl	8005b48 <__errno>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2216      	movs	r2, #22
 8001b50:	601a      	str	r2, [r3, #0]
  return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_exit>:

void _exit (int status)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b66:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffe7 	bl	8001b3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b70:	e7fe      	b.n	8001b70 <_exit+0x12>

08001b72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e00a      	b.n	8001b9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b84:	f3af 8000 	nop.w
 8001b88:	4601      	mov	r1, r0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	60ba      	str	r2, [r7, #8]
 8001b90:	b2ca      	uxtb	r2, r1
 8001b92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	3301      	adds	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dbf0      	blt.n	8001b84 <_read+0x12>
  }

  return len;
 8001ba2:	687b      	ldr	r3, [r7, #4]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	e009      	b.n	8001bd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	60ba      	str	r2, [r7, #8]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dbf1      	blt.n	8001bbe <_write+0x12>
  }
  return len;
 8001bda:	687b      	ldr	r3, [r7, #4]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_close>:

int _close(int file)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <_isatty>:

int _isatty(int file)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c20:	2301      	movs	r3, #1
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <_sbrk+0x5c>)
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <_sbrk+0x60>)
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <_sbrk+0x64>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <_sbrk+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d207      	bcs.n	8001c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c74:	f003 ff68 	bl	8005b48 <__errno>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	e009      	b.n	8001c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <_sbrk+0x64>)
 8001c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20005000 	.word	0x20005000
 8001ca4:	00000400 	.word	0x00000400
 8001ca8:	20000360 	.word	0x20000360
 8001cac:	200004b8 	.word	0x200004b8

08001cb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cbc:	f7ff fff8 	bl	8001cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc0:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cc2:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd6:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cd8:	4c09      	ldr	r4, [pc, #36]	; (8001d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f003 ff35 	bl	8005b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cea:	f7fe ff3b 	bl	8000b64 <main>
  bx lr
 8001cee:	4770      	bx	lr
  ldr r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf4:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001cf8:	0800804c 	.word	0x0800804c
  ldr r2, =_sbss
 8001cfc:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001d00:	200004b4 	.word	0x200004b4

08001d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC1_2_IRQHandler>
	...

08001d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_Init+0x28>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <HAL_Init+0x28>)
 8001d12:	f043 0310 	orr.w	r3, r3, #16
 8001d16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f000 f947 	bl	8001fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1e:	200f      	movs	r0, #15
 8001d20:	f000 f808 	bl	8001d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d24:	f7ff fd70 	bl	8001808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40022000 	.word	0x40022000

08001d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_InitTick+0x54>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_InitTick+0x58>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f95f 	bl	8002016 <HAL_SYSTICK_Config>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00e      	b.n	8001d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d80a      	bhi.n	8001d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f000 f927 	bl	8001fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <HAL_InitTick+0x5c>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000028 	.word	0x20000028
 8001d8c:	20000030 	.word	0x20000030
 8001d90:	2000002c 	.word	0x2000002c

08001d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_IncTick+0x1c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_IncTick+0x20>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	4a03      	ldr	r2, [pc, #12]	; (8001db4 <HAL_IncTick+0x20>)
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	20000030 	.word	0x20000030
 8001db4:	20000364 	.word	0x20000364

08001db8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b02      	ldr	r3, [pc, #8]	; (8001dc8 <HAL_GetTick+0x10>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	20000364 	.word	0x20000364

08001dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff fff0 	bl	8001db8 <HAL_GetTick>
 8001dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d005      	beq.n	8001df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_Delay+0x44>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df2:	bf00      	nop
 8001df4:	f7ff ffe0 	bl	8001db8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d8f7      	bhi.n	8001df4 <HAL_Delay+0x28>
  {
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000030 	.word	0x20000030

08001e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e30:	4013      	ands	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e46:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	60d3      	str	r3, [r2, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <__NVIC_GetPriorityGrouping+0x18>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f003 0307 	and.w	r3, r3, #7
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	db0b      	blt.n	8001ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	4906      	ldr	r1, [pc, #24]	; (8001eac <__NVIC_EnableIRQ+0x34>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	2001      	movs	r0, #1
 8001e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	e000e100 	.word	0xe000e100

08001eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db0a      	blt.n	8001eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	490c      	ldr	r1, [pc, #48]	; (8001efc <__NVIC_SetPriority+0x4c>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed8:	e00a      	b.n	8001ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4908      	ldr	r1, [pc, #32]	; (8001f00 <__NVIC_SetPriority+0x50>)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3b04      	subs	r3, #4
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	440b      	add	r3, r1
 8001eee:	761a      	strb	r2, [r3, #24]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f1c3 0307 	rsb	r3, r3, #7
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf28      	it	cs
 8001f22:	2304      	movcs	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d902      	bls.n	8001f34 <NVIC_EncodePriority+0x30>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3b03      	subs	r3, #3
 8001f32:	e000      	b.n	8001f36 <NVIC_EncodePriority+0x32>
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	401a      	ands	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	43d9      	mvns	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	4313      	orrs	r3, r2
         );
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f78:	d301      	bcc.n	8001f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00f      	b.n	8001f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <SysTick_Config+0x40>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f86:	210f      	movs	r1, #15
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f7ff ff90 	bl	8001eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <SysTick_Config+0x40>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <SysTick_Config+0x40>)
 8001f98:	2207      	movs	r2, #7
 8001f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	e000e010 	.word	0xe000e010

08001fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ff2d 	bl	8001e14 <__NVIC_SetPriorityGrouping>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd4:	f7ff ff42 	bl	8001e5c <__NVIC_GetPriorityGrouping>
 8001fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	6978      	ldr	r0, [r7, #20]
 8001fe0:	f7ff ff90 	bl	8001f04 <NVIC_EncodePriority>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff5f 	bl	8001eb0 <__NVIC_SetPriority>
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff35 	bl	8001e78 <__NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffa2 	bl	8001f68 <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800202e:	b480      	push	{r7}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d008      	beq.n	8002058 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2204      	movs	r2, #4
 800204a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e020      	b.n	800209a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 020e 	bic.w	r2, r2, #14
 8002066:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	2101      	movs	r1, #1
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002098:	7bfb      	ldrb	r3, [r7, #15]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d005      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2204      	movs	r2, #4
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
 80020c6:	e051      	b.n	800216c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 020e 	bic.w	r2, r2, #14
 80020d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a22      	ldr	r2, [pc, #136]	; (8002178 <HAL_DMA_Abort_IT+0xd4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d029      	beq.n	8002146 <HAL_DMA_Abort_IT+0xa2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a21      	ldr	r2, [pc, #132]	; (800217c <HAL_DMA_Abort_IT+0xd8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d022      	beq.n	8002142 <HAL_DMA_Abort_IT+0x9e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1f      	ldr	r2, [pc, #124]	; (8002180 <HAL_DMA_Abort_IT+0xdc>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01a      	beq.n	800213c <HAL_DMA_Abort_IT+0x98>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <HAL_DMA_Abort_IT+0xe0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d012      	beq.n	8002136 <HAL_DMA_Abort_IT+0x92>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <HAL_DMA_Abort_IT+0xe4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00a      	beq.n	8002130 <HAL_DMA_Abort_IT+0x8c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_DMA_Abort_IT+0xe8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d102      	bne.n	800212a <HAL_DMA_Abort_IT+0x86>
 8002124:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002128:	e00e      	b.n	8002148 <HAL_DMA_Abort_IT+0xa4>
 800212a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800212e:	e00b      	b.n	8002148 <HAL_DMA_Abort_IT+0xa4>
 8002130:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002134:	e008      	b.n	8002148 <HAL_DMA_Abort_IT+0xa4>
 8002136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213a:	e005      	b.n	8002148 <HAL_DMA_Abort_IT+0xa4>
 800213c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002140:	e002      	b.n	8002148 <HAL_DMA_Abort_IT+0xa4>
 8002142:	2310      	movs	r3, #16
 8002144:	e000      	b.n	8002148 <HAL_DMA_Abort_IT+0xa4>
 8002146:	2301      	movs	r3, #1
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_DMA_Abort_IT+0xec>)
 800214a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	4798      	blx	r3
    } 
  }
  return status;
 800216c:	7bfb      	ldrb	r3, [r7, #15]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40020008 	.word	0x40020008
 800217c:	4002001c 	.word	0x4002001c
 8002180:	40020030 	.word	0x40020030
 8002184:	40020044 	.word	0x40020044
 8002188:	40020058 	.word	0x40020058
 800218c:	4002006c 	.word	0x4002006c
 8002190:	40020000 	.word	0x40020000

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b08b      	sub	sp, #44	; 0x2c
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a6:	e169      	b.n	800247c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021a8:	2201      	movs	r2, #1
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 8158 	bne.w	8002476 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4a9a      	ldr	r2, [pc, #616]	; (8002434 <HAL_GPIO_Init+0x2a0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d05e      	beq.n	800228e <HAL_GPIO_Init+0xfa>
 80021d0:	4a98      	ldr	r2, [pc, #608]	; (8002434 <HAL_GPIO_Init+0x2a0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d875      	bhi.n	80022c2 <HAL_GPIO_Init+0x12e>
 80021d6:	4a98      	ldr	r2, [pc, #608]	; (8002438 <HAL_GPIO_Init+0x2a4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d058      	beq.n	800228e <HAL_GPIO_Init+0xfa>
 80021dc:	4a96      	ldr	r2, [pc, #600]	; (8002438 <HAL_GPIO_Init+0x2a4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d86f      	bhi.n	80022c2 <HAL_GPIO_Init+0x12e>
 80021e2:	4a96      	ldr	r2, [pc, #600]	; (800243c <HAL_GPIO_Init+0x2a8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d052      	beq.n	800228e <HAL_GPIO_Init+0xfa>
 80021e8:	4a94      	ldr	r2, [pc, #592]	; (800243c <HAL_GPIO_Init+0x2a8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d869      	bhi.n	80022c2 <HAL_GPIO_Init+0x12e>
 80021ee:	4a94      	ldr	r2, [pc, #592]	; (8002440 <HAL_GPIO_Init+0x2ac>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d04c      	beq.n	800228e <HAL_GPIO_Init+0xfa>
 80021f4:	4a92      	ldr	r2, [pc, #584]	; (8002440 <HAL_GPIO_Init+0x2ac>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d863      	bhi.n	80022c2 <HAL_GPIO_Init+0x12e>
 80021fa:	4a92      	ldr	r2, [pc, #584]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d046      	beq.n	800228e <HAL_GPIO_Init+0xfa>
 8002200:	4a90      	ldr	r2, [pc, #576]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d85d      	bhi.n	80022c2 <HAL_GPIO_Init+0x12e>
 8002206:	2b12      	cmp	r3, #18
 8002208:	d82a      	bhi.n	8002260 <HAL_GPIO_Init+0xcc>
 800220a:	2b12      	cmp	r3, #18
 800220c:	d859      	bhi.n	80022c2 <HAL_GPIO_Init+0x12e>
 800220e:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <HAL_GPIO_Init+0x80>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	0800228f 	.word	0x0800228f
 8002218:	08002269 	.word	0x08002269
 800221c:	0800227b 	.word	0x0800227b
 8002220:	080022bd 	.word	0x080022bd
 8002224:	080022c3 	.word	0x080022c3
 8002228:	080022c3 	.word	0x080022c3
 800222c:	080022c3 	.word	0x080022c3
 8002230:	080022c3 	.word	0x080022c3
 8002234:	080022c3 	.word	0x080022c3
 8002238:	080022c3 	.word	0x080022c3
 800223c:	080022c3 	.word	0x080022c3
 8002240:	080022c3 	.word	0x080022c3
 8002244:	080022c3 	.word	0x080022c3
 8002248:	080022c3 	.word	0x080022c3
 800224c:	080022c3 	.word	0x080022c3
 8002250:	080022c3 	.word	0x080022c3
 8002254:	080022c3 	.word	0x080022c3
 8002258:	08002271 	.word	0x08002271
 800225c:	08002285 	.word	0x08002285
 8002260:	4a79      	ldr	r2, [pc, #484]	; (8002448 <HAL_GPIO_Init+0x2b4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002266:	e02c      	b.n	80022c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	623b      	str	r3, [r7, #32]
          break;
 800226e:	e029      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	3304      	adds	r3, #4
 8002276:	623b      	str	r3, [r7, #32]
          break;
 8002278:	e024      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	3308      	adds	r3, #8
 8002280:	623b      	str	r3, [r7, #32]
          break;
 8002282:	e01f      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	330c      	adds	r3, #12
 800228a:	623b      	str	r3, [r7, #32]
          break;
 800228c:	e01a      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002296:	2304      	movs	r3, #4
 8002298:	623b      	str	r3, [r7, #32]
          break;
 800229a:	e013      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a4:	2308      	movs	r3, #8
 80022a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	611a      	str	r2, [r3, #16]
          break;
 80022ae:	e009      	b.n	80022c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b0:	2308      	movs	r3, #8
 80022b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	615a      	str	r2, [r3, #20]
          break;
 80022ba:	e003      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022bc:	2300      	movs	r3, #0
 80022be:	623b      	str	r3, [r7, #32]
          break;
 80022c0:	e000      	b.n	80022c4 <HAL_GPIO_Init+0x130>
          break;
 80022c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2bff      	cmp	r3, #255	; 0xff
 80022c8:	d801      	bhi.n	80022ce <HAL_GPIO_Init+0x13a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	e001      	b.n	80022d2 <HAL_GPIO_Init+0x13e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3304      	adds	r3, #4
 80022d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2bff      	cmp	r3, #255	; 0xff
 80022d8:	d802      	bhi.n	80022e0 <HAL_GPIO_Init+0x14c>
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	e002      	b.n	80022e6 <HAL_GPIO_Init+0x152>
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	3b08      	subs	r3, #8
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	210f      	movs	r1, #15
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	401a      	ands	r2, r3
 80022f8:	6a39      	ldr	r1, [r7, #32]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	431a      	orrs	r2, r3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80b1 	beq.w	8002476 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002314:	4b4d      	ldr	r3, [pc, #308]	; (800244c <HAL_GPIO_Init+0x2b8>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4a4c      	ldr	r2, [pc, #304]	; (800244c <HAL_GPIO_Init+0x2b8>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6193      	str	r3, [r2, #24]
 8002320:	4b4a      	ldr	r3, [pc, #296]	; (800244c <HAL_GPIO_Init+0x2b8>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800232c:	4a48      	ldr	r2, [pc, #288]	; (8002450 <HAL_GPIO_Init+0x2bc>)
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	089b      	lsrs	r3, r3, #2
 8002332:	3302      	adds	r3, #2
 8002334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002338:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4013      	ands	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a40      	ldr	r2, [pc, #256]	; (8002454 <HAL_GPIO_Init+0x2c0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d013      	beq.n	8002380 <HAL_GPIO_Init+0x1ec>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a3f      	ldr	r2, [pc, #252]	; (8002458 <HAL_GPIO_Init+0x2c4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00d      	beq.n	800237c <HAL_GPIO_Init+0x1e8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3e      	ldr	r2, [pc, #248]	; (800245c <HAL_GPIO_Init+0x2c8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d007      	beq.n	8002378 <HAL_GPIO_Init+0x1e4>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3d      	ldr	r2, [pc, #244]	; (8002460 <HAL_GPIO_Init+0x2cc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d101      	bne.n	8002374 <HAL_GPIO_Init+0x1e0>
 8002370:	2303      	movs	r3, #3
 8002372:	e006      	b.n	8002382 <HAL_GPIO_Init+0x1ee>
 8002374:	2304      	movs	r3, #4
 8002376:	e004      	b.n	8002382 <HAL_GPIO_Init+0x1ee>
 8002378:	2302      	movs	r3, #2
 800237a:	e002      	b.n	8002382 <HAL_GPIO_Init+0x1ee>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_GPIO_Init+0x1ee>
 8002380:	2300      	movs	r3, #0
 8002382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002384:	f002 0203 	and.w	r2, r2, #3
 8002388:	0092      	lsls	r2, r2, #2
 800238a:	4093      	lsls	r3, r2
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002392:	492f      	ldr	r1, [pc, #188]	; (8002450 <HAL_GPIO_Init+0x2bc>)
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	3302      	adds	r3, #2
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023ac:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	492c      	ldr	r1, [pc, #176]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4928      	ldr	r1, [pc, #160]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	4922      	ldr	r1, [pc, #136]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	60cb      	str	r3, [r1, #12]
 80023e0:	e006      	b.n	80023f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	491e      	ldr	r1, [pc, #120]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d006      	beq.n	800240a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4918      	ldr	r1, [pc, #96]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
 8002408:	e006      	b.n	8002418 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800240a:	4b16      	ldr	r3, [pc, #88]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	43db      	mvns	r3, r3
 8002412:	4914      	ldr	r1, [pc, #80]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 8002414:	4013      	ands	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d021      	beq.n	8002468 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	490e      	ldr	r1, [pc, #56]	; (8002464 <HAL_GPIO_Init+0x2d0>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
 8002430:	e021      	b.n	8002476 <HAL_GPIO_Init+0x2e2>
 8002432:	bf00      	nop
 8002434:	10320000 	.word	0x10320000
 8002438:	10310000 	.word	0x10310000
 800243c:	10220000 	.word	0x10220000
 8002440:	10210000 	.word	0x10210000
 8002444:	10120000 	.word	0x10120000
 8002448:	10110000 	.word	0x10110000
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000
 8002454:	40010800 	.word	0x40010800
 8002458:	40010c00 	.word	0x40010c00
 800245c:	40011000 	.word	0x40011000
 8002460:	40011400 	.word	0x40011400
 8002464:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_GPIO_Init+0x304>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	43db      	mvns	r3, r3
 8002470:	4909      	ldr	r1, [pc, #36]	; (8002498 <HAL_GPIO_Init+0x304>)
 8002472:	4013      	ands	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	3301      	adds	r3, #1
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	f47f ae8e 	bne.w	80021a8 <HAL_GPIO_Init+0x14>
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	372c      	adds	r7, #44	; 0x2c
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	40010400 	.word	0x40010400

0800249c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e001      	b.n	80024be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	807b      	strh	r3, [r7, #2]
 80024d6:	4613      	mov	r3, r2
 80024d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024da:	787b      	ldrb	r3, [r7, #1]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024e0:	887a      	ldrh	r2, [r7, #2]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024e6:	e003      	b.n	80024f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024e8:	887b      	ldrh	r3, [r7, #2]
 80024ea:	041a      	lsls	r2, r3, #16
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	611a      	str	r2, [r3, #16]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d006      	beq.n	8002520 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002512:	4a05      	ldr	r2, [pc, #20]	; (8002528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f806 	bl	800252c <HAL_GPIO_EXTI_Callback>
  }
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40010400 	.word	0x40010400

0800252c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e272      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8087 	beq.w	800266e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002560:	4b92      	ldr	r3, [pc, #584]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b04      	cmp	r3, #4
 800256a:	d00c      	beq.n	8002586 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800256c:	4b8f      	ldr	r3, [pc, #572]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d112      	bne.n	800259e <HAL_RCC_OscConfig+0x5e>
 8002578:	4b8c      	ldr	r3, [pc, #560]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d10b      	bne.n	800259e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002586:	4b89      	ldr	r3, [pc, #548]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d06c      	beq.n	800266c <HAL_RCC_OscConfig+0x12c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d168      	bne.n	800266c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e24c      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a6:	d106      	bne.n	80025b6 <HAL_RCC_OscConfig+0x76>
 80025a8:	4b80      	ldr	r3, [pc, #512]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a7f      	ldr	r2, [pc, #508]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	e02e      	b.n	8002614 <HAL_RCC_OscConfig+0xd4>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x98>
 80025be:	4b7b      	ldr	r3, [pc, #492]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7a      	ldr	r2, [pc, #488]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b78      	ldr	r3, [pc, #480]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a77      	ldr	r2, [pc, #476]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e01d      	b.n	8002614 <HAL_RCC_OscConfig+0xd4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0xbc>
 80025e2:	4b72      	ldr	r3, [pc, #456]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a71      	ldr	r2, [pc, #452]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b6f      	ldr	r3, [pc, #444]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6e      	ldr	r2, [pc, #440]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e00b      	b.n	8002614 <HAL_RCC_OscConfig+0xd4>
 80025fc:	4b6b      	ldr	r3, [pc, #428]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a6a      	ldr	r2, [pc, #424]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b68      	ldr	r3, [pc, #416]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a67      	ldr	r2, [pc, #412]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800260e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002612:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7ff fbcc 	bl	8001db8 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7ff fbc8 	bl	8001db8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e200      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0xe4>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff fbb8 	bl	8001db8 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7ff fbb4 	bl	8001db8 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e1ec      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x10c>
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d063      	beq.n	8002742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800267a:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002686:	4b49      	ldr	r3, [pc, #292]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b08      	cmp	r3, #8
 8002690:	d11c      	bne.n	80026cc <HAL_RCC_OscConfig+0x18c>
 8002692:	4b46      	ldr	r3, [pc, #280]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d116      	bne.n	80026cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <HAL_RCC_OscConfig+0x176>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e1c0      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4939      	ldr	r1, [pc, #228]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	e03a      	b.n	8002742 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d4:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <HAL_RCC_OscConfig+0x270>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7ff fb6d 	bl	8001db8 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e2:	f7ff fb69 	bl	8001db8 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1a1      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4927      	ldr	r1, [pc, #156]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]
 8002714:	e015      	b.n	8002742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_RCC_OscConfig+0x270>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff fb4c 	bl	8001db8 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002724:	f7ff fb48 	bl	8001db8 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e180      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d03a      	beq.n	80027c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d019      	beq.n	800278a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002756:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275c:	f7ff fb2c 	bl	8001db8 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002764:	f7ff fb28 	bl	8001db8 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e160      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002782:	2001      	movs	r0, #1
 8002784:	f000 face 	bl	8002d24 <RCC_Delay>
 8002788:	e01c      	b.n	80027c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_RCC_OscConfig+0x274>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002790:	f7ff fb12 	bl	8001db8 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002796:	e00f      	b.n	80027b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002798:	f7ff fb0e 	bl	8001db8 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d908      	bls.n	80027b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e146      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
 80027b0:	42420000 	.word	0x42420000
 80027b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	4b92      	ldr	r3, [pc, #584]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e9      	bne.n	8002798 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a6 	beq.w	800291e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d6:	4b8b      	ldr	r3, [pc, #556]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4b88      	ldr	r3, [pc, #544]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a87      	ldr	r2, [pc, #540]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	61d3      	str	r3, [r2, #28]
 80027ee:	4b85      	ldr	r3, [pc, #532]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fe:	4b82      	ldr	r3, [pc, #520]	; (8002a08 <HAL_RCC_OscConfig+0x4c8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d118      	bne.n	800283c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280a:	4b7f      	ldr	r3, [pc, #508]	; (8002a08 <HAL_RCC_OscConfig+0x4c8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a7e      	ldr	r2, [pc, #504]	; (8002a08 <HAL_RCC_OscConfig+0x4c8>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002816:	f7ff facf 	bl	8001db8 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281e:	f7ff facb 	bl	8001db8 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b64      	cmp	r3, #100	; 0x64
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e103      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	4b75      	ldr	r3, [pc, #468]	; (8002a08 <HAL_RCC_OscConfig+0x4c8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x312>
 8002844:	4b6f      	ldr	r3, [pc, #444]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4a6e      	ldr	r2, [pc, #440]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6213      	str	r3, [r2, #32]
 8002850:	e02d      	b.n	80028ae <HAL_RCC_OscConfig+0x36e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x334>
 800285a:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4a69      	ldr	r2, [pc, #420]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6213      	str	r3, [r2, #32]
 8002866:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a66      	ldr	r2, [pc, #408]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	6213      	str	r3, [r2, #32]
 8002872:	e01c      	b.n	80028ae <HAL_RCC_OscConfig+0x36e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d10c      	bne.n	8002896 <HAL_RCC_OscConfig+0x356>
 800287c:	4b61      	ldr	r3, [pc, #388]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4a60      	ldr	r2, [pc, #384]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	6213      	str	r3, [r2, #32]
 8002888:	4b5e      	ldr	r3, [pc, #376]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a5d      	ldr	r2, [pc, #372]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	e00b      	b.n	80028ae <HAL_RCC_OscConfig+0x36e>
 8002896:	4b5b      	ldr	r3, [pc, #364]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4a5a      	ldr	r2, [pc, #360]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6213      	str	r3, [r2, #32]
 80028a2:	4b58      	ldr	r3, [pc, #352]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a57      	ldr	r2, [pc, #348]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	f023 0304 	bic.w	r3, r3, #4
 80028ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d015      	beq.n	80028e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b6:	f7ff fa7f 	bl	8001db8 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028bc:	e00a      	b.n	80028d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7ff fa7b 	bl	8001db8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e0b1      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ee      	beq.n	80028be <HAL_RCC_OscConfig+0x37e>
 80028e0:	e014      	b.n	800290c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7ff fa69 	bl	8001db8 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7ff fa65 	bl	8001db8 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e09b      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1ee      	bne.n	80028ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d105      	bne.n	800291e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002912:	4b3c      	ldr	r3, [pc, #240]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4a3b      	ldr	r2, [pc, #236]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8087 	beq.w	8002a36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002928:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b08      	cmp	r3, #8
 8002932:	d061      	beq.n	80029f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d146      	bne.n	80029ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293c:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <HAL_RCC_OscConfig+0x4cc>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7ff fa39 	bl	8001db8 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7ff fa35 	bl	8001db8 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e06d      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295c:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002970:	d108      	bne.n	8002984 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4921      	ldr	r1, [pc, #132]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002984:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a19      	ldr	r1, [r3, #32]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	430b      	orrs	r3, r1
 8002996:	491b      	ldr	r1, [pc, #108]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x4cc>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7ff fa09 	bl	8001db8 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029aa:	f7ff fa05 	bl	8001db8 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e03d      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x46a>
 80029c8:	e035      	b.n	8002a36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_RCC_OscConfig+0x4cc>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7ff f9f2 	bl	8001db8 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d8:	f7ff f9ee 	bl	8001db8 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e026      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x498>
 80029f6:	e01e      	b.n	8002a36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e019      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_OscConfig+0x500>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d106      	bne.n	8002a32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000

08002a44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0d0      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b6a      	ldr	r3, [pc, #424]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d910      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b67      	ldr	r3, [pc, #412]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 0207 	bic.w	r2, r3, #7
 8002a6e:	4965      	ldr	r1, [pc, #404]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b63      	ldr	r3, [pc, #396]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b8      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa0:	4b59      	ldr	r3, [pc, #356]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab8:	4b53      	ldr	r3, [pc, #332]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a52      	ldr	r2, [pc, #328]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ac2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b50      	ldr	r3, [pc, #320]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	494d      	ldr	r1, [pc, #308]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d040      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	4b47      	ldr	r3, [pc, #284]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d115      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b02:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e073      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	4b3d      	ldr	r3, [pc, #244]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06b      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b22:	4b39      	ldr	r3, [pc, #228]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4936      	ldr	r1, [pc, #216]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b34:	f7ff f940 	bl	8001db8 <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3c:	f7ff f93c 	bl	8001db8 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e053      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 020c 	and.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1eb      	bne.n	8002b3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b64:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d210      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4922      	ldr	r1, [pc, #136]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e032      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4916      	ldr	r1, [pc, #88]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	490e      	ldr	r1, [pc, #56]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bd2:	f000 f821 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	490a      	ldr	r1, [pc, #40]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002be4:	5ccb      	ldrb	r3, [r1, r3]
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <HAL_RCC_ClockConfig+0x1cc>)
 8002bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1d0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff f89e 	bl	8001d34 <HAL_InitTick>

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	08007cac 	.word	0x08007cac
 8002c10:	20000028 	.word	0x20000028
 8002c14:	2000002c 	.word	0x2000002c

08002c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c32:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <HAL_RCC_GetSysClockFreq+0x94>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d002      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x30>
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x36>
 8002c46:	e027      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c4a:	613b      	str	r3, [r7, #16]
      break;
 8002c4c:	e027      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	0c9b      	lsrs	r3, r3, #18
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c58:	5cd3      	ldrb	r3, [r2, r3]
 8002c5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d010      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c66:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_RCC_GetSysClockFreq+0x94>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	0c5b      	lsrs	r3, r3, #17
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
 8002c74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c7a:	fb03 f202 	mul.w	r2, r3, r2
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e004      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c8c:	fb02 f303 	mul.w	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	613b      	str	r3, [r7, #16]
      break;
 8002c96:	e002      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c9a:	613b      	str	r3, [r7, #16]
      break;
 8002c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9e:	693b      	ldr	r3, [r7, #16]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	007a1200 	.word	0x007a1200
 8002cb4:	08007cc4 	.word	0x08007cc4
 8002cb8:	08007cd4 	.word	0x08007cd4
 8002cbc:	003d0900 	.word	0x003d0900

08002cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc4:	4b02      	ldr	r3, [pc, #8]	; (8002cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	20000028 	.word	0x20000028

08002cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cd8:	f7ff fff2 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4903      	ldr	r1, [pc, #12]	; (8002cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	08007cbc 	.word	0x08007cbc

08002cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d00:	f7ff ffde 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	0adb      	lsrs	r3, r3, #11
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	4903      	ldr	r1, [pc, #12]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	08007cbc 	.word	0x08007cbc

08002d24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <RCC_Delay+0x34>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <RCC_Delay+0x38>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	0a5b      	lsrs	r3, r3, #9
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d40:	bf00      	nop
  }
  while (Delay --);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1e5a      	subs	r2, r3, #1
 8002d46:	60fa      	str	r2, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f9      	bne.n	8002d40 <RCC_Delay+0x1c>
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	20000028 	.word	0x20000028
 8002d5c:	10624dd3 	.word	0x10624dd3

08002d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e041      	b.n	8002df6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe fd70 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	f000 fe22 	bl	80039e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e041      	b.n	8002e94 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d106      	bne.n	8002e2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f839 	bl	8002e9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	f000 fdd3 	bl	80039e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_TIM_PWM_Start+0x24>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e022      	b.n	8002f1a <HAL_TIM_PWM_Start+0x6a>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d109      	bne.n	8002eee <HAL_TIM_PWM_Start+0x3e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	e015      	b.n	8002f1a <HAL_TIM_PWM_Start+0x6a>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d109      	bne.n	8002f08 <HAL_TIM_PWM_Start+0x58>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e008      	b.n	8002f1a <HAL_TIM_PWM_Start+0x6a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e05e      	b.n	8002fe0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <HAL_TIM_PWM_Start+0x82>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f30:	e013      	b.n	8002f5a <HAL_TIM_PWM_Start+0xaa>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d104      	bne.n	8002f42 <HAL_TIM_PWM_Start+0x92>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f40:	e00b      	b.n	8002f5a <HAL_TIM_PWM_Start+0xaa>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d104      	bne.n	8002f52 <HAL_TIM_PWM_Start+0xa2>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f50:	e003      	b.n	8002f5a <HAL_TIM_PWM_Start+0xaa>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2202      	movs	r2, #2
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 f8cd 	bl	8004102 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_TIM_PWM_Start+0x138>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d107      	bne.n	8002f82 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <HAL_TIM_PWM_Start+0x138>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00e      	beq.n	8002faa <HAL_TIM_PWM_Start+0xfa>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f94:	d009      	beq.n	8002faa <HAL_TIM_PWM_Start+0xfa>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a14      	ldr	r2, [pc, #80]	; (8002fec <HAL_TIM_PWM_Start+0x13c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d004      	beq.n	8002faa <HAL_TIM_PWM_Start+0xfa>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <HAL_TIM_PWM_Start+0x140>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d111      	bne.n	8002fce <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b06      	cmp	r3, #6
 8002fba:	d010      	beq.n	8002fde <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fcc:	e007      	b.n	8002fde <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800

08002ff4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e041      	b.n	800308a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f839 	bl	8003092 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f000 fcd8 	bl	80039e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <HAL_TIM_IC_Start_IT+0x1e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	e013      	b.n	80030ea <HAL_TIM_IC_Start_IT+0x46>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d104      	bne.n	80030d2 <HAL_TIM_IC_Start_IT+0x2e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	e00b      	b.n	80030ea <HAL_TIM_IC_Start_IT+0x46>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d104      	bne.n	80030e2 <HAL_TIM_IC_Start_IT+0x3e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	e003      	b.n	80030ea <HAL_TIM_IC_Start_IT+0x46>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d104      	bne.n	80030fc <HAL_TIM_IC_Start_IT+0x58>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e013      	b.n	8003124 <HAL_TIM_IC_Start_IT+0x80>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d104      	bne.n	800310c <HAL_TIM_IC_Start_IT+0x68>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003108:	b2db      	uxtb	r3, r3
 800310a:	e00b      	b.n	8003124 <HAL_TIM_IC_Start_IT+0x80>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2b08      	cmp	r3, #8
 8003110:	d104      	bne.n	800311c <HAL_TIM_IC_Start_IT+0x78>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e003      	b.n	8003124 <HAL_TIM_IC_Start_IT+0x80>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003122:	b2db      	uxtb	r3, r3
 8003124:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003126:	7bbb      	ldrb	r3, [r7, #14]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d102      	bne.n	8003132 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800312c:	7b7b      	ldrb	r3, [r7, #13]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d001      	beq.n	8003136 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e0b8      	b.n	80032a8 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d104      	bne.n	8003146 <HAL_TIM_IC_Start_IT+0xa2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003144:	e013      	b.n	800316e <HAL_TIM_IC_Start_IT+0xca>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b04      	cmp	r3, #4
 800314a:	d104      	bne.n	8003156 <HAL_TIM_IC_Start_IT+0xb2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003154:	e00b      	b.n	800316e <HAL_TIM_IC_Start_IT+0xca>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b08      	cmp	r3, #8
 800315a:	d104      	bne.n	8003166 <HAL_TIM_IC_Start_IT+0xc2>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003164:	e003      	b.n	800316e <HAL_TIM_IC_Start_IT+0xca>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <HAL_TIM_IC_Start_IT+0xda>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800317c:	e013      	b.n	80031a6 <HAL_TIM_IC_Start_IT+0x102>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b04      	cmp	r3, #4
 8003182:	d104      	bne.n	800318e <HAL_TIM_IC_Start_IT+0xea>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800318c:	e00b      	b.n	80031a6 <HAL_TIM_IC_Start_IT+0x102>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d104      	bne.n	800319e <HAL_TIM_IC_Start_IT+0xfa>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800319c:	e003      	b.n	80031a6 <HAL_TIM_IC_Start_IT+0x102>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	d841      	bhi.n	8003230 <HAL_TIM_IC_Start_IT+0x18c>
 80031ac:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <HAL_TIM_IC_Start_IT+0x110>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	080031e9 	.word	0x080031e9
 80031b8:	08003231 	.word	0x08003231
 80031bc:	08003231 	.word	0x08003231
 80031c0:	08003231 	.word	0x08003231
 80031c4:	080031fb 	.word	0x080031fb
 80031c8:	08003231 	.word	0x08003231
 80031cc:	08003231 	.word	0x08003231
 80031d0:	08003231 	.word	0x08003231
 80031d4:	0800320d 	.word	0x0800320d
 80031d8:	08003231 	.word	0x08003231
 80031dc:	08003231 	.word	0x08003231
 80031e0:	08003231 	.word	0x08003231
 80031e4:	0800321f 	.word	0x0800321f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0202 	orr.w	r2, r2, #2
 80031f6:	60da      	str	r2, [r3, #12]
      break;
 80031f8:	e01d      	b.n	8003236 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0204 	orr.w	r2, r2, #4
 8003208:	60da      	str	r2, [r3, #12]
      break;
 800320a:	e014      	b.n	8003236 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0208 	orr.w	r2, r2, #8
 800321a:	60da      	str	r2, [r3, #12]
      break;
 800321c:	e00b      	b.n	8003236 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0210 	orr.w	r2, r2, #16
 800322c:	60da      	str	r2, [r3, #12]
      break;
 800322e:	e002      	b.n	8003236 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	bf00      	nop
  }

  if (status == HAL_OK)
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d134      	bne.n	80032a6 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2201      	movs	r2, #1
 8003242:	6839      	ldr	r1, [r7, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f000 ff5c 	bl	8004102 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <HAL_TIM_IC_Start_IT+0x20c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00e      	beq.n	8003272 <HAL_TIM_IC_Start_IT+0x1ce>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325c:	d009      	beq.n	8003272 <HAL_TIM_IC_Start_IT+0x1ce>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <HAL_TIM_IC_Start_IT+0x210>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_TIM_IC_Start_IT+0x1ce>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <HAL_TIM_IC_Start_IT+0x214>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d111      	bne.n	8003296 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b06      	cmp	r3, #6
 8003282:	d010      	beq.n	80032a6 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003294:	e007      	b.n	80032a6 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40000800 	.word	0x40000800

080032bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d122      	bne.n	8003318 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d11b      	bne.n	8003318 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0202 	mvn.w	r2, #2
 80032e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe f9ca 	bl	8001698 <HAL_TIM_IC_CaptureCallback>
 8003304:	e005      	b.n	8003312 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fb53 	bl	80039b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fb59 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d122      	bne.n	800336c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b04      	cmp	r3, #4
 8003332:	d11b      	bne.n	800336c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0204 	mvn.w	r2, #4
 800333c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe f9a0 	bl	8001698 <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fb29 	bl	80039b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fb2f 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b08      	cmp	r3, #8
 8003378:	d122      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b08      	cmp	r3, #8
 8003386:	d11b      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0208 	mvn.w	r2, #8
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2204      	movs	r2, #4
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe f976 	bl	8001698 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 faff 	bl	80039b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fb05 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d122      	bne.n	8003414 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d11b      	bne.n	8003414 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0210 	mvn.w	r2, #16
 80033e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2208      	movs	r2, #8
 80033ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe f94c 	bl	8001698 <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fad5 	bl	80039b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fadb 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d10e      	bne.n	8003440 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	d107      	bne.n	8003440 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0201 	mvn.w	r2, #1
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fab0 	bl	80039a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b80      	cmp	r3, #128	; 0x80
 800344c:	d10e      	bne.n	800346c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d107      	bne.n	800346c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fed7 	bl	800421a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d10e      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	d107      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa9f 	bl	80039d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d10e      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d107      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0220 	mvn.w	r2, #32
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fea2 	bl	8004208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e088      	b.n	80035fc <HAL_TIM_IC_ConfigChannel+0x130>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d11b      	bne.n	8003530 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003508:	f000 fc58 	bl	8003dbc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 020c 	bic.w	r2, r2, #12
 800351a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6999      	ldr	r1, [r3, #24]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	619a      	str	r2, [r3, #24]
 800352e:	e060      	b.n	80035f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b04      	cmp	r3, #4
 8003534:	d11c      	bne.n	8003570 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003546:	f000 fcc1 	bl	8003ecc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699a      	ldr	r2, [r3, #24]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003558:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6999      	ldr	r1, [r3, #24]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	021a      	lsls	r2, r3, #8
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	619a      	str	r2, [r3, #24]
 800356e:	e040      	b.n	80035f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b08      	cmp	r3, #8
 8003574:	d11b      	bne.n	80035ae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003586:	f000 fd0c 	bl	8003fa2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 020c 	bic.w	r2, r2, #12
 8003598:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69d9      	ldr	r1, [r3, #28]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	61da      	str	r2, [r3, #28]
 80035ac:	e021      	b.n	80035f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d11c      	bne.n	80035ee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80035c4:	f000 fd28 	bl	8004018 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69d9      	ldr	r1, [r3, #28]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	021a      	lsls	r2, r3, #8
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	61da      	str	r2, [r3, #28]
 80035ec:	e001      	b.n	80035f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800361e:	2302      	movs	r3, #2
 8003620:	e0ae      	b.n	8003780 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b0c      	cmp	r3, #12
 800362e:	f200 809f 	bhi.w	8003770 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003632:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003638:	0800366d 	.word	0x0800366d
 800363c:	08003771 	.word	0x08003771
 8003640:	08003771 	.word	0x08003771
 8003644:	08003771 	.word	0x08003771
 8003648:	080036ad 	.word	0x080036ad
 800364c:	08003771 	.word	0x08003771
 8003650:	08003771 	.word	0x08003771
 8003654:	08003771 	.word	0x08003771
 8003658:	080036ef 	.word	0x080036ef
 800365c:	08003771 	.word	0x08003771
 8003660:	08003771 	.word	0x08003771
 8003664:	08003771 	.word	0x08003771
 8003668:	0800372f 	.word	0x0800372f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa1a 	bl	8003aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0208 	orr.w	r2, r2, #8
 8003686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6999      	ldr	r1, [r3, #24]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	619a      	str	r2, [r3, #24]
      break;
 80036aa:	e064      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fa60 	bl	8003b78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6999      	ldr	r1, [r3, #24]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	021a      	lsls	r2, r3, #8
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	619a      	str	r2, [r3, #24]
      break;
 80036ec:	e043      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 faa9 	bl	8003c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0208 	orr.w	r2, r2, #8
 8003708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0204 	bic.w	r2, r2, #4
 8003718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69d9      	ldr	r1, [r3, #28]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	61da      	str	r2, [r3, #28]
      break;
 800372c:	e023      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 faf3 	bl	8003d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69d9      	ldr	r1, [r3, #28]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	021a      	lsls	r2, r3, #8
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	61da      	str	r2, [r3, #28]
      break;
 800376e:	e002      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	75fb      	strb	r3, [r7, #23]
      break;
 8003774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800377e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_TIM_ConfigClockSource+0x1c>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e0b4      	b.n	800390e <HAL_TIM_ConfigClockSource+0x186>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037dc:	d03e      	beq.n	800385c <HAL_TIM_ConfigClockSource+0xd4>
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	f200 8087 	bhi.w	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ea:	f000 8086 	beq.w	80038fa <HAL_TIM_ConfigClockSource+0x172>
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f2:	d87f      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b70      	cmp	r3, #112	; 0x70
 80037f6:	d01a      	beq.n	800382e <HAL_TIM_ConfigClockSource+0xa6>
 80037f8:	2b70      	cmp	r3, #112	; 0x70
 80037fa:	d87b      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b60      	cmp	r3, #96	; 0x60
 80037fe:	d050      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003800:	2b60      	cmp	r3, #96	; 0x60
 8003802:	d877      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b50      	cmp	r3, #80	; 0x50
 8003806:	d03c      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0xfa>
 8003808:	2b50      	cmp	r3, #80	; 0x50
 800380a:	d873      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d058      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d86f      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003814:	2b30      	cmp	r3, #48	; 0x30
 8003816:	d064      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003818:	2b30      	cmp	r3, #48	; 0x30
 800381a:	d86b      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 800381c:	2b20      	cmp	r3, #32
 800381e:	d060      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d867      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d05c      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003828:	2b10      	cmp	r3, #16
 800382a:	d05a      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 800382c:	e062      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800383e:	f000 fc41 	bl	80040c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	609a      	str	r2, [r3, #8]
      break;
 800385a:	e04f      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800386c:	f000 fc2a 	bl	80040c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800387e:	609a      	str	r2, [r3, #8]
      break;
 8003880:	e03c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800388e:	461a      	mov	r2, r3
 8003890:	f000 faee 	bl	8003e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2150      	movs	r1, #80	; 0x50
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fbf8 	bl	8004090 <TIM_ITRx_SetConfig>
      break;
 80038a0:	e02c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ae:	461a      	mov	r2, r3
 80038b0:	f000 fb48 	bl	8003f44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2160      	movs	r1, #96	; 0x60
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fbe8 	bl	8004090 <TIM_ITRx_SetConfig>
      break;
 80038c0:	e01c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 face 	bl	8003e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2140      	movs	r1, #64	; 0x40
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fbd8 	bl	8004090 <TIM_ITRx_SetConfig>
      break;
 80038e0:	e00c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4619      	mov	r1, r3
 80038ec:	4610      	mov	r0, r2
 80038ee:	f000 fbcf 	bl	8004090 <TIM_ITRx_SetConfig>
      break;
 80038f2:	e003      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      break;
 80038f8:	e000      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b0c      	cmp	r3, #12
 800392a:	d831      	bhi.n	8003990 <HAL_TIM_ReadCapturedValue+0x78>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <HAL_TIM_ReadCapturedValue+0x1c>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003969 	.word	0x08003969
 8003938:	08003991 	.word	0x08003991
 800393c:	08003991 	.word	0x08003991
 8003940:	08003991 	.word	0x08003991
 8003944:	08003973 	.word	0x08003973
 8003948:	08003991 	.word	0x08003991
 800394c:	08003991 	.word	0x08003991
 8003950:	08003991 	.word	0x08003991
 8003954:	0800397d 	.word	0x0800397d
 8003958:	08003991 	.word	0x08003991
 800395c:	08003991 	.word	0x08003991
 8003960:	08003991 	.word	0x08003991
 8003964:	08003987 	.word	0x08003987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	60fb      	str	r3, [r7, #12]

      break;
 8003970:	e00f      	b.n	8003992 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	60fb      	str	r3, [r7, #12]

      break;
 800397a:	e00a      	b.n	8003992 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	60fb      	str	r3, [r7, #12]

      break;
 8003984:	e005      	b.n	8003992 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	60fb      	str	r3, [r7, #12]

      break;
 800398e:	e000      	b.n	8003992 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003990:	bf00      	nop
  }

  return tmpreg;
 8003992:	68fb      	ldr	r3, [r7, #12]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop

080039a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a29      	ldr	r2, [pc, #164]	; (8003aa0 <TIM_Base_SetConfig+0xb8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00b      	beq.n	8003a18 <TIM_Base_SetConfig+0x30>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a06:	d007      	beq.n	8003a18 <TIM_Base_SetConfig+0x30>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a26      	ldr	r2, [pc, #152]	; (8003aa4 <TIM_Base_SetConfig+0xbc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_Base_SetConfig+0x30>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a25      	ldr	r2, [pc, #148]	; (8003aa8 <TIM_Base_SetConfig+0xc0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d108      	bne.n	8003a2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <TIM_Base_SetConfig+0xb8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00b      	beq.n	8003a4a <TIM_Base_SetConfig+0x62>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a38:	d007      	beq.n	8003a4a <TIM_Base_SetConfig+0x62>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <TIM_Base_SetConfig+0xbc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d003      	beq.n	8003a4a <TIM_Base_SetConfig+0x62>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a18      	ldr	r2, [pc, #96]	; (8003aa8 <TIM_Base_SetConfig+0xc0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d108      	bne.n	8003a5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a07      	ldr	r2, [pc, #28]	; (8003aa0 <TIM_Base_SetConfig+0xb8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d103      	bne.n	8003a90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	615a      	str	r2, [r3, #20]
}
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800

08003aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f023 0201 	bic.w	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f023 0302 	bic.w	r3, r3, #2
 8003af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <TIM_OC1_SetConfig+0xc8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10c      	bne.n	8003b22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f023 0308 	bic.w	r3, r3, #8
 8003b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f023 0304 	bic.w	r3, r3, #4
 8003b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <TIM_OC1_SetConfig+0xc8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d111      	bne.n	8003b4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	621a      	str	r2, [r3, #32]
}
 8003b68:	bf00      	nop
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40012c00 	.word	0x40012c00

08003b78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f023 0210 	bic.w	r2, r3, #16
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f023 0320 	bic.w	r3, r3, #32
 8003bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <TIM_OC2_SetConfig+0xd0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d10d      	bne.n	8003bf4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <TIM_OC2_SetConfig+0xd0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d113      	bne.n	8003c24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	40012c00 	.word	0x40012c00

08003c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <TIM_OC3_SetConfig+0xd0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d10d      	bne.n	8003cc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <TIM_OC3_SetConfig+0xd0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d113      	bne.n	8003cf6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	621a      	str	r2, [r3, #32]
}
 8003d10:	bf00      	nop
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40012c00 	.word	0x40012c00

08003d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	031b      	lsls	r3, r3, #12
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a0f      	ldr	r2, [pc, #60]	; (8003db8 <TIM_OC4_SetConfig+0x98>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d109      	bne.n	8003d94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	621a      	str	r2, [r3, #32]
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr
 8003db8:	40012c00 	.word	0x40012c00

08003dbc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f023 0201 	bic.w	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <TIM_TI1_SetConfig+0xa8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00b      	beq.n	8003e02 <TIM_TI1_SetConfig+0x46>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df0:	d007      	beq.n	8003e02 <TIM_TI1_SetConfig+0x46>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4a1c      	ldr	r2, [pc, #112]	; (8003e68 <TIM_TI1_SetConfig+0xac>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <TIM_TI1_SetConfig+0x46>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a1b      	ldr	r2, [pc, #108]	; (8003e6c <TIM_TI1_SetConfig+0xb0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d101      	bne.n	8003e06 <TIM_TI1_SetConfig+0x4a>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <TIM_TI1_SetConfig+0x4c>
 8003e06:	2300      	movs	r3, #0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f023 0303 	bic.w	r3, r3, #3
 8003e12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e003      	b.n	8003e26 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f023 030a 	bic.w	r3, r3, #10
 8003e40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f003 030a 	and.w	r3, r3, #10
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	40012c00 	.word	0x40012c00
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800

08003e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f023 0201 	bic.w	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 030a 	bic.w	r3, r3, #10
 8003eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f023 0210 	bic.w	r2, r3, #16
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	031b      	lsls	r3, r3, #12
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f1e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	621a      	str	r2, [r3, #32]
}
 8003f3a:	bf00      	nop
 8003f3c:	371c      	adds	r7, #28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f023 0210 	bic.w	r2, r3, #16
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	031b      	lsls	r3, r3, #12
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	621a      	str	r2, [r3, #32]
}
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b087      	sub	sp, #28
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f023 0303 	bic.w	r3, r3, #3
 8003fce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fde:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ff2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	621a      	str	r2, [r3, #32]
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004044:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004056:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	031b      	lsls	r3, r3, #12
 800405c:	b29b      	uxth	r3, r3
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800406a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	031b      	lsls	r3, r3, #12
 8004070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	621a      	str	r2, [r3, #32]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f043 0307 	orr.w	r3, r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	609a      	str	r2, [r3, #8]
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	021a      	lsls	r2, r3, #8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	609a      	str	r2, [r3, #8]
}
 80040f8:	bf00      	nop
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr

08004102 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004102:	b480      	push	{r7}
 8004104:	b087      	sub	sp, #28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2201      	movs	r2, #1
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1a      	ldr	r2, [r3, #32]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	43db      	mvns	r3, r3
 8004124:	401a      	ands	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1a      	ldr	r2, [r3, #32]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	fa01 f303 	lsl.w	r3, r1, r3
 800413a:	431a      	orrs	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	621a      	str	r2, [r3, #32]
}
 8004140:	bf00      	nop
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
	...

0800414c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004160:	2302      	movs	r3, #2
 8004162:	e046      	b.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a16      	ldr	r2, [pc, #88]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00e      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b0:	d009      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a12      	ldr	r2, [pc, #72]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d004      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a10      	ldr	r2, [pc, #64]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d10c      	bne.n	80041e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800

08004208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e042      	b.n	80042c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fd fbca 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2224      	movs	r2, #36	; 0x24
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800426e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fdf1 	bl	8004e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695a      	ldr	r2, [r3, #20]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d16d      	bne.n	80043c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_UART_Transmit+0x2c>
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e066      	b.n	80043ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2221      	movs	r2, #33	; 0x21
 8004306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800430a:	f7fd fd55 	bl	8001db8 <HAL_GetTick>
 800430e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	88fa      	ldrh	r2, [r7, #6]
 800431a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004324:	d108      	bne.n	8004338 <HAL_UART_Transmit+0x6c>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d104      	bne.n	8004338 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	e003      	b.n	8004340 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800433c:	2300      	movs	r3, #0
 800433e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004340:	e02a      	b.n	8004398 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2200      	movs	r2, #0
 800434a:	2180      	movs	r1, #128	; 0x80
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 fb41 	bl	80049d4 <UART_WaitOnFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e036      	b.n	80043ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10b      	bne.n	800437a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004370:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	3302      	adds	r3, #2
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	e007      	b.n	800438a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	781a      	ldrb	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	3301      	adds	r3, #1
 8004388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1cf      	bne.n	8004342 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2200      	movs	r2, #0
 80043aa:	2140      	movs	r1, #64	; 0x40
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 fb11 	bl	80049d4 <UART_WaitOnFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e006      	b.n	80043ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b085      	sub	sp, #20
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	4613      	mov	r3, r2
 80043de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d121      	bne.n	8004430 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_UART_Transmit_IT+0x26>
 80043f2:	88fb      	ldrh	r3, [r7, #6]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e01a      	b.n	8004432 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	88fa      	ldrh	r2, [r7, #6]
 8004406:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2221      	movs	r2, #33	; 0x21
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800442a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	e000      	b.n	8004432 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004430:	2302      	movs	r3, #2
  }
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b20      	cmp	r3, #32
 8004454:	d112      	bne.n	800447c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <HAL_UART_Receive_IT+0x26>
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e00b      	b.n	800447e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	461a      	mov	r2, r3
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fb1c 	bl	8004ab0 <UART_Start_Receive_IT>
 8004478:	4603      	mov	r3, r0
 800447a:	e000      	b.n	800447e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800447c:	2302      	movs	r3, #2
  }
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b0ba      	sub	sp, #232	; 0xe8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10f      	bne.n	80044ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <HAL_UART_IRQHandler+0x66>
 80044da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fbf8 	bl	8004cdc <UART_Receive_IT>
      return;
 80044ec:	e25b      	b.n	80049a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80de 	beq.w	80046b4 <HAL_UART_IRQHandler+0x22c>
 80044f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004508:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80d1 	beq.w	80046b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_UART_IRQHandler+0xae>
 800451e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	f043 0201 	orr.w	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00b      	beq.n	800455a <HAL_UART_IRQHandler+0xd2>
 8004542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	f043 0202 	orr.w	r2, r3, #2
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00b      	beq.n	800457e <HAL_UART_IRQHandler+0xf6>
 8004566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d011      	beq.n	80045ae <HAL_UART_IRQHandler+0x126>
 800458a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d105      	bne.n	80045a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	f043 0208 	orr.w	r2, r3, #8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 81f2 	beq.w	800499c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_UART_IRQHandler+0x14e>
 80045c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fb83 	bl	8004cdc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d103      	bne.n	8004602 <HAL_UART_IRQHandler+0x17a>
 80045fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d04f      	beq.n	80046a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa8d 	bl	8004b22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d041      	beq.n	800469a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3314      	adds	r3, #20
 800461c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800462c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3314      	adds	r3, #20
 800463e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004642:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800464e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800465a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1d9      	bne.n	8004616 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004666:	2b00      	cmp	r3, #0
 8004668:	d013      	beq.n	8004692 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	4a7e      	ldr	r2, [pc, #504]	; (8004868 <HAL_UART_IRQHandler+0x3e0>)
 8004670:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	4618      	mov	r0, r3
 8004678:	f7fd fd14 	bl	80020a4 <HAL_DMA_Abort_IT>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d016      	beq.n	80046b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800468c:	4610      	mov	r0, r2
 800468e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004690:	e00e      	b.n	80046b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f98a 	bl	80049ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004698:	e00a      	b.n	80046b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f986 	bl	80049ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a0:	e006      	b.n	80046b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f982 	bl	80049ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80046ae:	e175      	b.n	800499c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	bf00      	nop
    return;
 80046b2:	e173      	b.n	800499c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	f040 814f 	bne.w	800495c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 8148 	beq.w	800495c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8141 	beq.w	800495c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80b6 	beq.w	800486c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800470c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8145 	beq.w	80049a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800471a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800471e:	429a      	cmp	r2, r3
 8004720:	f080 813e 	bcs.w	80049a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800472a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b20      	cmp	r3, #32
 8004734:	f000 8088 	beq.w	8004848 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	330c      	adds	r3, #12
 800473e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004742:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800474e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004752:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004756:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004764:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004768:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004770:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004774:	e841 2300 	strex	r3, r2, [r1]
 8004778:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800477c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1d9      	bne.n	8004738 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3314      	adds	r3, #20
 800478a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3314      	adds	r3, #20
 80047a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047a8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047ac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e1      	bne.n	8004784 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3314      	adds	r3, #20
 80047c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3314      	adds	r3, #20
 80047e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e3      	bne.n	80047c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004818:	f023 0310 	bic.w	r3, r3, #16
 800481c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800482a:	65ba      	str	r2, [r7, #88]	; 0x58
 800482c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004830:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e3      	bne.n	8004806 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004842:	4618      	mov	r0, r3
 8004844:	f7fd fbf3 	bl	800202e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004856:	b29b      	uxth	r3, r3
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	b29b      	uxth	r3, r3
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8ad 	bl	80049be <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004864:	e09c      	b.n	80049a0 <HAL_UART_IRQHandler+0x518>
 8004866:	bf00      	nop
 8004868:	08004be7 	.word	0x08004be7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004874:	b29b      	uxth	r3, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 808e 	beq.w	80049a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8089 	beq.w	80049a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	330c      	adds	r3, #12
 80048b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048b6:	647a      	str	r2, [r7, #68]	; 0x44
 80048b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e3      	bne.n	8004892 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3314      	adds	r3, #20
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	623b      	str	r3, [r7, #32]
   return(result);
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048ee:	633a      	str	r2, [r7, #48]	; 0x30
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e3      	bne.n	80048ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	330c      	adds	r3, #12
 8004916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0310 	bic.w	r3, r3, #16
 8004926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004934:	61fa      	str	r2, [r7, #28]
 8004936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	69b9      	ldr	r1, [r7, #24]
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	617b      	str	r3, [r7, #20]
   return(result);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e3      	bne.n	8004910 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800494e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f832 	bl	80049be <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800495a:	e023      	b.n	80049a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	2b00      	cmp	r3, #0
 8004966:	d009      	beq.n	800497c <HAL_UART_IRQHandler+0x4f4>
 8004968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f94a 	bl	8004c0e <UART_Transmit_IT>
    return;
 800497a:	e014      	b.n	80049a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800497c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00e      	beq.n	80049a6 <HAL_UART_IRQHandler+0x51e>
 8004988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f989 	bl	8004cac <UART_EndTransmit_IT>
    return;
 800499a:	e004      	b.n	80049a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800499c:	bf00      	nop
 800499e:	e002      	b.n	80049a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80049a0:	bf00      	nop
 80049a2:	e000      	b.n	80049a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80049a4:	bf00      	nop
  }
}
 80049a6:	37e8      	adds	r7, #232	; 0xe8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr

080049be <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	460b      	mov	r3, r1
 80049c8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b090      	sub	sp, #64	; 0x40
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e4:	e050      	b.n	8004a88 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d04c      	beq.n	8004a88 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80049f4:	f7fd f9e0 	bl	8001db8 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d241      	bcs.n	8004a88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	330c      	adds	r3, #12
 8004a22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a24:	637a      	str	r2, [r7, #52]	; 0x34
 8004a26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e5      	bne.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3314      	adds	r3, #20
 8004a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	613b      	str	r3, [r7, #16]
   return(result);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f023 0301 	bic.w	r3, r3, #1
 8004a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3314      	adds	r3, #20
 8004a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a58:	623a      	str	r2, [r7, #32]
 8004a5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	69f9      	ldr	r1, [r7, #28]
 8004a5e:	6a3a      	ldr	r2, [r7, #32]
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e5      	bne.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e00f      	b.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4013      	ands	r3, r2
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d09f      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3740      	adds	r7, #64	; 0x40
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	88fa      	ldrh	r2, [r7, #6]
 8004ace:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2222      	movs	r2, #34	; 0x22
 8004ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
 8004b04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0220 	orr.w	r2, r2, #32
 8004b14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr

08004b22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b095      	sub	sp, #84	; 0x54
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	330c      	adds	r3, #12
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b4a:	643a      	str	r2, [r7, #64]	; 0x40
 8004b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e5      	bne.n	8004b2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3314      	adds	r3, #20
 8004b7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e5      	bne.n	8004b5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d119      	bne.n	8004bce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f023 0310 	bic.w	r3, r3, #16
 8004bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	330c      	adds	r3, #12
 8004bb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bba:	61ba      	str	r2, [r7, #24]
 8004bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6979      	ldr	r1, [r7, #20]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e5      	bne.n	8004b9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bdc:	bf00      	nop
 8004bde:	3754      	adds	r7, #84	; 0x54
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr

08004be6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f7ff fed3 	bl	80049ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b21      	cmp	r3, #33	; 0x21
 8004c20:	d13e      	bne.n	8004ca0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2a:	d114      	bne.n	8004c56 <UART_Transmit_IT+0x48>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d110      	bne.n	8004c56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	1c9a      	adds	r2, r3, #2
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	621a      	str	r2, [r3, #32]
 8004c54:	e008      	b.n	8004c68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	1c59      	adds	r1, r3, #1
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6211      	str	r1, [r2, #32]
 8004c60:	781a      	ldrb	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4619      	mov	r1, r3
 8004c76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10f      	bne.n	8004c9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e000      	b.n	8004ca2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ca0:	2302      	movs	r3, #2
  }
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fc fa7f 	bl	80011d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08c      	sub	sp, #48	; 0x30
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b22      	cmp	r3, #34	; 0x22
 8004cee:	f040 80ae 	bne.w	8004e4e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfa:	d117      	bne.n	8004d2c <UART_Receive_IT+0x50>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d113      	bne.n	8004d2c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	629a      	str	r2, [r3, #40]	; 0x28
 8004d2a:	e026      	b.n	8004d7a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3e:	d007      	beq.n	8004d50 <UART_Receive_IT+0x74>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <UART_Receive_IT+0x82>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	e008      	b.n	8004d70 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4619      	mov	r1, r3
 8004d88:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d15d      	bne.n	8004e4a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0220 	bic.w	r2, r2, #32
 8004d9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695a      	ldr	r2, [r3, #20]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d135      	bne.n	8004e40 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	330c      	adds	r3, #12
 8004de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f023 0310 	bic.w	r3, r3, #16
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	330c      	adds	r3, #12
 8004df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfa:	623a      	str	r2, [r7, #32]
 8004dfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	69f9      	ldr	r1, [r7, #28]
 8004e00:	6a3a      	ldr	r2, [r7, #32]
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e5      	bne.n	8004dda <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d10a      	bne.n	8004e32 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff fdc0 	bl	80049be <HAL_UARTEx_RxEventCallback>
 8004e3e:	e002      	b.n	8004e46 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7fc f999 	bl	8001178 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e002      	b.n	8004e50 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e000      	b.n	8004e50 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e4e:	2302      	movs	r3, #2
  }
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3730      	adds	r7, #48	; 0x30
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e92:	f023 030c 	bic.w	r3, r3, #12
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2c      	ldr	r2, [pc, #176]	; (8004f6c <UART_SetConfig+0x114>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d103      	bne.n	8004ec8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ec0:	f7fd ff1c 	bl	8002cfc <HAL_RCC_GetPCLK2Freq>
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	e002      	b.n	8004ece <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ec8:	f7fd ff04 	bl	8002cd4 <HAL_RCC_GetPCLK1Freq>
 8004ecc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009a      	lsls	r2, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	4a22      	ldr	r2, [pc, #136]	; (8004f70 <UART_SetConfig+0x118>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	0119      	lsls	r1, r3, #4
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009a      	lsls	r2, r3, #2
 8004ef8:	441a      	add	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f04:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <UART_SetConfig+0x118>)
 8004f06:	fba3 0302 	umull	r0, r3, r3, r2
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	2064      	movs	r0, #100	; 0x64
 8004f0e:	fb00 f303 	mul.w	r3, r0, r3
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	3332      	adds	r3, #50	; 0x32
 8004f18:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <UART_SetConfig+0x118>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f24:	4419      	add	r1, r3
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009a      	lsls	r2, r3, #2
 8004f30:	441a      	add	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <UART_SetConfig+0x118>)
 8004f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	2064      	movs	r0, #100	; 0x64
 8004f46:	fb00 f303 	mul.w	r3, r0, r3
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	3332      	adds	r3, #50	; 0x32
 8004f50:	4a07      	ldr	r2, [pc, #28]	; (8004f70 <UART_SetConfig+0x118>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	f003 020f 	and.w	r2, r3, #15
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	440a      	add	r2, r1
 8004f62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40013800 	.word	0x40013800
 8004f70:	51eb851f 	.word	0x51eb851f

08004f74 <__cvt>:
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f7a:	461f      	mov	r7, r3
 8004f7c:	bfbb      	ittet	lt
 8004f7e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004f82:	461f      	movlt	r7, r3
 8004f84:	2300      	movge	r3, #0
 8004f86:	232d      	movlt	r3, #45	; 0x2d
 8004f88:	b088      	sub	sp, #32
 8004f8a:	4614      	mov	r4, r2
 8004f8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004f90:	7013      	strb	r3, [r2, #0]
 8004f92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f94:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004f98:	f023 0820 	bic.w	r8, r3, #32
 8004f9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fa0:	d005      	beq.n	8004fae <__cvt+0x3a>
 8004fa2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fa6:	d100      	bne.n	8004faa <__cvt+0x36>
 8004fa8:	3501      	adds	r5, #1
 8004faa:	2302      	movs	r3, #2
 8004fac:	e000      	b.n	8004fb0 <__cvt+0x3c>
 8004fae:	2303      	movs	r3, #3
 8004fb0:	aa07      	add	r2, sp, #28
 8004fb2:	9204      	str	r2, [sp, #16]
 8004fb4:	aa06      	add	r2, sp, #24
 8004fb6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004fba:	e9cd 3500 	strd	r3, r5, [sp]
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	f000 fe85 	bl	8005cd0 <_dtoa_r>
 8004fc6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004fca:	4606      	mov	r6, r0
 8004fcc:	d102      	bne.n	8004fd4 <__cvt+0x60>
 8004fce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fd0:	07db      	lsls	r3, r3, #31
 8004fd2:	d522      	bpl.n	800501a <__cvt+0xa6>
 8004fd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fd8:	eb06 0905 	add.w	r9, r6, r5
 8004fdc:	d110      	bne.n	8005000 <__cvt+0x8c>
 8004fde:	7833      	ldrb	r3, [r6, #0]
 8004fe0:	2b30      	cmp	r3, #48	; 0x30
 8004fe2:	d10a      	bne.n	8004ffa <__cvt+0x86>
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	4620      	mov	r0, r4
 8004fea:	4639      	mov	r1, r7
 8004fec:	f7fb fcdc 	bl	80009a8 <__aeabi_dcmpeq>
 8004ff0:	b918      	cbnz	r0, 8004ffa <__cvt+0x86>
 8004ff2:	f1c5 0501 	rsb	r5, r5, #1
 8004ff6:	f8ca 5000 	str.w	r5, [sl]
 8004ffa:	f8da 3000 	ldr.w	r3, [sl]
 8004ffe:	4499      	add	r9, r3
 8005000:	2200      	movs	r2, #0
 8005002:	2300      	movs	r3, #0
 8005004:	4620      	mov	r0, r4
 8005006:	4639      	mov	r1, r7
 8005008:	f7fb fcce 	bl	80009a8 <__aeabi_dcmpeq>
 800500c:	b108      	cbz	r0, 8005012 <__cvt+0x9e>
 800500e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005012:	2230      	movs	r2, #48	; 0x30
 8005014:	9b07      	ldr	r3, [sp, #28]
 8005016:	454b      	cmp	r3, r9
 8005018:	d307      	bcc.n	800502a <__cvt+0xb6>
 800501a:	4630      	mov	r0, r6
 800501c:	9b07      	ldr	r3, [sp, #28]
 800501e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005020:	1b9b      	subs	r3, r3, r6
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	b008      	add	sp, #32
 8005026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502a:	1c59      	adds	r1, r3, #1
 800502c:	9107      	str	r1, [sp, #28]
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e7f0      	b.n	8005014 <__cvt+0xa0>

08005032 <__exponent>:
 8005032:	4603      	mov	r3, r0
 8005034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005036:	2900      	cmp	r1, #0
 8005038:	f803 2b02 	strb.w	r2, [r3], #2
 800503c:	bfb6      	itet	lt
 800503e:	222d      	movlt	r2, #45	; 0x2d
 8005040:	222b      	movge	r2, #43	; 0x2b
 8005042:	4249      	neglt	r1, r1
 8005044:	2909      	cmp	r1, #9
 8005046:	7042      	strb	r2, [r0, #1]
 8005048:	dd2a      	ble.n	80050a0 <__exponent+0x6e>
 800504a:	f10d 0207 	add.w	r2, sp, #7
 800504e:	4617      	mov	r7, r2
 8005050:	260a      	movs	r6, #10
 8005052:	fb91 f5f6 	sdiv	r5, r1, r6
 8005056:	4694      	mov	ip, r2
 8005058:	fb06 1415 	mls	r4, r6, r5, r1
 800505c:	3430      	adds	r4, #48	; 0x30
 800505e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005062:	460c      	mov	r4, r1
 8005064:	2c63      	cmp	r4, #99	; 0x63
 8005066:	4629      	mov	r1, r5
 8005068:	f102 32ff 	add.w	r2, r2, #4294967295
 800506c:	dcf1      	bgt.n	8005052 <__exponent+0x20>
 800506e:	3130      	adds	r1, #48	; 0x30
 8005070:	f1ac 0402 	sub.w	r4, ip, #2
 8005074:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005078:	4622      	mov	r2, r4
 800507a:	1c41      	adds	r1, r0, #1
 800507c:	42ba      	cmp	r2, r7
 800507e:	d30a      	bcc.n	8005096 <__exponent+0x64>
 8005080:	f10d 0209 	add.w	r2, sp, #9
 8005084:	eba2 020c 	sub.w	r2, r2, ip
 8005088:	42bc      	cmp	r4, r7
 800508a:	bf88      	it	hi
 800508c:	2200      	movhi	r2, #0
 800508e:	4413      	add	r3, r2
 8005090:	1a18      	subs	r0, r3, r0
 8005092:	b003      	add	sp, #12
 8005094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005096:	f812 5b01 	ldrb.w	r5, [r2], #1
 800509a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800509e:	e7ed      	b.n	800507c <__exponent+0x4a>
 80050a0:	2330      	movs	r3, #48	; 0x30
 80050a2:	3130      	adds	r1, #48	; 0x30
 80050a4:	7083      	strb	r3, [r0, #2]
 80050a6:	70c1      	strb	r1, [r0, #3]
 80050a8:	1d03      	adds	r3, r0, #4
 80050aa:	e7f1      	b.n	8005090 <__exponent+0x5e>

080050ac <_printf_float>:
 80050ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b0:	b091      	sub	sp, #68	; 0x44
 80050b2:	460c      	mov	r4, r1
 80050b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80050b8:	4616      	mov	r6, r2
 80050ba:	461f      	mov	r7, r3
 80050bc:	4605      	mov	r5, r0
 80050be:	f000 fcf9 	bl	8005ab4 <_localeconv_r>
 80050c2:	6803      	ldr	r3, [r0, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	9309      	str	r3, [sp, #36]	; 0x24
 80050c8:	f7fb f842 	bl	8000150 <strlen>
 80050cc:	2300      	movs	r3, #0
 80050ce:	930e      	str	r3, [sp, #56]	; 0x38
 80050d0:	f8d8 3000 	ldr.w	r3, [r8]
 80050d4:	900a      	str	r0, [sp, #40]	; 0x28
 80050d6:	3307      	adds	r3, #7
 80050d8:	f023 0307 	bic.w	r3, r3, #7
 80050dc:	f103 0208 	add.w	r2, r3, #8
 80050e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80050e4:	f8d4 b000 	ldr.w	fp, [r4]
 80050e8:	f8c8 2000 	str.w	r2, [r8]
 80050ec:	e9d3 a800 	ldrd	sl, r8, [r3]
 80050f0:	4652      	mov	r2, sl
 80050f2:	4643      	mov	r3, r8
 80050f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80050f8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80050fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80050fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005102:	4650      	mov	r0, sl
 8005104:	4b9c      	ldr	r3, [pc, #624]	; (8005378 <_printf_float+0x2cc>)
 8005106:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005108:	f7fb fc80 	bl	8000a0c <__aeabi_dcmpun>
 800510c:	bb70      	cbnz	r0, 800516c <_printf_float+0xc0>
 800510e:	f04f 32ff 	mov.w	r2, #4294967295
 8005112:	4650      	mov	r0, sl
 8005114:	4b98      	ldr	r3, [pc, #608]	; (8005378 <_printf_float+0x2cc>)
 8005116:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005118:	f7fb fc5a 	bl	80009d0 <__aeabi_dcmple>
 800511c:	bb30      	cbnz	r0, 800516c <_printf_float+0xc0>
 800511e:	2200      	movs	r2, #0
 8005120:	2300      	movs	r3, #0
 8005122:	4650      	mov	r0, sl
 8005124:	4641      	mov	r1, r8
 8005126:	f7fb fc49 	bl	80009bc <__aeabi_dcmplt>
 800512a:	b110      	cbz	r0, 8005132 <_printf_float+0x86>
 800512c:	232d      	movs	r3, #45	; 0x2d
 800512e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005132:	4a92      	ldr	r2, [pc, #584]	; (800537c <_printf_float+0x2d0>)
 8005134:	4b92      	ldr	r3, [pc, #584]	; (8005380 <_printf_float+0x2d4>)
 8005136:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800513a:	bf94      	ite	ls
 800513c:	4690      	movls	r8, r2
 800513e:	4698      	movhi	r8, r3
 8005140:	2303      	movs	r3, #3
 8005142:	f04f 0a00 	mov.w	sl, #0
 8005146:	6123      	str	r3, [r4, #16]
 8005148:	f02b 0304 	bic.w	r3, fp, #4
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	4633      	mov	r3, r6
 8005150:	4621      	mov	r1, r4
 8005152:	4628      	mov	r0, r5
 8005154:	9700      	str	r7, [sp, #0]
 8005156:	aa0f      	add	r2, sp, #60	; 0x3c
 8005158:	f000 f9d6 	bl	8005508 <_printf_common>
 800515c:	3001      	adds	r0, #1
 800515e:	f040 8090 	bne.w	8005282 <_printf_float+0x1d6>
 8005162:	f04f 30ff 	mov.w	r0, #4294967295
 8005166:	b011      	add	sp, #68	; 0x44
 8005168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800516c:	4652      	mov	r2, sl
 800516e:	4643      	mov	r3, r8
 8005170:	4650      	mov	r0, sl
 8005172:	4641      	mov	r1, r8
 8005174:	f7fb fc4a 	bl	8000a0c <__aeabi_dcmpun>
 8005178:	b148      	cbz	r0, 800518e <_printf_float+0xe2>
 800517a:	f1b8 0f00 	cmp.w	r8, #0
 800517e:	bfb8      	it	lt
 8005180:	232d      	movlt	r3, #45	; 0x2d
 8005182:	4a80      	ldr	r2, [pc, #512]	; (8005384 <_printf_float+0x2d8>)
 8005184:	bfb8      	it	lt
 8005186:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800518a:	4b7f      	ldr	r3, [pc, #508]	; (8005388 <_printf_float+0x2dc>)
 800518c:	e7d3      	b.n	8005136 <_printf_float+0x8a>
 800518e:	6863      	ldr	r3, [r4, #4]
 8005190:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	d142      	bne.n	800521e <_printf_float+0x172>
 8005198:	2306      	movs	r3, #6
 800519a:	6063      	str	r3, [r4, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	9206      	str	r2, [sp, #24]
 80051a0:	aa0e      	add	r2, sp, #56	; 0x38
 80051a2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80051a6:	aa0d      	add	r2, sp, #52	; 0x34
 80051a8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80051ac:	9203      	str	r2, [sp, #12]
 80051ae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80051b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80051b6:	6023      	str	r3, [r4, #0]
 80051b8:	6863      	ldr	r3, [r4, #4]
 80051ba:	4652      	mov	r2, sl
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	4628      	mov	r0, r5
 80051c0:	4643      	mov	r3, r8
 80051c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80051c4:	f7ff fed6 	bl	8004f74 <__cvt>
 80051c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051ca:	4680      	mov	r8, r0
 80051cc:	2947      	cmp	r1, #71	; 0x47
 80051ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051d0:	d108      	bne.n	80051e4 <_printf_float+0x138>
 80051d2:	1cc8      	adds	r0, r1, #3
 80051d4:	db02      	blt.n	80051dc <_printf_float+0x130>
 80051d6:	6863      	ldr	r3, [r4, #4]
 80051d8:	4299      	cmp	r1, r3
 80051da:	dd40      	ble.n	800525e <_printf_float+0x1b2>
 80051dc:	f1a9 0902 	sub.w	r9, r9, #2
 80051e0:	fa5f f989 	uxtb.w	r9, r9
 80051e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80051e8:	d81f      	bhi.n	800522a <_printf_float+0x17e>
 80051ea:	464a      	mov	r2, r9
 80051ec:	3901      	subs	r1, #1
 80051ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051f2:	910d      	str	r1, [sp, #52]	; 0x34
 80051f4:	f7ff ff1d 	bl	8005032 <__exponent>
 80051f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051fa:	4682      	mov	sl, r0
 80051fc:	1813      	adds	r3, r2, r0
 80051fe:	2a01      	cmp	r2, #1
 8005200:	6123      	str	r3, [r4, #16]
 8005202:	dc02      	bgt.n	800520a <_printf_float+0x15e>
 8005204:	6822      	ldr	r2, [r4, #0]
 8005206:	07d2      	lsls	r2, r2, #31
 8005208:	d501      	bpl.n	800520e <_printf_float+0x162>
 800520a:	3301      	adds	r3, #1
 800520c:	6123      	str	r3, [r4, #16]
 800520e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005212:	2b00      	cmp	r3, #0
 8005214:	d09b      	beq.n	800514e <_printf_float+0xa2>
 8005216:	232d      	movs	r3, #45	; 0x2d
 8005218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800521c:	e797      	b.n	800514e <_printf_float+0xa2>
 800521e:	2947      	cmp	r1, #71	; 0x47
 8005220:	d1bc      	bne.n	800519c <_printf_float+0xf0>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1ba      	bne.n	800519c <_printf_float+0xf0>
 8005226:	2301      	movs	r3, #1
 8005228:	e7b7      	b.n	800519a <_printf_float+0xee>
 800522a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800522e:	d118      	bne.n	8005262 <_printf_float+0x1b6>
 8005230:	2900      	cmp	r1, #0
 8005232:	6863      	ldr	r3, [r4, #4]
 8005234:	dd0b      	ble.n	800524e <_printf_float+0x1a2>
 8005236:	6121      	str	r1, [r4, #16]
 8005238:	b913      	cbnz	r3, 8005240 <_printf_float+0x194>
 800523a:	6822      	ldr	r2, [r4, #0]
 800523c:	07d0      	lsls	r0, r2, #31
 800523e:	d502      	bpl.n	8005246 <_printf_float+0x19a>
 8005240:	3301      	adds	r3, #1
 8005242:	440b      	add	r3, r1
 8005244:	6123      	str	r3, [r4, #16]
 8005246:	f04f 0a00 	mov.w	sl, #0
 800524a:	65a1      	str	r1, [r4, #88]	; 0x58
 800524c:	e7df      	b.n	800520e <_printf_float+0x162>
 800524e:	b913      	cbnz	r3, 8005256 <_printf_float+0x1aa>
 8005250:	6822      	ldr	r2, [r4, #0]
 8005252:	07d2      	lsls	r2, r2, #31
 8005254:	d501      	bpl.n	800525a <_printf_float+0x1ae>
 8005256:	3302      	adds	r3, #2
 8005258:	e7f4      	b.n	8005244 <_printf_float+0x198>
 800525a:	2301      	movs	r3, #1
 800525c:	e7f2      	b.n	8005244 <_printf_float+0x198>
 800525e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005264:	4299      	cmp	r1, r3
 8005266:	db05      	blt.n	8005274 <_printf_float+0x1c8>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	6121      	str	r1, [r4, #16]
 800526c:	07d8      	lsls	r0, r3, #31
 800526e:	d5ea      	bpl.n	8005246 <_printf_float+0x19a>
 8005270:	1c4b      	adds	r3, r1, #1
 8005272:	e7e7      	b.n	8005244 <_printf_float+0x198>
 8005274:	2900      	cmp	r1, #0
 8005276:	bfcc      	ite	gt
 8005278:	2201      	movgt	r2, #1
 800527a:	f1c1 0202 	rsble	r2, r1, #2
 800527e:	4413      	add	r3, r2
 8005280:	e7e0      	b.n	8005244 <_printf_float+0x198>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	055a      	lsls	r2, r3, #21
 8005286:	d407      	bmi.n	8005298 <_printf_float+0x1ec>
 8005288:	6923      	ldr	r3, [r4, #16]
 800528a:	4642      	mov	r2, r8
 800528c:	4631      	mov	r1, r6
 800528e:	4628      	mov	r0, r5
 8005290:	47b8      	blx	r7
 8005292:	3001      	adds	r0, #1
 8005294:	d12b      	bne.n	80052ee <_printf_float+0x242>
 8005296:	e764      	b.n	8005162 <_printf_float+0xb6>
 8005298:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800529c:	f240 80dd 	bls.w	800545a <_printf_float+0x3ae>
 80052a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052a4:	2200      	movs	r2, #0
 80052a6:	2300      	movs	r3, #0
 80052a8:	f7fb fb7e 	bl	80009a8 <__aeabi_dcmpeq>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	d033      	beq.n	8005318 <_printf_float+0x26c>
 80052b0:	2301      	movs	r3, #1
 80052b2:	4631      	mov	r1, r6
 80052b4:	4628      	mov	r0, r5
 80052b6:	4a35      	ldr	r2, [pc, #212]	; (800538c <_printf_float+0x2e0>)
 80052b8:	47b8      	blx	r7
 80052ba:	3001      	adds	r0, #1
 80052bc:	f43f af51 	beq.w	8005162 <_printf_float+0xb6>
 80052c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052c4:	429a      	cmp	r2, r3
 80052c6:	db02      	blt.n	80052ce <_printf_float+0x222>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	07d8      	lsls	r0, r3, #31
 80052cc:	d50f      	bpl.n	80052ee <_printf_float+0x242>
 80052ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052d2:	4631      	mov	r1, r6
 80052d4:	4628      	mov	r0, r5
 80052d6:	47b8      	blx	r7
 80052d8:	3001      	adds	r0, #1
 80052da:	f43f af42 	beq.w	8005162 <_printf_float+0xb6>
 80052de:	f04f 0800 	mov.w	r8, #0
 80052e2:	f104 091a 	add.w	r9, r4, #26
 80052e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052e8:	3b01      	subs	r3, #1
 80052ea:	4543      	cmp	r3, r8
 80052ec:	dc09      	bgt.n	8005302 <_printf_float+0x256>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	079b      	lsls	r3, r3, #30
 80052f2:	f100 8104 	bmi.w	80054fe <_printf_float+0x452>
 80052f6:	68e0      	ldr	r0, [r4, #12]
 80052f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052fa:	4298      	cmp	r0, r3
 80052fc:	bfb8      	it	lt
 80052fe:	4618      	movlt	r0, r3
 8005300:	e731      	b.n	8005166 <_printf_float+0xba>
 8005302:	2301      	movs	r3, #1
 8005304:	464a      	mov	r2, r9
 8005306:	4631      	mov	r1, r6
 8005308:	4628      	mov	r0, r5
 800530a:	47b8      	blx	r7
 800530c:	3001      	adds	r0, #1
 800530e:	f43f af28 	beq.w	8005162 <_printf_float+0xb6>
 8005312:	f108 0801 	add.w	r8, r8, #1
 8005316:	e7e6      	b.n	80052e6 <_printf_float+0x23a>
 8005318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800531a:	2b00      	cmp	r3, #0
 800531c:	dc38      	bgt.n	8005390 <_printf_float+0x2e4>
 800531e:	2301      	movs	r3, #1
 8005320:	4631      	mov	r1, r6
 8005322:	4628      	mov	r0, r5
 8005324:	4a19      	ldr	r2, [pc, #100]	; (800538c <_printf_float+0x2e0>)
 8005326:	47b8      	blx	r7
 8005328:	3001      	adds	r0, #1
 800532a:	f43f af1a 	beq.w	8005162 <_printf_float+0xb6>
 800532e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005332:	4313      	orrs	r3, r2
 8005334:	d102      	bne.n	800533c <_printf_float+0x290>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	07d9      	lsls	r1, r3, #31
 800533a:	d5d8      	bpl.n	80052ee <_printf_float+0x242>
 800533c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005340:	4631      	mov	r1, r6
 8005342:	4628      	mov	r0, r5
 8005344:	47b8      	blx	r7
 8005346:	3001      	adds	r0, #1
 8005348:	f43f af0b 	beq.w	8005162 <_printf_float+0xb6>
 800534c:	f04f 0900 	mov.w	r9, #0
 8005350:	f104 0a1a 	add.w	sl, r4, #26
 8005354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005356:	425b      	negs	r3, r3
 8005358:	454b      	cmp	r3, r9
 800535a:	dc01      	bgt.n	8005360 <_printf_float+0x2b4>
 800535c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800535e:	e794      	b.n	800528a <_printf_float+0x1de>
 8005360:	2301      	movs	r3, #1
 8005362:	4652      	mov	r2, sl
 8005364:	4631      	mov	r1, r6
 8005366:	4628      	mov	r0, r5
 8005368:	47b8      	blx	r7
 800536a:	3001      	adds	r0, #1
 800536c:	f43f aef9 	beq.w	8005162 <_printf_float+0xb6>
 8005370:	f109 0901 	add.w	r9, r9, #1
 8005374:	e7ee      	b.n	8005354 <_printf_float+0x2a8>
 8005376:	bf00      	nop
 8005378:	7fefffff 	.word	0x7fefffff
 800537c:	08007cd6 	.word	0x08007cd6
 8005380:	08007cda 	.word	0x08007cda
 8005384:	08007cde 	.word	0x08007cde
 8005388:	08007ce2 	.word	0x08007ce2
 800538c:	08007ce6 	.word	0x08007ce6
 8005390:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005392:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005394:	429a      	cmp	r2, r3
 8005396:	bfa8      	it	ge
 8005398:	461a      	movge	r2, r3
 800539a:	2a00      	cmp	r2, #0
 800539c:	4691      	mov	r9, r2
 800539e:	dc37      	bgt.n	8005410 <_printf_float+0x364>
 80053a0:	f04f 0b00 	mov.w	fp, #0
 80053a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053a8:	f104 021a 	add.w	r2, r4, #26
 80053ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80053b0:	ebaa 0309 	sub.w	r3, sl, r9
 80053b4:	455b      	cmp	r3, fp
 80053b6:	dc33      	bgt.n	8005420 <_printf_float+0x374>
 80053b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053bc:	429a      	cmp	r2, r3
 80053be:	db3b      	blt.n	8005438 <_printf_float+0x38c>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	07da      	lsls	r2, r3, #31
 80053c4:	d438      	bmi.n	8005438 <_printf_float+0x38c>
 80053c6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80053ca:	eba2 0903 	sub.w	r9, r2, r3
 80053ce:	eba2 020a 	sub.w	r2, r2, sl
 80053d2:	4591      	cmp	r9, r2
 80053d4:	bfa8      	it	ge
 80053d6:	4691      	movge	r9, r2
 80053d8:	f1b9 0f00 	cmp.w	r9, #0
 80053dc:	dc34      	bgt.n	8005448 <_printf_float+0x39c>
 80053de:	f04f 0800 	mov.w	r8, #0
 80053e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053e6:	f104 0a1a 	add.w	sl, r4, #26
 80053ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	eba3 0309 	sub.w	r3, r3, r9
 80053f4:	4543      	cmp	r3, r8
 80053f6:	f77f af7a 	ble.w	80052ee <_printf_float+0x242>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4652      	mov	r2, sl
 80053fe:	4631      	mov	r1, r6
 8005400:	4628      	mov	r0, r5
 8005402:	47b8      	blx	r7
 8005404:	3001      	adds	r0, #1
 8005406:	f43f aeac 	beq.w	8005162 <_printf_float+0xb6>
 800540a:	f108 0801 	add.w	r8, r8, #1
 800540e:	e7ec      	b.n	80053ea <_printf_float+0x33e>
 8005410:	4613      	mov	r3, r2
 8005412:	4631      	mov	r1, r6
 8005414:	4642      	mov	r2, r8
 8005416:	4628      	mov	r0, r5
 8005418:	47b8      	blx	r7
 800541a:	3001      	adds	r0, #1
 800541c:	d1c0      	bne.n	80053a0 <_printf_float+0x2f4>
 800541e:	e6a0      	b.n	8005162 <_printf_float+0xb6>
 8005420:	2301      	movs	r3, #1
 8005422:	4631      	mov	r1, r6
 8005424:	4628      	mov	r0, r5
 8005426:	920b      	str	r2, [sp, #44]	; 0x2c
 8005428:	47b8      	blx	r7
 800542a:	3001      	adds	r0, #1
 800542c:	f43f ae99 	beq.w	8005162 <_printf_float+0xb6>
 8005430:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005432:	f10b 0b01 	add.w	fp, fp, #1
 8005436:	e7b9      	b.n	80053ac <_printf_float+0x300>
 8005438:	4631      	mov	r1, r6
 800543a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800543e:	4628      	mov	r0, r5
 8005440:	47b8      	blx	r7
 8005442:	3001      	adds	r0, #1
 8005444:	d1bf      	bne.n	80053c6 <_printf_float+0x31a>
 8005446:	e68c      	b.n	8005162 <_printf_float+0xb6>
 8005448:	464b      	mov	r3, r9
 800544a:	4631      	mov	r1, r6
 800544c:	4628      	mov	r0, r5
 800544e:	eb08 020a 	add.w	r2, r8, sl
 8005452:	47b8      	blx	r7
 8005454:	3001      	adds	r0, #1
 8005456:	d1c2      	bne.n	80053de <_printf_float+0x332>
 8005458:	e683      	b.n	8005162 <_printf_float+0xb6>
 800545a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800545c:	2a01      	cmp	r2, #1
 800545e:	dc01      	bgt.n	8005464 <_printf_float+0x3b8>
 8005460:	07db      	lsls	r3, r3, #31
 8005462:	d539      	bpl.n	80054d8 <_printf_float+0x42c>
 8005464:	2301      	movs	r3, #1
 8005466:	4642      	mov	r2, r8
 8005468:	4631      	mov	r1, r6
 800546a:	4628      	mov	r0, r5
 800546c:	47b8      	blx	r7
 800546e:	3001      	adds	r0, #1
 8005470:	f43f ae77 	beq.w	8005162 <_printf_float+0xb6>
 8005474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005478:	4631      	mov	r1, r6
 800547a:	4628      	mov	r0, r5
 800547c:	47b8      	blx	r7
 800547e:	3001      	adds	r0, #1
 8005480:	f43f ae6f 	beq.w	8005162 <_printf_float+0xb6>
 8005484:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005488:	2200      	movs	r2, #0
 800548a:	2300      	movs	r3, #0
 800548c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005490:	f7fb fa8a 	bl	80009a8 <__aeabi_dcmpeq>
 8005494:	b9d8      	cbnz	r0, 80054ce <_printf_float+0x422>
 8005496:	f109 33ff 	add.w	r3, r9, #4294967295
 800549a:	f108 0201 	add.w	r2, r8, #1
 800549e:	4631      	mov	r1, r6
 80054a0:	4628      	mov	r0, r5
 80054a2:	47b8      	blx	r7
 80054a4:	3001      	adds	r0, #1
 80054a6:	d10e      	bne.n	80054c6 <_printf_float+0x41a>
 80054a8:	e65b      	b.n	8005162 <_printf_float+0xb6>
 80054aa:	2301      	movs	r3, #1
 80054ac:	464a      	mov	r2, r9
 80054ae:	4631      	mov	r1, r6
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b8      	blx	r7
 80054b4:	3001      	adds	r0, #1
 80054b6:	f43f ae54 	beq.w	8005162 <_printf_float+0xb6>
 80054ba:	f108 0801 	add.w	r8, r8, #1
 80054be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054c0:	3b01      	subs	r3, #1
 80054c2:	4543      	cmp	r3, r8
 80054c4:	dcf1      	bgt.n	80054aa <_printf_float+0x3fe>
 80054c6:	4653      	mov	r3, sl
 80054c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054cc:	e6de      	b.n	800528c <_printf_float+0x1e0>
 80054ce:	f04f 0800 	mov.w	r8, #0
 80054d2:	f104 091a 	add.w	r9, r4, #26
 80054d6:	e7f2      	b.n	80054be <_printf_float+0x412>
 80054d8:	2301      	movs	r3, #1
 80054da:	4642      	mov	r2, r8
 80054dc:	e7df      	b.n	800549e <_printf_float+0x3f2>
 80054de:	2301      	movs	r3, #1
 80054e0:	464a      	mov	r2, r9
 80054e2:	4631      	mov	r1, r6
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b8      	blx	r7
 80054e8:	3001      	adds	r0, #1
 80054ea:	f43f ae3a 	beq.w	8005162 <_printf_float+0xb6>
 80054ee:	f108 0801 	add.w	r8, r8, #1
 80054f2:	68e3      	ldr	r3, [r4, #12]
 80054f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80054f6:	1a5b      	subs	r3, r3, r1
 80054f8:	4543      	cmp	r3, r8
 80054fa:	dcf0      	bgt.n	80054de <_printf_float+0x432>
 80054fc:	e6fb      	b.n	80052f6 <_printf_float+0x24a>
 80054fe:	f04f 0800 	mov.w	r8, #0
 8005502:	f104 0919 	add.w	r9, r4, #25
 8005506:	e7f4      	b.n	80054f2 <_printf_float+0x446>

08005508 <_printf_common>:
 8005508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800550c:	4616      	mov	r6, r2
 800550e:	4699      	mov	r9, r3
 8005510:	688a      	ldr	r2, [r1, #8]
 8005512:	690b      	ldr	r3, [r1, #16]
 8005514:	4607      	mov	r7, r0
 8005516:	4293      	cmp	r3, r2
 8005518:	bfb8      	it	lt
 800551a:	4613      	movlt	r3, r2
 800551c:	6033      	str	r3, [r6, #0]
 800551e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005522:	460c      	mov	r4, r1
 8005524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005528:	b10a      	cbz	r2, 800552e <_printf_common+0x26>
 800552a:	3301      	adds	r3, #1
 800552c:	6033      	str	r3, [r6, #0]
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	0699      	lsls	r1, r3, #26
 8005532:	bf42      	ittt	mi
 8005534:	6833      	ldrmi	r3, [r6, #0]
 8005536:	3302      	addmi	r3, #2
 8005538:	6033      	strmi	r3, [r6, #0]
 800553a:	6825      	ldr	r5, [r4, #0]
 800553c:	f015 0506 	ands.w	r5, r5, #6
 8005540:	d106      	bne.n	8005550 <_printf_common+0x48>
 8005542:	f104 0a19 	add.w	sl, r4, #25
 8005546:	68e3      	ldr	r3, [r4, #12]
 8005548:	6832      	ldr	r2, [r6, #0]
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	42ab      	cmp	r3, r5
 800554e:	dc2b      	bgt.n	80055a8 <_printf_common+0xa0>
 8005550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005554:	1e13      	subs	r3, r2, #0
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	bf18      	it	ne
 800555a:	2301      	movne	r3, #1
 800555c:	0692      	lsls	r2, r2, #26
 800555e:	d430      	bmi.n	80055c2 <_printf_common+0xba>
 8005560:	4649      	mov	r1, r9
 8005562:	4638      	mov	r0, r7
 8005564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005568:	47c0      	blx	r8
 800556a:	3001      	adds	r0, #1
 800556c:	d023      	beq.n	80055b6 <_printf_common+0xae>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	6922      	ldr	r2, [r4, #16]
 8005572:	f003 0306 	and.w	r3, r3, #6
 8005576:	2b04      	cmp	r3, #4
 8005578:	bf14      	ite	ne
 800557a:	2500      	movne	r5, #0
 800557c:	6833      	ldreq	r3, [r6, #0]
 800557e:	f04f 0600 	mov.w	r6, #0
 8005582:	bf08      	it	eq
 8005584:	68e5      	ldreq	r5, [r4, #12]
 8005586:	f104 041a 	add.w	r4, r4, #26
 800558a:	bf08      	it	eq
 800558c:	1aed      	subeq	r5, r5, r3
 800558e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005592:	bf08      	it	eq
 8005594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005598:	4293      	cmp	r3, r2
 800559a:	bfc4      	itt	gt
 800559c:	1a9b      	subgt	r3, r3, r2
 800559e:	18ed      	addgt	r5, r5, r3
 80055a0:	42b5      	cmp	r5, r6
 80055a2:	d11a      	bne.n	80055da <_printf_common+0xd2>
 80055a4:	2000      	movs	r0, #0
 80055a6:	e008      	b.n	80055ba <_printf_common+0xb2>
 80055a8:	2301      	movs	r3, #1
 80055aa:	4652      	mov	r2, sl
 80055ac:	4649      	mov	r1, r9
 80055ae:	4638      	mov	r0, r7
 80055b0:	47c0      	blx	r8
 80055b2:	3001      	adds	r0, #1
 80055b4:	d103      	bne.n	80055be <_printf_common+0xb6>
 80055b6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055be:	3501      	adds	r5, #1
 80055c0:	e7c1      	b.n	8005546 <_printf_common+0x3e>
 80055c2:	2030      	movs	r0, #48	; 0x30
 80055c4:	18e1      	adds	r1, r4, r3
 80055c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055d0:	4422      	add	r2, r4
 80055d2:	3302      	adds	r3, #2
 80055d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055d8:	e7c2      	b.n	8005560 <_printf_common+0x58>
 80055da:	2301      	movs	r3, #1
 80055dc:	4622      	mov	r2, r4
 80055de:	4649      	mov	r1, r9
 80055e0:	4638      	mov	r0, r7
 80055e2:	47c0      	blx	r8
 80055e4:	3001      	adds	r0, #1
 80055e6:	d0e6      	beq.n	80055b6 <_printf_common+0xae>
 80055e8:	3601      	adds	r6, #1
 80055ea:	e7d9      	b.n	80055a0 <_printf_common+0x98>

080055ec <_printf_i>:
 80055ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055f0:	7e0f      	ldrb	r7, [r1, #24]
 80055f2:	4691      	mov	r9, r2
 80055f4:	2f78      	cmp	r7, #120	; 0x78
 80055f6:	4680      	mov	r8, r0
 80055f8:	460c      	mov	r4, r1
 80055fa:	469a      	mov	sl, r3
 80055fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005602:	d807      	bhi.n	8005614 <_printf_i+0x28>
 8005604:	2f62      	cmp	r7, #98	; 0x62
 8005606:	d80a      	bhi.n	800561e <_printf_i+0x32>
 8005608:	2f00      	cmp	r7, #0
 800560a:	f000 80d5 	beq.w	80057b8 <_printf_i+0x1cc>
 800560e:	2f58      	cmp	r7, #88	; 0x58
 8005610:	f000 80c1 	beq.w	8005796 <_printf_i+0x1aa>
 8005614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800561c:	e03a      	b.n	8005694 <_printf_i+0xa8>
 800561e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005622:	2b15      	cmp	r3, #21
 8005624:	d8f6      	bhi.n	8005614 <_printf_i+0x28>
 8005626:	a101      	add	r1, pc, #4	; (adr r1, 800562c <_printf_i+0x40>)
 8005628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800562c:	08005685 	.word	0x08005685
 8005630:	08005699 	.word	0x08005699
 8005634:	08005615 	.word	0x08005615
 8005638:	08005615 	.word	0x08005615
 800563c:	08005615 	.word	0x08005615
 8005640:	08005615 	.word	0x08005615
 8005644:	08005699 	.word	0x08005699
 8005648:	08005615 	.word	0x08005615
 800564c:	08005615 	.word	0x08005615
 8005650:	08005615 	.word	0x08005615
 8005654:	08005615 	.word	0x08005615
 8005658:	0800579f 	.word	0x0800579f
 800565c:	080056c5 	.word	0x080056c5
 8005660:	08005759 	.word	0x08005759
 8005664:	08005615 	.word	0x08005615
 8005668:	08005615 	.word	0x08005615
 800566c:	080057c1 	.word	0x080057c1
 8005670:	08005615 	.word	0x08005615
 8005674:	080056c5 	.word	0x080056c5
 8005678:	08005615 	.word	0x08005615
 800567c:	08005615 	.word	0x08005615
 8005680:	08005761 	.word	0x08005761
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	1d1a      	adds	r2, r3, #4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	602a      	str	r2, [r5, #0]
 800568c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005694:	2301      	movs	r3, #1
 8005696:	e0a0      	b.n	80057da <_printf_i+0x1ee>
 8005698:	6820      	ldr	r0, [r4, #0]
 800569a:	682b      	ldr	r3, [r5, #0]
 800569c:	0607      	lsls	r7, r0, #24
 800569e:	f103 0104 	add.w	r1, r3, #4
 80056a2:	6029      	str	r1, [r5, #0]
 80056a4:	d501      	bpl.n	80056aa <_printf_i+0xbe>
 80056a6:	681e      	ldr	r6, [r3, #0]
 80056a8:	e003      	b.n	80056b2 <_printf_i+0xc6>
 80056aa:	0646      	lsls	r6, r0, #25
 80056ac:	d5fb      	bpl.n	80056a6 <_printf_i+0xba>
 80056ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056b2:	2e00      	cmp	r6, #0
 80056b4:	da03      	bge.n	80056be <_printf_i+0xd2>
 80056b6:	232d      	movs	r3, #45	; 0x2d
 80056b8:	4276      	negs	r6, r6
 80056ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056be:	230a      	movs	r3, #10
 80056c0:	4859      	ldr	r0, [pc, #356]	; (8005828 <_printf_i+0x23c>)
 80056c2:	e012      	b.n	80056ea <_printf_i+0xfe>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	6820      	ldr	r0, [r4, #0]
 80056c8:	1d19      	adds	r1, r3, #4
 80056ca:	6029      	str	r1, [r5, #0]
 80056cc:	0605      	lsls	r5, r0, #24
 80056ce:	d501      	bpl.n	80056d4 <_printf_i+0xe8>
 80056d0:	681e      	ldr	r6, [r3, #0]
 80056d2:	e002      	b.n	80056da <_printf_i+0xee>
 80056d4:	0641      	lsls	r1, r0, #25
 80056d6:	d5fb      	bpl.n	80056d0 <_printf_i+0xe4>
 80056d8:	881e      	ldrh	r6, [r3, #0]
 80056da:	2f6f      	cmp	r7, #111	; 0x6f
 80056dc:	bf0c      	ite	eq
 80056de:	2308      	moveq	r3, #8
 80056e0:	230a      	movne	r3, #10
 80056e2:	4851      	ldr	r0, [pc, #324]	; (8005828 <_printf_i+0x23c>)
 80056e4:	2100      	movs	r1, #0
 80056e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056ea:	6865      	ldr	r5, [r4, #4]
 80056ec:	2d00      	cmp	r5, #0
 80056ee:	bfa8      	it	ge
 80056f0:	6821      	ldrge	r1, [r4, #0]
 80056f2:	60a5      	str	r5, [r4, #8]
 80056f4:	bfa4      	itt	ge
 80056f6:	f021 0104 	bicge.w	r1, r1, #4
 80056fa:	6021      	strge	r1, [r4, #0]
 80056fc:	b90e      	cbnz	r6, 8005702 <_printf_i+0x116>
 80056fe:	2d00      	cmp	r5, #0
 8005700:	d04b      	beq.n	800579a <_printf_i+0x1ae>
 8005702:	4615      	mov	r5, r2
 8005704:	fbb6 f1f3 	udiv	r1, r6, r3
 8005708:	fb03 6711 	mls	r7, r3, r1, r6
 800570c:	5dc7      	ldrb	r7, [r0, r7]
 800570e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005712:	4637      	mov	r7, r6
 8005714:	42bb      	cmp	r3, r7
 8005716:	460e      	mov	r6, r1
 8005718:	d9f4      	bls.n	8005704 <_printf_i+0x118>
 800571a:	2b08      	cmp	r3, #8
 800571c:	d10b      	bne.n	8005736 <_printf_i+0x14a>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	07de      	lsls	r6, r3, #31
 8005722:	d508      	bpl.n	8005736 <_printf_i+0x14a>
 8005724:	6923      	ldr	r3, [r4, #16]
 8005726:	6861      	ldr	r1, [r4, #4]
 8005728:	4299      	cmp	r1, r3
 800572a:	bfde      	ittt	le
 800572c:	2330      	movle	r3, #48	; 0x30
 800572e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005732:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005736:	1b52      	subs	r2, r2, r5
 8005738:	6122      	str	r2, [r4, #16]
 800573a:	464b      	mov	r3, r9
 800573c:	4621      	mov	r1, r4
 800573e:	4640      	mov	r0, r8
 8005740:	f8cd a000 	str.w	sl, [sp]
 8005744:	aa03      	add	r2, sp, #12
 8005746:	f7ff fedf 	bl	8005508 <_printf_common>
 800574a:	3001      	adds	r0, #1
 800574c:	d14a      	bne.n	80057e4 <_printf_i+0x1f8>
 800574e:	f04f 30ff 	mov.w	r0, #4294967295
 8005752:	b004      	add	sp, #16
 8005754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	f043 0320 	orr.w	r3, r3, #32
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	2778      	movs	r7, #120	; 0x78
 8005762:	4832      	ldr	r0, [pc, #200]	; (800582c <_printf_i+0x240>)
 8005764:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	6829      	ldr	r1, [r5, #0]
 800576c:	061f      	lsls	r7, r3, #24
 800576e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005772:	d402      	bmi.n	800577a <_printf_i+0x18e>
 8005774:	065f      	lsls	r7, r3, #25
 8005776:	bf48      	it	mi
 8005778:	b2b6      	uxthmi	r6, r6
 800577a:	07df      	lsls	r7, r3, #31
 800577c:	bf48      	it	mi
 800577e:	f043 0320 	orrmi.w	r3, r3, #32
 8005782:	6029      	str	r1, [r5, #0]
 8005784:	bf48      	it	mi
 8005786:	6023      	strmi	r3, [r4, #0]
 8005788:	b91e      	cbnz	r6, 8005792 <_printf_i+0x1a6>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	f023 0320 	bic.w	r3, r3, #32
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	2310      	movs	r3, #16
 8005794:	e7a6      	b.n	80056e4 <_printf_i+0xf8>
 8005796:	4824      	ldr	r0, [pc, #144]	; (8005828 <_printf_i+0x23c>)
 8005798:	e7e4      	b.n	8005764 <_printf_i+0x178>
 800579a:	4615      	mov	r5, r2
 800579c:	e7bd      	b.n	800571a <_printf_i+0x12e>
 800579e:	682b      	ldr	r3, [r5, #0]
 80057a0:	6826      	ldr	r6, [r4, #0]
 80057a2:	1d18      	adds	r0, r3, #4
 80057a4:	6961      	ldr	r1, [r4, #20]
 80057a6:	6028      	str	r0, [r5, #0]
 80057a8:	0635      	lsls	r5, r6, #24
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	d501      	bpl.n	80057b2 <_printf_i+0x1c6>
 80057ae:	6019      	str	r1, [r3, #0]
 80057b0:	e002      	b.n	80057b8 <_printf_i+0x1cc>
 80057b2:	0670      	lsls	r0, r6, #25
 80057b4:	d5fb      	bpl.n	80057ae <_printf_i+0x1c2>
 80057b6:	8019      	strh	r1, [r3, #0]
 80057b8:	2300      	movs	r3, #0
 80057ba:	4615      	mov	r5, r2
 80057bc:	6123      	str	r3, [r4, #16]
 80057be:	e7bc      	b.n	800573a <_printf_i+0x14e>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	2100      	movs	r1, #0
 80057c4:	1d1a      	adds	r2, r3, #4
 80057c6:	602a      	str	r2, [r5, #0]
 80057c8:	681d      	ldr	r5, [r3, #0]
 80057ca:	6862      	ldr	r2, [r4, #4]
 80057cc:	4628      	mov	r0, r5
 80057ce:	f000 f9e8 	bl	8005ba2 <memchr>
 80057d2:	b108      	cbz	r0, 80057d8 <_printf_i+0x1ec>
 80057d4:	1b40      	subs	r0, r0, r5
 80057d6:	6060      	str	r0, [r4, #4]
 80057d8:	6863      	ldr	r3, [r4, #4]
 80057da:	6123      	str	r3, [r4, #16]
 80057dc:	2300      	movs	r3, #0
 80057de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057e2:	e7aa      	b.n	800573a <_printf_i+0x14e>
 80057e4:	462a      	mov	r2, r5
 80057e6:	4649      	mov	r1, r9
 80057e8:	4640      	mov	r0, r8
 80057ea:	6923      	ldr	r3, [r4, #16]
 80057ec:	47d0      	blx	sl
 80057ee:	3001      	adds	r0, #1
 80057f0:	d0ad      	beq.n	800574e <_printf_i+0x162>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	079b      	lsls	r3, r3, #30
 80057f6:	d413      	bmi.n	8005820 <_printf_i+0x234>
 80057f8:	68e0      	ldr	r0, [r4, #12]
 80057fa:	9b03      	ldr	r3, [sp, #12]
 80057fc:	4298      	cmp	r0, r3
 80057fe:	bfb8      	it	lt
 8005800:	4618      	movlt	r0, r3
 8005802:	e7a6      	b.n	8005752 <_printf_i+0x166>
 8005804:	2301      	movs	r3, #1
 8005806:	4632      	mov	r2, r6
 8005808:	4649      	mov	r1, r9
 800580a:	4640      	mov	r0, r8
 800580c:	47d0      	blx	sl
 800580e:	3001      	adds	r0, #1
 8005810:	d09d      	beq.n	800574e <_printf_i+0x162>
 8005812:	3501      	adds	r5, #1
 8005814:	68e3      	ldr	r3, [r4, #12]
 8005816:	9903      	ldr	r1, [sp, #12]
 8005818:	1a5b      	subs	r3, r3, r1
 800581a:	42ab      	cmp	r3, r5
 800581c:	dcf2      	bgt.n	8005804 <_printf_i+0x218>
 800581e:	e7eb      	b.n	80057f8 <_printf_i+0x20c>
 8005820:	2500      	movs	r5, #0
 8005822:	f104 0619 	add.w	r6, r4, #25
 8005826:	e7f5      	b.n	8005814 <_printf_i+0x228>
 8005828:	08007ce8 	.word	0x08007ce8
 800582c:	08007cf9 	.word	0x08007cf9

08005830 <std>:
 8005830:	2300      	movs	r3, #0
 8005832:	b510      	push	{r4, lr}
 8005834:	4604      	mov	r4, r0
 8005836:	e9c0 3300 	strd	r3, r3, [r0]
 800583a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800583e:	6083      	str	r3, [r0, #8]
 8005840:	8181      	strh	r1, [r0, #12]
 8005842:	6643      	str	r3, [r0, #100]	; 0x64
 8005844:	81c2      	strh	r2, [r0, #14]
 8005846:	6183      	str	r3, [r0, #24]
 8005848:	4619      	mov	r1, r3
 800584a:	2208      	movs	r2, #8
 800584c:	305c      	adds	r0, #92	; 0x5c
 800584e:	f000 f928 	bl	8005aa2 <memset>
 8005852:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <std+0x58>)
 8005854:	6224      	str	r4, [r4, #32]
 8005856:	6263      	str	r3, [r4, #36]	; 0x24
 8005858:	4b0c      	ldr	r3, [pc, #48]	; (800588c <std+0x5c>)
 800585a:	62a3      	str	r3, [r4, #40]	; 0x28
 800585c:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <std+0x60>)
 800585e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005860:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <std+0x64>)
 8005862:	6323      	str	r3, [r4, #48]	; 0x30
 8005864:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <std+0x68>)
 8005866:	429c      	cmp	r4, r3
 8005868:	d006      	beq.n	8005878 <std+0x48>
 800586a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800586e:	4294      	cmp	r4, r2
 8005870:	d002      	beq.n	8005878 <std+0x48>
 8005872:	33d0      	adds	r3, #208	; 0xd0
 8005874:	429c      	cmp	r4, r3
 8005876:	d105      	bne.n	8005884 <std+0x54>
 8005878:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800587c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005880:	f000 b98c 	b.w	8005b9c <__retarget_lock_init_recursive>
 8005884:	bd10      	pop	{r4, pc}
 8005886:	bf00      	nop
 8005888:	08005a1d 	.word	0x08005a1d
 800588c:	08005a3f 	.word	0x08005a3f
 8005890:	08005a77 	.word	0x08005a77
 8005894:	08005a9b 	.word	0x08005a9b
 8005898:	20000368 	.word	0x20000368

0800589c <stdio_exit_handler>:
 800589c:	4a02      	ldr	r2, [pc, #8]	; (80058a8 <stdio_exit_handler+0xc>)
 800589e:	4903      	ldr	r1, [pc, #12]	; (80058ac <stdio_exit_handler+0x10>)
 80058a0:	4803      	ldr	r0, [pc, #12]	; (80058b0 <stdio_exit_handler+0x14>)
 80058a2:	f000 b869 	b.w	8005978 <_fwalk_sglue>
 80058a6:	bf00      	nop
 80058a8:	20000034 	.word	0x20000034
 80058ac:	08007535 	.word	0x08007535
 80058b0:	20000040 	.word	0x20000040

080058b4 <cleanup_stdio>:
 80058b4:	6841      	ldr	r1, [r0, #4]
 80058b6:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <cleanup_stdio+0x34>)
 80058b8:	b510      	push	{r4, lr}
 80058ba:	4299      	cmp	r1, r3
 80058bc:	4604      	mov	r4, r0
 80058be:	d001      	beq.n	80058c4 <cleanup_stdio+0x10>
 80058c0:	f001 fe38 	bl	8007534 <_fflush_r>
 80058c4:	68a1      	ldr	r1, [r4, #8]
 80058c6:	4b09      	ldr	r3, [pc, #36]	; (80058ec <cleanup_stdio+0x38>)
 80058c8:	4299      	cmp	r1, r3
 80058ca:	d002      	beq.n	80058d2 <cleanup_stdio+0x1e>
 80058cc:	4620      	mov	r0, r4
 80058ce:	f001 fe31 	bl	8007534 <_fflush_r>
 80058d2:	68e1      	ldr	r1, [r4, #12]
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <cleanup_stdio+0x3c>)
 80058d6:	4299      	cmp	r1, r3
 80058d8:	d004      	beq.n	80058e4 <cleanup_stdio+0x30>
 80058da:	4620      	mov	r0, r4
 80058dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e0:	f001 be28 	b.w	8007534 <_fflush_r>
 80058e4:	bd10      	pop	{r4, pc}
 80058e6:	bf00      	nop
 80058e8:	20000368 	.word	0x20000368
 80058ec:	200003d0 	.word	0x200003d0
 80058f0:	20000438 	.word	0x20000438

080058f4 <global_stdio_init.part.0>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <global_stdio_init.part.0+0x30>)
 80058f8:	4c0b      	ldr	r4, [pc, #44]	; (8005928 <global_stdio_init.part.0+0x34>)
 80058fa:	4a0c      	ldr	r2, [pc, #48]	; (800592c <global_stdio_init.part.0+0x38>)
 80058fc:	4620      	mov	r0, r4
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	2104      	movs	r1, #4
 8005902:	2200      	movs	r2, #0
 8005904:	f7ff ff94 	bl	8005830 <std>
 8005908:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800590c:	2201      	movs	r2, #1
 800590e:	2109      	movs	r1, #9
 8005910:	f7ff ff8e 	bl	8005830 <std>
 8005914:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005918:	2202      	movs	r2, #2
 800591a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591e:	2112      	movs	r1, #18
 8005920:	f7ff bf86 	b.w	8005830 <std>
 8005924:	200004a0 	.word	0x200004a0
 8005928:	20000368 	.word	0x20000368
 800592c:	0800589d 	.word	0x0800589d

08005930 <__sfp_lock_acquire>:
 8005930:	4801      	ldr	r0, [pc, #4]	; (8005938 <__sfp_lock_acquire+0x8>)
 8005932:	f000 b934 	b.w	8005b9e <__retarget_lock_acquire_recursive>
 8005936:	bf00      	nop
 8005938:	200004a9 	.word	0x200004a9

0800593c <__sfp_lock_release>:
 800593c:	4801      	ldr	r0, [pc, #4]	; (8005944 <__sfp_lock_release+0x8>)
 800593e:	f000 b92f 	b.w	8005ba0 <__retarget_lock_release_recursive>
 8005942:	bf00      	nop
 8005944:	200004a9 	.word	0x200004a9

08005948 <__sinit>:
 8005948:	b510      	push	{r4, lr}
 800594a:	4604      	mov	r4, r0
 800594c:	f7ff fff0 	bl	8005930 <__sfp_lock_acquire>
 8005950:	6a23      	ldr	r3, [r4, #32]
 8005952:	b11b      	cbz	r3, 800595c <__sinit+0x14>
 8005954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005958:	f7ff bff0 	b.w	800593c <__sfp_lock_release>
 800595c:	4b04      	ldr	r3, [pc, #16]	; (8005970 <__sinit+0x28>)
 800595e:	6223      	str	r3, [r4, #32]
 8005960:	4b04      	ldr	r3, [pc, #16]	; (8005974 <__sinit+0x2c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1f5      	bne.n	8005954 <__sinit+0xc>
 8005968:	f7ff ffc4 	bl	80058f4 <global_stdio_init.part.0>
 800596c:	e7f2      	b.n	8005954 <__sinit+0xc>
 800596e:	bf00      	nop
 8005970:	080058b5 	.word	0x080058b5
 8005974:	200004a0 	.word	0x200004a0

08005978 <_fwalk_sglue>:
 8005978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800597c:	4607      	mov	r7, r0
 800597e:	4688      	mov	r8, r1
 8005980:	4614      	mov	r4, r2
 8005982:	2600      	movs	r6, #0
 8005984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005988:	f1b9 0901 	subs.w	r9, r9, #1
 800598c:	d505      	bpl.n	800599a <_fwalk_sglue+0x22>
 800598e:	6824      	ldr	r4, [r4, #0]
 8005990:	2c00      	cmp	r4, #0
 8005992:	d1f7      	bne.n	8005984 <_fwalk_sglue+0xc>
 8005994:	4630      	mov	r0, r6
 8005996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599a:	89ab      	ldrh	r3, [r5, #12]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d907      	bls.n	80059b0 <_fwalk_sglue+0x38>
 80059a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059a4:	3301      	adds	r3, #1
 80059a6:	d003      	beq.n	80059b0 <_fwalk_sglue+0x38>
 80059a8:	4629      	mov	r1, r5
 80059aa:	4638      	mov	r0, r7
 80059ac:	47c0      	blx	r8
 80059ae:	4306      	orrs	r6, r0
 80059b0:	3568      	adds	r5, #104	; 0x68
 80059b2:	e7e9      	b.n	8005988 <_fwalk_sglue+0x10>

080059b4 <sniprintf>:
 80059b4:	b40c      	push	{r2, r3}
 80059b6:	b530      	push	{r4, r5, lr}
 80059b8:	4b17      	ldr	r3, [pc, #92]	; (8005a18 <sniprintf+0x64>)
 80059ba:	1e0c      	subs	r4, r1, #0
 80059bc:	681d      	ldr	r5, [r3, #0]
 80059be:	b09d      	sub	sp, #116	; 0x74
 80059c0:	da08      	bge.n	80059d4 <sniprintf+0x20>
 80059c2:	238b      	movs	r3, #139	; 0x8b
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	602b      	str	r3, [r5, #0]
 80059ca:	b01d      	add	sp, #116	; 0x74
 80059cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059d0:	b002      	add	sp, #8
 80059d2:	4770      	bx	lr
 80059d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80059d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80059dc:	bf0c      	ite	eq
 80059de:	4623      	moveq	r3, r4
 80059e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80059e4:	9304      	str	r3, [sp, #16]
 80059e6:	9307      	str	r3, [sp, #28]
 80059e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059ec:	9002      	str	r0, [sp, #8]
 80059ee:	9006      	str	r0, [sp, #24]
 80059f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80059f4:	4628      	mov	r0, r5
 80059f6:	ab21      	add	r3, sp, #132	; 0x84
 80059f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059fa:	a902      	add	r1, sp, #8
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	f001 fc19 	bl	8007234 <_svfiprintf_r>
 8005a02:	1c43      	adds	r3, r0, #1
 8005a04:	bfbc      	itt	lt
 8005a06:	238b      	movlt	r3, #139	; 0x8b
 8005a08:	602b      	strlt	r3, [r5, #0]
 8005a0a:	2c00      	cmp	r4, #0
 8005a0c:	d0dd      	beq.n	80059ca <sniprintf+0x16>
 8005a0e:	2200      	movs	r2, #0
 8005a10:	9b02      	ldr	r3, [sp, #8]
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	e7d9      	b.n	80059ca <sniprintf+0x16>
 8005a16:	bf00      	nop
 8005a18:	2000008c 	.word	0x2000008c

08005a1c <__sread>:
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	460c      	mov	r4, r1
 8005a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a24:	f000 f86c 	bl	8005b00 <_read_r>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	bfab      	itete	ge
 8005a2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a30:	181b      	addge	r3, r3, r0
 8005a32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a36:	bfac      	ite	ge
 8005a38:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a3a:	81a3      	strhlt	r3, [r4, #12]
 8005a3c:	bd10      	pop	{r4, pc}

08005a3e <__swrite>:
 8005a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a42:	461f      	mov	r7, r3
 8005a44:	898b      	ldrh	r3, [r1, #12]
 8005a46:	4605      	mov	r5, r0
 8005a48:	05db      	lsls	r3, r3, #23
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	4616      	mov	r6, r2
 8005a4e:	d505      	bpl.n	8005a5c <__swrite+0x1e>
 8005a50:	2302      	movs	r3, #2
 8005a52:	2200      	movs	r2, #0
 8005a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a58:	f000 f840 	bl	8005adc <_lseek_r>
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	4632      	mov	r2, r6
 8005a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a64:	81a3      	strh	r3, [r4, #12]
 8005a66:	4628      	mov	r0, r5
 8005a68:	463b      	mov	r3, r7
 8005a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a72:	f000 b857 	b.w	8005b24 <_write_r>

08005a76 <__sseek>:
 8005a76:	b510      	push	{r4, lr}
 8005a78:	460c      	mov	r4, r1
 8005a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7e:	f000 f82d 	bl	8005adc <_lseek_r>
 8005a82:	1c43      	adds	r3, r0, #1
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	bf15      	itete	ne
 8005a88:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a92:	81a3      	strheq	r3, [r4, #12]
 8005a94:	bf18      	it	ne
 8005a96:	81a3      	strhne	r3, [r4, #12]
 8005a98:	bd10      	pop	{r4, pc}

08005a9a <__sclose>:
 8005a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9e:	f000 b80d 	b.w	8005abc <_close_r>

08005aa2 <memset>:
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4402      	add	r2, r0
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d100      	bne.n	8005aac <memset+0xa>
 8005aaa:	4770      	bx	lr
 8005aac:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab0:	e7f9      	b.n	8005aa6 <memset+0x4>
	...

08005ab4 <_localeconv_r>:
 8005ab4:	4800      	ldr	r0, [pc, #0]	; (8005ab8 <_localeconv_r+0x4>)
 8005ab6:	4770      	bx	lr
 8005ab8:	20000180 	.word	0x20000180

08005abc <_close_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	2300      	movs	r3, #0
 8005ac0:	4d05      	ldr	r5, [pc, #20]	; (8005ad8 <_close_r+0x1c>)
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	602b      	str	r3, [r5, #0]
 8005ac8:	f7fc f88c 	bl	8001be4 <_close>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_close_r+0x1a>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_close_r+0x1a>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	200004a4 	.word	0x200004a4

08005adc <_lseek_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4604      	mov	r4, r0
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	4d05      	ldr	r5, [pc, #20]	; (8005afc <_lseek_r+0x20>)
 8005ae8:	602a      	str	r2, [r5, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f7fc f89e 	bl	8001c2c <_lseek>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_lseek_r+0x1e>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_lseek_r+0x1e>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	200004a4 	.word	0x200004a4

08005b00 <_read_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4604      	mov	r4, r0
 8005b04:	4608      	mov	r0, r1
 8005b06:	4611      	mov	r1, r2
 8005b08:	2200      	movs	r2, #0
 8005b0a:	4d05      	ldr	r5, [pc, #20]	; (8005b20 <_read_r+0x20>)
 8005b0c:	602a      	str	r2, [r5, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f7fc f82f 	bl	8001b72 <_read>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_read_r+0x1e>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_read_r+0x1e>
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	200004a4 	.word	0x200004a4

08005b24 <_write_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4604      	mov	r4, r0
 8005b28:	4608      	mov	r0, r1
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	4d05      	ldr	r5, [pc, #20]	; (8005b44 <_write_r+0x20>)
 8005b30:	602a      	str	r2, [r5, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f7fc f83a 	bl	8001bac <_write>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_write_r+0x1e>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_write_r+0x1e>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	200004a4 	.word	0x200004a4

08005b48 <__errno>:
 8005b48:	4b01      	ldr	r3, [pc, #4]	; (8005b50 <__errno+0x8>)
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	2000008c 	.word	0x2000008c

08005b54 <__libc_init_array>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	2600      	movs	r6, #0
 8005b58:	4d0c      	ldr	r5, [pc, #48]	; (8005b8c <__libc_init_array+0x38>)
 8005b5a:	4c0d      	ldr	r4, [pc, #52]	; (8005b90 <__libc_init_array+0x3c>)
 8005b5c:	1b64      	subs	r4, r4, r5
 8005b5e:	10a4      	asrs	r4, r4, #2
 8005b60:	42a6      	cmp	r6, r4
 8005b62:	d109      	bne.n	8005b78 <__libc_init_array+0x24>
 8005b64:	f002 f886 	bl	8007c74 <_init>
 8005b68:	2600      	movs	r6, #0
 8005b6a:	4d0a      	ldr	r5, [pc, #40]	; (8005b94 <__libc_init_array+0x40>)
 8005b6c:	4c0a      	ldr	r4, [pc, #40]	; (8005b98 <__libc_init_array+0x44>)
 8005b6e:	1b64      	subs	r4, r4, r5
 8005b70:	10a4      	asrs	r4, r4, #2
 8005b72:	42a6      	cmp	r6, r4
 8005b74:	d105      	bne.n	8005b82 <__libc_init_array+0x2e>
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7c:	4798      	blx	r3
 8005b7e:	3601      	adds	r6, #1
 8005b80:	e7ee      	b.n	8005b60 <__libc_init_array+0xc>
 8005b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b86:	4798      	blx	r3
 8005b88:	3601      	adds	r6, #1
 8005b8a:	e7f2      	b.n	8005b72 <__libc_init_array+0x1e>
 8005b8c:	08008044 	.word	0x08008044
 8005b90:	08008044 	.word	0x08008044
 8005b94:	08008044 	.word	0x08008044
 8005b98:	08008048 	.word	0x08008048

08005b9c <__retarget_lock_init_recursive>:
 8005b9c:	4770      	bx	lr

08005b9e <__retarget_lock_acquire_recursive>:
 8005b9e:	4770      	bx	lr

08005ba0 <__retarget_lock_release_recursive>:
 8005ba0:	4770      	bx	lr

08005ba2 <memchr>:
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	b2c9      	uxtb	r1, r1
 8005ba8:	4402      	add	r2, r0
 8005baa:	4293      	cmp	r3, r2
 8005bac:	4618      	mov	r0, r3
 8005bae:	d101      	bne.n	8005bb4 <memchr+0x12>
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	e003      	b.n	8005bbc <memchr+0x1a>
 8005bb4:	7804      	ldrb	r4, [r0, #0]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	428c      	cmp	r4, r1
 8005bba:	d1f6      	bne.n	8005baa <memchr+0x8>
 8005bbc:	bd10      	pop	{r4, pc}

08005bbe <quorem>:
 8005bbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc2:	6903      	ldr	r3, [r0, #16]
 8005bc4:	690c      	ldr	r4, [r1, #16]
 8005bc6:	4607      	mov	r7, r0
 8005bc8:	42a3      	cmp	r3, r4
 8005bca:	db7f      	blt.n	8005ccc <quorem+0x10e>
 8005bcc:	3c01      	subs	r4, #1
 8005bce:	f100 0514 	add.w	r5, r0, #20
 8005bd2:	f101 0814 	add.w	r8, r1, #20
 8005bd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bda:	9301      	str	r3, [sp, #4]
 8005bdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005be0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005be4:	3301      	adds	r3, #1
 8005be6:	429a      	cmp	r2, r3
 8005be8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bf4:	d331      	bcc.n	8005c5a <quorem+0x9c>
 8005bf6:	f04f 0e00 	mov.w	lr, #0
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	46ac      	mov	ip, r5
 8005bfe:	46f2      	mov	sl, lr
 8005c00:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c04:	b293      	uxth	r3, r2
 8005c06:	fb06 e303 	mla	r3, r6, r3, lr
 8005c0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c0e:	0c1a      	lsrs	r2, r3, #16
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	fb06 220e 	mla	r2, r6, lr, r2
 8005c16:	ebaa 0303 	sub.w	r3, sl, r3
 8005c1a:	f8dc a000 	ldr.w	sl, [ip]
 8005c1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c22:	fa1f fa8a 	uxth.w	sl, sl
 8005c26:	4453      	add	r3, sl
 8005c28:	f8dc a000 	ldr.w	sl, [ip]
 8005c2c:	b292      	uxth	r2, r2
 8005c2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c3c:	4581      	cmp	r9, r0
 8005c3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c42:	f84c 3b04 	str.w	r3, [ip], #4
 8005c46:	d2db      	bcs.n	8005c00 <quorem+0x42>
 8005c48:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c4c:	b92b      	cbnz	r3, 8005c5a <quorem+0x9c>
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	3b04      	subs	r3, #4
 8005c52:	429d      	cmp	r5, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	d32d      	bcc.n	8005cb4 <quorem+0xf6>
 8005c58:	613c      	str	r4, [r7, #16]
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	f001 f992 	bl	8006f84 <__mcmp>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	db23      	blt.n	8005cac <quorem+0xee>
 8005c64:	4629      	mov	r1, r5
 8005c66:	2000      	movs	r0, #0
 8005c68:	3601      	adds	r6, #1
 8005c6a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c6e:	f8d1 c000 	ldr.w	ip, [r1]
 8005c72:	b293      	uxth	r3, r2
 8005c74:	1ac3      	subs	r3, r0, r3
 8005c76:	0c12      	lsrs	r2, r2, #16
 8005c78:	fa1f f08c 	uxth.w	r0, ip
 8005c7c:	4403      	add	r3, r0
 8005c7e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005c82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c8c:	45c1      	cmp	r9, r8
 8005c8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c92:	f841 3b04 	str.w	r3, [r1], #4
 8005c96:	d2e8      	bcs.n	8005c6a <quorem+0xac>
 8005c98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ca0:	b922      	cbnz	r2, 8005cac <quorem+0xee>
 8005ca2:	3b04      	subs	r3, #4
 8005ca4:	429d      	cmp	r5, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	d30a      	bcc.n	8005cc0 <quorem+0x102>
 8005caa:	613c      	str	r4, [r7, #16]
 8005cac:	4630      	mov	r0, r6
 8005cae:	b003      	add	sp, #12
 8005cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	3b04      	subs	r3, #4
 8005cb8:	2a00      	cmp	r2, #0
 8005cba:	d1cd      	bne.n	8005c58 <quorem+0x9a>
 8005cbc:	3c01      	subs	r4, #1
 8005cbe:	e7c8      	b.n	8005c52 <quorem+0x94>
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	3b04      	subs	r3, #4
 8005cc4:	2a00      	cmp	r2, #0
 8005cc6:	d1f0      	bne.n	8005caa <quorem+0xec>
 8005cc8:	3c01      	subs	r4, #1
 8005cca:	e7eb      	b.n	8005ca4 <quorem+0xe6>
 8005ccc:	2000      	movs	r0, #0
 8005cce:	e7ee      	b.n	8005cae <quorem+0xf0>

08005cd0 <_dtoa_r>:
 8005cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	4616      	mov	r6, r2
 8005cd6:	461f      	mov	r7, r3
 8005cd8:	69c4      	ldr	r4, [r0, #28]
 8005cda:	b099      	sub	sp, #100	; 0x64
 8005cdc:	4605      	mov	r5, r0
 8005cde:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ce2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005ce6:	b974      	cbnz	r4, 8005d06 <_dtoa_r+0x36>
 8005ce8:	2010      	movs	r0, #16
 8005cea:	f000 fe1d 	bl	8006928 <malloc>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	61e8      	str	r0, [r5, #28]
 8005cf2:	b920      	cbnz	r0, 8005cfe <_dtoa_r+0x2e>
 8005cf4:	21ef      	movs	r1, #239	; 0xef
 8005cf6:	4bac      	ldr	r3, [pc, #688]	; (8005fa8 <_dtoa_r+0x2d8>)
 8005cf8:	48ac      	ldr	r0, [pc, #688]	; (8005fac <_dtoa_r+0x2dc>)
 8005cfa:	f001 fc7b 	bl	80075f4 <__assert_func>
 8005cfe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d02:	6004      	str	r4, [r0, #0]
 8005d04:	60c4      	str	r4, [r0, #12]
 8005d06:	69eb      	ldr	r3, [r5, #28]
 8005d08:	6819      	ldr	r1, [r3, #0]
 8005d0a:	b151      	cbz	r1, 8005d22 <_dtoa_r+0x52>
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4093      	lsls	r3, r2
 8005d12:	604a      	str	r2, [r1, #4]
 8005d14:	608b      	str	r3, [r1, #8]
 8005d16:	4628      	mov	r0, r5
 8005d18:	f000 fefa 	bl	8006b10 <_Bfree>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	69eb      	ldr	r3, [r5, #28]
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	1e3b      	subs	r3, r7, #0
 8005d24:	bfaf      	iteee	ge
 8005d26:	2300      	movge	r3, #0
 8005d28:	2201      	movlt	r2, #1
 8005d2a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d2e:	9305      	strlt	r3, [sp, #20]
 8005d30:	bfa8      	it	ge
 8005d32:	f8c8 3000 	strge.w	r3, [r8]
 8005d36:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005d3a:	4b9d      	ldr	r3, [pc, #628]	; (8005fb0 <_dtoa_r+0x2e0>)
 8005d3c:	bfb8      	it	lt
 8005d3e:	f8c8 2000 	strlt.w	r2, [r8]
 8005d42:	ea33 0309 	bics.w	r3, r3, r9
 8005d46:	d119      	bne.n	8005d7c <_dtoa_r+0xac>
 8005d48:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d54:	4333      	orrs	r3, r6
 8005d56:	f000 8589 	beq.w	800686c <_dtoa_r+0xb9c>
 8005d5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d5c:	b953      	cbnz	r3, 8005d74 <_dtoa_r+0xa4>
 8005d5e:	4b95      	ldr	r3, [pc, #596]	; (8005fb4 <_dtoa_r+0x2e4>)
 8005d60:	e023      	b.n	8005daa <_dtoa_r+0xda>
 8005d62:	4b95      	ldr	r3, [pc, #596]	; (8005fb8 <_dtoa_r+0x2e8>)
 8005d64:	9303      	str	r3, [sp, #12]
 8005d66:	3308      	adds	r3, #8
 8005d68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	9803      	ldr	r0, [sp, #12]
 8005d6e:	b019      	add	sp, #100	; 0x64
 8005d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d74:	4b8f      	ldr	r3, [pc, #572]	; (8005fb4 <_dtoa_r+0x2e4>)
 8005d76:	9303      	str	r3, [sp, #12]
 8005d78:	3303      	adds	r3, #3
 8005d7a:	e7f5      	b.n	8005d68 <_dtoa_r+0x98>
 8005d7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005d84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f7fa fe0c 	bl	80009a8 <__aeabi_dcmpeq>
 8005d90:	4680      	mov	r8, r0
 8005d92:	b160      	cbz	r0, 8005dae <_dtoa_r+0xde>
 8005d94:	2301      	movs	r3, #1
 8005d96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8562 	beq.w	8006866 <_dtoa_r+0xb96>
 8005da2:	4b86      	ldr	r3, [pc, #536]	; (8005fbc <_dtoa_r+0x2ec>)
 8005da4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	9303      	str	r3, [sp, #12]
 8005dac:	e7de      	b.n	8005d6c <_dtoa_r+0x9c>
 8005dae:	ab16      	add	r3, sp, #88	; 0x58
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	ab17      	add	r3, sp, #92	; 0x5c
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	4628      	mov	r0, r5
 8005db8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005dbc:	f001 f98a 	bl	80070d4 <__d2b>
 8005dc0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005dc4:	4682      	mov	sl, r0
 8005dc6:	2c00      	cmp	r4, #0
 8005dc8:	d07e      	beq.n	8005ec8 <_dtoa_r+0x1f8>
 8005dca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dd0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dd8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005ddc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005de0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005de4:	4619      	mov	r1, r3
 8005de6:	2200      	movs	r2, #0
 8005de8:	4b75      	ldr	r3, [pc, #468]	; (8005fc0 <_dtoa_r+0x2f0>)
 8005dea:	f7fa f9bd 	bl	8000168 <__aeabi_dsub>
 8005dee:	a368      	add	r3, pc, #416	; (adr r3, 8005f90 <_dtoa_r+0x2c0>)
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f7fa fb70 	bl	80004d8 <__aeabi_dmul>
 8005df8:	a367      	add	r3, pc, #412	; (adr r3, 8005f98 <_dtoa_r+0x2c8>)
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	f7fa f9b5 	bl	800016c <__adddf3>
 8005e02:	4606      	mov	r6, r0
 8005e04:	4620      	mov	r0, r4
 8005e06:	460f      	mov	r7, r1
 8005e08:	f7fa fafc 	bl	8000404 <__aeabi_i2d>
 8005e0c:	a364      	add	r3, pc, #400	; (adr r3, 8005fa0 <_dtoa_r+0x2d0>)
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f7fa fb61 	bl	80004d8 <__aeabi_dmul>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	4639      	mov	r1, r7
 8005e1e:	f7fa f9a5 	bl	800016c <__adddf3>
 8005e22:	4606      	mov	r6, r0
 8005e24:	460f      	mov	r7, r1
 8005e26:	f7fa fe07 	bl	8000a38 <__aeabi_d2iz>
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	4683      	mov	fp, r0
 8005e2e:	2300      	movs	r3, #0
 8005e30:	4630      	mov	r0, r6
 8005e32:	4639      	mov	r1, r7
 8005e34:	f7fa fdc2 	bl	80009bc <__aeabi_dcmplt>
 8005e38:	b148      	cbz	r0, 8005e4e <_dtoa_r+0x17e>
 8005e3a:	4658      	mov	r0, fp
 8005e3c:	f7fa fae2 	bl	8000404 <__aeabi_i2d>
 8005e40:	4632      	mov	r2, r6
 8005e42:	463b      	mov	r3, r7
 8005e44:	f7fa fdb0 	bl	80009a8 <__aeabi_dcmpeq>
 8005e48:	b908      	cbnz	r0, 8005e4e <_dtoa_r+0x17e>
 8005e4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e4e:	f1bb 0f16 	cmp.w	fp, #22
 8005e52:	d857      	bhi.n	8005f04 <_dtoa_r+0x234>
 8005e54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e58:	4b5a      	ldr	r3, [pc, #360]	; (8005fc4 <_dtoa_r+0x2f4>)
 8005e5a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f7fa fdab 	bl	80009bc <__aeabi_dcmplt>
 8005e66:	2800      	cmp	r0, #0
 8005e68:	d04e      	beq.n	8005f08 <_dtoa_r+0x238>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e70:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e74:	1b1b      	subs	r3, r3, r4
 8005e76:	1e5a      	subs	r2, r3, #1
 8005e78:	bf46      	itte	mi
 8005e7a:	f1c3 0901 	rsbmi	r9, r3, #1
 8005e7e:	2300      	movmi	r3, #0
 8005e80:	f04f 0900 	movpl.w	r9, #0
 8005e84:	9209      	str	r2, [sp, #36]	; 0x24
 8005e86:	bf48      	it	mi
 8005e88:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005e8a:	f1bb 0f00 	cmp.w	fp, #0
 8005e8e:	db3d      	blt.n	8005f0c <_dtoa_r+0x23c>
 8005e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e92:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005e96:	445b      	add	r3, fp
 8005e98:	9309      	str	r3, [sp, #36]	; 0x24
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8005e9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ea0:	2b09      	cmp	r3, #9
 8005ea2:	d867      	bhi.n	8005f74 <_dtoa_r+0x2a4>
 8005ea4:	2b05      	cmp	r3, #5
 8005ea6:	bfc4      	itt	gt
 8005ea8:	3b04      	subgt	r3, #4
 8005eaa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005eac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eae:	bfc8      	it	gt
 8005eb0:	2400      	movgt	r4, #0
 8005eb2:	f1a3 0302 	sub.w	r3, r3, #2
 8005eb6:	bfd8      	it	le
 8005eb8:	2401      	movle	r4, #1
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	f200 8086 	bhi.w	8005fcc <_dtoa_r+0x2fc>
 8005ec0:	e8df f003 	tbb	[pc, r3]
 8005ec4:	5637392c 	.word	0x5637392c
 8005ec8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005ecc:	441c      	add	r4, r3
 8005ece:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	bfc1      	itttt	gt
 8005ed6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005eda:	fa09 f903 	lslgt.w	r9, r9, r3
 8005ede:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005ee2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005ee6:	bfd6      	itet	le
 8005ee8:	f1c3 0320 	rsble	r3, r3, #32
 8005eec:	ea49 0003 	orrgt.w	r0, r9, r3
 8005ef0:	fa06 f003 	lslle.w	r0, r6, r3
 8005ef4:	f7fa fa76 	bl	80003e4 <__aeabi_ui2d>
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005efe:	3c01      	subs	r4, #1
 8005f00:	9213      	str	r2, [sp, #76]	; 0x4c
 8005f02:	e76f      	b.n	8005de4 <_dtoa_r+0x114>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e7b3      	b.n	8005e70 <_dtoa_r+0x1a0>
 8005f08:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f0a:	e7b2      	b.n	8005e72 <_dtoa_r+0x1a2>
 8005f0c:	f1cb 0300 	rsb	r3, fp, #0
 8005f10:	930a      	str	r3, [sp, #40]	; 0x28
 8005f12:	2300      	movs	r3, #0
 8005f14:	eba9 090b 	sub.w	r9, r9, fp
 8005f18:	930e      	str	r3, [sp, #56]	; 0x38
 8005f1a:	e7c0      	b.n	8005e9e <_dtoa_r+0x1ce>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	dc55      	bgt.n	8005fd2 <_dtoa_r+0x302>
 8005f26:	2301      	movs	r3, #1
 8005f28:	461a      	mov	r2, r3
 8005f2a:	9306      	str	r3, [sp, #24]
 8005f2c:	9308      	str	r3, [sp, #32]
 8005f2e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005f30:	e00b      	b.n	8005f4a <_dtoa_r+0x27a>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e7f3      	b.n	8005f1e <_dtoa_r+0x24e>
 8005f36:	2300      	movs	r3, #0
 8005f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f3c:	445b      	add	r3, fp
 8005f3e:	9306      	str	r3, [sp, #24]
 8005f40:	3301      	adds	r3, #1
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	9308      	str	r3, [sp, #32]
 8005f46:	bfb8      	it	lt
 8005f48:	2301      	movlt	r3, #1
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	69e8      	ldr	r0, [r5, #28]
 8005f50:	f102 0614 	add.w	r6, r2, #20
 8005f54:	429e      	cmp	r6, r3
 8005f56:	d940      	bls.n	8005fda <_dtoa_r+0x30a>
 8005f58:	6041      	str	r1, [r0, #4]
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f000 fd98 	bl	8006a90 <_Balloc>
 8005f60:	9003      	str	r0, [sp, #12]
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d13c      	bne.n	8005fe0 <_dtoa_r+0x310>
 8005f66:	4602      	mov	r2, r0
 8005f68:	f240 11af 	movw	r1, #431	; 0x1af
 8005f6c:	4b16      	ldr	r3, [pc, #88]	; (8005fc8 <_dtoa_r+0x2f8>)
 8005f6e:	e6c3      	b.n	8005cf8 <_dtoa_r+0x28>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e7e1      	b.n	8005f38 <_dtoa_r+0x268>
 8005f74:	2401      	movs	r4, #1
 8005f76:	2300      	movs	r3, #0
 8005f78:	940b      	str	r4, [sp, #44]	; 0x2c
 8005f7a:	9322      	str	r3, [sp, #136]	; 0x88
 8005f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f80:	2200      	movs	r2, #0
 8005f82:	9306      	str	r3, [sp, #24]
 8005f84:	9308      	str	r3, [sp, #32]
 8005f86:	2312      	movs	r3, #18
 8005f88:	e7d1      	b.n	8005f2e <_dtoa_r+0x25e>
 8005f8a:	bf00      	nop
 8005f8c:	f3af 8000 	nop.w
 8005f90:	636f4361 	.word	0x636f4361
 8005f94:	3fd287a7 	.word	0x3fd287a7
 8005f98:	8b60c8b3 	.word	0x8b60c8b3
 8005f9c:	3fc68a28 	.word	0x3fc68a28
 8005fa0:	509f79fb 	.word	0x509f79fb
 8005fa4:	3fd34413 	.word	0x3fd34413
 8005fa8:	08007d17 	.word	0x08007d17
 8005fac:	08007d2e 	.word	0x08007d2e
 8005fb0:	7ff00000 	.word	0x7ff00000
 8005fb4:	08007d13 	.word	0x08007d13
 8005fb8:	08007d0a 	.word	0x08007d0a
 8005fbc:	08007ce7 	.word	0x08007ce7
 8005fc0:	3ff80000 	.word	0x3ff80000
 8005fc4:	08007e18 	.word	0x08007e18
 8005fc8:	08007d86 	.word	0x08007d86
 8005fcc:	2301      	movs	r3, #1
 8005fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fd0:	e7d4      	b.n	8005f7c <_dtoa_r+0x2ac>
 8005fd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fd4:	9306      	str	r3, [sp, #24]
 8005fd6:	9308      	str	r3, [sp, #32]
 8005fd8:	e7b7      	b.n	8005f4a <_dtoa_r+0x27a>
 8005fda:	3101      	adds	r1, #1
 8005fdc:	0052      	lsls	r2, r2, #1
 8005fde:	e7b7      	b.n	8005f50 <_dtoa_r+0x280>
 8005fe0:	69eb      	ldr	r3, [r5, #28]
 8005fe2:	9a03      	ldr	r2, [sp, #12]
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	9b08      	ldr	r3, [sp, #32]
 8005fe8:	2b0e      	cmp	r3, #14
 8005fea:	f200 80a8 	bhi.w	800613e <_dtoa_r+0x46e>
 8005fee:	2c00      	cmp	r4, #0
 8005ff0:	f000 80a5 	beq.w	800613e <_dtoa_r+0x46e>
 8005ff4:	f1bb 0f00 	cmp.w	fp, #0
 8005ff8:	dd34      	ble.n	8006064 <_dtoa_r+0x394>
 8005ffa:	4b9a      	ldr	r3, [pc, #616]	; (8006264 <_dtoa_r+0x594>)
 8005ffc:	f00b 020f 	and.w	r2, fp, #15
 8006000:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006004:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006008:	e9d3 3400 	ldrd	r3, r4, [r3]
 800600c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006010:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006014:	d016      	beq.n	8006044 <_dtoa_r+0x374>
 8006016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800601a:	4b93      	ldr	r3, [pc, #588]	; (8006268 <_dtoa_r+0x598>)
 800601c:	2703      	movs	r7, #3
 800601e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006022:	f7fa fb83 	bl	800072c <__aeabi_ddiv>
 8006026:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800602a:	f004 040f 	and.w	r4, r4, #15
 800602e:	4e8e      	ldr	r6, [pc, #568]	; (8006268 <_dtoa_r+0x598>)
 8006030:	b954      	cbnz	r4, 8006048 <_dtoa_r+0x378>
 8006032:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800603a:	f7fa fb77 	bl	800072c <__aeabi_ddiv>
 800603e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006042:	e029      	b.n	8006098 <_dtoa_r+0x3c8>
 8006044:	2702      	movs	r7, #2
 8006046:	e7f2      	b.n	800602e <_dtoa_r+0x35e>
 8006048:	07e1      	lsls	r1, r4, #31
 800604a:	d508      	bpl.n	800605e <_dtoa_r+0x38e>
 800604c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006050:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006054:	f7fa fa40 	bl	80004d8 <__aeabi_dmul>
 8006058:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800605c:	3701      	adds	r7, #1
 800605e:	1064      	asrs	r4, r4, #1
 8006060:	3608      	adds	r6, #8
 8006062:	e7e5      	b.n	8006030 <_dtoa_r+0x360>
 8006064:	f000 80a5 	beq.w	80061b2 <_dtoa_r+0x4e2>
 8006068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800606c:	f1cb 0400 	rsb	r4, fp, #0
 8006070:	4b7c      	ldr	r3, [pc, #496]	; (8006264 <_dtoa_r+0x594>)
 8006072:	f004 020f 	and.w	r2, r4, #15
 8006076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	f7fa fa2b 	bl	80004d8 <__aeabi_dmul>
 8006082:	2702      	movs	r7, #2
 8006084:	2300      	movs	r3, #0
 8006086:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800608a:	4e77      	ldr	r6, [pc, #476]	; (8006268 <_dtoa_r+0x598>)
 800608c:	1124      	asrs	r4, r4, #4
 800608e:	2c00      	cmp	r4, #0
 8006090:	f040 8084 	bne.w	800619c <_dtoa_r+0x4cc>
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1d2      	bne.n	800603e <_dtoa_r+0x36e>
 8006098:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800609c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80060a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8087 	beq.w	80061b6 <_dtoa_r+0x4e6>
 80060a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060ac:	2200      	movs	r2, #0
 80060ae:	4b6f      	ldr	r3, [pc, #444]	; (800626c <_dtoa_r+0x59c>)
 80060b0:	f7fa fc84 	bl	80009bc <__aeabi_dcmplt>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	d07e      	beq.n	80061b6 <_dtoa_r+0x4e6>
 80060b8:	9b08      	ldr	r3, [sp, #32]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d07b      	beq.n	80061b6 <_dtoa_r+0x4e6>
 80060be:	9b06      	ldr	r3, [sp, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	dd38      	ble.n	8006136 <_dtoa_r+0x466>
 80060c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060c8:	2200      	movs	r2, #0
 80060ca:	4b69      	ldr	r3, [pc, #420]	; (8006270 <_dtoa_r+0x5a0>)
 80060cc:	f7fa fa04 	bl	80004d8 <__aeabi_dmul>
 80060d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060d4:	9c06      	ldr	r4, [sp, #24]
 80060d6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80060da:	3701      	adds	r7, #1
 80060dc:	4638      	mov	r0, r7
 80060de:	f7fa f991 	bl	8000404 <__aeabi_i2d>
 80060e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060e6:	f7fa f9f7 	bl	80004d8 <__aeabi_dmul>
 80060ea:	2200      	movs	r2, #0
 80060ec:	4b61      	ldr	r3, [pc, #388]	; (8006274 <_dtoa_r+0x5a4>)
 80060ee:	f7fa f83d 	bl	800016c <__adddf3>
 80060f2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80060f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060fa:	9611      	str	r6, [sp, #68]	; 0x44
 80060fc:	2c00      	cmp	r4, #0
 80060fe:	d15d      	bne.n	80061bc <_dtoa_r+0x4ec>
 8006100:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006104:	2200      	movs	r2, #0
 8006106:	4b5c      	ldr	r3, [pc, #368]	; (8006278 <_dtoa_r+0x5a8>)
 8006108:	f7fa f82e 	bl	8000168 <__aeabi_dsub>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006114:	4633      	mov	r3, r6
 8006116:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006118:	f7fa fc6e 	bl	80009f8 <__aeabi_dcmpgt>
 800611c:	2800      	cmp	r0, #0
 800611e:	f040 8295 	bne.w	800664c <_dtoa_r+0x97c>
 8006122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006126:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006128:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800612c:	f7fa fc46 	bl	80009bc <__aeabi_dcmplt>
 8006130:	2800      	cmp	r0, #0
 8006132:	f040 8289 	bne.w	8006648 <_dtoa_r+0x978>
 8006136:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800613a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800613e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006140:	2b00      	cmp	r3, #0
 8006142:	f2c0 8151 	blt.w	80063e8 <_dtoa_r+0x718>
 8006146:	f1bb 0f0e 	cmp.w	fp, #14
 800614a:	f300 814d 	bgt.w	80063e8 <_dtoa_r+0x718>
 800614e:	4b45      	ldr	r3, [pc, #276]	; (8006264 <_dtoa_r+0x594>)
 8006150:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006154:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006158:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800615c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800615e:	2b00      	cmp	r3, #0
 8006160:	f280 80da 	bge.w	8006318 <_dtoa_r+0x648>
 8006164:	9b08      	ldr	r3, [sp, #32]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f300 80d6 	bgt.w	8006318 <_dtoa_r+0x648>
 800616c:	f040 826b 	bne.w	8006646 <_dtoa_r+0x976>
 8006170:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006174:	2200      	movs	r2, #0
 8006176:	4b40      	ldr	r3, [pc, #256]	; (8006278 <_dtoa_r+0x5a8>)
 8006178:	f7fa f9ae 	bl	80004d8 <__aeabi_dmul>
 800617c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006180:	f7fa fc30 	bl	80009e4 <__aeabi_dcmpge>
 8006184:	9c08      	ldr	r4, [sp, #32]
 8006186:	4626      	mov	r6, r4
 8006188:	2800      	cmp	r0, #0
 800618a:	f040 8241 	bne.w	8006610 <_dtoa_r+0x940>
 800618e:	2331      	movs	r3, #49	; 0x31
 8006190:	9f03      	ldr	r7, [sp, #12]
 8006192:	f10b 0b01 	add.w	fp, fp, #1
 8006196:	f807 3b01 	strb.w	r3, [r7], #1
 800619a:	e23d      	b.n	8006618 <_dtoa_r+0x948>
 800619c:	07e2      	lsls	r2, r4, #31
 800619e:	d505      	bpl.n	80061ac <_dtoa_r+0x4dc>
 80061a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061a4:	f7fa f998 	bl	80004d8 <__aeabi_dmul>
 80061a8:	2301      	movs	r3, #1
 80061aa:	3701      	adds	r7, #1
 80061ac:	1064      	asrs	r4, r4, #1
 80061ae:	3608      	adds	r6, #8
 80061b0:	e76d      	b.n	800608e <_dtoa_r+0x3be>
 80061b2:	2702      	movs	r7, #2
 80061b4:	e770      	b.n	8006098 <_dtoa_r+0x3c8>
 80061b6:	46d8      	mov	r8, fp
 80061b8:	9c08      	ldr	r4, [sp, #32]
 80061ba:	e78f      	b.n	80060dc <_dtoa_r+0x40c>
 80061bc:	9903      	ldr	r1, [sp, #12]
 80061be:	4b29      	ldr	r3, [pc, #164]	; (8006264 <_dtoa_r+0x594>)
 80061c0:	4421      	add	r1, r4
 80061c2:	9112      	str	r1, [sp, #72]	; 0x48
 80061c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061ca:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80061ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061d2:	2900      	cmp	r1, #0
 80061d4:	d054      	beq.n	8006280 <_dtoa_r+0x5b0>
 80061d6:	2000      	movs	r0, #0
 80061d8:	4928      	ldr	r1, [pc, #160]	; (800627c <_dtoa_r+0x5ac>)
 80061da:	f7fa faa7 	bl	800072c <__aeabi_ddiv>
 80061de:	463b      	mov	r3, r7
 80061e0:	4632      	mov	r2, r6
 80061e2:	f7f9 ffc1 	bl	8000168 <__aeabi_dsub>
 80061e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061ea:	9f03      	ldr	r7, [sp, #12]
 80061ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f0:	f7fa fc22 	bl	8000a38 <__aeabi_d2iz>
 80061f4:	4604      	mov	r4, r0
 80061f6:	f7fa f905 	bl	8000404 <__aeabi_i2d>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006202:	f7f9 ffb1 	bl	8000168 <__aeabi_dsub>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	3430      	adds	r4, #48	; 0x30
 800620c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006210:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006214:	f807 4b01 	strb.w	r4, [r7], #1
 8006218:	f7fa fbd0 	bl	80009bc <__aeabi_dcmplt>
 800621c:	2800      	cmp	r0, #0
 800621e:	d173      	bne.n	8006308 <_dtoa_r+0x638>
 8006220:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006224:	2000      	movs	r0, #0
 8006226:	4911      	ldr	r1, [pc, #68]	; (800626c <_dtoa_r+0x59c>)
 8006228:	f7f9 ff9e 	bl	8000168 <__aeabi_dsub>
 800622c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006230:	f7fa fbc4 	bl	80009bc <__aeabi_dcmplt>
 8006234:	2800      	cmp	r0, #0
 8006236:	f040 80b6 	bne.w	80063a6 <_dtoa_r+0x6d6>
 800623a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800623c:	429f      	cmp	r7, r3
 800623e:	f43f af7a 	beq.w	8006136 <_dtoa_r+0x466>
 8006242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006246:	2200      	movs	r2, #0
 8006248:	4b09      	ldr	r3, [pc, #36]	; (8006270 <_dtoa_r+0x5a0>)
 800624a:	f7fa f945 	bl	80004d8 <__aeabi_dmul>
 800624e:	2200      	movs	r2, #0
 8006250:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <_dtoa_r+0x5a0>)
 800625a:	f7fa f93d 	bl	80004d8 <__aeabi_dmul>
 800625e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006262:	e7c3      	b.n	80061ec <_dtoa_r+0x51c>
 8006264:	08007e18 	.word	0x08007e18
 8006268:	08007df0 	.word	0x08007df0
 800626c:	3ff00000 	.word	0x3ff00000
 8006270:	40240000 	.word	0x40240000
 8006274:	401c0000 	.word	0x401c0000
 8006278:	40140000 	.word	0x40140000
 800627c:	3fe00000 	.word	0x3fe00000
 8006280:	4630      	mov	r0, r6
 8006282:	4639      	mov	r1, r7
 8006284:	f7fa f928 	bl	80004d8 <__aeabi_dmul>
 8006288:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800628a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800628e:	9c03      	ldr	r4, [sp, #12]
 8006290:	9314      	str	r3, [sp, #80]	; 0x50
 8006292:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006296:	f7fa fbcf 	bl	8000a38 <__aeabi_d2iz>
 800629a:	9015      	str	r0, [sp, #84]	; 0x54
 800629c:	f7fa f8b2 	bl	8000404 <__aeabi_i2d>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062a8:	f7f9 ff5e 	bl	8000168 <__aeabi_dsub>
 80062ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062ae:	4606      	mov	r6, r0
 80062b0:	3330      	adds	r3, #48	; 0x30
 80062b2:	f804 3b01 	strb.w	r3, [r4], #1
 80062b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062b8:	460f      	mov	r7, r1
 80062ba:	429c      	cmp	r4, r3
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	d124      	bne.n	800630c <_dtoa_r+0x63c>
 80062c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062c6:	4baf      	ldr	r3, [pc, #700]	; (8006584 <_dtoa_r+0x8b4>)
 80062c8:	f7f9 ff50 	bl	800016c <__adddf3>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4630      	mov	r0, r6
 80062d2:	4639      	mov	r1, r7
 80062d4:	f7fa fb90 	bl	80009f8 <__aeabi_dcmpgt>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d163      	bne.n	80063a4 <_dtoa_r+0x6d4>
 80062dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062e0:	2000      	movs	r0, #0
 80062e2:	49a8      	ldr	r1, [pc, #672]	; (8006584 <_dtoa_r+0x8b4>)
 80062e4:	f7f9 ff40 	bl	8000168 <__aeabi_dsub>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4630      	mov	r0, r6
 80062ee:	4639      	mov	r1, r7
 80062f0:	f7fa fb64 	bl	80009bc <__aeabi_dcmplt>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f43f af1e 	beq.w	8006136 <_dtoa_r+0x466>
 80062fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80062fc:	1e7b      	subs	r3, r7, #1
 80062fe:	9314      	str	r3, [sp, #80]	; 0x50
 8006300:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006304:	2b30      	cmp	r3, #48	; 0x30
 8006306:	d0f8      	beq.n	80062fa <_dtoa_r+0x62a>
 8006308:	46c3      	mov	fp, r8
 800630a:	e03b      	b.n	8006384 <_dtoa_r+0x6b4>
 800630c:	4b9e      	ldr	r3, [pc, #632]	; (8006588 <_dtoa_r+0x8b8>)
 800630e:	f7fa f8e3 	bl	80004d8 <__aeabi_dmul>
 8006312:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006316:	e7bc      	b.n	8006292 <_dtoa_r+0x5c2>
 8006318:	9f03      	ldr	r7, [sp, #12]
 800631a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800631e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006322:	4640      	mov	r0, r8
 8006324:	4649      	mov	r1, r9
 8006326:	f7fa fa01 	bl	800072c <__aeabi_ddiv>
 800632a:	f7fa fb85 	bl	8000a38 <__aeabi_d2iz>
 800632e:	4604      	mov	r4, r0
 8006330:	f7fa f868 	bl	8000404 <__aeabi_i2d>
 8006334:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006338:	f7fa f8ce 	bl	80004d8 <__aeabi_dmul>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4640      	mov	r0, r8
 8006342:	4649      	mov	r1, r9
 8006344:	f7f9 ff10 	bl	8000168 <__aeabi_dsub>
 8006348:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800634c:	f807 6b01 	strb.w	r6, [r7], #1
 8006350:	9e03      	ldr	r6, [sp, #12]
 8006352:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006356:	1bbe      	subs	r6, r7, r6
 8006358:	45b4      	cmp	ip, r6
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	d136      	bne.n	80063ce <_dtoa_r+0x6fe>
 8006360:	f7f9 ff04 	bl	800016c <__adddf3>
 8006364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006368:	4680      	mov	r8, r0
 800636a:	4689      	mov	r9, r1
 800636c:	f7fa fb44 	bl	80009f8 <__aeabi_dcmpgt>
 8006370:	bb58      	cbnz	r0, 80063ca <_dtoa_r+0x6fa>
 8006372:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006376:	4640      	mov	r0, r8
 8006378:	4649      	mov	r1, r9
 800637a:	f7fa fb15 	bl	80009a8 <__aeabi_dcmpeq>
 800637e:	b108      	cbz	r0, 8006384 <_dtoa_r+0x6b4>
 8006380:	07e3      	lsls	r3, r4, #31
 8006382:	d422      	bmi.n	80063ca <_dtoa_r+0x6fa>
 8006384:	4651      	mov	r1, sl
 8006386:	4628      	mov	r0, r5
 8006388:	f000 fbc2 	bl	8006b10 <_Bfree>
 800638c:	2300      	movs	r3, #0
 800638e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006390:	703b      	strb	r3, [r7, #0]
 8006392:	f10b 0301 	add.w	r3, fp, #1
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800639a:	2b00      	cmp	r3, #0
 800639c:	f43f ace6 	beq.w	8005d6c <_dtoa_r+0x9c>
 80063a0:	601f      	str	r7, [r3, #0]
 80063a2:	e4e3      	b.n	8005d6c <_dtoa_r+0x9c>
 80063a4:	4627      	mov	r7, r4
 80063a6:	463b      	mov	r3, r7
 80063a8:	461f      	mov	r7, r3
 80063aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063ae:	2a39      	cmp	r2, #57	; 0x39
 80063b0:	d107      	bne.n	80063c2 <_dtoa_r+0x6f2>
 80063b2:	9a03      	ldr	r2, [sp, #12]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d1f7      	bne.n	80063a8 <_dtoa_r+0x6d8>
 80063b8:	2230      	movs	r2, #48	; 0x30
 80063ba:	9903      	ldr	r1, [sp, #12]
 80063bc:	f108 0801 	add.w	r8, r8, #1
 80063c0:	700a      	strb	r2, [r1, #0]
 80063c2:	781a      	ldrb	r2, [r3, #0]
 80063c4:	3201      	adds	r2, #1
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	e79e      	b.n	8006308 <_dtoa_r+0x638>
 80063ca:	46d8      	mov	r8, fp
 80063cc:	e7eb      	b.n	80063a6 <_dtoa_r+0x6d6>
 80063ce:	2200      	movs	r2, #0
 80063d0:	4b6d      	ldr	r3, [pc, #436]	; (8006588 <_dtoa_r+0x8b8>)
 80063d2:	f7fa f881 	bl	80004d8 <__aeabi_dmul>
 80063d6:	2200      	movs	r2, #0
 80063d8:	2300      	movs	r3, #0
 80063da:	4680      	mov	r8, r0
 80063dc:	4689      	mov	r9, r1
 80063de:	f7fa fae3 	bl	80009a8 <__aeabi_dcmpeq>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d09b      	beq.n	800631e <_dtoa_r+0x64e>
 80063e6:	e7cd      	b.n	8006384 <_dtoa_r+0x6b4>
 80063e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	f000 80c4 	beq.w	8006578 <_dtoa_r+0x8a8>
 80063f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80063f2:	2a01      	cmp	r2, #1
 80063f4:	f300 80a8 	bgt.w	8006548 <_dtoa_r+0x878>
 80063f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063fa:	2a00      	cmp	r2, #0
 80063fc:	f000 80a0 	beq.w	8006540 <_dtoa_r+0x870>
 8006400:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006404:	464f      	mov	r7, r9
 8006406:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800640a:	2101      	movs	r1, #1
 800640c:	441a      	add	r2, r3
 800640e:	4628      	mov	r0, r5
 8006410:	4499      	add	r9, r3
 8006412:	9209      	str	r2, [sp, #36]	; 0x24
 8006414:	f000 fc32 	bl	8006c7c <__i2b>
 8006418:	4606      	mov	r6, r0
 800641a:	b15f      	cbz	r7, 8006434 <_dtoa_r+0x764>
 800641c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800641e:	2b00      	cmp	r3, #0
 8006420:	dd08      	ble.n	8006434 <_dtoa_r+0x764>
 8006422:	42bb      	cmp	r3, r7
 8006424:	bfa8      	it	ge
 8006426:	463b      	movge	r3, r7
 8006428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800642a:	eba9 0903 	sub.w	r9, r9, r3
 800642e:	1aff      	subs	r7, r7, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	9309      	str	r3, [sp, #36]	; 0x24
 8006434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006436:	b1f3      	cbz	r3, 8006476 <_dtoa_r+0x7a6>
 8006438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 80a0 	beq.w	8006580 <_dtoa_r+0x8b0>
 8006440:	2c00      	cmp	r4, #0
 8006442:	dd10      	ble.n	8006466 <_dtoa_r+0x796>
 8006444:	4631      	mov	r1, r6
 8006446:	4622      	mov	r2, r4
 8006448:	4628      	mov	r0, r5
 800644a:	f000 fcd5 	bl	8006df8 <__pow5mult>
 800644e:	4652      	mov	r2, sl
 8006450:	4601      	mov	r1, r0
 8006452:	4606      	mov	r6, r0
 8006454:	4628      	mov	r0, r5
 8006456:	f000 fc27 	bl	8006ca8 <__multiply>
 800645a:	4680      	mov	r8, r0
 800645c:	4651      	mov	r1, sl
 800645e:	4628      	mov	r0, r5
 8006460:	f000 fb56 	bl	8006b10 <_Bfree>
 8006464:	46c2      	mov	sl, r8
 8006466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006468:	1b1a      	subs	r2, r3, r4
 800646a:	d004      	beq.n	8006476 <_dtoa_r+0x7a6>
 800646c:	4651      	mov	r1, sl
 800646e:	4628      	mov	r0, r5
 8006470:	f000 fcc2 	bl	8006df8 <__pow5mult>
 8006474:	4682      	mov	sl, r0
 8006476:	2101      	movs	r1, #1
 8006478:	4628      	mov	r0, r5
 800647a:	f000 fbff 	bl	8006c7c <__i2b>
 800647e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006480:	4604      	mov	r4, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	f340 8082 	ble.w	800658c <_dtoa_r+0x8bc>
 8006488:	461a      	mov	r2, r3
 800648a:	4601      	mov	r1, r0
 800648c:	4628      	mov	r0, r5
 800648e:	f000 fcb3 	bl	8006df8 <__pow5mult>
 8006492:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006494:	4604      	mov	r4, r0
 8006496:	2b01      	cmp	r3, #1
 8006498:	dd7b      	ble.n	8006592 <_dtoa_r+0x8c2>
 800649a:	f04f 0800 	mov.w	r8, #0
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80064a4:	6918      	ldr	r0, [r3, #16]
 80064a6:	f000 fb9b 	bl	8006be0 <__hi0bits>
 80064aa:	f1c0 0020 	rsb	r0, r0, #32
 80064ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b0:	4418      	add	r0, r3
 80064b2:	f010 001f 	ands.w	r0, r0, #31
 80064b6:	f000 8092 	beq.w	80065de <_dtoa_r+0x90e>
 80064ba:	f1c0 0320 	rsb	r3, r0, #32
 80064be:	2b04      	cmp	r3, #4
 80064c0:	f340 8085 	ble.w	80065ce <_dtoa_r+0x8fe>
 80064c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c6:	f1c0 001c 	rsb	r0, r0, #28
 80064ca:	4403      	add	r3, r0
 80064cc:	4481      	add	r9, r0
 80064ce:	4407      	add	r7, r0
 80064d0:	9309      	str	r3, [sp, #36]	; 0x24
 80064d2:	f1b9 0f00 	cmp.w	r9, #0
 80064d6:	dd05      	ble.n	80064e4 <_dtoa_r+0x814>
 80064d8:	4651      	mov	r1, sl
 80064da:	464a      	mov	r2, r9
 80064dc:	4628      	mov	r0, r5
 80064de:	f000 fce5 	bl	8006eac <__lshift>
 80064e2:	4682      	mov	sl, r0
 80064e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	dd05      	ble.n	80064f6 <_dtoa_r+0x826>
 80064ea:	4621      	mov	r1, r4
 80064ec:	461a      	mov	r2, r3
 80064ee:	4628      	mov	r0, r5
 80064f0:	f000 fcdc 	bl	8006eac <__lshift>
 80064f4:	4604      	mov	r4, r0
 80064f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d072      	beq.n	80065e2 <_dtoa_r+0x912>
 80064fc:	4621      	mov	r1, r4
 80064fe:	4650      	mov	r0, sl
 8006500:	f000 fd40 	bl	8006f84 <__mcmp>
 8006504:	2800      	cmp	r0, #0
 8006506:	da6c      	bge.n	80065e2 <_dtoa_r+0x912>
 8006508:	2300      	movs	r3, #0
 800650a:	4651      	mov	r1, sl
 800650c:	220a      	movs	r2, #10
 800650e:	4628      	mov	r0, r5
 8006510:	f000 fb20 	bl	8006b54 <__multadd>
 8006514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006516:	4682      	mov	sl, r0
 8006518:	f10b 3bff 	add.w	fp, fp, #4294967295
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 81ac 	beq.w	800687a <_dtoa_r+0xbaa>
 8006522:	2300      	movs	r3, #0
 8006524:	4631      	mov	r1, r6
 8006526:	220a      	movs	r2, #10
 8006528:	4628      	mov	r0, r5
 800652a:	f000 fb13 	bl	8006b54 <__multadd>
 800652e:	9b06      	ldr	r3, [sp, #24]
 8006530:	4606      	mov	r6, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	f300 8093 	bgt.w	800665e <_dtoa_r+0x98e>
 8006538:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800653a:	2b02      	cmp	r3, #2
 800653c:	dc59      	bgt.n	80065f2 <_dtoa_r+0x922>
 800653e:	e08e      	b.n	800665e <_dtoa_r+0x98e>
 8006540:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006542:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006546:	e75d      	b.n	8006404 <_dtoa_r+0x734>
 8006548:	9b08      	ldr	r3, [sp, #32]
 800654a:	1e5c      	subs	r4, r3, #1
 800654c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800654e:	42a3      	cmp	r3, r4
 8006550:	bfbf      	itttt	lt
 8006552:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006554:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006556:	1ae3      	sublt	r3, r4, r3
 8006558:	18d2      	addlt	r2, r2, r3
 800655a:	bfa8      	it	ge
 800655c:	1b1c      	subge	r4, r3, r4
 800655e:	9b08      	ldr	r3, [sp, #32]
 8006560:	bfbe      	ittt	lt
 8006562:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006564:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006566:	2400      	movlt	r4, #0
 8006568:	2b00      	cmp	r3, #0
 800656a:	bfb5      	itete	lt
 800656c:	eba9 0703 	sublt.w	r7, r9, r3
 8006570:	464f      	movge	r7, r9
 8006572:	2300      	movlt	r3, #0
 8006574:	9b08      	ldrge	r3, [sp, #32]
 8006576:	e747      	b.n	8006408 <_dtoa_r+0x738>
 8006578:	464f      	mov	r7, r9
 800657a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800657c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800657e:	e74c      	b.n	800641a <_dtoa_r+0x74a>
 8006580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006582:	e773      	b.n	800646c <_dtoa_r+0x79c>
 8006584:	3fe00000 	.word	0x3fe00000
 8006588:	40240000 	.word	0x40240000
 800658c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800658e:	2b01      	cmp	r3, #1
 8006590:	dc18      	bgt.n	80065c4 <_dtoa_r+0x8f4>
 8006592:	9b04      	ldr	r3, [sp, #16]
 8006594:	b9b3      	cbnz	r3, 80065c4 <_dtoa_r+0x8f4>
 8006596:	9b05      	ldr	r3, [sp, #20]
 8006598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800659c:	b993      	cbnz	r3, 80065c4 <_dtoa_r+0x8f4>
 800659e:	9b05      	ldr	r3, [sp, #20]
 80065a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065a4:	0d1b      	lsrs	r3, r3, #20
 80065a6:	051b      	lsls	r3, r3, #20
 80065a8:	b17b      	cbz	r3, 80065ca <_dtoa_r+0x8fa>
 80065aa:	f04f 0801 	mov.w	r8, #1
 80065ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b0:	f109 0901 	add.w	r9, r9, #1
 80065b4:	3301      	adds	r3, #1
 80065b6:	9309      	str	r3, [sp, #36]	; 0x24
 80065b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f47f af6f 	bne.w	800649e <_dtoa_r+0x7ce>
 80065c0:	2001      	movs	r0, #1
 80065c2:	e774      	b.n	80064ae <_dtoa_r+0x7de>
 80065c4:	f04f 0800 	mov.w	r8, #0
 80065c8:	e7f6      	b.n	80065b8 <_dtoa_r+0x8e8>
 80065ca:	4698      	mov	r8, r3
 80065cc:	e7f4      	b.n	80065b8 <_dtoa_r+0x8e8>
 80065ce:	d080      	beq.n	80064d2 <_dtoa_r+0x802>
 80065d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065d2:	331c      	adds	r3, #28
 80065d4:	441a      	add	r2, r3
 80065d6:	4499      	add	r9, r3
 80065d8:	441f      	add	r7, r3
 80065da:	9209      	str	r2, [sp, #36]	; 0x24
 80065dc:	e779      	b.n	80064d2 <_dtoa_r+0x802>
 80065de:	4603      	mov	r3, r0
 80065e0:	e7f6      	b.n	80065d0 <_dtoa_r+0x900>
 80065e2:	9b08      	ldr	r3, [sp, #32]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	dc34      	bgt.n	8006652 <_dtoa_r+0x982>
 80065e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	dd31      	ble.n	8006652 <_dtoa_r+0x982>
 80065ee:	9b08      	ldr	r3, [sp, #32]
 80065f0:	9306      	str	r3, [sp, #24]
 80065f2:	9b06      	ldr	r3, [sp, #24]
 80065f4:	b963      	cbnz	r3, 8006610 <_dtoa_r+0x940>
 80065f6:	4621      	mov	r1, r4
 80065f8:	2205      	movs	r2, #5
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 faaa 	bl	8006b54 <__multadd>
 8006600:	4601      	mov	r1, r0
 8006602:	4604      	mov	r4, r0
 8006604:	4650      	mov	r0, sl
 8006606:	f000 fcbd 	bl	8006f84 <__mcmp>
 800660a:	2800      	cmp	r0, #0
 800660c:	f73f adbf 	bgt.w	800618e <_dtoa_r+0x4be>
 8006610:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006612:	9f03      	ldr	r7, [sp, #12]
 8006614:	ea6f 0b03 	mvn.w	fp, r3
 8006618:	f04f 0800 	mov.w	r8, #0
 800661c:	4621      	mov	r1, r4
 800661e:	4628      	mov	r0, r5
 8006620:	f000 fa76 	bl	8006b10 <_Bfree>
 8006624:	2e00      	cmp	r6, #0
 8006626:	f43f aead 	beq.w	8006384 <_dtoa_r+0x6b4>
 800662a:	f1b8 0f00 	cmp.w	r8, #0
 800662e:	d005      	beq.n	800663c <_dtoa_r+0x96c>
 8006630:	45b0      	cmp	r8, r6
 8006632:	d003      	beq.n	800663c <_dtoa_r+0x96c>
 8006634:	4641      	mov	r1, r8
 8006636:	4628      	mov	r0, r5
 8006638:	f000 fa6a 	bl	8006b10 <_Bfree>
 800663c:	4631      	mov	r1, r6
 800663e:	4628      	mov	r0, r5
 8006640:	f000 fa66 	bl	8006b10 <_Bfree>
 8006644:	e69e      	b.n	8006384 <_dtoa_r+0x6b4>
 8006646:	2400      	movs	r4, #0
 8006648:	4626      	mov	r6, r4
 800664a:	e7e1      	b.n	8006610 <_dtoa_r+0x940>
 800664c:	46c3      	mov	fp, r8
 800664e:	4626      	mov	r6, r4
 8006650:	e59d      	b.n	800618e <_dtoa_r+0x4be>
 8006652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80c8 	beq.w	80067ea <_dtoa_r+0xb1a>
 800665a:	9b08      	ldr	r3, [sp, #32]
 800665c:	9306      	str	r3, [sp, #24]
 800665e:	2f00      	cmp	r7, #0
 8006660:	dd05      	ble.n	800666e <_dtoa_r+0x99e>
 8006662:	4631      	mov	r1, r6
 8006664:	463a      	mov	r2, r7
 8006666:	4628      	mov	r0, r5
 8006668:	f000 fc20 	bl	8006eac <__lshift>
 800666c:	4606      	mov	r6, r0
 800666e:	f1b8 0f00 	cmp.w	r8, #0
 8006672:	d05b      	beq.n	800672c <_dtoa_r+0xa5c>
 8006674:	4628      	mov	r0, r5
 8006676:	6871      	ldr	r1, [r6, #4]
 8006678:	f000 fa0a 	bl	8006a90 <_Balloc>
 800667c:	4607      	mov	r7, r0
 800667e:	b928      	cbnz	r0, 800668c <_dtoa_r+0x9bc>
 8006680:	4602      	mov	r2, r0
 8006682:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006686:	4b81      	ldr	r3, [pc, #516]	; (800688c <_dtoa_r+0xbbc>)
 8006688:	f7ff bb36 	b.w	8005cf8 <_dtoa_r+0x28>
 800668c:	6932      	ldr	r2, [r6, #16]
 800668e:	f106 010c 	add.w	r1, r6, #12
 8006692:	3202      	adds	r2, #2
 8006694:	0092      	lsls	r2, r2, #2
 8006696:	300c      	adds	r0, #12
 8006698:	f000 ff9e 	bl	80075d8 <memcpy>
 800669c:	2201      	movs	r2, #1
 800669e:	4639      	mov	r1, r7
 80066a0:	4628      	mov	r0, r5
 80066a2:	f000 fc03 	bl	8006eac <__lshift>
 80066a6:	46b0      	mov	r8, r6
 80066a8:	4606      	mov	r6, r0
 80066aa:	9b03      	ldr	r3, [sp, #12]
 80066ac:	9a03      	ldr	r2, [sp, #12]
 80066ae:	3301      	adds	r3, #1
 80066b0:	9308      	str	r3, [sp, #32]
 80066b2:	9b06      	ldr	r3, [sp, #24]
 80066b4:	4413      	add	r3, r2
 80066b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80066b8:	9b04      	ldr	r3, [sp, #16]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	930a      	str	r3, [sp, #40]	; 0x28
 80066c0:	9b08      	ldr	r3, [sp, #32]
 80066c2:	4621      	mov	r1, r4
 80066c4:	3b01      	subs	r3, #1
 80066c6:	4650      	mov	r0, sl
 80066c8:	9304      	str	r3, [sp, #16]
 80066ca:	f7ff fa78 	bl	8005bbe <quorem>
 80066ce:	4641      	mov	r1, r8
 80066d0:	9006      	str	r0, [sp, #24]
 80066d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066d6:	4650      	mov	r0, sl
 80066d8:	f000 fc54 	bl	8006f84 <__mcmp>
 80066dc:	4632      	mov	r2, r6
 80066de:	9009      	str	r0, [sp, #36]	; 0x24
 80066e0:	4621      	mov	r1, r4
 80066e2:	4628      	mov	r0, r5
 80066e4:	f000 fc6a 	bl	8006fbc <__mdiff>
 80066e8:	68c2      	ldr	r2, [r0, #12]
 80066ea:	4607      	mov	r7, r0
 80066ec:	bb02      	cbnz	r2, 8006730 <_dtoa_r+0xa60>
 80066ee:	4601      	mov	r1, r0
 80066f0:	4650      	mov	r0, sl
 80066f2:	f000 fc47 	bl	8006f84 <__mcmp>
 80066f6:	4602      	mov	r2, r0
 80066f8:	4639      	mov	r1, r7
 80066fa:	4628      	mov	r0, r5
 80066fc:	920c      	str	r2, [sp, #48]	; 0x30
 80066fe:	f000 fa07 	bl	8006b10 <_Bfree>
 8006702:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006704:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006706:	9f08      	ldr	r7, [sp, #32]
 8006708:	ea43 0102 	orr.w	r1, r3, r2
 800670c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800670e:	4319      	orrs	r1, r3
 8006710:	d110      	bne.n	8006734 <_dtoa_r+0xa64>
 8006712:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006716:	d029      	beq.n	800676c <_dtoa_r+0xa9c>
 8006718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800671a:	2b00      	cmp	r3, #0
 800671c:	dd02      	ble.n	8006724 <_dtoa_r+0xa54>
 800671e:	9b06      	ldr	r3, [sp, #24]
 8006720:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006724:	9b04      	ldr	r3, [sp, #16]
 8006726:	f883 9000 	strb.w	r9, [r3]
 800672a:	e777      	b.n	800661c <_dtoa_r+0x94c>
 800672c:	4630      	mov	r0, r6
 800672e:	e7ba      	b.n	80066a6 <_dtoa_r+0x9d6>
 8006730:	2201      	movs	r2, #1
 8006732:	e7e1      	b.n	80066f8 <_dtoa_r+0xa28>
 8006734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006736:	2b00      	cmp	r3, #0
 8006738:	db04      	blt.n	8006744 <_dtoa_r+0xa74>
 800673a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800673c:	430b      	orrs	r3, r1
 800673e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006740:	430b      	orrs	r3, r1
 8006742:	d120      	bne.n	8006786 <_dtoa_r+0xab6>
 8006744:	2a00      	cmp	r2, #0
 8006746:	dded      	ble.n	8006724 <_dtoa_r+0xa54>
 8006748:	4651      	mov	r1, sl
 800674a:	2201      	movs	r2, #1
 800674c:	4628      	mov	r0, r5
 800674e:	f000 fbad 	bl	8006eac <__lshift>
 8006752:	4621      	mov	r1, r4
 8006754:	4682      	mov	sl, r0
 8006756:	f000 fc15 	bl	8006f84 <__mcmp>
 800675a:	2800      	cmp	r0, #0
 800675c:	dc03      	bgt.n	8006766 <_dtoa_r+0xa96>
 800675e:	d1e1      	bne.n	8006724 <_dtoa_r+0xa54>
 8006760:	f019 0f01 	tst.w	r9, #1
 8006764:	d0de      	beq.n	8006724 <_dtoa_r+0xa54>
 8006766:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800676a:	d1d8      	bne.n	800671e <_dtoa_r+0xa4e>
 800676c:	2339      	movs	r3, #57	; 0x39
 800676e:	9a04      	ldr	r2, [sp, #16]
 8006770:	7013      	strb	r3, [r2, #0]
 8006772:	463b      	mov	r3, r7
 8006774:	461f      	mov	r7, r3
 8006776:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800677a:	3b01      	subs	r3, #1
 800677c:	2a39      	cmp	r2, #57	; 0x39
 800677e:	d06b      	beq.n	8006858 <_dtoa_r+0xb88>
 8006780:	3201      	adds	r2, #1
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	e74a      	b.n	800661c <_dtoa_r+0x94c>
 8006786:	2a00      	cmp	r2, #0
 8006788:	dd07      	ble.n	800679a <_dtoa_r+0xaca>
 800678a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800678e:	d0ed      	beq.n	800676c <_dtoa_r+0xa9c>
 8006790:	9a04      	ldr	r2, [sp, #16]
 8006792:	f109 0301 	add.w	r3, r9, #1
 8006796:	7013      	strb	r3, [r2, #0]
 8006798:	e740      	b.n	800661c <_dtoa_r+0x94c>
 800679a:	9b08      	ldr	r3, [sp, #32]
 800679c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800679e:	f803 9c01 	strb.w	r9, [r3, #-1]
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d042      	beq.n	800682c <_dtoa_r+0xb5c>
 80067a6:	4651      	mov	r1, sl
 80067a8:	2300      	movs	r3, #0
 80067aa:	220a      	movs	r2, #10
 80067ac:	4628      	mov	r0, r5
 80067ae:	f000 f9d1 	bl	8006b54 <__multadd>
 80067b2:	45b0      	cmp	r8, r6
 80067b4:	4682      	mov	sl, r0
 80067b6:	f04f 0300 	mov.w	r3, #0
 80067ba:	f04f 020a 	mov.w	r2, #10
 80067be:	4641      	mov	r1, r8
 80067c0:	4628      	mov	r0, r5
 80067c2:	d107      	bne.n	80067d4 <_dtoa_r+0xb04>
 80067c4:	f000 f9c6 	bl	8006b54 <__multadd>
 80067c8:	4680      	mov	r8, r0
 80067ca:	4606      	mov	r6, r0
 80067cc:	9b08      	ldr	r3, [sp, #32]
 80067ce:	3301      	adds	r3, #1
 80067d0:	9308      	str	r3, [sp, #32]
 80067d2:	e775      	b.n	80066c0 <_dtoa_r+0x9f0>
 80067d4:	f000 f9be 	bl	8006b54 <__multadd>
 80067d8:	4631      	mov	r1, r6
 80067da:	4680      	mov	r8, r0
 80067dc:	2300      	movs	r3, #0
 80067de:	220a      	movs	r2, #10
 80067e0:	4628      	mov	r0, r5
 80067e2:	f000 f9b7 	bl	8006b54 <__multadd>
 80067e6:	4606      	mov	r6, r0
 80067e8:	e7f0      	b.n	80067cc <_dtoa_r+0xafc>
 80067ea:	9b08      	ldr	r3, [sp, #32]
 80067ec:	9306      	str	r3, [sp, #24]
 80067ee:	9f03      	ldr	r7, [sp, #12]
 80067f0:	4621      	mov	r1, r4
 80067f2:	4650      	mov	r0, sl
 80067f4:	f7ff f9e3 	bl	8005bbe <quorem>
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80067fe:	f807 9b01 	strb.w	r9, [r7], #1
 8006802:	1afa      	subs	r2, r7, r3
 8006804:	9b06      	ldr	r3, [sp, #24]
 8006806:	4293      	cmp	r3, r2
 8006808:	dd07      	ble.n	800681a <_dtoa_r+0xb4a>
 800680a:	4651      	mov	r1, sl
 800680c:	2300      	movs	r3, #0
 800680e:	220a      	movs	r2, #10
 8006810:	4628      	mov	r0, r5
 8006812:	f000 f99f 	bl	8006b54 <__multadd>
 8006816:	4682      	mov	sl, r0
 8006818:	e7ea      	b.n	80067f0 <_dtoa_r+0xb20>
 800681a:	9b06      	ldr	r3, [sp, #24]
 800681c:	f04f 0800 	mov.w	r8, #0
 8006820:	2b00      	cmp	r3, #0
 8006822:	bfcc      	ite	gt
 8006824:	461f      	movgt	r7, r3
 8006826:	2701      	movle	r7, #1
 8006828:	9b03      	ldr	r3, [sp, #12]
 800682a:	441f      	add	r7, r3
 800682c:	4651      	mov	r1, sl
 800682e:	2201      	movs	r2, #1
 8006830:	4628      	mov	r0, r5
 8006832:	f000 fb3b 	bl	8006eac <__lshift>
 8006836:	4621      	mov	r1, r4
 8006838:	4682      	mov	sl, r0
 800683a:	f000 fba3 	bl	8006f84 <__mcmp>
 800683e:	2800      	cmp	r0, #0
 8006840:	dc97      	bgt.n	8006772 <_dtoa_r+0xaa2>
 8006842:	d102      	bne.n	800684a <_dtoa_r+0xb7a>
 8006844:	f019 0f01 	tst.w	r9, #1
 8006848:	d193      	bne.n	8006772 <_dtoa_r+0xaa2>
 800684a:	463b      	mov	r3, r7
 800684c:	461f      	mov	r7, r3
 800684e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006852:	2a30      	cmp	r2, #48	; 0x30
 8006854:	d0fa      	beq.n	800684c <_dtoa_r+0xb7c>
 8006856:	e6e1      	b.n	800661c <_dtoa_r+0x94c>
 8006858:	9a03      	ldr	r2, [sp, #12]
 800685a:	429a      	cmp	r2, r3
 800685c:	d18a      	bne.n	8006774 <_dtoa_r+0xaa4>
 800685e:	2331      	movs	r3, #49	; 0x31
 8006860:	f10b 0b01 	add.w	fp, fp, #1
 8006864:	e797      	b.n	8006796 <_dtoa_r+0xac6>
 8006866:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <_dtoa_r+0xbc0>)
 8006868:	f7ff ba9f 	b.w	8005daa <_dtoa_r+0xda>
 800686c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800686e:	2b00      	cmp	r3, #0
 8006870:	f47f aa77 	bne.w	8005d62 <_dtoa_r+0x92>
 8006874:	4b07      	ldr	r3, [pc, #28]	; (8006894 <_dtoa_r+0xbc4>)
 8006876:	f7ff ba98 	b.w	8005daa <_dtoa_r+0xda>
 800687a:	9b06      	ldr	r3, [sp, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	dcb6      	bgt.n	80067ee <_dtoa_r+0xb1e>
 8006880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006882:	2b02      	cmp	r3, #2
 8006884:	f73f aeb5 	bgt.w	80065f2 <_dtoa_r+0x922>
 8006888:	e7b1      	b.n	80067ee <_dtoa_r+0xb1e>
 800688a:	bf00      	nop
 800688c:	08007d86 	.word	0x08007d86
 8006890:	08007ce6 	.word	0x08007ce6
 8006894:	08007d0a 	.word	0x08007d0a

08006898 <_free_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4605      	mov	r5, r0
 800689c:	2900      	cmp	r1, #0
 800689e:	d040      	beq.n	8006922 <_free_r+0x8a>
 80068a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068a4:	1f0c      	subs	r4, r1, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	bfb8      	it	lt
 80068aa:	18e4      	addlt	r4, r4, r3
 80068ac:	f000 f8e4 	bl	8006a78 <__malloc_lock>
 80068b0:	4a1c      	ldr	r2, [pc, #112]	; (8006924 <_free_r+0x8c>)
 80068b2:	6813      	ldr	r3, [r2, #0]
 80068b4:	b933      	cbnz	r3, 80068c4 <_free_r+0x2c>
 80068b6:	6063      	str	r3, [r4, #4]
 80068b8:	6014      	str	r4, [r2, #0]
 80068ba:	4628      	mov	r0, r5
 80068bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068c0:	f000 b8e0 	b.w	8006a84 <__malloc_unlock>
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d908      	bls.n	80068da <_free_r+0x42>
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	1821      	adds	r1, r4, r0
 80068cc:	428b      	cmp	r3, r1
 80068ce:	bf01      	itttt	eq
 80068d0:	6819      	ldreq	r1, [r3, #0]
 80068d2:	685b      	ldreq	r3, [r3, #4]
 80068d4:	1809      	addeq	r1, r1, r0
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	e7ed      	b.n	80068b6 <_free_r+0x1e>
 80068da:	461a      	mov	r2, r3
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	b10b      	cbz	r3, 80068e4 <_free_r+0x4c>
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	d9fa      	bls.n	80068da <_free_r+0x42>
 80068e4:	6811      	ldr	r1, [r2, #0]
 80068e6:	1850      	adds	r0, r2, r1
 80068e8:	42a0      	cmp	r0, r4
 80068ea:	d10b      	bne.n	8006904 <_free_r+0x6c>
 80068ec:	6820      	ldr	r0, [r4, #0]
 80068ee:	4401      	add	r1, r0
 80068f0:	1850      	adds	r0, r2, r1
 80068f2:	4283      	cmp	r3, r0
 80068f4:	6011      	str	r1, [r2, #0]
 80068f6:	d1e0      	bne.n	80068ba <_free_r+0x22>
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4408      	add	r0, r1
 80068fe:	6010      	str	r0, [r2, #0]
 8006900:	6053      	str	r3, [r2, #4]
 8006902:	e7da      	b.n	80068ba <_free_r+0x22>
 8006904:	d902      	bls.n	800690c <_free_r+0x74>
 8006906:	230c      	movs	r3, #12
 8006908:	602b      	str	r3, [r5, #0]
 800690a:	e7d6      	b.n	80068ba <_free_r+0x22>
 800690c:	6820      	ldr	r0, [r4, #0]
 800690e:	1821      	adds	r1, r4, r0
 8006910:	428b      	cmp	r3, r1
 8006912:	bf01      	itttt	eq
 8006914:	6819      	ldreq	r1, [r3, #0]
 8006916:	685b      	ldreq	r3, [r3, #4]
 8006918:	1809      	addeq	r1, r1, r0
 800691a:	6021      	streq	r1, [r4, #0]
 800691c:	6063      	str	r3, [r4, #4]
 800691e:	6054      	str	r4, [r2, #4]
 8006920:	e7cb      	b.n	80068ba <_free_r+0x22>
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	200004ac 	.word	0x200004ac

08006928 <malloc>:
 8006928:	4b02      	ldr	r3, [pc, #8]	; (8006934 <malloc+0xc>)
 800692a:	4601      	mov	r1, r0
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	f000 b823 	b.w	8006978 <_malloc_r>
 8006932:	bf00      	nop
 8006934:	2000008c 	.word	0x2000008c

08006938 <sbrk_aligned>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4e0e      	ldr	r6, [pc, #56]	; (8006974 <sbrk_aligned+0x3c>)
 800693c:	460c      	mov	r4, r1
 800693e:	6831      	ldr	r1, [r6, #0]
 8006940:	4605      	mov	r5, r0
 8006942:	b911      	cbnz	r1, 800694a <sbrk_aligned+0x12>
 8006944:	f000 fe38 	bl	80075b8 <_sbrk_r>
 8006948:	6030      	str	r0, [r6, #0]
 800694a:	4621      	mov	r1, r4
 800694c:	4628      	mov	r0, r5
 800694e:	f000 fe33 	bl	80075b8 <_sbrk_r>
 8006952:	1c43      	adds	r3, r0, #1
 8006954:	d00a      	beq.n	800696c <sbrk_aligned+0x34>
 8006956:	1cc4      	adds	r4, r0, #3
 8006958:	f024 0403 	bic.w	r4, r4, #3
 800695c:	42a0      	cmp	r0, r4
 800695e:	d007      	beq.n	8006970 <sbrk_aligned+0x38>
 8006960:	1a21      	subs	r1, r4, r0
 8006962:	4628      	mov	r0, r5
 8006964:	f000 fe28 	bl	80075b8 <_sbrk_r>
 8006968:	3001      	adds	r0, #1
 800696a:	d101      	bne.n	8006970 <sbrk_aligned+0x38>
 800696c:	f04f 34ff 	mov.w	r4, #4294967295
 8006970:	4620      	mov	r0, r4
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	200004b0 	.word	0x200004b0

08006978 <_malloc_r>:
 8006978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800697c:	1ccd      	adds	r5, r1, #3
 800697e:	f025 0503 	bic.w	r5, r5, #3
 8006982:	3508      	adds	r5, #8
 8006984:	2d0c      	cmp	r5, #12
 8006986:	bf38      	it	cc
 8006988:	250c      	movcc	r5, #12
 800698a:	2d00      	cmp	r5, #0
 800698c:	4607      	mov	r7, r0
 800698e:	db01      	blt.n	8006994 <_malloc_r+0x1c>
 8006990:	42a9      	cmp	r1, r5
 8006992:	d905      	bls.n	80069a0 <_malloc_r+0x28>
 8006994:	230c      	movs	r3, #12
 8006996:	2600      	movs	r6, #0
 8006998:	603b      	str	r3, [r7, #0]
 800699a:	4630      	mov	r0, r6
 800699c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a74 <_malloc_r+0xfc>
 80069a4:	f000 f868 	bl	8006a78 <__malloc_lock>
 80069a8:	f8d8 3000 	ldr.w	r3, [r8]
 80069ac:	461c      	mov	r4, r3
 80069ae:	bb5c      	cbnz	r4, 8006a08 <_malloc_r+0x90>
 80069b0:	4629      	mov	r1, r5
 80069b2:	4638      	mov	r0, r7
 80069b4:	f7ff ffc0 	bl	8006938 <sbrk_aligned>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	4604      	mov	r4, r0
 80069bc:	d155      	bne.n	8006a6a <_malloc_r+0xf2>
 80069be:	f8d8 4000 	ldr.w	r4, [r8]
 80069c2:	4626      	mov	r6, r4
 80069c4:	2e00      	cmp	r6, #0
 80069c6:	d145      	bne.n	8006a54 <_malloc_r+0xdc>
 80069c8:	2c00      	cmp	r4, #0
 80069ca:	d048      	beq.n	8006a5e <_malloc_r+0xe6>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	4631      	mov	r1, r6
 80069d0:	4638      	mov	r0, r7
 80069d2:	eb04 0903 	add.w	r9, r4, r3
 80069d6:	f000 fdef 	bl	80075b8 <_sbrk_r>
 80069da:	4581      	cmp	r9, r0
 80069dc:	d13f      	bne.n	8006a5e <_malloc_r+0xe6>
 80069de:	6821      	ldr	r1, [r4, #0]
 80069e0:	4638      	mov	r0, r7
 80069e2:	1a6d      	subs	r5, r5, r1
 80069e4:	4629      	mov	r1, r5
 80069e6:	f7ff ffa7 	bl	8006938 <sbrk_aligned>
 80069ea:	3001      	adds	r0, #1
 80069ec:	d037      	beq.n	8006a5e <_malloc_r+0xe6>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	442b      	add	r3, r5
 80069f2:	6023      	str	r3, [r4, #0]
 80069f4:	f8d8 3000 	ldr.w	r3, [r8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d038      	beq.n	8006a6e <_malloc_r+0xf6>
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	42a2      	cmp	r2, r4
 8006a00:	d12b      	bne.n	8006a5a <_malloc_r+0xe2>
 8006a02:	2200      	movs	r2, #0
 8006a04:	605a      	str	r2, [r3, #4]
 8006a06:	e00f      	b.n	8006a28 <_malloc_r+0xb0>
 8006a08:	6822      	ldr	r2, [r4, #0]
 8006a0a:	1b52      	subs	r2, r2, r5
 8006a0c:	d41f      	bmi.n	8006a4e <_malloc_r+0xd6>
 8006a0e:	2a0b      	cmp	r2, #11
 8006a10:	d917      	bls.n	8006a42 <_malloc_r+0xca>
 8006a12:	1961      	adds	r1, r4, r5
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	6025      	str	r5, [r4, #0]
 8006a18:	bf18      	it	ne
 8006a1a:	6059      	strne	r1, [r3, #4]
 8006a1c:	6863      	ldr	r3, [r4, #4]
 8006a1e:	bf08      	it	eq
 8006a20:	f8c8 1000 	streq.w	r1, [r8]
 8006a24:	5162      	str	r2, [r4, r5]
 8006a26:	604b      	str	r3, [r1, #4]
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f104 060b 	add.w	r6, r4, #11
 8006a2e:	f000 f829 	bl	8006a84 <__malloc_unlock>
 8006a32:	f026 0607 	bic.w	r6, r6, #7
 8006a36:	1d23      	adds	r3, r4, #4
 8006a38:	1af2      	subs	r2, r6, r3
 8006a3a:	d0ae      	beq.n	800699a <_malloc_r+0x22>
 8006a3c:	1b9b      	subs	r3, r3, r6
 8006a3e:	50a3      	str	r3, [r4, r2]
 8006a40:	e7ab      	b.n	800699a <_malloc_r+0x22>
 8006a42:	42a3      	cmp	r3, r4
 8006a44:	6862      	ldr	r2, [r4, #4]
 8006a46:	d1dd      	bne.n	8006a04 <_malloc_r+0x8c>
 8006a48:	f8c8 2000 	str.w	r2, [r8]
 8006a4c:	e7ec      	b.n	8006a28 <_malloc_r+0xb0>
 8006a4e:	4623      	mov	r3, r4
 8006a50:	6864      	ldr	r4, [r4, #4]
 8006a52:	e7ac      	b.n	80069ae <_malloc_r+0x36>
 8006a54:	4634      	mov	r4, r6
 8006a56:	6876      	ldr	r6, [r6, #4]
 8006a58:	e7b4      	b.n	80069c4 <_malloc_r+0x4c>
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	e7cc      	b.n	80069f8 <_malloc_r+0x80>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	4638      	mov	r0, r7
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	f000 f80e 	bl	8006a84 <__malloc_unlock>
 8006a68:	e797      	b.n	800699a <_malloc_r+0x22>
 8006a6a:	6025      	str	r5, [r4, #0]
 8006a6c:	e7dc      	b.n	8006a28 <_malloc_r+0xb0>
 8006a6e:	605b      	str	r3, [r3, #4]
 8006a70:	deff      	udf	#255	; 0xff
 8006a72:	bf00      	nop
 8006a74:	200004ac 	.word	0x200004ac

08006a78 <__malloc_lock>:
 8006a78:	4801      	ldr	r0, [pc, #4]	; (8006a80 <__malloc_lock+0x8>)
 8006a7a:	f7ff b890 	b.w	8005b9e <__retarget_lock_acquire_recursive>
 8006a7e:	bf00      	nop
 8006a80:	200004a8 	.word	0x200004a8

08006a84 <__malloc_unlock>:
 8006a84:	4801      	ldr	r0, [pc, #4]	; (8006a8c <__malloc_unlock+0x8>)
 8006a86:	f7ff b88b 	b.w	8005ba0 <__retarget_lock_release_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	200004a8 	.word	0x200004a8

08006a90 <_Balloc>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	69c6      	ldr	r6, [r0, #28]
 8006a94:	4604      	mov	r4, r0
 8006a96:	460d      	mov	r5, r1
 8006a98:	b976      	cbnz	r6, 8006ab8 <_Balloc+0x28>
 8006a9a:	2010      	movs	r0, #16
 8006a9c:	f7ff ff44 	bl	8006928 <malloc>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	61e0      	str	r0, [r4, #28]
 8006aa4:	b920      	cbnz	r0, 8006ab0 <_Balloc+0x20>
 8006aa6:	216b      	movs	r1, #107	; 0x6b
 8006aa8:	4b17      	ldr	r3, [pc, #92]	; (8006b08 <_Balloc+0x78>)
 8006aaa:	4818      	ldr	r0, [pc, #96]	; (8006b0c <_Balloc+0x7c>)
 8006aac:	f000 fda2 	bl	80075f4 <__assert_func>
 8006ab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ab4:	6006      	str	r6, [r0, #0]
 8006ab6:	60c6      	str	r6, [r0, #12]
 8006ab8:	69e6      	ldr	r6, [r4, #28]
 8006aba:	68f3      	ldr	r3, [r6, #12]
 8006abc:	b183      	cbz	r3, 8006ae0 <_Balloc+0x50>
 8006abe:	69e3      	ldr	r3, [r4, #28]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ac6:	b9b8      	cbnz	r0, 8006af8 <_Balloc+0x68>
 8006ac8:	2101      	movs	r1, #1
 8006aca:	fa01 f605 	lsl.w	r6, r1, r5
 8006ace:	1d72      	adds	r2, r6, #5
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	0092      	lsls	r2, r2, #2
 8006ad4:	f000 fdac 	bl	8007630 <_calloc_r>
 8006ad8:	b160      	cbz	r0, 8006af4 <_Balloc+0x64>
 8006ada:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ade:	e00e      	b.n	8006afe <_Balloc+0x6e>
 8006ae0:	2221      	movs	r2, #33	; 0x21
 8006ae2:	2104      	movs	r1, #4
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 fda3 	bl	8007630 <_calloc_r>
 8006aea:	69e3      	ldr	r3, [r4, #28]
 8006aec:	60f0      	str	r0, [r6, #12]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e4      	bne.n	8006abe <_Balloc+0x2e>
 8006af4:	2000      	movs	r0, #0
 8006af6:	bd70      	pop	{r4, r5, r6, pc}
 8006af8:	6802      	ldr	r2, [r0, #0]
 8006afa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006afe:	2300      	movs	r3, #0
 8006b00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b04:	e7f7      	b.n	8006af6 <_Balloc+0x66>
 8006b06:	bf00      	nop
 8006b08:	08007d17 	.word	0x08007d17
 8006b0c:	08007d97 	.word	0x08007d97

08006b10 <_Bfree>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	69c6      	ldr	r6, [r0, #28]
 8006b14:	4605      	mov	r5, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	b976      	cbnz	r6, 8006b38 <_Bfree+0x28>
 8006b1a:	2010      	movs	r0, #16
 8006b1c:	f7ff ff04 	bl	8006928 <malloc>
 8006b20:	4602      	mov	r2, r0
 8006b22:	61e8      	str	r0, [r5, #28]
 8006b24:	b920      	cbnz	r0, 8006b30 <_Bfree+0x20>
 8006b26:	218f      	movs	r1, #143	; 0x8f
 8006b28:	4b08      	ldr	r3, [pc, #32]	; (8006b4c <_Bfree+0x3c>)
 8006b2a:	4809      	ldr	r0, [pc, #36]	; (8006b50 <_Bfree+0x40>)
 8006b2c:	f000 fd62 	bl	80075f4 <__assert_func>
 8006b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b34:	6006      	str	r6, [r0, #0]
 8006b36:	60c6      	str	r6, [r0, #12]
 8006b38:	b13c      	cbz	r4, 8006b4a <_Bfree+0x3a>
 8006b3a:	69eb      	ldr	r3, [r5, #28]
 8006b3c:	6862      	ldr	r2, [r4, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b44:	6021      	str	r1, [r4, #0]
 8006b46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	08007d17 	.word	0x08007d17
 8006b50:	08007d97 	.word	0x08007d97

08006b54 <__multadd>:
 8006b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b58:	4607      	mov	r7, r0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	461e      	mov	r6, r3
 8006b5e:	2000      	movs	r0, #0
 8006b60:	690d      	ldr	r5, [r1, #16]
 8006b62:	f101 0c14 	add.w	ip, r1, #20
 8006b66:	f8dc 3000 	ldr.w	r3, [ip]
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	b299      	uxth	r1, r3
 8006b6e:	fb02 6101 	mla	r1, r2, r1, r6
 8006b72:	0c1e      	lsrs	r6, r3, #16
 8006b74:	0c0b      	lsrs	r3, r1, #16
 8006b76:	fb02 3306 	mla	r3, r2, r6, r3
 8006b7a:	b289      	uxth	r1, r1
 8006b7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b80:	4285      	cmp	r5, r0
 8006b82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b86:	f84c 1b04 	str.w	r1, [ip], #4
 8006b8a:	dcec      	bgt.n	8006b66 <__multadd+0x12>
 8006b8c:	b30e      	cbz	r6, 8006bd2 <__multadd+0x7e>
 8006b8e:	68a3      	ldr	r3, [r4, #8]
 8006b90:	42ab      	cmp	r3, r5
 8006b92:	dc19      	bgt.n	8006bc8 <__multadd+0x74>
 8006b94:	6861      	ldr	r1, [r4, #4]
 8006b96:	4638      	mov	r0, r7
 8006b98:	3101      	adds	r1, #1
 8006b9a:	f7ff ff79 	bl	8006a90 <_Balloc>
 8006b9e:	4680      	mov	r8, r0
 8006ba0:	b928      	cbnz	r0, 8006bae <__multadd+0x5a>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	21ba      	movs	r1, #186	; 0xba
 8006ba6:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <__multadd+0x84>)
 8006ba8:	480c      	ldr	r0, [pc, #48]	; (8006bdc <__multadd+0x88>)
 8006baa:	f000 fd23 	bl	80075f4 <__assert_func>
 8006bae:	6922      	ldr	r2, [r4, #16]
 8006bb0:	f104 010c 	add.w	r1, r4, #12
 8006bb4:	3202      	adds	r2, #2
 8006bb6:	0092      	lsls	r2, r2, #2
 8006bb8:	300c      	adds	r0, #12
 8006bba:	f000 fd0d 	bl	80075d8 <memcpy>
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f7ff ffa5 	bl	8006b10 <_Bfree>
 8006bc6:	4644      	mov	r4, r8
 8006bc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bcc:	3501      	adds	r5, #1
 8006bce:	615e      	str	r6, [r3, #20]
 8006bd0:	6125      	str	r5, [r4, #16]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd8:	08007d86 	.word	0x08007d86
 8006bdc:	08007d97 	.word	0x08007d97

08006be0 <__hi0bits>:
 8006be0:	0c02      	lsrs	r2, r0, #16
 8006be2:	0412      	lsls	r2, r2, #16
 8006be4:	4603      	mov	r3, r0
 8006be6:	b9ca      	cbnz	r2, 8006c1c <__hi0bits+0x3c>
 8006be8:	0403      	lsls	r3, r0, #16
 8006bea:	2010      	movs	r0, #16
 8006bec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006bf0:	bf04      	itt	eq
 8006bf2:	021b      	lsleq	r3, r3, #8
 8006bf4:	3008      	addeq	r0, #8
 8006bf6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006bfa:	bf04      	itt	eq
 8006bfc:	011b      	lsleq	r3, r3, #4
 8006bfe:	3004      	addeq	r0, #4
 8006c00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006c04:	bf04      	itt	eq
 8006c06:	009b      	lsleq	r3, r3, #2
 8006c08:	3002      	addeq	r0, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	db05      	blt.n	8006c1a <__hi0bits+0x3a>
 8006c0e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006c12:	f100 0001 	add.w	r0, r0, #1
 8006c16:	bf08      	it	eq
 8006c18:	2020      	moveq	r0, #32
 8006c1a:	4770      	bx	lr
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e7e5      	b.n	8006bec <__hi0bits+0xc>

08006c20 <__lo0bits>:
 8006c20:	6803      	ldr	r3, [r0, #0]
 8006c22:	4602      	mov	r2, r0
 8006c24:	f013 0007 	ands.w	r0, r3, #7
 8006c28:	d00b      	beq.n	8006c42 <__lo0bits+0x22>
 8006c2a:	07d9      	lsls	r1, r3, #31
 8006c2c:	d421      	bmi.n	8006c72 <__lo0bits+0x52>
 8006c2e:	0798      	lsls	r0, r3, #30
 8006c30:	bf49      	itett	mi
 8006c32:	085b      	lsrmi	r3, r3, #1
 8006c34:	089b      	lsrpl	r3, r3, #2
 8006c36:	2001      	movmi	r0, #1
 8006c38:	6013      	strmi	r3, [r2, #0]
 8006c3a:	bf5c      	itt	pl
 8006c3c:	2002      	movpl	r0, #2
 8006c3e:	6013      	strpl	r3, [r2, #0]
 8006c40:	4770      	bx	lr
 8006c42:	b299      	uxth	r1, r3
 8006c44:	b909      	cbnz	r1, 8006c4a <__lo0bits+0x2a>
 8006c46:	2010      	movs	r0, #16
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	b2d9      	uxtb	r1, r3
 8006c4c:	b909      	cbnz	r1, 8006c52 <__lo0bits+0x32>
 8006c4e:	3008      	adds	r0, #8
 8006c50:	0a1b      	lsrs	r3, r3, #8
 8006c52:	0719      	lsls	r1, r3, #28
 8006c54:	bf04      	itt	eq
 8006c56:	091b      	lsreq	r3, r3, #4
 8006c58:	3004      	addeq	r0, #4
 8006c5a:	0799      	lsls	r1, r3, #30
 8006c5c:	bf04      	itt	eq
 8006c5e:	089b      	lsreq	r3, r3, #2
 8006c60:	3002      	addeq	r0, #2
 8006c62:	07d9      	lsls	r1, r3, #31
 8006c64:	d403      	bmi.n	8006c6e <__lo0bits+0x4e>
 8006c66:	085b      	lsrs	r3, r3, #1
 8006c68:	f100 0001 	add.w	r0, r0, #1
 8006c6c:	d003      	beq.n	8006c76 <__lo0bits+0x56>
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	4770      	bx	lr
 8006c72:	2000      	movs	r0, #0
 8006c74:	4770      	bx	lr
 8006c76:	2020      	movs	r0, #32
 8006c78:	4770      	bx	lr
	...

08006c7c <__i2b>:
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	460c      	mov	r4, r1
 8006c80:	2101      	movs	r1, #1
 8006c82:	f7ff ff05 	bl	8006a90 <_Balloc>
 8006c86:	4602      	mov	r2, r0
 8006c88:	b928      	cbnz	r0, 8006c96 <__i2b+0x1a>
 8006c8a:	f240 1145 	movw	r1, #325	; 0x145
 8006c8e:	4b04      	ldr	r3, [pc, #16]	; (8006ca0 <__i2b+0x24>)
 8006c90:	4804      	ldr	r0, [pc, #16]	; (8006ca4 <__i2b+0x28>)
 8006c92:	f000 fcaf 	bl	80075f4 <__assert_func>
 8006c96:	2301      	movs	r3, #1
 8006c98:	6144      	str	r4, [r0, #20]
 8006c9a:	6103      	str	r3, [r0, #16]
 8006c9c:	bd10      	pop	{r4, pc}
 8006c9e:	bf00      	nop
 8006ca0:	08007d86 	.word	0x08007d86
 8006ca4:	08007d97 	.word	0x08007d97

08006ca8 <__multiply>:
 8006ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cac:	4691      	mov	r9, r2
 8006cae:	690a      	ldr	r2, [r1, #16]
 8006cb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	bfbe      	ittt	lt
 8006cba:	460b      	movlt	r3, r1
 8006cbc:	464c      	movlt	r4, r9
 8006cbe:	4699      	movlt	r9, r3
 8006cc0:	6927      	ldr	r7, [r4, #16]
 8006cc2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006cc6:	68a3      	ldr	r3, [r4, #8]
 8006cc8:	6861      	ldr	r1, [r4, #4]
 8006cca:	eb07 060a 	add.w	r6, r7, sl
 8006cce:	42b3      	cmp	r3, r6
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	bfb8      	it	lt
 8006cd4:	3101      	addlt	r1, #1
 8006cd6:	f7ff fedb 	bl	8006a90 <_Balloc>
 8006cda:	b930      	cbnz	r0, 8006cea <__multiply+0x42>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ce2:	4b43      	ldr	r3, [pc, #268]	; (8006df0 <__multiply+0x148>)
 8006ce4:	4843      	ldr	r0, [pc, #268]	; (8006df4 <__multiply+0x14c>)
 8006ce6:	f000 fc85 	bl	80075f4 <__assert_func>
 8006cea:	f100 0514 	add.w	r5, r0, #20
 8006cee:	462b      	mov	r3, r5
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cf6:	4543      	cmp	r3, r8
 8006cf8:	d321      	bcc.n	8006d3e <__multiply+0x96>
 8006cfa:	f104 0314 	add.w	r3, r4, #20
 8006cfe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006d02:	f109 0314 	add.w	r3, r9, #20
 8006d06:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006d0a:	9202      	str	r2, [sp, #8]
 8006d0c:	1b3a      	subs	r2, r7, r4
 8006d0e:	3a15      	subs	r2, #21
 8006d10:	f022 0203 	bic.w	r2, r2, #3
 8006d14:	3204      	adds	r2, #4
 8006d16:	f104 0115 	add.w	r1, r4, #21
 8006d1a:	428f      	cmp	r7, r1
 8006d1c:	bf38      	it	cc
 8006d1e:	2204      	movcc	r2, #4
 8006d20:	9201      	str	r2, [sp, #4]
 8006d22:	9a02      	ldr	r2, [sp, #8]
 8006d24:	9303      	str	r3, [sp, #12]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d80c      	bhi.n	8006d44 <__multiply+0x9c>
 8006d2a:	2e00      	cmp	r6, #0
 8006d2c:	dd03      	ble.n	8006d36 <__multiply+0x8e>
 8006d2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d05a      	beq.n	8006dec <__multiply+0x144>
 8006d36:	6106      	str	r6, [r0, #16]
 8006d38:	b005      	add	sp, #20
 8006d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3e:	f843 2b04 	str.w	r2, [r3], #4
 8006d42:	e7d8      	b.n	8006cf6 <__multiply+0x4e>
 8006d44:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d48:	f1ba 0f00 	cmp.w	sl, #0
 8006d4c:	d023      	beq.n	8006d96 <__multiply+0xee>
 8006d4e:	46a9      	mov	r9, r5
 8006d50:	f04f 0c00 	mov.w	ip, #0
 8006d54:	f104 0e14 	add.w	lr, r4, #20
 8006d58:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d5c:	f8d9 1000 	ldr.w	r1, [r9]
 8006d60:	fa1f fb82 	uxth.w	fp, r2
 8006d64:	b289      	uxth	r1, r1
 8006d66:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d6a:	4461      	add	r1, ip
 8006d6c:	f8d9 c000 	ldr.w	ip, [r9]
 8006d70:	0c12      	lsrs	r2, r2, #16
 8006d72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006d76:	fb0a c202 	mla	r2, sl, r2, ip
 8006d7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d7e:	b289      	uxth	r1, r1
 8006d80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d84:	4577      	cmp	r7, lr
 8006d86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d8a:	f849 1b04 	str.w	r1, [r9], #4
 8006d8e:	d8e3      	bhi.n	8006d58 <__multiply+0xb0>
 8006d90:	9a01      	ldr	r2, [sp, #4]
 8006d92:	f845 c002 	str.w	ip, [r5, r2]
 8006d96:	9a03      	ldr	r2, [sp, #12]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d9e:	f1b9 0f00 	cmp.w	r9, #0
 8006da2:	d021      	beq.n	8006de8 <__multiply+0x140>
 8006da4:	46ae      	mov	lr, r5
 8006da6:	f04f 0a00 	mov.w	sl, #0
 8006daa:	6829      	ldr	r1, [r5, #0]
 8006dac:	f104 0c14 	add.w	ip, r4, #20
 8006db0:	f8bc b000 	ldrh.w	fp, [ip]
 8006db4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006db8:	b289      	uxth	r1, r1
 8006dba:	fb09 220b 	mla	r2, r9, fp, r2
 8006dbe:	4452      	add	r2, sl
 8006dc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006dc4:	f84e 1b04 	str.w	r1, [lr], #4
 8006dc8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006dcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006dd0:	f8be 1000 	ldrh.w	r1, [lr]
 8006dd4:	4567      	cmp	r7, ip
 8006dd6:	fb09 110a 	mla	r1, r9, sl, r1
 8006dda:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006dde:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006de2:	d8e5      	bhi.n	8006db0 <__multiply+0x108>
 8006de4:	9a01      	ldr	r2, [sp, #4]
 8006de6:	50a9      	str	r1, [r5, r2]
 8006de8:	3504      	adds	r5, #4
 8006dea:	e79a      	b.n	8006d22 <__multiply+0x7a>
 8006dec:	3e01      	subs	r6, #1
 8006dee:	e79c      	b.n	8006d2a <__multiply+0x82>
 8006df0:	08007d86 	.word	0x08007d86
 8006df4:	08007d97 	.word	0x08007d97

08006df8 <__pow5mult>:
 8006df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dfc:	4615      	mov	r5, r2
 8006dfe:	f012 0203 	ands.w	r2, r2, #3
 8006e02:	4606      	mov	r6, r0
 8006e04:	460f      	mov	r7, r1
 8006e06:	d007      	beq.n	8006e18 <__pow5mult+0x20>
 8006e08:	4c25      	ldr	r4, [pc, #148]	; (8006ea0 <__pow5mult+0xa8>)
 8006e0a:	3a01      	subs	r2, #1
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e12:	f7ff fe9f 	bl	8006b54 <__multadd>
 8006e16:	4607      	mov	r7, r0
 8006e18:	10ad      	asrs	r5, r5, #2
 8006e1a:	d03d      	beq.n	8006e98 <__pow5mult+0xa0>
 8006e1c:	69f4      	ldr	r4, [r6, #28]
 8006e1e:	b97c      	cbnz	r4, 8006e40 <__pow5mult+0x48>
 8006e20:	2010      	movs	r0, #16
 8006e22:	f7ff fd81 	bl	8006928 <malloc>
 8006e26:	4602      	mov	r2, r0
 8006e28:	61f0      	str	r0, [r6, #28]
 8006e2a:	b928      	cbnz	r0, 8006e38 <__pow5mult+0x40>
 8006e2c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006e30:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <__pow5mult+0xac>)
 8006e32:	481d      	ldr	r0, [pc, #116]	; (8006ea8 <__pow5mult+0xb0>)
 8006e34:	f000 fbde 	bl	80075f4 <__assert_func>
 8006e38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e3c:	6004      	str	r4, [r0, #0]
 8006e3e:	60c4      	str	r4, [r0, #12]
 8006e40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006e44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e48:	b94c      	cbnz	r4, 8006e5e <__pow5mult+0x66>
 8006e4a:	f240 2171 	movw	r1, #625	; 0x271
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f7ff ff14 	bl	8006c7c <__i2b>
 8006e54:	2300      	movs	r3, #0
 8006e56:	4604      	mov	r4, r0
 8006e58:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e5c:	6003      	str	r3, [r0, #0]
 8006e5e:	f04f 0900 	mov.w	r9, #0
 8006e62:	07eb      	lsls	r3, r5, #31
 8006e64:	d50a      	bpl.n	8006e7c <__pow5mult+0x84>
 8006e66:	4639      	mov	r1, r7
 8006e68:	4622      	mov	r2, r4
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	f7ff ff1c 	bl	8006ca8 <__multiply>
 8006e70:	4680      	mov	r8, r0
 8006e72:	4639      	mov	r1, r7
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7ff fe4b 	bl	8006b10 <_Bfree>
 8006e7a:	4647      	mov	r7, r8
 8006e7c:	106d      	asrs	r5, r5, #1
 8006e7e:	d00b      	beq.n	8006e98 <__pow5mult+0xa0>
 8006e80:	6820      	ldr	r0, [r4, #0]
 8006e82:	b938      	cbnz	r0, 8006e94 <__pow5mult+0x9c>
 8006e84:	4622      	mov	r2, r4
 8006e86:	4621      	mov	r1, r4
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f7ff ff0d 	bl	8006ca8 <__multiply>
 8006e8e:	6020      	str	r0, [r4, #0]
 8006e90:	f8c0 9000 	str.w	r9, [r0]
 8006e94:	4604      	mov	r4, r0
 8006e96:	e7e4      	b.n	8006e62 <__pow5mult+0x6a>
 8006e98:	4638      	mov	r0, r7
 8006e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e9e:	bf00      	nop
 8006ea0:	08007ee0 	.word	0x08007ee0
 8006ea4:	08007d17 	.word	0x08007d17
 8006ea8:	08007d97 	.word	0x08007d97

08006eac <__lshift>:
 8006eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	4607      	mov	r7, r0
 8006eb4:	4691      	mov	r9, r2
 8006eb6:	6923      	ldr	r3, [r4, #16]
 8006eb8:	6849      	ldr	r1, [r1, #4]
 8006eba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ebe:	68a3      	ldr	r3, [r4, #8]
 8006ec0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ec4:	f108 0601 	add.w	r6, r8, #1
 8006ec8:	42b3      	cmp	r3, r6
 8006eca:	db0b      	blt.n	8006ee4 <__lshift+0x38>
 8006ecc:	4638      	mov	r0, r7
 8006ece:	f7ff fddf 	bl	8006a90 <_Balloc>
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	b948      	cbnz	r0, 8006eea <__lshift+0x3e>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006edc:	4b27      	ldr	r3, [pc, #156]	; (8006f7c <__lshift+0xd0>)
 8006ede:	4828      	ldr	r0, [pc, #160]	; (8006f80 <__lshift+0xd4>)
 8006ee0:	f000 fb88 	bl	80075f4 <__assert_func>
 8006ee4:	3101      	adds	r1, #1
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	e7ee      	b.n	8006ec8 <__lshift+0x1c>
 8006eea:	2300      	movs	r3, #0
 8006eec:	f100 0114 	add.w	r1, r0, #20
 8006ef0:	f100 0210 	add.w	r2, r0, #16
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	4553      	cmp	r3, sl
 8006ef8:	db33      	blt.n	8006f62 <__lshift+0xb6>
 8006efa:	6920      	ldr	r0, [r4, #16]
 8006efc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f00:	f104 0314 	add.w	r3, r4, #20
 8006f04:	f019 091f 	ands.w	r9, r9, #31
 8006f08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f10:	d02b      	beq.n	8006f6a <__lshift+0xbe>
 8006f12:	468a      	mov	sl, r1
 8006f14:	2200      	movs	r2, #0
 8006f16:	f1c9 0e20 	rsb	lr, r9, #32
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	fa00 f009 	lsl.w	r0, r0, r9
 8006f20:	4310      	orrs	r0, r2
 8006f22:	f84a 0b04 	str.w	r0, [sl], #4
 8006f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f2a:	459c      	cmp	ip, r3
 8006f2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f30:	d8f3      	bhi.n	8006f1a <__lshift+0x6e>
 8006f32:	ebac 0304 	sub.w	r3, ip, r4
 8006f36:	3b15      	subs	r3, #21
 8006f38:	f023 0303 	bic.w	r3, r3, #3
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	f104 0015 	add.w	r0, r4, #21
 8006f42:	4584      	cmp	ip, r0
 8006f44:	bf38      	it	cc
 8006f46:	2304      	movcc	r3, #4
 8006f48:	50ca      	str	r2, [r1, r3]
 8006f4a:	b10a      	cbz	r2, 8006f50 <__lshift+0xa4>
 8006f4c:	f108 0602 	add.w	r6, r8, #2
 8006f50:	3e01      	subs	r6, #1
 8006f52:	4638      	mov	r0, r7
 8006f54:	4621      	mov	r1, r4
 8006f56:	612e      	str	r6, [r5, #16]
 8006f58:	f7ff fdda 	bl	8006b10 <_Bfree>
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f62:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f66:	3301      	adds	r3, #1
 8006f68:	e7c5      	b.n	8006ef6 <__lshift+0x4a>
 8006f6a:	3904      	subs	r1, #4
 8006f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f70:	459c      	cmp	ip, r3
 8006f72:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f76:	d8f9      	bhi.n	8006f6c <__lshift+0xc0>
 8006f78:	e7ea      	b.n	8006f50 <__lshift+0xa4>
 8006f7a:	bf00      	nop
 8006f7c:	08007d86 	.word	0x08007d86
 8006f80:	08007d97 	.word	0x08007d97

08006f84 <__mcmp>:
 8006f84:	4603      	mov	r3, r0
 8006f86:	690a      	ldr	r2, [r1, #16]
 8006f88:	6900      	ldr	r0, [r0, #16]
 8006f8a:	b530      	push	{r4, r5, lr}
 8006f8c:	1a80      	subs	r0, r0, r2
 8006f8e:	d10d      	bne.n	8006fac <__mcmp+0x28>
 8006f90:	3314      	adds	r3, #20
 8006f92:	3114      	adds	r1, #20
 8006f94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006fa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006fa4:	4295      	cmp	r5, r2
 8006fa6:	d002      	beq.n	8006fae <__mcmp+0x2a>
 8006fa8:	d304      	bcc.n	8006fb4 <__mcmp+0x30>
 8006faa:	2001      	movs	r0, #1
 8006fac:	bd30      	pop	{r4, r5, pc}
 8006fae:	42a3      	cmp	r3, r4
 8006fb0:	d3f4      	bcc.n	8006f9c <__mcmp+0x18>
 8006fb2:	e7fb      	b.n	8006fac <__mcmp+0x28>
 8006fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb8:	e7f8      	b.n	8006fac <__mcmp+0x28>
	...

08006fbc <__mdiff>:
 8006fbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc0:	460d      	mov	r5, r1
 8006fc2:	4607      	mov	r7, r0
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	4614      	mov	r4, r2
 8006fca:	f7ff ffdb 	bl	8006f84 <__mcmp>
 8006fce:	1e06      	subs	r6, r0, #0
 8006fd0:	d111      	bne.n	8006ff6 <__mdiff+0x3a>
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	f7ff fd5b 	bl	8006a90 <_Balloc>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	b928      	cbnz	r0, 8006fea <__mdiff+0x2e>
 8006fde:	f240 2137 	movw	r1, #567	; 0x237
 8006fe2:	4b3a      	ldr	r3, [pc, #232]	; (80070cc <__mdiff+0x110>)
 8006fe4:	483a      	ldr	r0, [pc, #232]	; (80070d0 <__mdiff+0x114>)
 8006fe6:	f000 fb05 	bl	80075f4 <__assert_func>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff6:	bfa4      	itt	ge
 8006ff8:	4623      	movge	r3, r4
 8006ffa:	462c      	movge	r4, r5
 8006ffc:	4638      	mov	r0, r7
 8006ffe:	6861      	ldr	r1, [r4, #4]
 8007000:	bfa6      	itte	ge
 8007002:	461d      	movge	r5, r3
 8007004:	2600      	movge	r6, #0
 8007006:	2601      	movlt	r6, #1
 8007008:	f7ff fd42 	bl	8006a90 <_Balloc>
 800700c:	4602      	mov	r2, r0
 800700e:	b918      	cbnz	r0, 8007018 <__mdiff+0x5c>
 8007010:	f240 2145 	movw	r1, #581	; 0x245
 8007014:	4b2d      	ldr	r3, [pc, #180]	; (80070cc <__mdiff+0x110>)
 8007016:	e7e5      	b.n	8006fe4 <__mdiff+0x28>
 8007018:	f102 0814 	add.w	r8, r2, #20
 800701c:	46c2      	mov	sl, r8
 800701e:	f04f 0c00 	mov.w	ip, #0
 8007022:	6927      	ldr	r7, [r4, #16]
 8007024:	60c6      	str	r6, [r0, #12]
 8007026:	692e      	ldr	r6, [r5, #16]
 8007028:	f104 0014 	add.w	r0, r4, #20
 800702c:	f105 0914 	add.w	r9, r5, #20
 8007030:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007034:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007038:	3410      	adds	r4, #16
 800703a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800703e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007042:	fa1f f18b 	uxth.w	r1, fp
 8007046:	4461      	add	r1, ip
 8007048:	fa1f fc83 	uxth.w	ip, r3
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	eba1 010c 	sub.w	r1, r1, ip
 8007052:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007056:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800705a:	b289      	uxth	r1, r1
 800705c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007060:	454e      	cmp	r6, r9
 8007062:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007066:	f84a 1b04 	str.w	r1, [sl], #4
 800706a:	d8e6      	bhi.n	800703a <__mdiff+0x7e>
 800706c:	1b73      	subs	r3, r6, r5
 800706e:	3b15      	subs	r3, #21
 8007070:	f023 0303 	bic.w	r3, r3, #3
 8007074:	3515      	adds	r5, #21
 8007076:	3304      	adds	r3, #4
 8007078:	42ae      	cmp	r6, r5
 800707a:	bf38      	it	cc
 800707c:	2304      	movcc	r3, #4
 800707e:	4418      	add	r0, r3
 8007080:	4443      	add	r3, r8
 8007082:	461e      	mov	r6, r3
 8007084:	4605      	mov	r5, r0
 8007086:	4575      	cmp	r5, lr
 8007088:	d30e      	bcc.n	80070a8 <__mdiff+0xec>
 800708a:	f10e 0103 	add.w	r1, lr, #3
 800708e:	1a09      	subs	r1, r1, r0
 8007090:	f021 0103 	bic.w	r1, r1, #3
 8007094:	3803      	subs	r0, #3
 8007096:	4586      	cmp	lr, r0
 8007098:	bf38      	it	cc
 800709a:	2100      	movcc	r1, #0
 800709c:	440b      	add	r3, r1
 800709e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80070a2:	b189      	cbz	r1, 80070c8 <__mdiff+0x10c>
 80070a4:	6117      	str	r7, [r2, #16]
 80070a6:	e7a3      	b.n	8006ff0 <__mdiff+0x34>
 80070a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80070ac:	fa1f f188 	uxth.w	r1, r8
 80070b0:	4461      	add	r1, ip
 80070b2:	140c      	asrs	r4, r1, #16
 80070b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80070b8:	b289      	uxth	r1, r1
 80070ba:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80070be:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80070c2:	f846 1b04 	str.w	r1, [r6], #4
 80070c6:	e7de      	b.n	8007086 <__mdiff+0xca>
 80070c8:	3f01      	subs	r7, #1
 80070ca:	e7e8      	b.n	800709e <__mdiff+0xe2>
 80070cc:	08007d86 	.word	0x08007d86
 80070d0:	08007d97 	.word	0x08007d97

080070d4 <__d2b>:
 80070d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070d6:	2101      	movs	r1, #1
 80070d8:	4617      	mov	r7, r2
 80070da:	461c      	mov	r4, r3
 80070dc:	9e08      	ldr	r6, [sp, #32]
 80070de:	f7ff fcd7 	bl	8006a90 <_Balloc>
 80070e2:	4605      	mov	r5, r0
 80070e4:	b930      	cbnz	r0, 80070f4 <__d2b+0x20>
 80070e6:	4602      	mov	r2, r0
 80070e8:	f240 310f 	movw	r1, #783	; 0x30f
 80070ec:	4b22      	ldr	r3, [pc, #136]	; (8007178 <__d2b+0xa4>)
 80070ee:	4823      	ldr	r0, [pc, #140]	; (800717c <__d2b+0xa8>)
 80070f0:	f000 fa80 	bl	80075f4 <__assert_func>
 80070f4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80070f8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80070fc:	bb24      	cbnz	r4, 8007148 <__d2b+0x74>
 80070fe:	2f00      	cmp	r7, #0
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	d026      	beq.n	8007152 <__d2b+0x7e>
 8007104:	4668      	mov	r0, sp
 8007106:	9700      	str	r7, [sp, #0]
 8007108:	f7ff fd8a 	bl	8006c20 <__lo0bits>
 800710c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007110:	b1e8      	cbz	r0, 800714e <__d2b+0x7a>
 8007112:	f1c0 0320 	rsb	r3, r0, #32
 8007116:	fa02 f303 	lsl.w	r3, r2, r3
 800711a:	430b      	orrs	r3, r1
 800711c:	40c2      	lsrs	r2, r0
 800711e:	616b      	str	r3, [r5, #20]
 8007120:	9201      	str	r2, [sp, #4]
 8007122:	9b01      	ldr	r3, [sp, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	bf14      	ite	ne
 8007128:	2102      	movne	r1, #2
 800712a:	2101      	moveq	r1, #1
 800712c:	61ab      	str	r3, [r5, #24]
 800712e:	6129      	str	r1, [r5, #16]
 8007130:	b1bc      	cbz	r4, 8007162 <__d2b+0x8e>
 8007132:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007136:	4404      	add	r4, r0
 8007138:	6034      	str	r4, [r6, #0]
 800713a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800713e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007140:	6018      	str	r0, [r3, #0]
 8007142:	4628      	mov	r0, r5
 8007144:	b003      	add	sp, #12
 8007146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800714c:	e7d7      	b.n	80070fe <__d2b+0x2a>
 800714e:	6169      	str	r1, [r5, #20]
 8007150:	e7e7      	b.n	8007122 <__d2b+0x4e>
 8007152:	a801      	add	r0, sp, #4
 8007154:	f7ff fd64 	bl	8006c20 <__lo0bits>
 8007158:	9b01      	ldr	r3, [sp, #4]
 800715a:	2101      	movs	r1, #1
 800715c:	616b      	str	r3, [r5, #20]
 800715e:	3020      	adds	r0, #32
 8007160:	e7e5      	b.n	800712e <__d2b+0x5a>
 8007162:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007166:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800716a:	6030      	str	r0, [r6, #0]
 800716c:	6918      	ldr	r0, [r3, #16]
 800716e:	f7ff fd37 	bl	8006be0 <__hi0bits>
 8007172:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007176:	e7e2      	b.n	800713e <__d2b+0x6a>
 8007178:	08007d86 	.word	0x08007d86
 800717c:	08007d97 	.word	0x08007d97

08007180 <__ssputs_r>:
 8007180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007184:	461f      	mov	r7, r3
 8007186:	688e      	ldr	r6, [r1, #8]
 8007188:	4682      	mov	sl, r0
 800718a:	42be      	cmp	r6, r7
 800718c:	460c      	mov	r4, r1
 800718e:	4690      	mov	r8, r2
 8007190:	680b      	ldr	r3, [r1, #0]
 8007192:	d82c      	bhi.n	80071ee <__ssputs_r+0x6e>
 8007194:	898a      	ldrh	r2, [r1, #12]
 8007196:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800719a:	d026      	beq.n	80071ea <__ssputs_r+0x6a>
 800719c:	6965      	ldr	r5, [r4, #20]
 800719e:	6909      	ldr	r1, [r1, #16]
 80071a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071a4:	eba3 0901 	sub.w	r9, r3, r1
 80071a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071ac:	1c7b      	adds	r3, r7, #1
 80071ae:	444b      	add	r3, r9
 80071b0:	106d      	asrs	r5, r5, #1
 80071b2:	429d      	cmp	r5, r3
 80071b4:	bf38      	it	cc
 80071b6:	461d      	movcc	r5, r3
 80071b8:	0553      	lsls	r3, r2, #21
 80071ba:	d527      	bpl.n	800720c <__ssputs_r+0x8c>
 80071bc:	4629      	mov	r1, r5
 80071be:	f7ff fbdb 	bl	8006978 <_malloc_r>
 80071c2:	4606      	mov	r6, r0
 80071c4:	b360      	cbz	r0, 8007220 <__ssputs_r+0xa0>
 80071c6:	464a      	mov	r2, r9
 80071c8:	6921      	ldr	r1, [r4, #16]
 80071ca:	f000 fa05 	bl	80075d8 <memcpy>
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d8:	81a3      	strh	r3, [r4, #12]
 80071da:	6126      	str	r6, [r4, #16]
 80071dc:	444e      	add	r6, r9
 80071de:	6026      	str	r6, [r4, #0]
 80071e0:	463e      	mov	r6, r7
 80071e2:	6165      	str	r5, [r4, #20]
 80071e4:	eba5 0509 	sub.w	r5, r5, r9
 80071e8:	60a5      	str	r5, [r4, #8]
 80071ea:	42be      	cmp	r6, r7
 80071ec:	d900      	bls.n	80071f0 <__ssputs_r+0x70>
 80071ee:	463e      	mov	r6, r7
 80071f0:	4632      	mov	r2, r6
 80071f2:	4641      	mov	r1, r8
 80071f4:	6820      	ldr	r0, [r4, #0]
 80071f6:	f000 f9c5 	bl	8007584 <memmove>
 80071fa:	2000      	movs	r0, #0
 80071fc:	68a3      	ldr	r3, [r4, #8]
 80071fe:	1b9b      	subs	r3, r3, r6
 8007200:	60a3      	str	r3, [r4, #8]
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	4433      	add	r3, r6
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720c:	462a      	mov	r2, r5
 800720e:	f000 fa35 	bl	800767c <_realloc_r>
 8007212:	4606      	mov	r6, r0
 8007214:	2800      	cmp	r0, #0
 8007216:	d1e0      	bne.n	80071da <__ssputs_r+0x5a>
 8007218:	4650      	mov	r0, sl
 800721a:	6921      	ldr	r1, [r4, #16]
 800721c:	f7ff fb3c 	bl	8006898 <_free_r>
 8007220:	230c      	movs	r3, #12
 8007222:	f8ca 3000 	str.w	r3, [sl]
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	f04f 30ff 	mov.w	r0, #4294967295
 800722c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007230:	81a3      	strh	r3, [r4, #12]
 8007232:	e7e9      	b.n	8007208 <__ssputs_r+0x88>

08007234 <_svfiprintf_r>:
 8007234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	4698      	mov	r8, r3
 800723a:	898b      	ldrh	r3, [r1, #12]
 800723c:	4607      	mov	r7, r0
 800723e:	061b      	lsls	r3, r3, #24
 8007240:	460d      	mov	r5, r1
 8007242:	4614      	mov	r4, r2
 8007244:	b09d      	sub	sp, #116	; 0x74
 8007246:	d50e      	bpl.n	8007266 <_svfiprintf_r+0x32>
 8007248:	690b      	ldr	r3, [r1, #16]
 800724a:	b963      	cbnz	r3, 8007266 <_svfiprintf_r+0x32>
 800724c:	2140      	movs	r1, #64	; 0x40
 800724e:	f7ff fb93 	bl	8006978 <_malloc_r>
 8007252:	6028      	str	r0, [r5, #0]
 8007254:	6128      	str	r0, [r5, #16]
 8007256:	b920      	cbnz	r0, 8007262 <_svfiprintf_r+0x2e>
 8007258:	230c      	movs	r3, #12
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	f04f 30ff 	mov.w	r0, #4294967295
 8007260:	e0d0      	b.n	8007404 <_svfiprintf_r+0x1d0>
 8007262:	2340      	movs	r3, #64	; 0x40
 8007264:	616b      	str	r3, [r5, #20]
 8007266:	2300      	movs	r3, #0
 8007268:	9309      	str	r3, [sp, #36]	; 0x24
 800726a:	2320      	movs	r3, #32
 800726c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007270:	2330      	movs	r3, #48	; 0x30
 8007272:	f04f 0901 	mov.w	r9, #1
 8007276:	f8cd 800c 	str.w	r8, [sp, #12]
 800727a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800741c <_svfiprintf_r+0x1e8>
 800727e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007282:	4623      	mov	r3, r4
 8007284:	469a      	mov	sl, r3
 8007286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800728a:	b10a      	cbz	r2, 8007290 <_svfiprintf_r+0x5c>
 800728c:	2a25      	cmp	r2, #37	; 0x25
 800728e:	d1f9      	bne.n	8007284 <_svfiprintf_r+0x50>
 8007290:	ebba 0b04 	subs.w	fp, sl, r4
 8007294:	d00b      	beq.n	80072ae <_svfiprintf_r+0x7a>
 8007296:	465b      	mov	r3, fp
 8007298:	4622      	mov	r2, r4
 800729a:	4629      	mov	r1, r5
 800729c:	4638      	mov	r0, r7
 800729e:	f7ff ff6f 	bl	8007180 <__ssputs_r>
 80072a2:	3001      	adds	r0, #1
 80072a4:	f000 80a9 	beq.w	80073fa <_svfiprintf_r+0x1c6>
 80072a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072aa:	445a      	add	r2, fp
 80072ac:	9209      	str	r2, [sp, #36]	; 0x24
 80072ae:	f89a 3000 	ldrb.w	r3, [sl]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80a1 	beq.w	80073fa <_svfiprintf_r+0x1c6>
 80072b8:	2300      	movs	r3, #0
 80072ba:	f04f 32ff 	mov.w	r2, #4294967295
 80072be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072c2:	f10a 0a01 	add.w	sl, sl, #1
 80072c6:	9304      	str	r3, [sp, #16]
 80072c8:	9307      	str	r3, [sp, #28]
 80072ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072ce:	931a      	str	r3, [sp, #104]	; 0x68
 80072d0:	4654      	mov	r4, sl
 80072d2:	2205      	movs	r2, #5
 80072d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d8:	4850      	ldr	r0, [pc, #320]	; (800741c <_svfiprintf_r+0x1e8>)
 80072da:	f7fe fc62 	bl	8005ba2 <memchr>
 80072de:	9a04      	ldr	r2, [sp, #16]
 80072e0:	b9d8      	cbnz	r0, 800731a <_svfiprintf_r+0xe6>
 80072e2:	06d0      	lsls	r0, r2, #27
 80072e4:	bf44      	itt	mi
 80072e6:	2320      	movmi	r3, #32
 80072e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ec:	0711      	lsls	r1, r2, #28
 80072ee:	bf44      	itt	mi
 80072f0:	232b      	movmi	r3, #43	; 0x2b
 80072f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072f6:	f89a 3000 	ldrb.w	r3, [sl]
 80072fa:	2b2a      	cmp	r3, #42	; 0x2a
 80072fc:	d015      	beq.n	800732a <_svfiprintf_r+0xf6>
 80072fe:	4654      	mov	r4, sl
 8007300:	2000      	movs	r0, #0
 8007302:	f04f 0c0a 	mov.w	ip, #10
 8007306:	9a07      	ldr	r2, [sp, #28]
 8007308:	4621      	mov	r1, r4
 800730a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800730e:	3b30      	subs	r3, #48	; 0x30
 8007310:	2b09      	cmp	r3, #9
 8007312:	d94d      	bls.n	80073b0 <_svfiprintf_r+0x17c>
 8007314:	b1b0      	cbz	r0, 8007344 <_svfiprintf_r+0x110>
 8007316:	9207      	str	r2, [sp, #28]
 8007318:	e014      	b.n	8007344 <_svfiprintf_r+0x110>
 800731a:	eba0 0308 	sub.w	r3, r0, r8
 800731e:	fa09 f303 	lsl.w	r3, r9, r3
 8007322:	4313      	orrs	r3, r2
 8007324:	46a2      	mov	sl, r4
 8007326:	9304      	str	r3, [sp, #16]
 8007328:	e7d2      	b.n	80072d0 <_svfiprintf_r+0x9c>
 800732a:	9b03      	ldr	r3, [sp, #12]
 800732c:	1d19      	adds	r1, r3, #4
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	9103      	str	r1, [sp, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	bfbb      	ittet	lt
 8007336:	425b      	neglt	r3, r3
 8007338:	f042 0202 	orrlt.w	r2, r2, #2
 800733c:	9307      	strge	r3, [sp, #28]
 800733e:	9307      	strlt	r3, [sp, #28]
 8007340:	bfb8      	it	lt
 8007342:	9204      	strlt	r2, [sp, #16]
 8007344:	7823      	ldrb	r3, [r4, #0]
 8007346:	2b2e      	cmp	r3, #46	; 0x2e
 8007348:	d10c      	bne.n	8007364 <_svfiprintf_r+0x130>
 800734a:	7863      	ldrb	r3, [r4, #1]
 800734c:	2b2a      	cmp	r3, #42	; 0x2a
 800734e:	d134      	bne.n	80073ba <_svfiprintf_r+0x186>
 8007350:	9b03      	ldr	r3, [sp, #12]
 8007352:	3402      	adds	r4, #2
 8007354:	1d1a      	adds	r2, r3, #4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	9203      	str	r2, [sp, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	bfb8      	it	lt
 800735e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007362:	9305      	str	r3, [sp, #20]
 8007364:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007420 <_svfiprintf_r+0x1ec>
 8007368:	2203      	movs	r2, #3
 800736a:	4650      	mov	r0, sl
 800736c:	7821      	ldrb	r1, [r4, #0]
 800736e:	f7fe fc18 	bl	8005ba2 <memchr>
 8007372:	b138      	cbz	r0, 8007384 <_svfiprintf_r+0x150>
 8007374:	2240      	movs	r2, #64	; 0x40
 8007376:	9b04      	ldr	r3, [sp, #16]
 8007378:	eba0 000a 	sub.w	r0, r0, sl
 800737c:	4082      	lsls	r2, r0
 800737e:	4313      	orrs	r3, r2
 8007380:	3401      	adds	r4, #1
 8007382:	9304      	str	r3, [sp, #16]
 8007384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007388:	2206      	movs	r2, #6
 800738a:	4826      	ldr	r0, [pc, #152]	; (8007424 <_svfiprintf_r+0x1f0>)
 800738c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007390:	f7fe fc07 	bl	8005ba2 <memchr>
 8007394:	2800      	cmp	r0, #0
 8007396:	d038      	beq.n	800740a <_svfiprintf_r+0x1d6>
 8007398:	4b23      	ldr	r3, [pc, #140]	; (8007428 <_svfiprintf_r+0x1f4>)
 800739a:	bb1b      	cbnz	r3, 80073e4 <_svfiprintf_r+0x1b0>
 800739c:	9b03      	ldr	r3, [sp, #12]
 800739e:	3307      	adds	r3, #7
 80073a0:	f023 0307 	bic.w	r3, r3, #7
 80073a4:	3308      	adds	r3, #8
 80073a6:	9303      	str	r3, [sp, #12]
 80073a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073aa:	4433      	add	r3, r6
 80073ac:	9309      	str	r3, [sp, #36]	; 0x24
 80073ae:	e768      	b.n	8007282 <_svfiprintf_r+0x4e>
 80073b0:	460c      	mov	r4, r1
 80073b2:	2001      	movs	r0, #1
 80073b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80073b8:	e7a6      	b.n	8007308 <_svfiprintf_r+0xd4>
 80073ba:	2300      	movs	r3, #0
 80073bc:	f04f 0c0a 	mov.w	ip, #10
 80073c0:	4619      	mov	r1, r3
 80073c2:	3401      	adds	r4, #1
 80073c4:	9305      	str	r3, [sp, #20]
 80073c6:	4620      	mov	r0, r4
 80073c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073cc:	3a30      	subs	r2, #48	; 0x30
 80073ce:	2a09      	cmp	r2, #9
 80073d0:	d903      	bls.n	80073da <_svfiprintf_r+0x1a6>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d0c6      	beq.n	8007364 <_svfiprintf_r+0x130>
 80073d6:	9105      	str	r1, [sp, #20]
 80073d8:	e7c4      	b.n	8007364 <_svfiprintf_r+0x130>
 80073da:	4604      	mov	r4, r0
 80073dc:	2301      	movs	r3, #1
 80073de:	fb0c 2101 	mla	r1, ip, r1, r2
 80073e2:	e7f0      	b.n	80073c6 <_svfiprintf_r+0x192>
 80073e4:	ab03      	add	r3, sp, #12
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	462a      	mov	r2, r5
 80073ea:	4638      	mov	r0, r7
 80073ec:	4b0f      	ldr	r3, [pc, #60]	; (800742c <_svfiprintf_r+0x1f8>)
 80073ee:	a904      	add	r1, sp, #16
 80073f0:	f7fd fe5c 	bl	80050ac <_printf_float>
 80073f4:	1c42      	adds	r2, r0, #1
 80073f6:	4606      	mov	r6, r0
 80073f8:	d1d6      	bne.n	80073a8 <_svfiprintf_r+0x174>
 80073fa:	89ab      	ldrh	r3, [r5, #12]
 80073fc:	065b      	lsls	r3, r3, #25
 80073fe:	f53f af2d 	bmi.w	800725c <_svfiprintf_r+0x28>
 8007402:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007404:	b01d      	add	sp, #116	; 0x74
 8007406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740a:	ab03      	add	r3, sp, #12
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	462a      	mov	r2, r5
 8007410:	4638      	mov	r0, r7
 8007412:	4b06      	ldr	r3, [pc, #24]	; (800742c <_svfiprintf_r+0x1f8>)
 8007414:	a904      	add	r1, sp, #16
 8007416:	f7fe f8e9 	bl	80055ec <_printf_i>
 800741a:	e7eb      	b.n	80073f4 <_svfiprintf_r+0x1c0>
 800741c:	08007eec 	.word	0x08007eec
 8007420:	08007ef2 	.word	0x08007ef2
 8007424:	08007ef6 	.word	0x08007ef6
 8007428:	080050ad 	.word	0x080050ad
 800742c:	08007181 	.word	0x08007181

08007430 <__sflush_r>:
 8007430:	898a      	ldrh	r2, [r1, #12]
 8007432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007434:	4605      	mov	r5, r0
 8007436:	0710      	lsls	r0, r2, #28
 8007438:	460c      	mov	r4, r1
 800743a:	d457      	bmi.n	80074ec <__sflush_r+0xbc>
 800743c:	684b      	ldr	r3, [r1, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	dc04      	bgt.n	800744c <__sflush_r+0x1c>
 8007442:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007444:	2b00      	cmp	r3, #0
 8007446:	dc01      	bgt.n	800744c <__sflush_r+0x1c>
 8007448:	2000      	movs	r0, #0
 800744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800744c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800744e:	2e00      	cmp	r6, #0
 8007450:	d0fa      	beq.n	8007448 <__sflush_r+0x18>
 8007452:	2300      	movs	r3, #0
 8007454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007458:	682f      	ldr	r7, [r5, #0]
 800745a:	6a21      	ldr	r1, [r4, #32]
 800745c:	602b      	str	r3, [r5, #0]
 800745e:	d032      	beq.n	80074c6 <__sflush_r+0x96>
 8007460:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	075a      	lsls	r2, r3, #29
 8007466:	d505      	bpl.n	8007474 <__sflush_r+0x44>
 8007468:	6863      	ldr	r3, [r4, #4]
 800746a:	1ac0      	subs	r0, r0, r3
 800746c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800746e:	b10b      	cbz	r3, 8007474 <__sflush_r+0x44>
 8007470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007472:	1ac0      	subs	r0, r0, r3
 8007474:	2300      	movs	r3, #0
 8007476:	4602      	mov	r2, r0
 8007478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800747a:	4628      	mov	r0, r5
 800747c:	6a21      	ldr	r1, [r4, #32]
 800747e:	47b0      	blx	r6
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	d106      	bne.n	8007494 <__sflush_r+0x64>
 8007486:	6829      	ldr	r1, [r5, #0]
 8007488:	291d      	cmp	r1, #29
 800748a:	d82b      	bhi.n	80074e4 <__sflush_r+0xb4>
 800748c:	4a28      	ldr	r2, [pc, #160]	; (8007530 <__sflush_r+0x100>)
 800748e:	410a      	asrs	r2, r1
 8007490:	07d6      	lsls	r6, r2, #31
 8007492:	d427      	bmi.n	80074e4 <__sflush_r+0xb4>
 8007494:	2200      	movs	r2, #0
 8007496:	6062      	str	r2, [r4, #4]
 8007498:	6922      	ldr	r2, [r4, #16]
 800749a:	04d9      	lsls	r1, r3, #19
 800749c:	6022      	str	r2, [r4, #0]
 800749e:	d504      	bpl.n	80074aa <__sflush_r+0x7a>
 80074a0:	1c42      	adds	r2, r0, #1
 80074a2:	d101      	bne.n	80074a8 <__sflush_r+0x78>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	b903      	cbnz	r3, 80074aa <__sflush_r+0x7a>
 80074a8:	6560      	str	r0, [r4, #84]	; 0x54
 80074aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074ac:	602f      	str	r7, [r5, #0]
 80074ae:	2900      	cmp	r1, #0
 80074b0:	d0ca      	beq.n	8007448 <__sflush_r+0x18>
 80074b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074b6:	4299      	cmp	r1, r3
 80074b8:	d002      	beq.n	80074c0 <__sflush_r+0x90>
 80074ba:	4628      	mov	r0, r5
 80074bc:	f7ff f9ec 	bl	8006898 <_free_r>
 80074c0:	2000      	movs	r0, #0
 80074c2:	6360      	str	r0, [r4, #52]	; 0x34
 80074c4:	e7c1      	b.n	800744a <__sflush_r+0x1a>
 80074c6:	2301      	movs	r3, #1
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b0      	blx	r6
 80074cc:	1c41      	adds	r1, r0, #1
 80074ce:	d1c8      	bne.n	8007462 <__sflush_r+0x32>
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0c5      	beq.n	8007462 <__sflush_r+0x32>
 80074d6:	2b1d      	cmp	r3, #29
 80074d8:	d001      	beq.n	80074de <__sflush_r+0xae>
 80074da:	2b16      	cmp	r3, #22
 80074dc:	d101      	bne.n	80074e2 <__sflush_r+0xb2>
 80074de:	602f      	str	r7, [r5, #0]
 80074e0:	e7b2      	b.n	8007448 <__sflush_r+0x18>
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e8:	81a3      	strh	r3, [r4, #12]
 80074ea:	e7ae      	b.n	800744a <__sflush_r+0x1a>
 80074ec:	690f      	ldr	r7, [r1, #16]
 80074ee:	2f00      	cmp	r7, #0
 80074f0:	d0aa      	beq.n	8007448 <__sflush_r+0x18>
 80074f2:	0793      	lsls	r3, r2, #30
 80074f4:	bf18      	it	ne
 80074f6:	2300      	movne	r3, #0
 80074f8:	680e      	ldr	r6, [r1, #0]
 80074fa:	bf08      	it	eq
 80074fc:	694b      	ldreq	r3, [r1, #20]
 80074fe:	1bf6      	subs	r6, r6, r7
 8007500:	600f      	str	r7, [r1, #0]
 8007502:	608b      	str	r3, [r1, #8]
 8007504:	2e00      	cmp	r6, #0
 8007506:	dd9f      	ble.n	8007448 <__sflush_r+0x18>
 8007508:	4633      	mov	r3, r6
 800750a:	463a      	mov	r2, r7
 800750c:	4628      	mov	r0, r5
 800750e:	6a21      	ldr	r1, [r4, #32]
 8007510:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007514:	47e0      	blx	ip
 8007516:	2800      	cmp	r0, #0
 8007518:	dc06      	bgt.n	8007528 <__sflush_r+0xf8>
 800751a:	89a3      	ldrh	r3, [r4, #12]
 800751c:	f04f 30ff 	mov.w	r0, #4294967295
 8007520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007524:	81a3      	strh	r3, [r4, #12]
 8007526:	e790      	b.n	800744a <__sflush_r+0x1a>
 8007528:	4407      	add	r7, r0
 800752a:	1a36      	subs	r6, r6, r0
 800752c:	e7ea      	b.n	8007504 <__sflush_r+0xd4>
 800752e:	bf00      	nop
 8007530:	dfbffffe 	.word	0xdfbffffe

08007534 <_fflush_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	690b      	ldr	r3, [r1, #16]
 8007538:	4605      	mov	r5, r0
 800753a:	460c      	mov	r4, r1
 800753c:	b913      	cbnz	r3, 8007544 <_fflush_r+0x10>
 800753e:	2500      	movs	r5, #0
 8007540:	4628      	mov	r0, r5
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	b118      	cbz	r0, 800754e <_fflush_r+0x1a>
 8007546:	6a03      	ldr	r3, [r0, #32]
 8007548:	b90b      	cbnz	r3, 800754e <_fflush_r+0x1a>
 800754a:	f7fe f9fd 	bl	8005948 <__sinit>
 800754e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0f3      	beq.n	800753e <_fflush_r+0xa>
 8007556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007558:	07d0      	lsls	r0, r2, #31
 800755a:	d404      	bmi.n	8007566 <_fflush_r+0x32>
 800755c:	0599      	lsls	r1, r3, #22
 800755e:	d402      	bmi.n	8007566 <_fflush_r+0x32>
 8007560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007562:	f7fe fb1c 	bl	8005b9e <__retarget_lock_acquire_recursive>
 8007566:	4628      	mov	r0, r5
 8007568:	4621      	mov	r1, r4
 800756a:	f7ff ff61 	bl	8007430 <__sflush_r>
 800756e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007570:	4605      	mov	r5, r0
 8007572:	07da      	lsls	r2, r3, #31
 8007574:	d4e4      	bmi.n	8007540 <_fflush_r+0xc>
 8007576:	89a3      	ldrh	r3, [r4, #12]
 8007578:	059b      	lsls	r3, r3, #22
 800757a:	d4e1      	bmi.n	8007540 <_fflush_r+0xc>
 800757c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800757e:	f7fe fb0f 	bl	8005ba0 <__retarget_lock_release_recursive>
 8007582:	e7dd      	b.n	8007540 <_fflush_r+0xc>

08007584 <memmove>:
 8007584:	4288      	cmp	r0, r1
 8007586:	b510      	push	{r4, lr}
 8007588:	eb01 0402 	add.w	r4, r1, r2
 800758c:	d902      	bls.n	8007594 <memmove+0x10>
 800758e:	4284      	cmp	r4, r0
 8007590:	4623      	mov	r3, r4
 8007592:	d807      	bhi.n	80075a4 <memmove+0x20>
 8007594:	1e43      	subs	r3, r0, #1
 8007596:	42a1      	cmp	r1, r4
 8007598:	d008      	beq.n	80075ac <memmove+0x28>
 800759a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800759e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075a2:	e7f8      	b.n	8007596 <memmove+0x12>
 80075a4:	4601      	mov	r1, r0
 80075a6:	4402      	add	r2, r0
 80075a8:	428a      	cmp	r2, r1
 80075aa:	d100      	bne.n	80075ae <memmove+0x2a>
 80075ac:	bd10      	pop	{r4, pc}
 80075ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075b6:	e7f7      	b.n	80075a8 <memmove+0x24>

080075b8 <_sbrk_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	2300      	movs	r3, #0
 80075bc:	4d05      	ldr	r5, [pc, #20]	; (80075d4 <_sbrk_r+0x1c>)
 80075be:	4604      	mov	r4, r0
 80075c0:	4608      	mov	r0, r1
 80075c2:	602b      	str	r3, [r5, #0]
 80075c4:	f7fa fb3e 	bl	8001c44 <_sbrk>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d102      	bne.n	80075d2 <_sbrk_r+0x1a>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	b103      	cbz	r3, 80075d2 <_sbrk_r+0x1a>
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	200004a4 	.word	0x200004a4

080075d8 <memcpy>:
 80075d8:	440a      	add	r2, r1
 80075da:	4291      	cmp	r1, r2
 80075dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80075e0:	d100      	bne.n	80075e4 <memcpy+0xc>
 80075e2:	4770      	bx	lr
 80075e4:	b510      	push	{r4, lr}
 80075e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ea:	4291      	cmp	r1, r2
 80075ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f0:	d1f9      	bne.n	80075e6 <memcpy+0xe>
 80075f2:	bd10      	pop	{r4, pc}

080075f4 <__assert_func>:
 80075f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075f6:	4614      	mov	r4, r2
 80075f8:	461a      	mov	r2, r3
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <__assert_func+0x2c>)
 80075fc:	4605      	mov	r5, r0
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68d8      	ldr	r0, [r3, #12]
 8007602:	b14c      	cbz	r4, 8007618 <__assert_func+0x24>
 8007604:	4b07      	ldr	r3, [pc, #28]	; (8007624 <__assert_func+0x30>)
 8007606:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800760a:	9100      	str	r1, [sp, #0]
 800760c:	462b      	mov	r3, r5
 800760e:	4906      	ldr	r1, [pc, #24]	; (8007628 <__assert_func+0x34>)
 8007610:	f000 f870 	bl	80076f4 <fiprintf>
 8007614:	f000 f880 	bl	8007718 <abort>
 8007618:	4b04      	ldr	r3, [pc, #16]	; (800762c <__assert_func+0x38>)
 800761a:	461c      	mov	r4, r3
 800761c:	e7f3      	b.n	8007606 <__assert_func+0x12>
 800761e:	bf00      	nop
 8007620:	2000008c 	.word	0x2000008c
 8007624:	08007f07 	.word	0x08007f07
 8007628:	08007f14 	.word	0x08007f14
 800762c:	08007f42 	.word	0x08007f42

08007630 <_calloc_r>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	fba1 5402 	umull	r5, r4, r1, r2
 8007636:	b934      	cbnz	r4, 8007646 <_calloc_r+0x16>
 8007638:	4629      	mov	r1, r5
 800763a:	f7ff f99d 	bl	8006978 <_malloc_r>
 800763e:	4606      	mov	r6, r0
 8007640:	b928      	cbnz	r0, 800764e <_calloc_r+0x1e>
 8007642:	4630      	mov	r0, r6
 8007644:	bd70      	pop	{r4, r5, r6, pc}
 8007646:	220c      	movs	r2, #12
 8007648:	2600      	movs	r6, #0
 800764a:	6002      	str	r2, [r0, #0]
 800764c:	e7f9      	b.n	8007642 <_calloc_r+0x12>
 800764e:	462a      	mov	r2, r5
 8007650:	4621      	mov	r1, r4
 8007652:	f7fe fa26 	bl	8005aa2 <memset>
 8007656:	e7f4      	b.n	8007642 <_calloc_r+0x12>

08007658 <__ascii_mbtowc>:
 8007658:	b082      	sub	sp, #8
 800765a:	b901      	cbnz	r1, 800765e <__ascii_mbtowc+0x6>
 800765c:	a901      	add	r1, sp, #4
 800765e:	b142      	cbz	r2, 8007672 <__ascii_mbtowc+0x1a>
 8007660:	b14b      	cbz	r3, 8007676 <__ascii_mbtowc+0x1e>
 8007662:	7813      	ldrb	r3, [r2, #0]
 8007664:	600b      	str	r3, [r1, #0]
 8007666:	7812      	ldrb	r2, [r2, #0]
 8007668:	1e10      	subs	r0, r2, #0
 800766a:	bf18      	it	ne
 800766c:	2001      	movne	r0, #1
 800766e:	b002      	add	sp, #8
 8007670:	4770      	bx	lr
 8007672:	4610      	mov	r0, r2
 8007674:	e7fb      	b.n	800766e <__ascii_mbtowc+0x16>
 8007676:	f06f 0001 	mvn.w	r0, #1
 800767a:	e7f8      	b.n	800766e <__ascii_mbtowc+0x16>

0800767c <_realloc_r>:
 800767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007680:	4680      	mov	r8, r0
 8007682:	4614      	mov	r4, r2
 8007684:	460e      	mov	r6, r1
 8007686:	b921      	cbnz	r1, 8007692 <_realloc_r+0x16>
 8007688:	4611      	mov	r1, r2
 800768a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800768e:	f7ff b973 	b.w	8006978 <_malloc_r>
 8007692:	b92a      	cbnz	r2, 80076a0 <_realloc_r+0x24>
 8007694:	f7ff f900 	bl	8006898 <_free_r>
 8007698:	4625      	mov	r5, r4
 800769a:	4628      	mov	r0, r5
 800769c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a0:	f000 f841 	bl	8007726 <_malloc_usable_size_r>
 80076a4:	4284      	cmp	r4, r0
 80076a6:	4607      	mov	r7, r0
 80076a8:	d802      	bhi.n	80076b0 <_realloc_r+0x34>
 80076aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076ae:	d812      	bhi.n	80076d6 <_realloc_r+0x5a>
 80076b0:	4621      	mov	r1, r4
 80076b2:	4640      	mov	r0, r8
 80076b4:	f7ff f960 	bl	8006978 <_malloc_r>
 80076b8:	4605      	mov	r5, r0
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d0ed      	beq.n	800769a <_realloc_r+0x1e>
 80076be:	42bc      	cmp	r4, r7
 80076c0:	4622      	mov	r2, r4
 80076c2:	4631      	mov	r1, r6
 80076c4:	bf28      	it	cs
 80076c6:	463a      	movcs	r2, r7
 80076c8:	f7ff ff86 	bl	80075d8 <memcpy>
 80076cc:	4631      	mov	r1, r6
 80076ce:	4640      	mov	r0, r8
 80076d0:	f7ff f8e2 	bl	8006898 <_free_r>
 80076d4:	e7e1      	b.n	800769a <_realloc_r+0x1e>
 80076d6:	4635      	mov	r5, r6
 80076d8:	e7df      	b.n	800769a <_realloc_r+0x1e>

080076da <__ascii_wctomb>:
 80076da:	4603      	mov	r3, r0
 80076dc:	4608      	mov	r0, r1
 80076de:	b141      	cbz	r1, 80076f2 <__ascii_wctomb+0x18>
 80076e0:	2aff      	cmp	r2, #255	; 0xff
 80076e2:	d904      	bls.n	80076ee <__ascii_wctomb+0x14>
 80076e4:	228a      	movs	r2, #138	; 0x8a
 80076e6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	4770      	bx	lr
 80076ee:	2001      	movs	r0, #1
 80076f0:	700a      	strb	r2, [r1, #0]
 80076f2:	4770      	bx	lr

080076f4 <fiprintf>:
 80076f4:	b40e      	push	{r1, r2, r3}
 80076f6:	b503      	push	{r0, r1, lr}
 80076f8:	4601      	mov	r1, r0
 80076fa:	ab03      	add	r3, sp, #12
 80076fc:	4805      	ldr	r0, [pc, #20]	; (8007714 <fiprintf+0x20>)
 80076fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007702:	6800      	ldr	r0, [r0, #0]
 8007704:	9301      	str	r3, [sp, #4]
 8007706:	f000 f83d 	bl	8007784 <_vfiprintf_r>
 800770a:	b002      	add	sp, #8
 800770c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007710:	b003      	add	sp, #12
 8007712:	4770      	bx	lr
 8007714:	2000008c 	.word	0x2000008c

08007718 <abort>:
 8007718:	2006      	movs	r0, #6
 800771a:	b508      	push	{r3, lr}
 800771c:	f000 fa0a 	bl	8007b34 <raise>
 8007720:	2001      	movs	r0, #1
 8007722:	f7fa fa1c 	bl	8001b5e <_exit>

08007726 <_malloc_usable_size_r>:
 8007726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800772a:	1f18      	subs	r0, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	bfbc      	itt	lt
 8007730:	580b      	ldrlt	r3, [r1, r0]
 8007732:	18c0      	addlt	r0, r0, r3
 8007734:	4770      	bx	lr

08007736 <__sfputc_r>:
 8007736:	6893      	ldr	r3, [r2, #8]
 8007738:	b410      	push	{r4}
 800773a:	3b01      	subs	r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	6093      	str	r3, [r2, #8]
 8007740:	da07      	bge.n	8007752 <__sfputc_r+0x1c>
 8007742:	6994      	ldr	r4, [r2, #24]
 8007744:	42a3      	cmp	r3, r4
 8007746:	db01      	blt.n	800774c <__sfputc_r+0x16>
 8007748:	290a      	cmp	r1, #10
 800774a:	d102      	bne.n	8007752 <__sfputc_r+0x1c>
 800774c:	bc10      	pop	{r4}
 800774e:	f000 b933 	b.w	80079b8 <__swbuf_r>
 8007752:	6813      	ldr	r3, [r2, #0]
 8007754:	1c58      	adds	r0, r3, #1
 8007756:	6010      	str	r0, [r2, #0]
 8007758:	7019      	strb	r1, [r3, #0]
 800775a:	4608      	mov	r0, r1
 800775c:	bc10      	pop	{r4}
 800775e:	4770      	bx	lr

08007760 <__sfputs_r>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	4606      	mov	r6, r0
 8007764:	460f      	mov	r7, r1
 8007766:	4614      	mov	r4, r2
 8007768:	18d5      	adds	r5, r2, r3
 800776a:	42ac      	cmp	r4, r5
 800776c:	d101      	bne.n	8007772 <__sfputs_r+0x12>
 800776e:	2000      	movs	r0, #0
 8007770:	e007      	b.n	8007782 <__sfputs_r+0x22>
 8007772:	463a      	mov	r2, r7
 8007774:	4630      	mov	r0, r6
 8007776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800777a:	f7ff ffdc 	bl	8007736 <__sfputc_r>
 800777e:	1c43      	adds	r3, r0, #1
 8007780:	d1f3      	bne.n	800776a <__sfputs_r+0xa>
 8007782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007784 <_vfiprintf_r>:
 8007784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007788:	460d      	mov	r5, r1
 800778a:	4614      	mov	r4, r2
 800778c:	4698      	mov	r8, r3
 800778e:	4606      	mov	r6, r0
 8007790:	b09d      	sub	sp, #116	; 0x74
 8007792:	b118      	cbz	r0, 800779c <_vfiprintf_r+0x18>
 8007794:	6a03      	ldr	r3, [r0, #32]
 8007796:	b90b      	cbnz	r3, 800779c <_vfiprintf_r+0x18>
 8007798:	f7fe f8d6 	bl	8005948 <__sinit>
 800779c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800779e:	07d9      	lsls	r1, r3, #31
 80077a0:	d405      	bmi.n	80077ae <_vfiprintf_r+0x2a>
 80077a2:	89ab      	ldrh	r3, [r5, #12]
 80077a4:	059a      	lsls	r2, r3, #22
 80077a6:	d402      	bmi.n	80077ae <_vfiprintf_r+0x2a>
 80077a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077aa:	f7fe f9f8 	bl	8005b9e <__retarget_lock_acquire_recursive>
 80077ae:	89ab      	ldrh	r3, [r5, #12]
 80077b0:	071b      	lsls	r3, r3, #28
 80077b2:	d501      	bpl.n	80077b8 <_vfiprintf_r+0x34>
 80077b4:	692b      	ldr	r3, [r5, #16]
 80077b6:	b99b      	cbnz	r3, 80077e0 <_vfiprintf_r+0x5c>
 80077b8:	4629      	mov	r1, r5
 80077ba:	4630      	mov	r0, r6
 80077bc:	f000 f93a 	bl	8007a34 <__swsetup_r>
 80077c0:	b170      	cbz	r0, 80077e0 <_vfiprintf_r+0x5c>
 80077c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077c4:	07dc      	lsls	r4, r3, #31
 80077c6:	d504      	bpl.n	80077d2 <_vfiprintf_r+0x4e>
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	b01d      	add	sp, #116	; 0x74
 80077ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d2:	89ab      	ldrh	r3, [r5, #12]
 80077d4:	0598      	lsls	r0, r3, #22
 80077d6:	d4f7      	bmi.n	80077c8 <_vfiprintf_r+0x44>
 80077d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077da:	f7fe f9e1 	bl	8005ba0 <__retarget_lock_release_recursive>
 80077de:	e7f3      	b.n	80077c8 <_vfiprintf_r+0x44>
 80077e0:	2300      	movs	r3, #0
 80077e2:	9309      	str	r3, [sp, #36]	; 0x24
 80077e4:	2320      	movs	r3, #32
 80077e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077ea:	2330      	movs	r3, #48	; 0x30
 80077ec:	f04f 0901 	mov.w	r9, #1
 80077f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80077f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80079a4 <_vfiprintf_r+0x220>
 80077f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077fc:	4623      	mov	r3, r4
 80077fe:	469a      	mov	sl, r3
 8007800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007804:	b10a      	cbz	r2, 800780a <_vfiprintf_r+0x86>
 8007806:	2a25      	cmp	r2, #37	; 0x25
 8007808:	d1f9      	bne.n	80077fe <_vfiprintf_r+0x7a>
 800780a:	ebba 0b04 	subs.w	fp, sl, r4
 800780e:	d00b      	beq.n	8007828 <_vfiprintf_r+0xa4>
 8007810:	465b      	mov	r3, fp
 8007812:	4622      	mov	r2, r4
 8007814:	4629      	mov	r1, r5
 8007816:	4630      	mov	r0, r6
 8007818:	f7ff ffa2 	bl	8007760 <__sfputs_r>
 800781c:	3001      	adds	r0, #1
 800781e:	f000 80a9 	beq.w	8007974 <_vfiprintf_r+0x1f0>
 8007822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007824:	445a      	add	r2, fp
 8007826:	9209      	str	r2, [sp, #36]	; 0x24
 8007828:	f89a 3000 	ldrb.w	r3, [sl]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 80a1 	beq.w	8007974 <_vfiprintf_r+0x1f0>
 8007832:	2300      	movs	r3, #0
 8007834:	f04f 32ff 	mov.w	r2, #4294967295
 8007838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800783c:	f10a 0a01 	add.w	sl, sl, #1
 8007840:	9304      	str	r3, [sp, #16]
 8007842:	9307      	str	r3, [sp, #28]
 8007844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007848:	931a      	str	r3, [sp, #104]	; 0x68
 800784a:	4654      	mov	r4, sl
 800784c:	2205      	movs	r2, #5
 800784e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007852:	4854      	ldr	r0, [pc, #336]	; (80079a4 <_vfiprintf_r+0x220>)
 8007854:	f7fe f9a5 	bl	8005ba2 <memchr>
 8007858:	9a04      	ldr	r2, [sp, #16]
 800785a:	b9d8      	cbnz	r0, 8007894 <_vfiprintf_r+0x110>
 800785c:	06d1      	lsls	r1, r2, #27
 800785e:	bf44      	itt	mi
 8007860:	2320      	movmi	r3, #32
 8007862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007866:	0713      	lsls	r3, r2, #28
 8007868:	bf44      	itt	mi
 800786a:	232b      	movmi	r3, #43	; 0x2b
 800786c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007870:	f89a 3000 	ldrb.w	r3, [sl]
 8007874:	2b2a      	cmp	r3, #42	; 0x2a
 8007876:	d015      	beq.n	80078a4 <_vfiprintf_r+0x120>
 8007878:	4654      	mov	r4, sl
 800787a:	2000      	movs	r0, #0
 800787c:	f04f 0c0a 	mov.w	ip, #10
 8007880:	9a07      	ldr	r2, [sp, #28]
 8007882:	4621      	mov	r1, r4
 8007884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007888:	3b30      	subs	r3, #48	; 0x30
 800788a:	2b09      	cmp	r3, #9
 800788c:	d94d      	bls.n	800792a <_vfiprintf_r+0x1a6>
 800788e:	b1b0      	cbz	r0, 80078be <_vfiprintf_r+0x13a>
 8007890:	9207      	str	r2, [sp, #28]
 8007892:	e014      	b.n	80078be <_vfiprintf_r+0x13a>
 8007894:	eba0 0308 	sub.w	r3, r0, r8
 8007898:	fa09 f303 	lsl.w	r3, r9, r3
 800789c:	4313      	orrs	r3, r2
 800789e:	46a2      	mov	sl, r4
 80078a0:	9304      	str	r3, [sp, #16]
 80078a2:	e7d2      	b.n	800784a <_vfiprintf_r+0xc6>
 80078a4:	9b03      	ldr	r3, [sp, #12]
 80078a6:	1d19      	adds	r1, r3, #4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	9103      	str	r1, [sp, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	bfbb      	ittet	lt
 80078b0:	425b      	neglt	r3, r3
 80078b2:	f042 0202 	orrlt.w	r2, r2, #2
 80078b6:	9307      	strge	r3, [sp, #28]
 80078b8:	9307      	strlt	r3, [sp, #28]
 80078ba:	bfb8      	it	lt
 80078bc:	9204      	strlt	r2, [sp, #16]
 80078be:	7823      	ldrb	r3, [r4, #0]
 80078c0:	2b2e      	cmp	r3, #46	; 0x2e
 80078c2:	d10c      	bne.n	80078de <_vfiprintf_r+0x15a>
 80078c4:	7863      	ldrb	r3, [r4, #1]
 80078c6:	2b2a      	cmp	r3, #42	; 0x2a
 80078c8:	d134      	bne.n	8007934 <_vfiprintf_r+0x1b0>
 80078ca:	9b03      	ldr	r3, [sp, #12]
 80078cc:	3402      	adds	r4, #2
 80078ce:	1d1a      	adds	r2, r3, #4
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	9203      	str	r2, [sp, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	bfb8      	it	lt
 80078d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80078dc:	9305      	str	r3, [sp, #20]
 80078de:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80079a8 <_vfiprintf_r+0x224>
 80078e2:	2203      	movs	r2, #3
 80078e4:	4650      	mov	r0, sl
 80078e6:	7821      	ldrb	r1, [r4, #0]
 80078e8:	f7fe f95b 	bl	8005ba2 <memchr>
 80078ec:	b138      	cbz	r0, 80078fe <_vfiprintf_r+0x17a>
 80078ee:	2240      	movs	r2, #64	; 0x40
 80078f0:	9b04      	ldr	r3, [sp, #16]
 80078f2:	eba0 000a 	sub.w	r0, r0, sl
 80078f6:	4082      	lsls	r2, r0
 80078f8:	4313      	orrs	r3, r2
 80078fa:	3401      	adds	r4, #1
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007902:	2206      	movs	r2, #6
 8007904:	4829      	ldr	r0, [pc, #164]	; (80079ac <_vfiprintf_r+0x228>)
 8007906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800790a:	f7fe f94a 	bl	8005ba2 <memchr>
 800790e:	2800      	cmp	r0, #0
 8007910:	d03f      	beq.n	8007992 <_vfiprintf_r+0x20e>
 8007912:	4b27      	ldr	r3, [pc, #156]	; (80079b0 <_vfiprintf_r+0x22c>)
 8007914:	bb1b      	cbnz	r3, 800795e <_vfiprintf_r+0x1da>
 8007916:	9b03      	ldr	r3, [sp, #12]
 8007918:	3307      	adds	r3, #7
 800791a:	f023 0307 	bic.w	r3, r3, #7
 800791e:	3308      	adds	r3, #8
 8007920:	9303      	str	r3, [sp, #12]
 8007922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007924:	443b      	add	r3, r7
 8007926:	9309      	str	r3, [sp, #36]	; 0x24
 8007928:	e768      	b.n	80077fc <_vfiprintf_r+0x78>
 800792a:	460c      	mov	r4, r1
 800792c:	2001      	movs	r0, #1
 800792e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007932:	e7a6      	b.n	8007882 <_vfiprintf_r+0xfe>
 8007934:	2300      	movs	r3, #0
 8007936:	f04f 0c0a 	mov.w	ip, #10
 800793a:	4619      	mov	r1, r3
 800793c:	3401      	adds	r4, #1
 800793e:	9305      	str	r3, [sp, #20]
 8007940:	4620      	mov	r0, r4
 8007942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007946:	3a30      	subs	r2, #48	; 0x30
 8007948:	2a09      	cmp	r2, #9
 800794a:	d903      	bls.n	8007954 <_vfiprintf_r+0x1d0>
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0c6      	beq.n	80078de <_vfiprintf_r+0x15a>
 8007950:	9105      	str	r1, [sp, #20]
 8007952:	e7c4      	b.n	80078de <_vfiprintf_r+0x15a>
 8007954:	4604      	mov	r4, r0
 8007956:	2301      	movs	r3, #1
 8007958:	fb0c 2101 	mla	r1, ip, r1, r2
 800795c:	e7f0      	b.n	8007940 <_vfiprintf_r+0x1bc>
 800795e:	ab03      	add	r3, sp, #12
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	462a      	mov	r2, r5
 8007964:	4630      	mov	r0, r6
 8007966:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <_vfiprintf_r+0x230>)
 8007968:	a904      	add	r1, sp, #16
 800796a:	f7fd fb9f 	bl	80050ac <_printf_float>
 800796e:	4607      	mov	r7, r0
 8007970:	1c78      	adds	r0, r7, #1
 8007972:	d1d6      	bne.n	8007922 <_vfiprintf_r+0x19e>
 8007974:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007976:	07d9      	lsls	r1, r3, #31
 8007978:	d405      	bmi.n	8007986 <_vfiprintf_r+0x202>
 800797a:	89ab      	ldrh	r3, [r5, #12]
 800797c:	059a      	lsls	r2, r3, #22
 800797e:	d402      	bmi.n	8007986 <_vfiprintf_r+0x202>
 8007980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007982:	f7fe f90d 	bl	8005ba0 <__retarget_lock_release_recursive>
 8007986:	89ab      	ldrh	r3, [r5, #12]
 8007988:	065b      	lsls	r3, r3, #25
 800798a:	f53f af1d 	bmi.w	80077c8 <_vfiprintf_r+0x44>
 800798e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007990:	e71c      	b.n	80077cc <_vfiprintf_r+0x48>
 8007992:	ab03      	add	r3, sp, #12
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	462a      	mov	r2, r5
 8007998:	4630      	mov	r0, r6
 800799a:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <_vfiprintf_r+0x230>)
 800799c:	a904      	add	r1, sp, #16
 800799e:	f7fd fe25 	bl	80055ec <_printf_i>
 80079a2:	e7e4      	b.n	800796e <_vfiprintf_r+0x1ea>
 80079a4:	08007eec 	.word	0x08007eec
 80079a8:	08007ef2 	.word	0x08007ef2
 80079ac:	08007ef6 	.word	0x08007ef6
 80079b0:	080050ad 	.word	0x080050ad
 80079b4:	08007761 	.word	0x08007761

080079b8 <__swbuf_r>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	460e      	mov	r6, r1
 80079bc:	4614      	mov	r4, r2
 80079be:	4605      	mov	r5, r0
 80079c0:	b118      	cbz	r0, 80079ca <__swbuf_r+0x12>
 80079c2:	6a03      	ldr	r3, [r0, #32]
 80079c4:	b90b      	cbnz	r3, 80079ca <__swbuf_r+0x12>
 80079c6:	f7fd ffbf 	bl	8005948 <__sinit>
 80079ca:	69a3      	ldr	r3, [r4, #24]
 80079cc:	60a3      	str	r3, [r4, #8]
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	071a      	lsls	r2, r3, #28
 80079d2:	d525      	bpl.n	8007a20 <__swbuf_r+0x68>
 80079d4:	6923      	ldr	r3, [r4, #16]
 80079d6:	b31b      	cbz	r3, 8007a20 <__swbuf_r+0x68>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	6922      	ldr	r2, [r4, #16]
 80079dc:	b2f6      	uxtb	r6, r6
 80079de:	1a98      	subs	r0, r3, r2
 80079e0:	6963      	ldr	r3, [r4, #20]
 80079e2:	4637      	mov	r7, r6
 80079e4:	4283      	cmp	r3, r0
 80079e6:	dc04      	bgt.n	80079f2 <__swbuf_r+0x3a>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4628      	mov	r0, r5
 80079ec:	f7ff fda2 	bl	8007534 <_fflush_r>
 80079f0:	b9e0      	cbnz	r0, 8007a2c <__swbuf_r+0x74>
 80079f2:	68a3      	ldr	r3, [r4, #8]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	60a3      	str	r3, [r4, #8]
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	6022      	str	r2, [r4, #0]
 80079fe:	701e      	strb	r6, [r3, #0]
 8007a00:	6962      	ldr	r2, [r4, #20]
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d004      	beq.n	8007a12 <__swbuf_r+0x5a>
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	07db      	lsls	r3, r3, #31
 8007a0c:	d506      	bpl.n	8007a1c <__swbuf_r+0x64>
 8007a0e:	2e0a      	cmp	r6, #10
 8007a10:	d104      	bne.n	8007a1c <__swbuf_r+0x64>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4628      	mov	r0, r5
 8007a16:	f7ff fd8d 	bl	8007534 <_fflush_r>
 8007a1a:	b938      	cbnz	r0, 8007a2c <__swbuf_r+0x74>
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a20:	4621      	mov	r1, r4
 8007a22:	4628      	mov	r0, r5
 8007a24:	f000 f806 	bl	8007a34 <__swsetup_r>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d0d5      	beq.n	80079d8 <__swbuf_r+0x20>
 8007a2c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a30:	e7f4      	b.n	8007a1c <__swbuf_r+0x64>
	...

08007a34 <__swsetup_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4b2a      	ldr	r3, [pc, #168]	; (8007ae0 <__swsetup_r+0xac>)
 8007a38:	4605      	mov	r5, r0
 8007a3a:	6818      	ldr	r0, [r3, #0]
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	b118      	cbz	r0, 8007a48 <__swsetup_r+0x14>
 8007a40:	6a03      	ldr	r3, [r0, #32]
 8007a42:	b90b      	cbnz	r3, 8007a48 <__swsetup_r+0x14>
 8007a44:	f7fd ff80 	bl	8005948 <__sinit>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a4e:	0718      	lsls	r0, r3, #28
 8007a50:	d422      	bmi.n	8007a98 <__swsetup_r+0x64>
 8007a52:	06d9      	lsls	r1, r3, #27
 8007a54:	d407      	bmi.n	8007a66 <__swsetup_r+0x32>
 8007a56:	2309      	movs	r3, #9
 8007a58:	602b      	str	r3, [r5, #0]
 8007a5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a62:	81a3      	strh	r3, [r4, #12]
 8007a64:	e034      	b.n	8007ad0 <__swsetup_r+0x9c>
 8007a66:	0758      	lsls	r0, r3, #29
 8007a68:	d512      	bpl.n	8007a90 <__swsetup_r+0x5c>
 8007a6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a6c:	b141      	cbz	r1, 8007a80 <__swsetup_r+0x4c>
 8007a6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a72:	4299      	cmp	r1, r3
 8007a74:	d002      	beq.n	8007a7c <__swsetup_r+0x48>
 8007a76:	4628      	mov	r0, r5
 8007a78:	f7fe ff0e 	bl	8006898 <_free_r>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	6363      	str	r3, [r4, #52]	; 0x34
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a86:	81a3      	strh	r3, [r4, #12]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	6063      	str	r3, [r4, #4]
 8007a8c:	6923      	ldr	r3, [r4, #16]
 8007a8e:	6023      	str	r3, [r4, #0]
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	f043 0308 	orr.w	r3, r3, #8
 8007a96:	81a3      	strh	r3, [r4, #12]
 8007a98:	6923      	ldr	r3, [r4, #16]
 8007a9a:	b94b      	cbnz	r3, 8007ab0 <__swsetup_r+0x7c>
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa6:	d003      	beq.n	8007ab0 <__swsetup_r+0x7c>
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f000 f883 	bl	8007bb6 <__smakebuf_r>
 8007ab0:	89a0      	ldrh	r0, [r4, #12]
 8007ab2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ab6:	f010 0301 	ands.w	r3, r0, #1
 8007aba:	d00a      	beq.n	8007ad2 <__swsetup_r+0x9e>
 8007abc:	2300      	movs	r3, #0
 8007abe:	60a3      	str	r3, [r4, #8]
 8007ac0:	6963      	ldr	r3, [r4, #20]
 8007ac2:	425b      	negs	r3, r3
 8007ac4:	61a3      	str	r3, [r4, #24]
 8007ac6:	6923      	ldr	r3, [r4, #16]
 8007ac8:	b943      	cbnz	r3, 8007adc <__swsetup_r+0xa8>
 8007aca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ace:	d1c4      	bne.n	8007a5a <__swsetup_r+0x26>
 8007ad0:	bd38      	pop	{r3, r4, r5, pc}
 8007ad2:	0781      	lsls	r1, r0, #30
 8007ad4:	bf58      	it	pl
 8007ad6:	6963      	ldrpl	r3, [r4, #20]
 8007ad8:	60a3      	str	r3, [r4, #8]
 8007ada:	e7f4      	b.n	8007ac6 <__swsetup_r+0x92>
 8007adc:	2000      	movs	r0, #0
 8007ade:	e7f7      	b.n	8007ad0 <__swsetup_r+0x9c>
 8007ae0:	2000008c 	.word	0x2000008c

08007ae4 <_raise_r>:
 8007ae4:	291f      	cmp	r1, #31
 8007ae6:	b538      	push	{r3, r4, r5, lr}
 8007ae8:	4604      	mov	r4, r0
 8007aea:	460d      	mov	r5, r1
 8007aec:	d904      	bls.n	8007af8 <_raise_r+0x14>
 8007aee:	2316      	movs	r3, #22
 8007af0:	6003      	str	r3, [r0, #0]
 8007af2:	f04f 30ff 	mov.w	r0, #4294967295
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007afa:	b112      	cbz	r2, 8007b02 <_raise_r+0x1e>
 8007afc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b00:	b94b      	cbnz	r3, 8007b16 <_raise_r+0x32>
 8007b02:	4620      	mov	r0, r4
 8007b04:	f000 f830 	bl	8007b68 <_getpid_r>
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b12:	f000 b817 	b.w	8007b44 <_kill_r>
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d00a      	beq.n	8007b30 <_raise_r+0x4c>
 8007b1a:	1c59      	adds	r1, r3, #1
 8007b1c:	d103      	bne.n	8007b26 <_raise_r+0x42>
 8007b1e:	2316      	movs	r3, #22
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	2001      	movs	r0, #1
 8007b24:	e7e7      	b.n	8007af6 <_raise_r+0x12>
 8007b26:	2400      	movs	r4, #0
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b2e:	4798      	blx	r3
 8007b30:	2000      	movs	r0, #0
 8007b32:	e7e0      	b.n	8007af6 <_raise_r+0x12>

08007b34 <raise>:
 8007b34:	4b02      	ldr	r3, [pc, #8]	; (8007b40 <raise+0xc>)
 8007b36:	4601      	mov	r1, r0
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	f7ff bfd3 	b.w	8007ae4 <_raise_r>
 8007b3e:	bf00      	nop
 8007b40:	2000008c 	.word	0x2000008c

08007b44 <_kill_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	2300      	movs	r3, #0
 8007b48:	4d06      	ldr	r5, [pc, #24]	; (8007b64 <_kill_r+0x20>)
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	f7f9 fff4 	bl	8001b3e <_kill>
 8007b56:	1c43      	adds	r3, r0, #1
 8007b58:	d102      	bne.n	8007b60 <_kill_r+0x1c>
 8007b5a:	682b      	ldr	r3, [r5, #0]
 8007b5c:	b103      	cbz	r3, 8007b60 <_kill_r+0x1c>
 8007b5e:	6023      	str	r3, [r4, #0]
 8007b60:	bd38      	pop	{r3, r4, r5, pc}
 8007b62:	bf00      	nop
 8007b64:	200004a4 	.word	0x200004a4

08007b68 <_getpid_r>:
 8007b68:	f7f9 bfe2 	b.w	8001b30 <_getpid>

08007b6c <__swhatbuf_r>:
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	460c      	mov	r4, r1
 8007b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b74:	4615      	mov	r5, r2
 8007b76:	2900      	cmp	r1, #0
 8007b78:	461e      	mov	r6, r3
 8007b7a:	b096      	sub	sp, #88	; 0x58
 8007b7c:	da0c      	bge.n	8007b98 <__swhatbuf_r+0x2c>
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	2100      	movs	r1, #0
 8007b82:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b86:	bf0c      	ite	eq
 8007b88:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b8c:	2340      	movne	r3, #64	; 0x40
 8007b8e:	2000      	movs	r0, #0
 8007b90:	6031      	str	r1, [r6, #0]
 8007b92:	602b      	str	r3, [r5, #0]
 8007b94:	b016      	add	sp, #88	; 0x58
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	466a      	mov	r2, sp
 8007b9a:	f000 f849 	bl	8007c30 <_fstat_r>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	dbed      	blt.n	8007b7e <__swhatbuf_r+0x12>
 8007ba2:	9901      	ldr	r1, [sp, #4]
 8007ba4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007ba8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007bac:	4259      	negs	r1, r3
 8007bae:	4159      	adcs	r1, r3
 8007bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bb4:	e7eb      	b.n	8007b8e <__swhatbuf_r+0x22>

08007bb6 <__smakebuf_r>:
 8007bb6:	898b      	ldrh	r3, [r1, #12]
 8007bb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bba:	079d      	lsls	r5, r3, #30
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	d507      	bpl.n	8007bd2 <__smakebuf_r+0x1c>
 8007bc2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	6123      	str	r3, [r4, #16]
 8007bca:	2301      	movs	r3, #1
 8007bcc:	6163      	str	r3, [r4, #20]
 8007bce:	b002      	add	sp, #8
 8007bd0:	bd70      	pop	{r4, r5, r6, pc}
 8007bd2:	466a      	mov	r2, sp
 8007bd4:	ab01      	add	r3, sp, #4
 8007bd6:	f7ff ffc9 	bl	8007b6c <__swhatbuf_r>
 8007bda:	9900      	ldr	r1, [sp, #0]
 8007bdc:	4605      	mov	r5, r0
 8007bde:	4630      	mov	r0, r6
 8007be0:	f7fe feca 	bl	8006978 <_malloc_r>
 8007be4:	b948      	cbnz	r0, 8007bfa <__smakebuf_r+0x44>
 8007be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bea:	059a      	lsls	r2, r3, #22
 8007bec:	d4ef      	bmi.n	8007bce <__smakebuf_r+0x18>
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	f043 0302 	orr.w	r3, r3, #2
 8007bf6:	81a3      	strh	r3, [r4, #12]
 8007bf8:	e7e3      	b.n	8007bc2 <__smakebuf_r+0xc>
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	6020      	str	r0, [r4, #0]
 8007bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c02:	81a3      	strh	r3, [r4, #12]
 8007c04:	9b00      	ldr	r3, [sp, #0]
 8007c06:	6120      	str	r0, [r4, #16]
 8007c08:	6163      	str	r3, [r4, #20]
 8007c0a:	9b01      	ldr	r3, [sp, #4]
 8007c0c:	b15b      	cbz	r3, 8007c26 <__smakebuf_r+0x70>
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c14:	f000 f81e 	bl	8007c54 <_isatty_r>
 8007c18:	b128      	cbz	r0, 8007c26 <__smakebuf_r+0x70>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f023 0303 	bic.w	r3, r3, #3
 8007c20:	f043 0301 	orr.w	r3, r3, #1
 8007c24:	81a3      	strh	r3, [r4, #12]
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	431d      	orrs	r5, r3
 8007c2a:	81a5      	strh	r5, [r4, #12]
 8007c2c:	e7cf      	b.n	8007bce <__smakebuf_r+0x18>
	...

08007c30 <_fstat_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	2300      	movs	r3, #0
 8007c34:	4d06      	ldr	r5, [pc, #24]	; (8007c50 <_fstat_r+0x20>)
 8007c36:	4604      	mov	r4, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	f7f9 ffdc 	bl	8001bfa <_fstat>
 8007c42:	1c43      	adds	r3, r0, #1
 8007c44:	d102      	bne.n	8007c4c <_fstat_r+0x1c>
 8007c46:	682b      	ldr	r3, [r5, #0]
 8007c48:	b103      	cbz	r3, 8007c4c <_fstat_r+0x1c>
 8007c4a:	6023      	str	r3, [r4, #0]
 8007c4c:	bd38      	pop	{r3, r4, r5, pc}
 8007c4e:	bf00      	nop
 8007c50:	200004a4 	.word	0x200004a4

08007c54 <_isatty_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	2300      	movs	r3, #0
 8007c58:	4d05      	ldr	r5, [pc, #20]	; (8007c70 <_isatty_r+0x1c>)
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	602b      	str	r3, [r5, #0]
 8007c60:	f7f9 ffda 	bl	8001c18 <_isatty>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_isatty_r+0x1a>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_isatty_r+0x1a>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	200004a4 	.word	0x200004a4

08007c74 <_init>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr

08007c80 <_fini>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	bf00      	nop
 8007c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c86:	bc08      	pop	{r3}
 8007c88:	469e      	mov	lr, r3
 8007c8a:	4770      	bx	lr
