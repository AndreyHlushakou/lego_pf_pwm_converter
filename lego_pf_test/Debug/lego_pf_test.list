
lego_pf_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000776c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08007880  08007880  00017880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c5c  08007c5c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08007c5c  08007c5c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c5c  08007c5c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c60  08007c60  00017c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001d8  08007e3c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08007e3c  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ceb8  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e95  00000000  00000000  0002d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  0002ef98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a90  00000000  00000000  0002fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001874a  00000000  00000000  000307b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7db  00000000  00000000  00048efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c552  00000000  00000000  000576d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049c8  00000000  00000000  000e3c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e85f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007864 	.word	0x08007864

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08007864 	.word	0x08007864

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <led_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void led_init(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	char str1[7] = "\nINIT;\n";
 8000a8e:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <led_init+0x4c>)
 8000a90:	463b      	mov	r3, r7
 8000a92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a96:	6018      	str	r0, [r3, #0]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	8019      	strh	r1, [r3, #0]
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	0c0a      	lsrs	r2, r1, #16
 8000aa0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(HUART_3, (uint8_t*)str1, strlen(str1), 1000);
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fb53 	bl	8000150 <strlen>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	4639      	mov	r1, r7
 8000ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <led_init+0x50>)
 8000ab6:	f003 f9ff 	bl	8003eb8 <HAL_UART_Transmit>

    all_led_on();
 8000aba:	f000 f80f 	bl	8000adc <all_led_on>
    HAL_Delay(1000);
 8000abe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac2:	f000 ff91 	bl	80019e8 <HAL_Delay>
    all_led_off();
 8000ac6:	f000 f82b 	bl	8000b20 <all_led_off>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	08007880 	.word	0x08007880
 8000ad8:	200002cc 	.word	0x200002cc

08000adc <all_led_on>:

void all_led_on(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET); //revers t.k pc13
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <all_led_on+0x3c>)
 8000ae8:	f001 fae6 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2102      	movs	r1, #2
 8000af0:	480a      	ldr	r0, [pc, #40]	; (8000b1c <all_led_on+0x40>)
 8000af2:	f001 fae1 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2108      	movs	r1, #8
 8000afa:	4808      	ldr	r0, [pc, #32]	; (8000b1c <all_led_on+0x40>)
 8000afc:	f001 fadc 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2120      	movs	r1, #32
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <all_led_on+0x40>)
 8000b06:	f001 fad7 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2140      	movs	r1, #64	; 0x40
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <all_led_on+0x40>)
 8000b10:	f001 fad2 	bl	80020b8 <HAL_GPIO_WritePin>
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40011000 	.word	0x40011000
 8000b1c:	40010800 	.word	0x40010800

08000b20 <all_led_off>:

void all_led_off(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET); //revers t.k pc13
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2a:	480c      	ldr	r0, [pc, #48]	; (8000b5c <all_led_off+0x3c>)
 8000b2c:	f001 fac4 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2102      	movs	r1, #2
 8000b34:	480a      	ldr	r0, [pc, #40]	; (8000b60 <all_led_off+0x40>)
 8000b36:	f001 fabf 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	4808      	ldr	r0, [pc, #32]	; (8000b60 <all_led_off+0x40>)
 8000b40:	f001 faba 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2120      	movs	r1, #32
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <all_led_off+0x40>)
 8000b4a:	f001 fab5 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4803      	ldr	r0, [pc, #12]	; (8000b60 <all_led_off+0x40>)
 8000b54:	f001 fab0 	bl	80020b8 <HAL_GPIO_WritePin>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40011000 	.word	0x40011000
 8000b60:	40010800 	.word	0x40010800

08000b64 <driver_motor1_ports_init>:

void driver_motor1_ports_init() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	480a      	ldr	r0, [pc, #40]	; (8000b94 <driver_motor1_ports_init+0x30>)
 8000b6c:	f001 ff96 	bl	8002a9c <HAL_TIM_PWM_Start>
	  HAL_GPIO_WritePin(an1_GPIO_Port, an1_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2120      	movs	r1, #32
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <driver_motor1_ports_init+0x34>)
 8000b76:	f001 fa9f 	bl	80020b8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(an2_GPIO_Port, an2_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <driver_motor1_ports_init+0x34>)
 8000b80:	f001 fa9a 	bl	80020b8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2108      	movs	r1, #8
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <driver_motor1_ports_init+0x34>)
 8000b8a:	f001 fa95 	bl	80020b8 <HAL_GPIO_WritePin>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000284 	.word	0x20000284
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <tim1_for_motor1_ports_init>:

void tim1_for_motor1_ports_init() {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <tim1_for_motor1_ports_init+0x28>)
 8000ba4:	f002 f874 	bl	8002c90 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000ba8:	2104      	movs	r1, #4
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <tim1_for_motor1_ports_init+0x28>)
 8000bac:	f002 f870 	bl	8002c90 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <tim1_for_motor1_ports_init+0x28>)
 8000bb4:	f002 f86c 	bl	8002c90 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000bb8:	210c      	movs	r1, #12
 8000bba:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <tim1_for_motor1_ports_init+0x28>)
 8000bbc:	f002 f868 	bl	8002c90 <HAL_TIM_IC_Start_IT>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200001f4 	.word	0x200001f4

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f000 feaa 	bl	8001924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f814 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f000 fa3c 	bl	8001050 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000bd8:	f000 f856 	bl	8000c88 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bdc:	f000 f8fc 	bl	8000dd8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000be0:	f000 fa0c 	bl	8000ffc <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000be4:	f000 f994 	bl	8000f10 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  led_init();
 8000be8:	f7ff ff4e 	bl	8000a88 <led_init>
  driver_motor1_ports_init();
 8000bec:	f7ff ffba 	bl	8000b64 <driver_motor1_ports_init>
  tim1_for_motor1_ports_init();
 8000bf0:	f7ff ffd4 	bl	8000b9c <tim1_for_motor1_ports_init>
	  //hnd_state_for_motor1();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //button_hnd();
	  HAL_Delay(2);
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f000 fef7 	bl	80019e8 <HAL_Delay>
 8000bfa:	e7fb      	b.n	8000bf4 <main+0x2c>

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b090      	sub	sp, #64	; 0x40
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0318 	add.w	r3, r7, #24
 8000c06:	2228      	movs	r2, #40	; 0x28
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f004 fd3f 	bl	800568e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c30:	2302      	movs	r3, #2
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c3a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 fa71 	bl	800212c <HAL_RCC_OscConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c50:	f000 fbe2 	bl	8001418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c54:	230f      	movs	r3, #15
 8000c56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 fcde 	bl	8002630 <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c7a:	f000 fbcd 	bl	8001418 <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3740      	adds	r7, #64	; 0x40
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cb2:	4b47      	ldr	r3, [pc, #284]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000cb4:	4a47      	ldr	r2, [pc, #284]	; (8000dd4 <MX_TIM1_Init+0x14c>)
 8000cb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000cb8:	4b45      	ldr	r3, [pc, #276]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000cba:	2247      	movs	r2, #71	; 0x47
 8000cbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000-1;
 8000cc4:	4b42      	ldr	r3, [pc, #264]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000cc6:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000cca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000ccc:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd4:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	4b3d      	ldr	r3, [pc, #244]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ce0:	483b      	ldr	r0, [pc, #236]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000ce2:	f001 fe33 	bl	800294c <HAL_TIM_Base_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000cec:	f000 fb94 	bl	8001418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cf6:	f107 0318 	add.w	r3, r7, #24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4834      	ldr	r0, [pc, #208]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000cfe:	f002 fb39 	bl	8003374 <HAL_TIM_ConfigClockSource>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000d08:	f000 fb86 	bl	8001418 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000d0c:	4830      	ldr	r0, [pc, #192]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000d0e:	f001 ff67 	bl	8002be0 <HAL_TIM_IC_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000d18:	f000 fb7e 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4829      	ldr	r0, [pc, #164]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000d2c:	f003 f804 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8000d36:	f000 fb6f 	bl	8001418 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV8;
 8000d42:	230c      	movs	r3, #12
 8000d44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000d46:	230f      	movs	r3, #15
 8000d48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000d52:	f002 f9b1 	bl	80030b8 <HAL_TIM_IC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000d5c:	f000 fb5c 	bl	8001418 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d60:	2300      	movs	r3, #0
 8000d62:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d64:	2302      	movs	r3, #2
 8000d66:	607b      	str	r3, [r7, #4]
  sConfigIC.ICFilter = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2204      	movs	r2, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000d74:	f002 f9a0 	bl	80030b8 <HAL_TIM_IC_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000d7e:	f000 fb4b 	bl	8001418 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d82:	2302      	movs	r3, #2
 8000d84:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d86:	2301      	movs	r3, #1
 8000d88:	607b      	str	r3, [r7, #4]
  sConfigIC.ICFilter = 15;
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2208      	movs	r2, #8
 8000d92:	4619      	mov	r1, r3
 8000d94:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000d96:	f002 f98f 	bl	80030b8 <HAL_TIM_IC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8000da0:	f000 fb3a 	bl	8001418 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000da4:	2300      	movs	r3, #0
 8000da6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000da8:	2302      	movs	r3, #2
 8000daa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICFilter = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000db0:	463b      	mov	r3, r7
 8000db2:	220c      	movs	r2, #12
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <MX_TIM1_Init+0x148>)
 8000db8:	f002 f97e 	bl	80030b8 <HAL_TIM_IC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000dc2:	f000 fb29 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200001f4 	.word	0x200001f4
 8000dd4:	40012c00 	.word	0x40012c00

08000dd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0318 	add.w	r3, r7, #24
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000df6:	463b      	mov	r3, r7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e02:	4b42      	ldr	r3, [pc, #264]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000e04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000e0a:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000e0c:	2247      	movs	r2, #71	; 0x47
 8000e0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b3e      	ldr	r3, [pc, #248]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000-1;
 8000e16:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000e18:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000e1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b3b      	ldr	r3, [pc, #236]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e2a:	4838      	ldr	r0, [pc, #224]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000e2c:	f001 fd8e 	bl	800294c <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000e36:	f000 faef 	bl	8001418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e40:	f107 0318 	add.w	r3, r7, #24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4831      	ldr	r0, [pc, #196]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000e48:	f002 fa94 	bl	8003374 <HAL_TIM_ConfigClockSource>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e52:	f000 fae1 	bl	8001418 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e56:	482d      	ldr	r0, [pc, #180]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000e58:	f001 fec2 	bl	8002be0 <HAL_TIM_IC_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e62:	f000 fad9 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	4619      	mov	r1, r3
 8000e74:	4825      	ldr	r0, [pc, #148]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000e76:	f002 ff5f 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000e80:	f000 faca 	bl	8001418 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e84:	2300      	movs	r3, #0
 8000e86:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	2200      	movs	r2, #0
 8000e98:	4619      	mov	r1, r3
 8000e9a:	481c      	ldr	r0, [pc, #112]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000e9c:	f002 f90c 	bl	80030b8 <HAL_TIM_IC_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000ea6:	f000 fab7 	bl	8001418 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4814      	ldr	r0, [pc, #80]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000eba:	f002 f8fd 	bl	80030b8 <HAL_TIM_IC_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000ec4:	f000 faa8 	bl	8001418 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000ed8:	f002 f8ee 	bl	80030b8 <HAL_TIM_IC_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8000ee2:	f000 fa99 	bl	8001418 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000eea:	2302      	movs	r3, #2
 8000eec:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000eee:	463b      	mov	r3, r7
 8000ef0:	220c      	movs	r2, #12
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_TIM2_Init+0x134>)
 8000ef6:	f002 f8df 	bl	80030b8 <HAL_TIM_IC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8000f00:	f000 fa8a 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	; 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000023c 	.word	0x2000023c

08000f10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08e      	sub	sp, #56	; 0x38
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f24:	f107 0320 	add.w	r3, r7, #32
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	615a      	str	r2, [r3, #20]
 8000f3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f40:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <MX_TIM4_Init+0xe4>)
 8000f42:	4a2d      	ldr	r2, [pc, #180]	; (8000ff8 <MX_TIM4_Init+0xe8>)
 8000f44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1-1;
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <MX_TIM4_Init+0xe4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <MX_TIM4_Init+0xe4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 62600;
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <MX_TIM4_Init+0xe4>)
 8000f54:	f24f 4288 	movw	r2, #62600	; 0xf488
 8000f58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <MX_TIM4_Init+0xe4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <MX_TIM4_Init+0xe4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f66:	4823      	ldr	r0, [pc, #140]	; (8000ff4 <MX_TIM4_Init+0xe4>)
 8000f68:	f001 fcf0 	bl	800294c <HAL_TIM_Base_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000f72:	f000 fa51 	bl	8001418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f80:	4619      	mov	r1, r3
 8000f82:	481c      	ldr	r0, [pc, #112]	; (8000ff4 <MX_TIM4_Init+0xe4>)
 8000f84:	f002 f9f6 	bl	8003374 <HAL_TIM_ConfigClockSource>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000f8e:	f000 fa43 	bl	8001418 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f92:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <MX_TIM4_Init+0xe4>)
 8000f94:	f001 fd29 	bl	80029ea <HAL_TIM_PWM_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f9e:	f000 fa3b 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <MX_TIM4_Init+0xe4>)
 8000fb2:	f002 fec1 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000fbc:	f000 fa2c 	bl	8001418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc0:	2360      	movs	r3, #96	; 0x60
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <MX_TIM4_Init+0xe4>)
 8000fd8:	f002 f90a 	bl	80031f0 <HAL_TIM_PWM_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000fe2:	f000 fa19 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fe6:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MX_TIM4_Init+0xe4>)
 8000fe8:	f000 fadc 	bl	80015a4 <HAL_TIM_MspPostInit>

}
 8000fec:	bf00      	nop
 8000fee:	3738      	adds	r7, #56	; 0x38
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000284 	.word	0x20000284
 8000ff8:	40000800 	.word	0x40000800

08000ffc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_USART3_UART_Init+0x4c>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <MX_USART3_UART_Init+0x50>)
 8001004:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_USART3_UART_Init+0x4c>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_USART3_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_USART3_UART_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_USART3_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USART3_UART_Init+0x4c>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_USART3_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USART3_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_USART3_UART_Init+0x4c>)
 8001034:	f002 fef0 	bl	8003e18 <HAL_UART_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800103e:	f000 f9eb 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200002cc 	.word	0x200002cc
 800104c:	40004800 	.word	0x40004800

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	4b47      	ldr	r3, [pc, #284]	; (8001184 <MX_GPIO_Init+0x134>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a46      	ldr	r2, [pc, #280]	; (8001184 <MX_GPIO_Init+0x134>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b44      	ldr	r3, [pc, #272]	; (8001184 <MX_GPIO_Init+0x134>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0310 	and.w	r3, r3, #16
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107c:	4b41      	ldr	r3, [pc, #260]	; (8001184 <MX_GPIO_Init+0x134>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a40      	ldr	r2, [pc, #256]	; (8001184 <MX_GPIO_Init+0x134>)
 8001082:	f043 0320 	orr.w	r3, r3, #32
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b3e      	ldr	r3, [pc, #248]	; (8001184 <MX_GPIO_Init+0x134>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0320 	and.w	r3, r3, #32
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <MX_GPIO_Init+0x134>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a3a      	ldr	r2, [pc, #232]	; (8001184 <MX_GPIO_Init+0x134>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b38      	ldr	r3, [pc, #224]	; (8001184 <MX_GPIO_Init+0x134>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ac:	4b35      	ldr	r3, [pc, #212]	; (8001184 <MX_GPIO_Init+0x134>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a34      	ldr	r2, [pc, #208]	; (8001184 <MX_GPIO_Init+0x134>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b32      	ldr	r3, [pc, #200]	; (8001184 <MX_GPIO_Init+0x134>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ca:	482f      	ldr	r0, [pc, #188]	; (8001188 <MX_GPIO_Init+0x138>)
 80010cc:	f000 fff4 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_Pin|led2_Pin|led3_Pin|led4_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	216a      	movs	r1, #106	; 0x6a
 80010d4:	482d      	ldr	r0, [pc, #180]	; (800118c <MX_GPIO_Init+0x13c>)
 80010d6:	f000 ffef 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, stby_Pin|an2_Pin|an1_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2138      	movs	r1, #56	; 0x38
 80010de:	482c      	ldr	r0, [pc, #176]	; (8001190 <MX_GPIO_Init+0x140>)
 80010e0:	f000 ffea 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80010e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4619      	mov	r1, r3
 80010fc:	4822      	ldr	r0, [pc, #136]	; (8001188 <MX_GPIO_Init+0x138>)
 80010fe:	f000 fe57 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin led2_Pin led3_Pin led4_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin|led4_Pin;
 8001102:	236a      	movs	r3, #106	; 0x6a
 8001104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2302      	movs	r3, #2
 8001110:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4619      	mov	r1, r3
 8001118:	481c      	ldr	r0, [pc, #112]	; (800118c <MX_GPIO_Init+0x13c>)
 800111a:	f000 fe49 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : in1_L_Pin in1_R_Pin */
  GPIO_InitStruct.Pin = in1_L_Pin|in1_R_Pin;
 800111e:	2303      	movs	r3, #3
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	4817      	ldr	r0, [pc, #92]	; (8001190 <MX_GPIO_Init+0x140>)
 8001132:	f000 fe3d 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8001136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_GPIO_Init+0x144>)
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	4810      	ldr	r0, [pc, #64]	; (800118c <MX_GPIO_Init+0x13c>)
 800114c:	f000 fe30 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : stby_Pin an2_Pin an1_Pin */
  GPIO_InitStruct.Pin = stby_Pin|an2_Pin|an1_Pin;
 8001150:	2338      	movs	r3, #56	; 0x38
 8001152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2302      	movs	r3, #2
 800115e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	480a      	ldr	r0, [pc, #40]	; (8001190 <MX_GPIO_Init+0x140>)
 8001168:	f000 fe22 	bl	8001db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2028      	movs	r0, #40	; 0x28
 8001172:	f000 fd34 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001176:	2028      	movs	r0, #40	; 0x28
 8001178:	f000 fd4d 	bl	8001c16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40021000 	.word	0x40021000
 8001188:	40011000 	.word	0x40011000
 800118c:	40010800 	.word	0x40010800
 8001190:	40010c00 	.word	0x40010c00
 8001194:	10110000 	.word	0x10110000

08001198 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  if (huart == HUART_3) {
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <HAL_UART_RxCpltCallback+0x48>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d116      	bne.n	80011d6 <HAL_UART_RxCpltCallback+0x3e>
    dataReceived=1;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_UART_RxCpltCallback+0x4c>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]

    if (dataTransmitted != 0) {
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_UART_RxCpltCallback+0x50>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00a      	beq.n	80011cc <HAL_UART_RxCpltCallback+0x34>
      HAL_UART_Transmit_IT(HUART_3, str_uart_buffer, 1);
 80011b6:	2201      	movs	r2, #1
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <HAL_UART_RxCpltCallback+0x54>)
 80011ba:	4809      	ldr	r0, [pc, #36]	; (80011e0 <HAL_UART_RxCpltCallback+0x48>)
 80011bc:	f002 feff 	bl	8003fbe <HAL_UART_Transmit_IT>
      dataReceived=0;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_UART_RxCpltCallback+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
      dataTransmitted=0;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_UART_RxCpltCallback+0x50>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
    }

    HAL_UART_Receive_IT (HUART_3, str_uart_buffer, 1);
 80011cc:	2201      	movs	r2, #1
 80011ce:	4907      	ldr	r1, [pc, #28]	; (80011ec <HAL_UART_RxCpltCallback+0x54>)
 80011d0:	4803      	ldr	r0, [pc, #12]	; (80011e0 <HAL_UART_RxCpltCallback+0x48>)
 80011d2:	f002 ff29 	bl	8004028 <HAL_UART_Receive_IT>
  }
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200002cc 	.word	0x200002cc
 80011e4:	20000314 	.word	0x20000314
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000318 	.word	0x20000318

080011f0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  if (huart == &huart3) {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a0c      	ldr	r2, [pc, #48]	; (800122c <HAL_UART_TxCpltCallback+0x3c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d111      	bne.n	8001224 <HAL_UART_TxCpltCallback+0x34>
    dataTransmitted=1;
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_UART_TxCpltCallback+0x40>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]

    if (dataReceived != 0) {
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_UART_TxCpltCallback+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00a      	beq.n	8001224 <HAL_UART_TxCpltCallback+0x34>
      HAL_UART_Transmit_IT(HUART_3, str_uart_buffer, 1);
 800120e:	2201      	movs	r2, #1
 8001210:	4909      	ldr	r1, [pc, #36]	; (8001238 <HAL_UART_TxCpltCallback+0x48>)
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <HAL_UART_TxCpltCallback+0x3c>)
 8001214:	f002 fed3 	bl	8003fbe <HAL_UART_Transmit_IT>
      dataReceived=0;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_UART_TxCpltCallback+0x44>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
      dataTransmitted=0;
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <HAL_UART_TxCpltCallback+0x40>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200002cc 	.word	0x200002cc
 8001230:	20000000 	.word	0x20000000
 8001234:	20000314 	.word	0x20000314
 8001238:	20000318 	.word	0x20000318

0800123c <HAL_TIM_IC_CaptureCallback>:
	}
*/


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af02      	add	r7, sp, #8
 8001242:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1 ) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a23      	ldr	r2, [pc, #140]	; (80012d8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d140      	bne.n	80012d0 <HAL_TIM_IC_CaptureCallback+0x94>
		uint32_t current_time = HAL_GetTick(); // Получаем текущее время в мс
 800124e:	f000 fbc1 	bl	80019d4 <HAL_GetTick>
 8001252:	6178      	str	r0, [r7, #20]

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7f1b      	ldrb	r3, [r3, #28]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d103      	bne.n	8001264 <HAL_TIM_IC_CaptureCallback+0x28>
			__HAL_TIM_SET_COUNTER(HTIM_1, 0x0000);
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <HAL_TIM_IC_CaptureCallback+0xa0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7f1b      	ldrb	r3, [r3, #28]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d112      	bne.n	8001292 <HAL_TIM_IC_CaptureCallback+0x56>
			uint32_t falling0 = HAL_TIM_ReadCapturedValue(HTIM_1, TIM_CHANNEL_2);
 800126c:	2104      	movs	r1, #4
 800126e:	481b      	ldr	r0, [pc, #108]	; (80012dc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001270:	f002 f948 	bl	8003504 <HAL_TIM_ReadCapturedValue>
 8001274:	6138      	str	r0, [r7, #16]
			fill_arr(&counter1_R, &arr_falling1_R, &falling1_R, falling0, "TIM1  R");
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800127e:	491a      	ldr	r1, [pc, #104]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001280:	481a      	ldr	r0, [pc, #104]	; (80012ec <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001282:	f000 f845 	bl	8001310 <fill_arr>

            flag_pwm1_R = 1; // Ш�?М обнаружен
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
            last_capture_time1_R = current_time;
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	6013      	str	r3, [r2, #0]
		 }

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7f1b      	ldrb	r3, [r3, #28]
 8001296:	2b04      	cmp	r3, #4
 8001298:	d103      	bne.n	80012a2 <HAL_TIM_IC_CaptureCallback+0x66>
			__HAL_TIM_SET_COUNTER(HTIM_1, 0x0000);
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_TIM_IC_CaptureCallback+0xa0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7f1b      	ldrb	r3, [r3, #28]
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d112      	bne.n	80012d0 <HAL_TIM_IC_CaptureCallback+0x94>
			uint32_t falling0 = HAL_TIM_ReadCapturedValue(HTIM_1, TIM_CHANNEL_4);
 80012aa:	210c      	movs	r1, #12
 80012ac:	480b      	ldr	r0, [pc, #44]	; (80012dc <HAL_TIM_IC_CaptureCallback+0xa0>)
 80012ae:	f002 f929 	bl	8003504 <HAL_TIM_ReadCapturedValue>
 80012b2:	60f8      	str	r0, [r7, #12]
			fill_arr(&counter1_L, &arr_falling1_L, &falling1_L, falling0, "TIM1  L");
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_TIM_IC_CaptureCallback+0xc0>)
 80012bc:	4910      	ldr	r1, [pc, #64]	; (8001300 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80012c0:	f000 f826 	bl	8001310 <fill_arr>

            flag_pwm1_L = 1; // Ш�?М обнаружен
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
            last_capture_time1_L = current_time;
 80012ca:	4a10      	ldr	r2, [pc, #64]	; (800130c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	6013      	str	r3, [r2, #0]
		}

	 }

}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40012c00 	.word	0x40012c00
 80012dc:	200001f4 	.word	0x200001f4
 80012e0:	080078a0 	.word	0x080078a0
 80012e4:	2000031c 	.word	0x2000031c
 80012e8:	2000032c 	.word	0x2000032c
 80012ec:	20000328 	.word	0x20000328
 80012f0:	20000334 	.word	0x20000334
 80012f4:	20000338 	.word	0x20000338
 80012f8:	080078a8 	.word	0x080078a8
 80012fc:	20000320 	.word	0x20000320
 8001300:	20000330 	.word	0x20000330
 8001304:	20000329 	.word	0x20000329
 8001308:	20000335 	.word	0x20000335
 800130c:	2000033c 	.word	0x2000033c

08001310 <fill_arr>:

#define size_arr (10)//pwm   in arr

void fill_arr(uint8_t *counter, uint32_t *arr_falling, volatile uint32_t *falling, uint32_t falling0, char *type) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
	//*falling = (falling0 / 100) * 100;
	//print_uniq_uart_data(*falling, type);

	*arr_falling += falling0;
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	441a      	add	r2, r3
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	601a      	str	r2, [r3, #0]
	(*counter)++;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	b2da      	uxtb	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	701a      	strb	r2, [r3, #0]
    if (*counter == size_arr) {
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b0a      	cmp	r3, #10
 800133c:	d11e      	bne.n	800137c <fill_arr+0x6c>
        *falling = *arr_falling / size_arr;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <fill_arr+0x74>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	08da      	lsrs	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]

        *falling = (*falling / 100) * 100;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <fill_arr+0x78>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	2264      	movs	r2, #100	; 0x64
 800135c:	fb03 f202 	mul.w	r2, r3, r2
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]

        *counter = 0;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
        *arr_falling = 0;
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

        //print_uart_data(*falling, type);
        print_uniq_uart_data(*falling, type);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	69b9      	ldr	r1, [r7, #24]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f808 	bl	800138c <print_uniq_uart_data>
    }


}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	cccccccd 	.word	0xcccccccd
 8001388:	51eb851f 	.word	0x51eb851f

0800138c <print_uniq_uart_data>:

void print_uniq_uart_data(volatile uint32_t falling, char *str) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	if (falling != falling_buffer) {
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <print_uniq_uart_data+0x2c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d007      	beq.n	80013b0 <print_uniq_uart_data+0x24>
		print_uart_data(falling, str);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f809 	bl	80013bc <print_uart_data>
		falling_buffer = falling;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a02      	ldr	r2, [pc, #8]	; (80013b8 <print_uniq_uart_data+0x2c>)
 80013ae:	6013      	str	r3, [r2, #0]
	}
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000324 	.word	0x20000324

080013bc <print_uart_data>:

void print_uart_data(volatile uint32_t falling, char *str) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	; 0x50
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	char str1[63] = {0,};
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	223b      	movs	r2, #59	; 0x3b
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 f95b 	bl	800568e <memset>
    snprintf(str1, 63, "\nResult %s= %lu\n", str, falling);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f107 0008 	add.w	r0, r7, #8
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <print_uart_data+0x54>)
 80013e4:	213f      	movs	r1, #63	; 0x3f
 80013e6:	f004 f8db 	bl	80055a0 <sniprintf>
    HAL_UART_Transmit(HUART_3, (uint8_t*)str1, strlen(str1), 1000);
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7fe feae 	bl	8000150 <strlen>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	f107 0108 	add.w	r1, r7, #8
 80013fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <print_uart_data+0x58>)
 8001402:	f002 fd59 	bl	8003eb8 <HAL_UART_Transmit>
}
 8001406:	bf00      	nop
 8001408:	3748      	adds	r7, #72	; 0x48
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	080078b0 	.word	0x080078b0
 8001414:	200002cc 	.word	0x200002cc

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001420:	e7fe      	b.n	8001420 <Error_Handler+0x8>
	...

08001424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_MspInit+0x5c>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	4a14      	ldr	r2, [pc, #80]	; (8001480 <HAL_MspInit+0x5c>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6193      	str	r3, [r2, #24]
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_MspInit+0x5c>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_MspInit+0x5c>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_MspInit+0x5c>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	61d3      	str	r3, [r2, #28]
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_MspInit+0x5c>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_MspInit+0x60>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_MspInit+0x60>)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000
 8001484:	40010000 	.word	0x40010000

08001488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	; 0x30
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0320 	add.w	r3, r7, #32
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a3c      	ldr	r2, [pc, #240]	; (8001594 <HAL_TIM_Base_MspInit+0x10c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d12d      	bne.n	8001504 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014a8:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a3a      	ldr	r2, [pc, #232]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 80014ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b38      	ldr	r3, [pc, #224]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b35      	ldr	r3, [pc, #212]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a34      	ldr	r2, [pc, #208]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
 80014d6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80014d8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0320 	add.w	r3, r7, #32
 80014ea:	4619      	mov	r1, r3
 80014ec:	482b      	ldr	r0, [pc, #172]	; (800159c <HAL_TIM_Base_MspInit+0x114>)
 80014ee:	f000 fc5f 	bl	8001db0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	201b      	movs	r0, #27
 80014f8:	f000 fb71 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80014fc:	201b      	movs	r0, #27
 80014fe:	f000 fb8a 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001502:	e042      	b.n	800158a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800150c:	d12c      	bne.n	8001568 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a21      	ldr	r2, [pc, #132]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6193      	str	r3, [r2, #24]
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800153e:	2305      	movs	r3, #5
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	4619      	mov	r1, r3
 8001550:	4812      	ldr	r0, [pc, #72]	; (800159c <HAL_TIM_Base_MspInit+0x114>)
 8001552:	f000 fc2d 	bl	8001db0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	201c      	movs	r0, #28
 800155c:	f000 fb3f 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001560:	201c      	movs	r0, #28
 8001562:	f000 fb58 	bl	8001c16 <HAL_NVIC_EnableIRQ>
}
 8001566:	e010      	b.n	800158a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM4)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <HAL_TIM_Base_MspInit+0x118>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d10b      	bne.n	800158a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_TIM_Base_MspInit+0x110>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
}
 800158a:	bf00      	nop
 800158c:	3730      	adds	r7, #48	; 0x30
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40012c00 	.word	0x40012c00
 8001598:	40021000 	.word	0x40021000
 800159c:	40010800 	.word	0x40010800
 80015a0:	40000800 	.word	0x40000800

080015a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_TIM_MspPostInit+0x58>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d117      	bne.n	80015f4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_TIM_MspPostInit+0x5c>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_TIM_MspPostInit+0x5c>)
 80015ca:	f043 0308 	orr.w	r3, r3, #8
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_TIM_MspPostInit+0x5c>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015dc:	2340      	movs	r3, #64	; 0x40
 80015de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_TIM_MspPostInit+0x60>)
 80015f0:	f000 fbde 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40000800 	.word	0x40000800
 8001600:	40021000 	.word	0x40021000
 8001604:	40010c00 	.word	0x40010c00

08001608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <HAL_UART_MspInit+0x9c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d139      	bne.n	800169c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <HAL_UART_MspInit+0xa0>)
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	4a1e      	ldr	r2, [pc, #120]	; (80016a8 <HAL_UART_MspInit+0xa0>)
 800162e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001632:	61d3      	str	r3, [r2, #28]
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_UART_MspInit+0xa0>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_UART_MspInit+0xa0>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <HAL_UART_MspInit+0xa0>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_UART_MspInit+0xa0>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4619      	mov	r1, r3
 800166c:	480f      	ldr	r0, [pc, #60]	; (80016ac <HAL_UART_MspInit+0xa4>)
 800166e:	f000 fb9f 	bl	8001db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001672:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	4619      	mov	r1, r3
 8001686:	4809      	ldr	r0, [pc, #36]	; (80016ac <HAL_UART_MspInit+0xa4>)
 8001688:	f000 fb92 	bl	8001db0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	2027      	movs	r0, #39	; 0x27
 8001692:	f000 faa4 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001696:	2027      	movs	r0, #39	; 0x27
 8001698:	f000 fabd 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40004800 	.word	0x40004800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010c00 	.word	0x40010c00

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b4:	e7fe      	b.n	80016b4 <NMI_Handler+0x4>

080016b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <MemManage_Handler+0x4>

080016c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <UsageFault_Handler+0x4>

080016ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f6:	f000 f95b 	bl	80019b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <TIM1_CC_IRQHandler+0x10>)
 8001706:	f001 fbcf 	bl	8002ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200001f4 	.word	0x200001f4

08001714 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <TIM2_IRQHandler+0x10>)
 800171a:	f001 fbc5 	bl	8002ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000023c 	.word	0x2000023c

08001728 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <USART3_IRQHandler+0x10>)
 800172e:	f002 fca1 	bl	8004074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200002cc 	.word	0x200002cc

0800173c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8001740:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001744:	f000 fcd0 	bl	80020e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <_kill>:

int _kill(int pid, int sig)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001764:	f003 ffe6 	bl	8005734 <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	2216      	movs	r2, #22
 800176c:	601a      	str	r2, [r3, #0]
  return -1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_exit>:

void _exit (int status)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001782:	f04f 31ff 	mov.w	r1, #4294967295
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffe7 	bl	800175a <_kill>
  while (1) {}    /* Make sure we hang here */
 800178c:	e7fe      	b.n	800178c <_exit+0x12>

0800178e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	e00a      	b.n	80017b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a0:	f3af 8000 	nop.w
 80017a4:	4601      	mov	r1, r0
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	60ba      	str	r2, [r7, #8]
 80017ac:	b2ca      	uxtb	r2, r1
 80017ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	3301      	adds	r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	dbf0      	blt.n	80017a0 <_read+0x12>
  }

  return len;
 80017be:	687b      	ldr	r3, [r7, #4]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	e009      	b.n	80017ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	60ba      	str	r2, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	dbf1      	blt.n	80017da <_write+0x12>
  }
  return len;
 80017f6:	687b      	ldr	r3, [r7, #4]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_close>:

int _close(int file)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001826:	605a      	str	r2, [r3, #4]
  return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <_isatty>:

int _isatty(int file)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800183c:	2301      	movs	r3, #1
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	; (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f003 ff50 	bl	8005734 <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	220c      	movs	r2, #12
 8001898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20005000 	.word	0x20005000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	20000340 	.word	0x20000340
 80018c8:	20000498 	.word	0x20000498

080018cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d8:	f7ff fff8 	bl	80018cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018de:	490c      	ldr	r1, [pc, #48]	; (8001910 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018e0:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018f4:	4c09      	ldr	r4, [pc, #36]	; (800191c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001902:	f003 ff1d 	bl	8005740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001906:	f7ff f95f 	bl	8000bc8 <main>
  bx lr
 800190a:	4770      	bx	lr
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001914:	08007c64 	.word	0x08007c64
  ldr r2, =_sbss
 8001918:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800191c:	20000494 	.word	0x20000494

08001920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC1_2_IRQHandler>
	...

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_Init+0x28>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a07      	ldr	r2, [pc, #28]	; (800194c <HAL_Init+0x28>)
 800192e:	f043 0310 	orr.w	r3, r3, #16
 8001932:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001934:	2003      	movs	r0, #3
 8001936:	f000 f947 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193a:	200f      	movs	r0, #15
 800193c:	f000 f808 	bl	8001950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001940:	f7ff fd70 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40022000 	.word	0x40022000

08001950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_InitTick+0x54>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_InitTick+0x58>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001966:	fbb3 f3f1 	udiv	r3, r3, r1
 800196a:	fbb2 f3f3 	udiv	r3, r2, r3
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f95f 	bl	8001c32 <HAL_SYSTICK_Config>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e00e      	b.n	800199c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b0f      	cmp	r3, #15
 8001982:	d80a      	bhi.n	800199a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001984:	2200      	movs	r2, #0
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	f000 f927 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001990:	4a06      	ldr	r2, [pc, #24]	; (80019ac <HAL_InitTick+0x5c>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	e000      	b.n	800199c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000004 	.word	0x20000004
 80019a8:	2000000c 	.word	0x2000000c
 80019ac:	20000008 	.word	0x20000008

080019b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_IncTick+0x1c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_IncTick+0x20>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	4a03      	ldr	r2, [pc, #12]	; (80019d0 <HAL_IncTick+0x20>)
 80019c2:	6013      	str	r3, [r2, #0]
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	2000000c 	.word	0x2000000c
 80019d0:	20000344 	.word	0x20000344

080019d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return uwTick;
 80019d8:	4b02      	ldr	r3, [pc, #8]	; (80019e4 <HAL_GetTick+0x10>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	20000344 	.word	0x20000344

080019e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff fff0 	bl	80019d4 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d005      	beq.n	8001a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_Delay+0x44>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0e:	bf00      	nop
 8001a10:	f7ff ffe0 	bl	80019d4 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d8f7      	bhi.n	8001a10 <HAL_Delay+0x28>
  {
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000000c 	.word	0x2000000c

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4906      	ldr	r1, [pc, #24]	; (8001ac8 <__NVIC_EnableIRQ+0x34>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db0a      	blt.n	8001af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	490c      	ldr	r1, [pc, #48]	; (8001b18 <__NVIC_SetPriority+0x4c>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af4:	e00a      	b.n	8001b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <__NVIC_SetPriority+0x50>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3b04      	subs	r3, #4
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	761a      	strb	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f1c3 0307 	rsb	r3, r3, #7
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2304      	movcs	r3, #4
 8001b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d902      	bls.n	8001b50 <NVIC_EncodePriority+0x30>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3b03      	subs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <NVIC_EncodePriority+0x32>
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	4313      	orrs	r3, r2
         );
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	; 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff90 	bl	8001acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff2d 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf0:	f7ff ff42 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff ff90 	bl	8001b20 <NVIC_EncodePriority>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff5f 	bl	8001acc <__NVIC_SetPriority>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff35 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffa2 	bl	8001b84 <SysTick_Config>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d008      	beq.n	8001c74 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2204      	movs	r2, #4
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e020      	b.n	8001cb6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 020e 	bic.w	r2, r2, #14
 8001c82:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d005      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	e051      	b.n	8001d88 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 020e 	bic.w	r2, r2, #14
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_DMA_Abort_IT+0xd4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d029      	beq.n	8001d62 <HAL_DMA_Abort_IT+0xa2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <HAL_DMA_Abort_IT+0xd8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d022      	beq.n	8001d5e <HAL_DMA_Abort_IT+0x9e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1f      	ldr	r2, [pc, #124]	; (8001d9c <HAL_DMA_Abort_IT+0xdc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01a      	beq.n	8001d58 <HAL_DMA_Abort_IT+0x98>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <HAL_DMA_Abort_IT+0xe0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d012      	beq.n	8001d52 <HAL_DMA_Abort_IT+0x92>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1c      	ldr	r2, [pc, #112]	; (8001da4 <HAL_DMA_Abort_IT+0xe4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00a      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x8c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <HAL_DMA_Abort_IT+0xe8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d102      	bne.n	8001d46 <HAL_DMA_Abort_IT+0x86>
 8001d40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d44:	e00e      	b.n	8001d64 <HAL_DMA_Abort_IT+0xa4>
 8001d46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d4a:	e00b      	b.n	8001d64 <HAL_DMA_Abort_IT+0xa4>
 8001d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d50:	e008      	b.n	8001d64 <HAL_DMA_Abort_IT+0xa4>
 8001d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d56:	e005      	b.n	8001d64 <HAL_DMA_Abort_IT+0xa4>
 8001d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d5c:	e002      	b.n	8001d64 <HAL_DMA_Abort_IT+0xa4>
 8001d5e:	2310      	movs	r3, #16
 8001d60:	e000      	b.n	8001d64 <HAL_DMA_Abort_IT+0xa4>
 8001d62:	2301      	movs	r3, #1
 8001d64:	4a11      	ldr	r2, [pc, #68]	; (8001dac <HAL_DMA_Abort_IT+0xec>)
 8001d66:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
    } 
  }
  return status;
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40020008 	.word	0x40020008
 8001d98:	4002001c 	.word	0x4002001c
 8001d9c:	40020030 	.word	0x40020030
 8001da0:	40020044 	.word	0x40020044
 8001da4:	40020058 	.word	0x40020058
 8001da8:	4002006c 	.word	0x4002006c
 8001dac:	40020000 	.word	0x40020000

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b08b      	sub	sp, #44	; 0x2c
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	e169      	b.n	8002098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f040 8158 	bne.w	8002092 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4a9a      	ldr	r2, [pc, #616]	; (8002050 <HAL_GPIO_Init+0x2a0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d05e      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001dec:	4a98      	ldr	r2, [pc, #608]	; (8002050 <HAL_GPIO_Init+0x2a0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d875      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001df2:	4a98      	ldr	r2, [pc, #608]	; (8002054 <HAL_GPIO_Init+0x2a4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d058      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001df8:	4a96      	ldr	r2, [pc, #600]	; (8002054 <HAL_GPIO_Init+0x2a4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d86f      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001dfe:	4a96      	ldr	r2, [pc, #600]	; (8002058 <HAL_GPIO_Init+0x2a8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d052      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e04:	4a94      	ldr	r2, [pc, #592]	; (8002058 <HAL_GPIO_Init+0x2a8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d869      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e0a:	4a94      	ldr	r2, [pc, #592]	; (800205c <HAL_GPIO_Init+0x2ac>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d04c      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e10:	4a92      	ldr	r2, [pc, #584]	; (800205c <HAL_GPIO_Init+0x2ac>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d863      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e16:	4a92      	ldr	r2, [pc, #584]	; (8002060 <HAL_GPIO_Init+0x2b0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d046      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e1c:	4a90      	ldr	r2, [pc, #576]	; (8002060 <HAL_GPIO_Init+0x2b0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d85d      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	d82a      	bhi.n	8001e7c <HAL_GPIO_Init+0xcc>
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d859      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e2a:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <HAL_GPIO_Init+0x80>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001eab 	.word	0x08001eab
 8001e34:	08001e85 	.word	0x08001e85
 8001e38:	08001e97 	.word	0x08001e97
 8001e3c:	08001ed9 	.word	0x08001ed9
 8001e40:	08001edf 	.word	0x08001edf
 8001e44:	08001edf 	.word	0x08001edf
 8001e48:	08001edf 	.word	0x08001edf
 8001e4c:	08001edf 	.word	0x08001edf
 8001e50:	08001edf 	.word	0x08001edf
 8001e54:	08001edf 	.word	0x08001edf
 8001e58:	08001edf 	.word	0x08001edf
 8001e5c:	08001edf 	.word	0x08001edf
 8001e60:	08001edf 	.word	0x08001edf
 8001e64:	08001edf 	.word	0x08001edf
 8001e68:	08001edf 	.word	0x08001edf
 8001e6c:	08001edf 	.word	0x08001edf
 8001e70:	08001edf 	.word	0x08001edf
 8001e74:	08001e8d 	.word	0x08001e8d
 8001e78:	08001ea1 	.word	0x08001ea1
 8001e7c:	4a79      	ldr	r2, [pc, #484]	; (8002064 <HAL_GPIO_Init+0x2b4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e82:	e02c      	b.n	8001ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	623b      	str	r3, [r7, #32]
          break;
 8001e8a:	e029      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	3304      	adds	r3, #4
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e024      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	3308      	adds	r3, #8
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e01f      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e01a      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e013      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	611a      	str	r2, [r3, #16]
          break;
 8001eca:	e009      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	615a      	str	r2, [r3, #20]
          break;
 8001ed6:	e003      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          break;
 8001ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2bff      	cmp	r3, #255	; 0xff
 8001ee4:	d801      	bhi.n	8001eea <HAL_GPIO_Init+0x13a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	e001      	b.n	8001eee <HAL_GPIO_Init+0x13e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d802      	bhi.n	8001efc <HAL_GPIO_Init+0x14c>
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x152>
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	3b08      	subs	r3, #8
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	210f      	movs	r1, #15
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	401a      	ands	r2, r3
 8001f14:	6a39      	ldr	r1, [r7, #32]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80b1 	beq.w	8002092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f30:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a4c      	ldr	r2, [pc, #304]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f48:	4a48      	ldr	r2, [pc, #288]	; (800206c <HAL_GPIO_Init+0x2bc>)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a40      	ldr	r2, [pc, #256]	; (8002070 <HAL_GPIO_Init+0x2c0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_GPIO_Init+0x1ec>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3f      	ldr	r2, [pc, #252]	; (8002074 <HAL_GPIO_Init+0x2c4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00d      	beq.n	8001f98 <HAL_GPIO_Init+0x1e8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a3e      	ldr	r2, [pc, #248]	; (8002078 <HAL_GPIO_Init+0x2c8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_Init+0x1e4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a3d      	ldr	r2, [pc, #244]	; (800207c <HAL_GPIO_Init+0x2cc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_GPIO_Init+0x1e0>
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e006      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f90:	2304      	movs	r3, #4
 8001f92:	e004      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fae:	492f      	ldr	r1, [pc, #188]	; (800206c <HAL_GPIO_Init+0x2bc>)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	492c      	ldr	r1, [pc, #176]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	4928      	ldr	r1, [pc, #160]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff0:	4b23      	ldr	r3, [pc, #140]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	4922      	ldr	r1, [pc, #136]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60cb      	str	r3, [r1, #12]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	491e      	ldr	r1, [pc, #120]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002008:	4013      	ands	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	4918      	ldr	r1, [pc, #96]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	43db      	mvns	r3, r3
 800202e:	4914      	ldr	r1, [pc, #80]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002030:	4013      	ands	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d021      	beq.n	8002084 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	490e      	ldr	r1, [pc, #56]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e021      	b.n	8002092 <HAL_GPIO_Init+0x2e2>
 800204e:	bf00      	nop
 8002050:	10320000 	.word	0x10320000
 8002054:	10310000 	.word	0x10310000
 8002058:	10220000 	.word	0x10220000
 800205c:	10210000 	.word	0x10210000
 8002060:	10120000 	.word	0x10120000
 8002064:	10110000 	.word	0x10110000
 8002068:	40021000 	.word	0x40021000
 800206c:	40010000 	.word	0x40010000
 8002070:	40010800 	.word	0x40010800
 8002074:	40010c00 	.word	0x40010c00
 8002078:	40011000 	.word	0x40011000
 800207c:	40011400 	.word	0x40011400
 8002080:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_GPIO_Init+0x304>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	43db      	mvns	r3, r3
 800208c:	4909      	ldr	r1, [pc, #36]	; (80020b4 <HAL_GPIO_Init+0x304>)
 800208e:	4013      	ands	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	3301      	adds	r3, #1
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f47f ae8e 	bne.w	8001dc4 <HAL_GPIO_Init+0x14>
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	372c      	adds	r7, #44	; 0x2c
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	40010400 	.word	0x40010400

080020b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	4613      	mov	r3, r2
 80020c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c8:	787b      	ldrb	r3, [r7, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020d4:	e003      	b.n	80020de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	041a      	lsls	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	611a      	str	r2, [r3, #16]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020fe:	4a05      	ldr	r2, [pc, #20]	; (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f806 	bl	8002118 <HAL_GPIO_EXTI_Callback>
  }
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e272      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8087 	beq.w	800225a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800214c:	4b92      	ldr	r3, [pc, #584]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	d00c      	beq.n	8002172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002158:	4b8f      	ldr	r3, [pc, #572]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d112      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
 8002164:	4b8c      	ldr	r3, [pc, #560]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d10b      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002172:	4b89      	ldr	r3, [pc, #548]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06c      	beq.n	8002258 <HAL_RCC_OscConfig+0x12c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d168      	bne.n	8002258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e24c      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x76>
 8002194:	4b80      	ldr	r3, [pc, #512]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a7f      	ldr	r2, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e02e      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x98>
 80021aa:	4b7b      	ldr	r3, [pc, #492]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7a      	ldr	r2, [pc, #488]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b78      	ldr	r3, [pc, #480]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a77      	ldr	r2, [pc, #476]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0xbc>
 80021ce:	4b72      	ldr	r3, [pc, #456]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a71      	ldr	r2, [pc, #452]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6e      	ldr	r2, [pc, #440]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021e8:	4b6b      	ldr	r3, [pc, #428]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6a      	ldr	r2, [pc, #424]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a67      	ldr	r2, [pc, #412]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fbe4 	bl	80019d4 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fbe0 	bl	80019d4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e200      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xe4>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff fbd0 	bl	80019d4 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff fbcc 	bl	80019d4 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1ec      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x10c>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002266:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002272:	4b49      	ldr	r3, [pc, #292]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
 800227e:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1c0      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4939      	ldr	r1, [pc, #228]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_RCC_OscConfig+0x270>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff fb85 	bl	80019d4 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ce:	f7ff fb81 	bl	80019d4 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1a1      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4927      	ldr	r1, [pc, #156]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b26      	ldr	r3, [pc, #152]	; (800239c <HAL_RCC_OscConfig+0x270>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fb64 	bl	80019d4 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002310:	f7ff fb60 	bl	80019d4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e180      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d03a      	beq.n	80023b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d019      	beq.n	8002376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7ff fb44 	bl	80019d4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7ff fb40 	bl	80019d4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e160      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800236e:	2001      	movs	r0, #1
 8002370:	f000 face 	bl	8002910 <RCC_Delay>
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7ff fb2a 	bl	80019d4 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002382:	e00f      	b.n	80023a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002384:	f7ff fb26 	bl	80019d4 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d908      	bls.n	80023a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e146      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	42420000 	.word	0x42420000
 80023a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	4b92      	ldr	r3, [pc, #584]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e9      	bne.n	8002384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a6 	beq.w	800250a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b8b      	ldr	r3, [pc, #556]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10d      	bne.n	80023ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b88      	ldr	r3, [pc, #544]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a87      	ldr	r2, [pc, #540]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b85      	ldr	r3, [pc, #532]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b82      	ldr	r3, [pc, #520]	; (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d118      	bne.n	8002428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b7f      	ldr	r3, [pc, #508]	; (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7e      	ldr	r2, [pc, #504]	; (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7ff fae7 	bl	80019d4 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240a:	f7ff fae3 	bl	80019d4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	; 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e103      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4b75      	ldr	r3, [pc, #468]	; (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x312>
 8002430:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a6e      	ldr	r2, [pc, #440]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	e02d      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x334>
 8002446:	4b6a      	ldr	r3, [pc, #424]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a69      	ldr	r2, [pc, #420]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a66      	ldr	r2, [pc, #408]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	e01c      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x356>
 8002468:	4b61      	ldr	r3, [pc, #388]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a60      	ldr	r2, [pc, #384]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	4b5e      	ldr	r3, [pc, #376]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a5d      	ldr	r2, [pc, #372]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002482:	4b5b      	ldr	r3, [pc, #364]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a5a      	ldr	r2, [pc, #360]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6213      	str	r3, [r2, #32]
 800248e:	4b58      	ldr	r3, [pc, #352]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a57      	ldr	r2, [pc, #348]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d015      	beq.n	80024ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7ff fa97 	bl	80019d4 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7ff fa93 	bl	80019d4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0b1      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	4b4b      	ldr	r3, [pc, #300]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ee      	beq.n	80024aa <HAL_RCC_OscConfig+0x37e>
 80024cc:	e014      	b.n	80024f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7ff fa81 	bl	80019d4 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7ff fa7d 	bl	80019d4 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e09b      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ee      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b3c      	ldr	r3, [pc, #240]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a3b      	ldr	r2, [pc, #236]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8087 	beq.w	8002622 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002514:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d061      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d146      	bne.n	80025b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7ff fa51 	bl	80019d4 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7ff fa4d 	bl	80019d4 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e06d      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002548:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255c:	d108      	bne.n	8002570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4921      	ldr	r1, [pc, #132]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002570:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a19      	ldr	r1, [r3, #32]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	430b      	orrs	r3, r1
 8002582:	491b      	ldr	r1, [pc, #108]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7ff fa21 	bl	80019d4 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002596:	f7ff fa1d 	bl	80019d4 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e03d      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x46a>
 80025b4:	e035      	b.n	8002622 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7ff fa0a 	bl	80019d4 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7ff fa06 	bl	80019d4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e026      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x498>
 80025e2:	e01e      	b.n	8002622 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e019      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40007000 	.word	0x40007000
 80025f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_OscConfig+0x500>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	429a      	cmp	r2, r3
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000

08002630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0d0      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d910      	bls.n	8002674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b67      	ldr	r3, [pc, #412]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 0207 	bic.w	r2, r3, #7
 800265a:	4965      	ldr	r1, [pc, #404]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b63      	ldr	r3, [pc, #396]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0b8      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800268c:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a58      	ldr	r2, [pc, #352]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a4:	4b53      	ldr	r3, [pc, #332]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a52      	ldr	r2, [pc, #328]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b0:	4b50      	ldr	r3, [pc, #320]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	494d      	ldr	r1, [pc, #308]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d040      	beq.n	8002750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d115      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e07f      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e073      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fe:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06b      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4936      	ldr	r1, [pc, #216]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002720:	f7ff f958 	bl	80019d4 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7ff f954 	bl	80019d4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e053      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 020c 	and.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	429a      	cmp	r2, r3
 800274e:	d1eb      	bne.n	8002728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d210      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 0207 	bic.w	r2, r3, #7
 8002766:	4922      	ldr	r1, [pc, #136]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e032      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4916      	ldr	r1, [pc, #88]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	490e      	ldr	r1, [pc, #56]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027be:	f000 f821 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 80027c2:	4602      	mov	r2, r0
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	490a      	ldr	r1, [pc, #40]	; (80027f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	5ccb      	ldrb	r3, [r1, r3]
 80027d2:	fa22 f303 	lsr.w	r3, r2, r3
 80027d6:	4a09      	ldr	r2, [pc, #36]	; (80027fc <HAL_RCC_ClockConfig+0x1cc>)
 80027d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCC_ClockConfig+0x1d0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff f8b6 	bl	8001950 <HAL_InitTick>

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40022000 	.word	0x40022000
 80027f4:	40021000 	.word	0x40021000
 80027f8:	080078c4 	.word	0x080078c4
 80027fc:	20000004 	.word	0x20000004
 8002800:	20000008 	.word	0x20000008

08002804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800281e:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <HAL_RCC_GetSysClockFreq+0x94>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b04      	cmp	r3, #4
 800282c:	d002      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x30>
 800282e:	2b08      	cmp	r3, #8
 8002830:	d003      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x36>
 8002832:	e027      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002836:	613b      	str	r3, [r7, #16]
      break;
 8002838:	e027      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	0c9b      	lsrs	r3, r3, #18
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002844:	5cd3      	ldrb	r3, [r2, r3]
 8002846:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d010      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_RCC_GetSysClockFreq+0x94>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0c5b      	lsrs	r3, r3, #17
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	4a11      	ldr	r2, [pc, #68]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800285e:	5cd3      	ldrb	r3, [r2, r3]
 8002860:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a0d      	ldr	r2, [pc, #52]	; (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002866:	fb03 f202 	mul.w	r2, r3, r2
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e004      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002878:	fb02 f303 	mul.w	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	613b      	str	r3, [r7, #16]
      break;
 8002882:	e002      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002886:	613b      	str	r3, [r7, #16]
      break;
 8002888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288a:	693b      	ldr	r3, [r7, #16]
}
 800288c:	4618      	mov	r0, r3
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	007a1200 	.word	0x007a1200
 80028a0:	080078dc 	.word	0x080078dc
 80028a4:	080078ec 	.word	0x080078ec
 80028a8:	003d0900 	.word	0x003d0900

080028ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b0:	4b02      	ldr	r3, [pc, #8]	; (80028bc <HAL_RCC_GetHCLKFreq+0x10>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	20000004 	.word	0x20000004

080028c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028c4:	f7ff fff2 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	4903      	ldr	r1, [pc, #12]	; (80028e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	080078d4 	.word	0x080078d4

080028e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028ec:	f7ff ffde 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	0adb      	lsrs	r3, r3, #11
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4903      	ldr	r1, [pc, #12]	; (800290c <HAL_RCC_GetPCLK2Freq+0x24>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	080078d4 	.word	0x080078d4

08002910 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <RCC_Delay+0x34>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <RCC_Delay+0x38>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0a5b      	lsrs	r3, r3, #9
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800292c:	bf00      	nop
  }
  while (Delay --);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1e5a      	subs	r2, r3, #1
 8002932:	60fa      	str	r2, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f9      	bne.n	800292c <RCC_Delay+0x1c>
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	20000004 	.word	0x20000004
 8002948:	10624dd3 	.word	0x10624dd3

0800294c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e041      	b.n	80029e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe fd88 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f000 fe22 	bl	80035d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e041      	b.n	8002a80 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d106      	bne.n	8002a16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f839 	bl	8002a88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3304      	adds	r3, #4
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f000 fdd3 	bl	80035d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_TIM_PWM_Start+0x24>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	bf14      	ite	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	2300      	moveq	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e022      	b.n	8002b06 <HAL_TIM_PWM_Start+0x6a>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d109      	bne.n	8002ada <HAL_TIM_PWM_Start+0x3e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e015      	b.n	8002b06 <HAL_TIM_PWM_Start+0x6a>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d109      	bne.n	8002af4 <HAL_TIM_PWM_Start+0x58>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e008      	b.n	8002b06 <HAL_TIM_PWM_Start+0x6a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e05e      	b.n	8002bcc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <HAL_TIM_PWM_Start+0x82>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b1c:	e013      	b.n	8002b46 <HAL_TIM_PWM_Start+0xaa>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d104      	bne.n	8002b2e <HAL_TIM_PWM_Start+0x92>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b2c:	e00b      	b.n	8002b46 <HAL_TIM_PWM_Start+0xaa>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d104      	bne.n	8002b3e <HAL_TIM_PWM_Start+0xa2>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b3c:	e003      	b.n	8002b46 <HAL_TIM_PWM_Start+0xaa>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	6839      	ldr	r1, [r7, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f001 f8cd 	bl	8003cee <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <HAL_TIM_PWM_Start+0x138>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d107      	bne.n	8002b6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <HAL_TIM_PWM_Start+0x138>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00e      	beq.n	8002b96 <HAL_TIM_PWM_Start+0xfa>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b80:	d009      	beq.n	8002b96 <HAL_TIM_PWM_Start+0xfa>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <HAL_TIM_PWM_Start+0x13c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_TIM_PWM_Start+0xfa>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <HAL_TIM_PWM_Start+0x140>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d111      	bne.n	8002bba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b06      	cmp	r3, #6
 8002ba6:	d010      	beq.n	8002bca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb8:	e007      	b.n	8002bca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40000800 	.word	0x40000800

08002be0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e041      	b.n	8002c76 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f839 	bl	8002c7e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f000 fcd8 	bl	80035d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <HAL_TIM_IC_Start_IT+0x1e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	e013      	b.n	8002cd6 <HAL_TIM_IC_Start_IT+0x46>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d104      	bne.n	8002cbe <HAL_TIM_IC_Start_IT+0x2e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	e00b      	b.n	8002cd6 <HAL_TIM_IC_Start_IT+0x46>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d104      	bne.n	8002cce <HAL_TIM_IC_Start_IT+0x3e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	e003      	b.n	8002cd6 <HAL_TIM_IC_Start_IT+0x46>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <HAL_TIM_IC_Start_IT+0x58>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	e013      	b.n	8002d10 <HAL_TIM_IC_Start_IT+0x80>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d104      	bne.n	8002cf8 <HAL_TIM_IC_Start_IT+0x68>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e00b      	b.n	8002d10 <HAL_TIM_IC_Start_IT+0x80>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d104      	bne.n	8002d08 <HAL_TIM_IC_Start_IT+0x78>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e003      	b.n	8002d10 <HAL_TIM_IC_Start_IT+0x80>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d12:	7bbb      	ldrb	r3, [r7, #14]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d102      	bne.n	8002d1e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d18:	7b7b      	ldrb	r3, [r7, #13]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e0b8      	b.n	8002e94 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d104      	bne.n	8002d32 <HAL_TIM_IC_Start_IT+0xa2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d30:	e013      	b.n	8002d5a <HAL_TIM_IC_Start_IT+0xca>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d104      	bne.n	8002d42 <HAL_TIM_IC_Start_IT+0xb2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d40:	e00b      	b.n	8002d5a <HAL_TIM_IC_Start_IT+0xca>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d104      	bne.n	8002d52 <HAL_TIM_IC_Start_IT+0xc2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d50:	e003      	b.n	8002d5a <HAL_TIM_IC_Start_IT+0xca>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_IC_Start_IT+0xda>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d68:	e013      	b.n	8002d92 <HAL_TIM_IC_Start_IT+0x102>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d104      	bne.n	8002d7a <HAL_TIM_IC_Start_IT+0xea>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d78:	e00b      	b.n	8002d92 <HAL_TIM_IC_Start_IT+0x102>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d104      	bne.n	8002d8a <HAL_TIM_IC_Start_IT+0xfa>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d88:	e003      	b.n	8002d92 <HAL_TIM_IC_Start_IT+0x102>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	d841      	bhi.n	8002e1c <HAL_TIM_IC_Start_IT+0x18c>
 8002d98:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <HAL_TIM_IC_Start_IT+0x110>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002dd5 	.word	0x08002dd5
 8002da4:	08002e1d 	.word	0x08002e1d
 8002da8:	08002e1d 	.word	0x08002e1d
 8002dac:	08002e1d 	.word	0x08002e1d
 8002db0:	08002de7 	.word	0x08002de7
 8002db4:	08002e1d 	.word	0x08002e1d
 8002db8:	08002e1d 	.word	0x08002e1d
 8002dbc:	08002e1d 	.word	0x08002e1d
 8002dc0:	08002df9 	.word	0x08002df9
 8002dc4:	08002e1d 	.word	0x08002e1d
 8002dc8:	08002e1d 	.word	0x08002e1d
 8002dcc:	08002e1d 	.word	0x08002e1d
 8002dd0:	08002e0b 	.word	0x08002e0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0202 	orr.w	r2, r2, #2
 8002de2:	60da      	str	r2, [r3, #12]
      break;
 8002de4:	e01d      	b.n	8002e22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0204 	orr.w	r2, r2, #4
 8002df4:	60da      	str	r2, [r3, #12]
      break;
 8002df6:	e014      	b.n	8002e22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0208 	orr.w	r2, r2, #8
 8002e06:	60da      	str	r2, [r3, #12]
      break;
 8002e08:	e00b      	b.n	8002e22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0210 	orr.w	r2, r2, #16
 8002e18:	60da      	str	r2, [r3, #12]
      break;
 8002e1a:	e002      	b.n	8002e22 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e20:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d134      	bne.n	8002e92 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	6839      	ldr	r1, [r7, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 ff5c 	bl	8003cee <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <HAL_TIM_IC_Start_IT+0x20c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00e      	beq.n	8002e5e <HAL_TIM_IC_Start_IT+0x1ce>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e48:	d009      	beq.n	8002e5e <HAL_TIM_IC_Start_IT+0x1ce>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <HAL_TIM_IC_Start_IT+0x210>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_TIM_IC_Start_IT+0x1ce>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a12      	ldr	r2, [pc, #72]	; (8002ea4 <HAL_TIM_IC_Start_IT+0x214>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d111      	bne.n	8002e82 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b06      	cmp	r3, #6
 8002e6e:	d010      	beq.n	8002e92 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e80:	e007      	b.n	8002e92 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40000800 	.word	0x40000800

08002ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d122      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0202 	mvn.w	r2, #2
 8002ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fe f9a6 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fb53 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fb59 	bl	80035b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0204 	mvn.w	r2, #4
 8002f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe f97c 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fb29 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fb2f 	bl	80035b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d122      	bne.n	8002fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d11b      	bne.n	8002fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0208 	mvn.w	r2, #8
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2204      	movs	r2, #4
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe f952 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 faff 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fb05 	bl	80035b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b10      	cmp	r3, #16
 8002fb8:	d122      	bne.n	8003000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d11b      	bne.n	8003000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0210 	mvn.w	r2, #16
 8002fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fe f928 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 8002fec:	e005      	b.n	8002ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fad5 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fadb 	bl	80035b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d10e      	bne.n	800302c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0201 	mvn.w	r2, #1
 8003024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fab0 	bl	800358c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b80      	cmp	r3, #128	; 0x80
 8003038:	d10e      	bne.n	8003058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003044:	2b80      	cmp	r3, #128	; 0x80
 8003046:	d107      	bne.n	8003058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fed7 	bl	8003e06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d10e      	bne.n	8003084 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d107      	bne.n	8003084 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800307c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa9f 	bl	80035c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b20      	cmp	r3, #32
 8003090:	d10e      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b20      	cmp	r3, #32
 800309e:	d107      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0220 	mvn.w	r2, #32
 80030a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fea2 	bl	8003df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e088      	b.n	80031e8 <HAL_TIM_IC_ConfigChannel+0x130>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d11b      	bne.n	800311c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80030f4:	f000 fc58 	bl	80039a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 020c 	bic.w	r2, r2, #12
 8003106:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6999      	ldr	r1, [r3, #24]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	619a      	str	r2, [r3, #24]
 800311a:	e060      	b.n	80031de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b04      	cmp	r3, #4
 8003120:	d11c      	bne.n	800315c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003132:	f000 fcc1 	bl	8003ab8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699a      	ldr	r2, [r3, #24]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003144:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6999      	ldr	r1, [r3, #24]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	021a      	lsls	r2, r3, #8
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	619a      	str	r2, [r3, #24]
 800315a:	e040      	b.n	80031de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b08      	cmp	r3, #8
 8003160:	d11b      	bne.n	800319a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003172:	f000 fd0c 	bl	8003b8e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 020c 	bic.w	r2, r2, #12
 8003184:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69d9      	ldr	r1, [r3, #28]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	61da      	str	r2, [r3, #28]
 8003198:	e021      	b.n	80031de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d11c      	bne.n	80031da <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80031b0:	f000 fd28 	bl	8003c04 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031c2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69d9      	ldr	r1, [r3, #28]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	021a      	lsls	r2, r3, #8
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	61da      	str	r2, [r3, #28]
 80031d8:	e001      	b.n	80031de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800320a:	2302      	movs	r3, #2
 800320c:	e0ae      	b.n	800336c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b0c      	cmp	r3, #12
 800321a:	f200 809f 	bhi.w	800335c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800321e:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003259 	.word	0x08003259
 8003228:	0800335d 	.word	0x0800335d
 800322c:	0800335d 	.word	0x0800335d
 8003230:	0800335d 	.word	0x0800335d
 8003234:	08003299 	.word	0x08003299
 8003238:	0800335d 	.word	0x0800335d
 800323c:	0800335d 	.word	0x0800335d
 8003240:	0800335d 	.word	0x0800335d
 8003244:	080032db 	.word	0x080032db
 8003248:	0800335d 	.word	0x0800335d
 800324c:	0800335d 	.word	0x0800335d
 8003250:	0800335d 	.word	0x0800335d
 8003254:	0800331b 	.word	0x0800331b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fa1a 	bl	8003698 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0208 	orr.w	r2, r2, #8
 8003272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0204 	bic.w	r2, r2, #4
 8003282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6999      	ldr	r1, [r3, #24]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	619a      	str	r2, [r3, #24]
      break;
 8003296:	e064      	b.n	8003362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fa60 	bl	8003764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6999      	ldr	r1, [r3, #24]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	021a      	lsls	r2, r3, #8
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	619a      	str	r2, [r3, #24]
      break;
 80032d8:	e043      	b.n	8003362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 faa9 	bl	8003838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0208 	orr.w	r2, r2, #8
 80032f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0204 	bic.w	r2, r2, #4
 8003304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69d9      	ldr	r1, [r3, #28]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	61da      	str	r2, [r3, #28]
      break;
 8003318:	e023      	b.n	8003362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	4618      	mov	r0, r3
 8003322:	f000 faf3 	bl	800390c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69da      	ldr	r2, [r3, #28]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69d9      	ldr	r1, [r3, #28]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	021a      	lsls	r2, r3, #8
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	61da      	str	r2, [r3, #28]
      break;
 800335a:	e002      	b.n	8003362 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	75fb      	strb	r3, [r7, #23]
      break;
 8003360:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800336a:	7dfb      	ldrb	r3, [r7, #23]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_TIM_ConfigClockSource+0x1c>
 800338c:	2302      	movs	r3, #2
 800338e:	e0b4      	b.n	80034fa <HAL_TIM_ConfigClockSource+0x186>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c8:	d03e      	beq.n	8003448 <HAL_TIM_ConfigClockSource+0xd4>
 80033ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ce:	f200 8087 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d6:	f000 8086 	beq.w	80034e6 <HAL_TIM_ConfigClockSource+0x172>
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033de:	d87f      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e0:	2b70      	cmp	r3, #112	; 0x70
 80033e2:	d01a      	beq.n	800341a <HAL_TIM_ConfigClockSource+0xa6>
 80033e4:	2b70      	cmp	r3, #112	; 0x70
 80033e6:	d87b      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e8:	2b60      	cmp	r3, #96	; 0x60
 80033ea:	d050      	beq.n	800348e <HAL_TIM_ConfigClockSource+0x11a>
 80033ec:	2b60      	cmp	r3, #96	; 0x60
 80033ee:	d877      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033f0:	2b50      	cmp	r3, #80	; 0x50
 80033f2:	d03c      	beq.n	800346e <HAL_TIM_ConfigClockSource+0xfa>
 80033f4:	2b50      	cmp	r3, #80	; 0x50
 80033f6:	d873      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d058      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x13a>
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	d86f      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003400:	2b30      	cmp	r3, #48	; 0x30
 8003402:	d064      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x15a>
 8003404:	2b30      	cmp	r3, #48	; 0x30
 8003406:	d86b      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003408:	2b20      	cmp	r3, #32
 800340a:	d060      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x15a>
 800340c:	2b20      	cmp	r3, #32
 800340e:	d867      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d05c      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x15a>
 8003414:	2b10      	cmp	r3, #16
 8003416:	d05a      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x15a>
 8003418:	e062      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800342a:	f000 fc41 	bl	8003cb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800343c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	609a      	str	r2, [r3, #8]
      break;
 8003446:	e04f      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003458:	f000 fc2a 	bl	8003cb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800346a:	609a      	str	r2, [r3, #8]
      break;
 800346c:	e03c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800347a:	461a      	mov	r2, r3
 800347c:	f000 faee 	bl	8003a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2150      	movs	r1, #80	; 0x50
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fbf8 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 800348c:	e02c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800349a:	461a      	mov	r2, r3
 800349c:	f000 fb48 	bl	8003b30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2160      	movs	r1, #96	; 0x60
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fbe8 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 80034ac:	e01c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ba:	461a      	mov	r2, r3
 80034bc:	f000 face 	bl	8003a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2140      	movs	r1, #64	; 0x40
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fbd8 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 80034cc:	e00c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f000 fbcf 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 80034de:	e003      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      break;
 80034e4:	e000      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b0c      	cmp	r3, #12
 8003516:	d831      	bhi.n	800357c <HAL_TIM_ReadCapturedValue+0x78>
 8003518:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <HAL_TIM_ReadCapturedValue+0x1c>)
 800351a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351e:	bf00      	nop
 8003520:	08003555 	.word	0x08003555
 8003524:	0800357d 	.word	0x0800357d
 8003528:	0800357d 	.word	0x0800357d
 800352c:	0800357d 	.word	0x0800357d
 8003530:	0800355f 	.word	0x0800355f
 8003534:	0800357d 	.word	0x0800357d
 8003538:	0800357d 	.word	0x0800357d
 800353c:	0800357d 	.word	0x0800357d
 8003540:	08003569 	.word	0x08003569
 8003544:	0800357d 	.word	0x0800357d
 8003548:	0800357d 	.word	0x0800357d
 800354c:	0800357d 	.word	0x0800357d
 8003550:	08003573 	.word	0x08003573
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355a:	60fb      	str	r3, [r7, #12]

      break;
 800355c:	e00f      	b.n	800357e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	60fb      	str	r3, [r7, #12]

      break;
 8003566:	e00a      	b.n	800357e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	60fb      	str	r3, [r7, #12]

      break;
 8003570:	e005      	b.n	800357e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	60fb      	str	r3, [r7, #12]

      break;
 800357a:	e000      	b.n	800357e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800357c:	bf00      	nop
  }

  return tmpreg;
 800357e:	68fb      	ldr	r3, [r7, #12]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop

0800358c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr

0800359e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a29      	ldr	r2, [pc, #164]	; (800368c <TIM_Base_SetConfig+0xb8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00b      	beq.n	8003604 <TIM_Base_SetConfig+0x30>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f2:	d007      	beq.n	8003604 <TIM_Base_SetConfig+0x30>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a26      	ldr	r2, [pc, #152]	; (8003690 <TIM_Base_SetConfig+0xbc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0x30>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a25      	ldr	r2, [pc, #148]	; (8003694 <TIM_Base_SetConfig+0xc0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d108      	bne.n	8003616 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a1c      	ldr	r2, [pc, #112]	; (800368c <TIM_Base_SetConfig+0xb8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00b      	beq.n	8003636 <TIM_Base_SetConfig+0x62>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003624:	d007      	beq.n	8003636 <TIM_Base_SetConfig+0x62>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a19      	ldr	r2, [pc, #100]	; (8003690 <TIM_Base_SetConfig+0xbc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d003      	beq.n	8003636 <TIM_Base_SetConfig+0x62>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a18      	ldr	r2, [pc, #96]	; (8003694 <TIM_Base_SetConfig+0xc0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d108      	bne.n	8003648 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a07      	ldr	r2, [pc, #28]	; (800368c <TIM_Base_SetConfig+0xb8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d103      	bne.n	800367c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	615a      	str	r2, [r3, #20]
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	40012c00 	.word	0x40012c00
 8003690:	40000400 	.word	0x40000400
 8003694:	40000800 	.word	0x40000800

08003698 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f023 0201 	bic.w	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0303 	bic.w	r3, r3, #3
 80036ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f023 0302 	bic.w	r3, r3, #2
 80036e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <TIM_OC1_SetConfig+0xc8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d10c      	bne.n	800370e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0308 	bic.w	r3, r3, #8
 80036fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f023 0304 	bic.w	r3, r3, #4
 800370c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a13      	ldr	r2, [pc, #76]	; (8003760 <TIM_OC1_SetConfig+0xc8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d111      	bne.n	800373a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800371c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	621a      	str	r2, [r3, #32]
}
 8003754:	bf00      	nop
 8003756:	371c      	adds	r7, #28
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40012c00 	.word	0x40012c00

08003764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f023 0210 	bic.w	r2, r3, #16
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f023 0320 	bic.w	r3, r3, #32
 80037ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a1d      	ldr	r2, [pc, #116]	; (8003834 <TIM_OC2_SetConfig+0xd0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d10d      	bne.n	80037e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a14      	ldr	r2, [pc, #80]	; (8003834 <TIM_OC2_SetConfig+0xd0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d113      	bne.n	8003810 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00

08003838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0303 	bic.w	r3, r3, #3
 800386e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <TIM_OC3_SetConfig+0xd0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d10d      	bne.n	80038b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800389c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a14      	ldr	r2, [pc, #80]	; (8003908 <TIM_OC3_SetConfig+0xd0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d113      	bne.n	80038e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	621a      	str	r2, [r3, #32]
}
 80038fc:	bf00      	nop
 80038fe:	371c      	adds	r7, #28
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40012c00 	.word	0x40012c00

0800390c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	031b      	lsls	r3, r3, #12
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0f      	ldr	r2, [pc, #60]	; (80039a4 <TIM_OC4_SetConfig+0x98>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d109      	bne.n	8003980 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003972:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	019b      	lsls	r3, r3, #6
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	621a      	str	r2, [r3, #32]
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	40012c00 	.word	0x40012c00

080039a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f023 0201 	bic.w	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <TIM_TI1_SetConfig+0xa8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00b      	beq.n	80039ee <TIM_TI1_SetConfig+0x46>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d007      	beq.n	80039ee <TIM_TI1_SetConfig+0x46>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <TIM_TI1_SetConfig+0xac>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <TIM_TI1_SetConfig+0x46>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a1b      	ldr	r2, [pc, #108]	; (8003a58 <TIM_TI1_SetConfig+0xb0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <TIM_TI1_SetConfig+0x4a>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <TIM_TI1_SetConfig+0x4c>
 80039f2:	2300      	movs	r3, #0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e003      	b.n	8003a12 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f023 030a 	bic.w	r3, r3, #10
 8003a2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f003 030a 	and.w	r3, r3, #10
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	621a      	str	r2, [r3, #32]
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40000800 	.word	0x40000800

08003a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f023 0201 	bic.w	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 030a 	bic.w	r3, r3, #10
 8003a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f023 0210 	bic.w	r2, r3, #16
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	031b      	lsls	r3, r3, #12
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b0a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f023 0210 	bic.w	r2, r3, #16
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	031b      	lsls	r3, r3, #12
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	621a      	str	r2, [r3, #32]
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b087      	sub	sp, #28
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f023 0303 	bic.w	r3, r3, #3
 8003bba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bde:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c42:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	031b      	lsls	r3, r3, #12
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c56:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	031b      	lsls	r3, r3, #12
 8003c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f043 0307 	orr.w	r3, r3, #7
 8003c9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	609a      	str	r2, [r3, #8]
}
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	021a      	lsls	r2, r3, #8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	609a      	str	r2, [r3, #8]
}
 8003ce4:	bf00      	nop
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b087      	sub	sp, #28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	2201      	movs	r2, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a1a      	ldr	r2, [r3, #32]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	401a      	ands	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1a      	ldr	r2, [r3, #32]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	431a      	orrs	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	621a      	str	r2, [r3, #32]
}
 8003d2c:	bf00      	nop
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e046      	b.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00e      	beq.n	8003db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9c:	d009      	beq.n	8003db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a12      	ldr	r2, [pc, #72]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a10      	ldr	r2, [pc, #64]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10c      	bne.n	8003dcc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40000800 	.word	0x40000800

08003df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e042      	b.n	8003eb0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fd fbe2 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2224      	movs	r2, #36	; 0x24
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fdf1 	bl	8004a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	; 0x28
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d16d      	bne.n	8003fb4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_UART_Transmit+0x2c>
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e066      	b.n	8003fb6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2221      	movs	r2, #33	; 0x21
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ef6:	f7fd fd6d 	bl	80019d4 <HAL_GetTick>
 8003efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	88fa      	ldrh	r2, [r7, #6]
 8003f00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	88fa      	ldrh	r2, [r7, #6]
 8003f06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f10:	d108      	bne.n	8003f24 <HAL_UART_Transmit+0x6c>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	e003      	b.n	8003f2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f2c:	e02a      	b.n	8003f84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2200      	movs	r2, #0
 8003f36:	2180      	movs	r1, #128	; 0x80
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fb41 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e036      	b.n	8003fb6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10b      	bne.n	8003f66 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	3302      	adds	r3, #2
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	e007      	b.n	8003f76 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	3301      	adds	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1cf      	bne.n	8003f2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2200      	movs	r2, #0
 8003f96:	2140      	movs	r1, #64	; 0x40
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fb11 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e006      	b.n	8003fb6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d121      	bne.n	800401c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_UART_Transmit_IT+0x26>
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e01a      	b.n	800401e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2221      	movs	r2, #33	; 0x21
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004016:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e000      	b.n	800401e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
  }
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	4613      	mov	r3, r2
 8004034:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b20      	cmp	r3, #32
 8004040:	d112      	bne.n	8004068 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_UART_Receive_IT+0x26>
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e00b      	b.n	800406a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	461a      	mov	r2, r3
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fb1c 	bl	800469c <UART_Start_Receive_IT>
 8004064:	4603      	mov	r3, r0
 8004066:	e000      	b.n	800406a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b0ba      	sub	sp, #232	; 0xe8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80040b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_UART_IRQHandler+0x66>
 80040c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fbf8 	bl	80048c8 <UART_Receive_IT>
      return;
 80040d8:	e25b      	b.n	8004592 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80de 	beq.w	80042a0 <HAL_UART_IRQHandler+0x22c>
 80040e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d106      	bne.n	80040fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80d1 	beq.w	80042a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00b      	beq.n	8004122 <HAL_UART_IRQHandler+0xae>
 800410a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	f043 0201 	orr.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <HAL_UART_IRQHandler+0xd2>
 800412e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	f043 0202 	orr.w	r2, r3, #2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <HAL_UART_IRQHandler+0xf6>
 8004152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	f043 0204 	orr.w	r2, r3, #4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800416a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d011      	beq.n	800419a <HAL_UART_IRQHandler+0x126>
 8004176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d105      	bne.n	800418e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f043 0208 	orr.w	r2, r3, #8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 81f2 	beq.w	8004588 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_UART_IRQHandler+0x14e>
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fb83 	bl	80048c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bf14      	ite	ne
 80041d0:	2301      	movne	r3, #1
 80041d2:	2300      	moveq	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d103      	bne.n	80041ee <HAL_UART_IRQHandler+0x17a>
 80041e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d04f      	beq.n	800428e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fa8d 	bl	800470e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d041      	beq.n	8004286 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800421c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3314      	adds	r3, #20
 800422a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800422e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800423a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1d9      	bne.n	8004202 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004252:	2b00      	cmp	r3, #0
 8004254:	d013      	beq.n	800427e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425a:	4a7e      	ldr	r2, [pc, #504]	; (8004454 <HAL_UART_IRQHandler+0x3e0>)
 800425c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd fd2c 	bl	8001cc0 <HAL_DMA_Abort_IT>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004278:	4610      	mov	r0, r2
 800427a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427c:	e00e      	b.n	800429c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f98a 	bl	8004598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	e00a      	b.n	800429c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f986 	bl	8004598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	e006      	b.n	800429c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f982 	bl	8004598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800429a:	e175      	b.n	8004588 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429c:	bf00      	nop
    return;
 800429e:	e173      	b.n	8004588 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	f040 814f 	bne.w	8004548 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8148 	beq.w	8004548 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8141 	beq.w	8004548 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80b6 	beq.w	8004458 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8145 	beq.w	800458c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800430a:	429a      	cmp	r2, r3
 800430c:	f080 813e 	bcs.w	800458c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004316:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b20      	cmp	r3, #32
 8004320:	f000 8088 	beq.w	8004434 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800433a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800433e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004342:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004350:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004354:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800435c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1d9      	bne.n	8004324 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3314      	adds	r3, #20
 8004376:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004382:	f023 0301 	bic.w	r3, r3, #1
 8004386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3314      	adds	r3, #20
 8004390:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004394:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004398:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800439c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e1      	bne.n	8004370 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3314      	adds	r3, #20
 80043b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3314      	adds	r3, #20
 80043cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e3      	bne.n	80043ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	330c      	adds	r3, #12
 80043f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004404:	f023 0310 	bic.w	r3, r3, #16
 8004408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	330c      	adds	r3, #12
 8004412:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004416:	65ba      	str	r2, [r7, #88]	; 0x58
 8004418:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800441c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e3      	bne.n	80043f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	4618      	mov	r0, r3
 8004430:	f7fd fc0b 	bl	8001c4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004442:	b29b      	uxth	r3, r3
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	b29b      	uxth	r3, r3
 8004448:	4619      	mov	r1, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f8ad 	bl	80045aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004450:	e09c      	b.n	800458c <HAL_UART_IRQHandler+0x518>
 8004452:	bf00      	nop
 8004454:	080047d3 	.word	0x080047d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004460:	b29b      	uxth	r3, r3
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 808e 	beq.w	8004590 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8089 	beq.w	8004590 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800448e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004490:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044a2:	647a      	str	r2, [r7, #68]	; 0x44
 80044a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e3      	bne.n	800447e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3314      	adds	r3, #20
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	623b      	str	r3, [r7, #32]
   return(result);
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3314      	adds	r3, #20
 80044d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044da:	633a      	str	r2, [r7, #48]	; 0x30
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e3      	bne.n	80044b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	60fb      	str	r3, [r7, #12]
   return(result);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0310 	bic.w	r3, r3, #16
 8004512:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004520:	61fa      	str	r2, [r7, #28]
 8004522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	69b9      	ldr	r1, [r7, #24]
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	617b      	str	r3, [r7, #20]
   return(result);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e3      	bne.n	80044fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800453a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f832 	bl	80045aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004546:	e023      	b.n	8004590 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <HAL_UART_IRQHandler+0x4f4>
 8004554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f94a 	bl	80047fa <UART_Transmit_IT>
    return;
 8004566:	e014      	b.n	8004592 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00e      	beq.n	8004592 <HAL_UART_IRQHandler+0x51e>
 8004574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f989 	bl	8004898 <UART_EndTransmit_IT>
    return;
 8004586:	e004      	b.n	8004592 <HAL_UART_IRQHandler+0x51e>
    return;
 8004588:	bf00      	nop
 800458a:	e002      	b.n	8004592 <HAL_UART_IRQHandler+0x51e>
      return;
 800458c:	bf00      	nop
 800458e:	e000      	b.n	8004592 <HAL_UART_IRQHandler+0x51e>
      return;
 8004590:	bf00      	nop
  }
}
 8004592:	37e8      	adds	r7, #232	; 0xe8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr

080045aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b090      	sub	sp, #64	; 0x40
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d0:	e050      	b.n	8004674 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d04c      	beq.n	8004674 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045e0:	f7fd f9f8 	bl	80019d4 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d241      	bcs.n	8004674 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004610:	637a      	str	r2, [r7, #52]	; 0x34
 8004612:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e5      	bne.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3314      	adds	r3, #20
 800462a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	613b      	str	r3, [r7, #16]
   return(result);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	63bb      	str	r3, [r7, #56]	; 0x38
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3314      	adds	r3, #20
 8004642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004644:	623a      	str	r2, [r7, #32]
 8004646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	69f9      	ldr	r1, [r7, #28]
 800464a:	6a3a      	ldr	r2, [r7, #32]
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	61bb      	str	r3, [r7, #24]
   return(result);
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e5      	bne.n	8004624 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e00f      	b.n	8004694 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4013      	ands	r3, r2
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	429a      	cmp	r2, r3
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	429a      	cmp	r2, r3
 8004690:	d09f      	beq.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3740      	adds	r7, #64	; 0x40
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	4613      	mov	r3, r2
 80046a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	88fa      	ldrh	r2, [r7, #6]
 80046b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2222      	movs	r2, #34	; 0x22
 80046c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695a      	ldr	r2, [r3, #20]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0201 	orr.w	r2, r2, #1
 80046f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0220 	orr.w	r2, r2, #32
 8004700:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr

0800470e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800470e:	b480      	push	{r7}
 8004710:	b095      	sub	sp, #84	; 0x54
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800472c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004736:	643a      	str	r2, [r7, #64]	; 0x40
 8004738:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800473c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e5      	bne.n	8004716 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3314      	adds	r3, #20
 8004750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	61fb      	str	r3, [r7, #28]
   return(result);
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	64bb      	str	r3, [r7, #72]	; 0x48
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800476a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e5      	bne.n	800474a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	2b01      	cmp	r3, #1
 8004784:	d119      	bne.n	80047ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	330c      	adds	r3, #12
 800478c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	60bb      	str	r3, [r7, #8]
   return(result);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f023 0310 	bic.w	r3, r3, #16
 800479c:	647b      	str	r3, [r7, #68]	; 0x44
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	330c      	adds	r3, #12
 80047a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047a6:	61ba      	str	r2, [r7, #24]
 80047a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6979      	ldr	r1, [r7, #20]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	613b      	str	r3, [r7, #16]
   return(result);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e5      	bne.n	8004786 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047c8:	bf00      	nop
 80047ca:	3754      	adds	r7, #84	; 0x54
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr

080047d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff fed3 	bl	8004598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b21      	cmp	r3, #33	; 0x21
 800480c:	d13e      	bne.n	800488c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004816:	d114      	bne.n	8004842 <UART_Transmit_IT+0x48>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d110      	bne.n	8004842 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004834:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	1c9a      	adds	r2, r3, #2
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	621a      	str	r2, [r3, #32]
 8004840:	e008      	b.n	8004854 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	1c59      	adds	r1, r3, #1
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6211      	str	r1, [r2, #32]
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29b      	uxth	r3, r3
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	4619      	mov	r1, r3
 8004862:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10f      	bne.n	8004888 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004876:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004886:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e000      	b.n	800488e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fc fc99 	bl	80011f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08c      	sub	sp, #48	; 0x30
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b22      	cmp	r3, #34	; 0x22
 80048da:	f040 80ae 	bne.w	8004a3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e6:	d117      	bne.n	8004918 <UART_Receive_IT+0x50>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d113      	bne.n	8004918 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004906:	b29a      	uxth	r2, r3
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	1c9a      	adds	r2, r3, #2
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	629a      	str	r2, [r3, #40]	; 0x28
 8004916:	e026      	b.n	8004966 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800491e:	2300      	movs	r3, #0
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492a:	d007      	beq.n	800493c <UART_Receive_IT+0x74>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <UART_Receive_IT+0x82>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d106      	bne.n	800494a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e008      	b.n	800495c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004956:	b2da      	uxtb	r2, r3
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29b      	uxth	r3, r3
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4619      	mov	r1, r3
 8004974:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004976:	2b00      	cmp	r3, #0
 8004978:	d15d      	bne.n	8004a36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0220 	bic.w	r2, r2, #32
 8004988:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004998:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0201 	bic.w	r2, r2, #1
 80049a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d135      	bne.n	8004a2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	613b      	str	r3, [r7, #16]
   return(result);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f023 0310 	bic.w	r3, r3, #16
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e6:	623a      	str	r2, [r7, #32]
 80049e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	69f9      	ldr	r1, [r7, #28]
 80049ec:	6a3a      	ldr	r2, [r7, #32]
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e5      	bne.n	80049c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d10a      	bne.n	8004a1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff fdc0 	bl	80045aa <HAL_UARTEx_RxEventCallback>
 8004a2a:	e002      	b.n	8004a32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fc fbb3 	bl	8001198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e002      	b.n	8004a3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e000      	b.n	8004a3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a3a:	2302      	movs	r3, #2
  }
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3730      	adds	r7, #48	; 0x30
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a7e:	f023 030c 	bic.w	r3, r3, #12
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2c      	ldr	r2, [pc, #176]	; (8004b58 <UART_SetConfig+0x114>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d103      	bne.n	8004ab4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004aac:	f7fd ff1c 	bl	80028e8 <HAL_RCC_GetPCLK2Freq>
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	e002      	b.n	8004aba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ab4:	f7fd ff04 	bl	80028c0 <HAL_RCC_GetPCLK1Freq>
 8004ab8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009a      	lsls	r2, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	4a22      	ldr	r2, [pc, #136]	; (8004b5c <UART_SetConfig+0x118>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	0119      	lsls	r1, r3, #4
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009a      	lsls	r2, r3, #2
 8004ae4:	441a      	add	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af0:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <UART_SetConfig+0x118>)
 8004af2:	fba3 0302 	umull	r0, r3, r3, r2
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	2064      	movs	r0, #100	; 0x64
 8004afa:	fb00 f303 	mul.w	r3, r0, r3
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	3332      	adds	r3, #50	; 0x32
 8004b04:	4a15      	ldr	r2, [pc, #84]	; (8004b5c <UART_SetConfig+0x118>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b10:	4419      	add	r1, r3
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b28:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <UART_SetConfig+0x118>)
 8004b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	2064      	movs	r0, #100	; 0x64
 8004b32:	fb00 f303 	mul.w	r3, r0, r3
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	3332      	adds	r3, #50	; 0x32
 8004b3c:	4a07      	ldr	r2, [pc, #28]	; (8004b5c <UART_SetConfig+0x118>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	f003 020f 	and.w	r2, r3, #15
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40013800 	.word	0x40013800
 8004b5c:	51eb851f 	.word	0x51eb851f

08004b60 <__cvt>:
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b66:	461f      	mov	r7, r3
 8004b68:	bfbb      	ittet	lt
 8004b6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004b6e:	461f      	movlt	r7, r3
 8004b70:	2300      	movge	r3, #0
 8004b72:	232d      	movlt	r3, #45	; 0x2d
 8004b74:	b088      	sub	sp, #32
 8004b76:	4614      	mov	r4, r2
 8004b78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004b7c:	7013      	strb	r3, [r2, #0]
 8004b7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b80:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004b84:	f023 0820 	bic.w	r8, r3, #32
 8004b88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b8c:	d005      	beq.n	8004b9a <__cvt+0x3a>
 8004b8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b92:	d100      	bne.n	8004b96 <__cvt+0x36>
 8004b94:	3501      	adds	r5, #1
 8004b96:	2302      	movs	r3, #2
 8004b98:	e000      	b.n	8004b9c <__cvt+0x3c>
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	aa07      	add	r2, sp, #28
 8004b9e:	9204      	str	r2, [sp, #16]
 8004ba0:	aa06      	add	r2, sp, #24
 8004ba2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004ba6:	e9cd 3500 	strd	r3, r5, [sp]
 8004baa:	4622      	mov	r2, r4
 8004bac:	463b      	mov	r3, r7
 8004bae:	f000 fe87 	bl	80058c0 <_dtoa_r>
 8004bb2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004bb6:	4606      	mov	r6, r0
 8004bb8:	d102      	bne.n	8004bc0 <__cvt+0x60>
 8004bba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bbc:	07db      	lsls	r3, r3, #31
 8004bbe:	d522      	bpl.n	8004c06 <__cvt+0xa6>
 8004bc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bc4:	eb06 0905 	add.w	r9, r6, r5
 8004bc8:	d110      	bne.n	8004bec <__cvt+0x8c>
 8004bca:	7833      	ldrb	r3, [r6, #0]
 8004bcc:	2b30      	cmp	r3, #48	; 0x30
 8004bce:	d10a      	bne.n	8004be6 <__cvt+0x86>
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	4639      	mov	r1, r7
 8004bd8:	f7fb fee6 	bl	80009a8 <__aeabi_dcmpeq>
 8004bdc:	b918      	cbnz	r0, 8004be6 <__cvt+0x86>
 8004bde:	f1c5 0501 	rsb	r5, r5, #1
 8004be2:	f8ca 5000 	str.w	r5, [sl]
 8004be6:	f8da 3000 	ldr.w	r3, [sl]
 8004bea:	4499      	add	r9, r3
 8004bec:	2200      	movs	r2, #0
 8004bee:	2300      	movs	r3, #0
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	4639      	mov	r1, r7
 8004bf4:	f7fb fed8 	bl	80009a8 <__aeabi_dcmpeq>
 8004bf8:	b108      	cbz	r0, 8004bfe <__cvt+0x9e>
 8004bfa:	f8cd 901c 	str.w	r9, [sp, #28]
 8004bfe:	2230      	movs	r2, #48	; 0x30
 8004c00:	9b07      	ldr	r3, [sp, #28]
 8004c02:	454b      	cmp	r3, r9
 8004c04:	d307      	bcc.n	8004c16 <__cvt+0xb6>
 8004c06:	4630      	mov	r0, r6
 8004c08:	9b07      	ldr	r3, [sp, #28]
 8004c0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c0c:	1b9b      	subs	r3, r3, r6
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	b008      	add	sp, #32
 8004c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c16:	1c59      	adds	r1, r3, #1
 8004c18:	9107      	str	r1, [sp, #28]
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	e7f0      	b.n	8004c00 <__cvt+0xa0>

08004c1e <__exponent>:
 8004c1e:	4603      	mov	r3, r0
 8004c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c22:	2900      	cmp	r1, #0
 8004c24:	f803 2b02 	strb.w	r2, [r3], #2
 8004c28:	bfb6      	itet	lt
 8004c2a:	222d      	movlt	r2, #45	; 0x2d
 8004c2c:	222b      	movge	r2, #43	; 0x2b
 8004c2e:	4249      	neglt	r1, r1
 8004c30:	2909      	cmp	r1, #9
 8004c32:	7042      	strb	r2, [r0, #1]
 8004c34:	dd2a      	ble.n	8004c8c <__exponent+0x6e>
 8004c36:	f10d 0207 	add.w	r2, sp, #7
 8004c3a:	4617      	mov	r7, r2
 8004c3c:	260a      	movs	r6, #10
 8004c3e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c42:	4694      	mov	ip, r2
 8004c44:	fb06 1415 	mls	r4, r6, r5, r1
 8004c48:	3430      	adds	r4, #48	; 0x30
 8004c4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004c4e:	460c      	mov	r4, r1
 8004c50:	2c63      	cmp	r4, #99	; 0x63
 8004c52:	4629      	mov	r1, r5
 8004c54:	f102 32ff 	add.w	r2, r2, #4294967295
 8004c58:	dcf1      	bgt.n	8004c3e <__exponent+0x20>
 8004c5a:	3130      	adds	r1, #48	; 0x30
 8004c5c:	f1ac 0402 	sub.w	r4, ip, #2
 8004c60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c64:	4622      	mov	r2, r4
 8004c66:	1c41      	adds	r1, r0, #1
 8004c68:	42ba      	cmp	r2, r7
 8004c6a:	d30a      	bcc.n	8004c82 <__exponent+0x64>
 8004c6c:	f10d 0209 	add.w	r2, sp, #9
 8004c70:	eba2 020c 	sub.w	r2, r2, ip
 8004c74:	42bc      	cmp	r4, r7
 8004c76:	bf88      	it	hi
 8004c78:	2200      	movhi	r2, #0
 8004c7a:	4413      	add	r3, r2
 8004c7c:	1a18      	subs	r0, r3, r0
 8004c7e:	b003      	add	sp, #12
 8004c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004c86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004c8a:	e7ed      	b.n	8004c68 <__exponent+0x4a>
 8004c8c:	2330      	movs	r3, #48	; 0x30
 8004c8e:	3130      	adds	r1, #48	; 0x30
 8004c90:	7083      	strb	r3, [r0, #2]
 8004c92:	70c1      	strb	r1, [r0, #3]
 8004c94:	1d03      	adds	r3, r0, #4
 8004c96:	e7f1      	b.n	8004c7c <__exponent+0x5e>

08004c98 <_printf_float>:
 8004c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	b091      	sub	sp, #68	; 0x44
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004ca4:	4616      	mov	r6, r2
 8004ca6:	461f      	mov	r7, r3
 8004ca8:	4605      	mov	r5, r0
 8004caa:	f000 fcf9 	bl	80056a0 <_localeconv_r>
 8004cae:	6803      	ldr	r3, [r0, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb4:	f7fb fa4c 	bl	8000150 <strlen>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	930e      	str	r3, [sp, #56]	; 0x38
 8004cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc0:	900a      	str	r0, [sp, #40]	; 0x28
 8004cc2:	3307      	adds	r3, #7
 8004cc4:	f023 0307 	bic.w	r3, r3, #7
 8004cc8:	f103 0208 	add.w	r2, r3, #8
 8004ccc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004cd0:	f8d4 b000 	ldr.w	fp, [r4]
 8004cd4:	f8c8 2000 	str.w	r2, [r8]
 8004cd8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004cdc:	4652      	mov	r2, sl
 8004cde:	4643      	mov	r3, r8
 8004ce0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ce4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004ce8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295
 8004cee:	4650      	mov	r0, sl
 8004cf0:	4b9c      	ldr	r3, [pc, #624]	; (8004f64 <_printf_float+0x2cc>)
 8004cf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cf4:	f7fb fe8a 	bl	8000a0c <__aeabi_dcmpun>
 8004cf8:	bb70      	cbnz	r0, 8004d58 <_printf_float+0xc0>
 8004cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfe:	4650      	mov	r0, sl
 8004d00:	4b98      	ldr	r3, [pc, #608]	; (8004f64 <_printf_float+0x2cc>)
 8004d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d04:	f7fb fe64 	bl	80009d0 <__aeabi_dcmple>
 8004d08:	bb30      	cbnz	r0, 8004d58 <_printf_float+0xc0>
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4650      	mov	r0, sl
 8004d10:	4641      	mov	r1, r8
 8004d12:	f7fb fe53 	bl	80009bc <__aeabi_dcmplt>
 8004d16:	b110      	cbz	r0, 8004d1e <_printf_float+0x86>
 8004d18:	232d      	movs	r3, #45	; 0x2d
 8004d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1e:	4a92      	ldr	r2, [pc, #584]	; (8004f68 <_printf_float+0x2d0>)
 8004d20:	4b92      	ldr	r3, [pc, #584]	; (8004f6c <_printf_float+0x2d4>)
 8004d22:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004d26:	bf94      	ite	ls
 8004d28:	4690      	movls	r8, r2
 8004d2a:	4698      	movhi	r8, r3
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	f04f 0a00 	mov.w	sl, #0
 8004d32:	6123      	str	r3, [r4, #16]
 8004d34:	f02b 0304 	bic.w	r3, fp, #4
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	4633      	mov	r3, r6
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	4628      	mov	r0, r5
 8004d40:	9700      	str	r7, [sp, #0]
 8004d42:	aa0f      	add	r2, sp, #60	; 0x3c
 8004d44:	f000 f9d6 	bl	80050f4 <_printf_common>
 8004d48:	3001      	adds	r0, #1
 8004d4a:	f040 8090 	bne.w	8004e6e <_printf_float+0x1d6>
 8004d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d52:	b011      	add	sp, #68	; 0x44
 8004d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d58:	4652      	mov	r2, sl
 8004d5a:	4643      	mov	r3, r8
 8004d5c:	4650      	mov	r0, sl
 8004d5e:	4641      	mov	r1, r8
 8004d60:	f7fb fe54 	bl	8000a0c <__aeabi_dcmpun>
 8004d64:	b148      	cbz	r0, 8004d7a <_printf_float+0xe2>
 8004d66:	f1b8 0f00 	cmp.w	r8, #0
 8004d6a:	bfb8      	it	lt
 8004d6c:	232d      	movlt	r3, #45	; 0x2d
 8004d6e:	4a80      	ldr	r2, [pc, #512]	; (8004f70 <_printf_float+0x2d8>)
 8004d70:	bfb8      	it	lt
 8004d72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d76:	4b7f      	ldr	r3, [pc, #508]	; (8004f74 <_printf_float+0x2dc>)
 8004d78:	e7d3      	b.n	8004d22 <_printf_float+0x8a>
 8004d7a:	6863      	ldr	r3, [r4, #4]
 8004d7c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	d142      	bne.n	8004e0a <_printf_float+0x172>
 8004d84:	2306      	movs	r3, #6
 8004d86:	6063      	str	r3, [r4, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	9206      	str	r2, [sp, #24]
 8004d8c:	aa0e      	add	r2, sp, #56	; 0x38
 8004d8e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004d92:	aa0d      	add	r2, sp, #52	; 0x34
 8004d94:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004d98:	9203      	str	r2, [sp, #12]
 8004d9a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004d9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004da2:	6023      	str	r3, [r4, #0]
 8004da4:	6863      	ldr	r3, [r4, #4]
 8004da6:	4652      	mov	r2, sl
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	4628      	mov	r0, r5
 8004dac:	4643      	mov	r3, r8
 8004dae:	910b      	str	r1, [sp, #44]	; 0x2c
 8004db0:	f7ff fed6 	bl	8004b60 <__cvt>
 8004db4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004db6:	4680      	mov	r8, r0
 8004db8:	2947      	cmp	r1, #71	; 0x47
 8004dba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004dbc:	d108      	bne.n	8004dd0 <_printf_float+0x138>
 8004dbe:	1cc8      	adds	r0, r1, #3
 8004dc0:	db02      	blt.n	8004dc8 <_printf_float+0x130>
 8004dc2:	6863      	ldr	r3, [r4, #4]
 8004dc4:	4299      	cmp	r1, r3
 8004dc6:	dd40      	ble.n	8004e4a <_printf_float+0x1b2>
 8004dc8:	f1a9 0902 	sub.w	r9, r9, #2
 8004dcc:	fa5f f989 	uxtb.w	r9, r9
 8004dd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004dd4:	d81f      	bhi.n	8004e16 <_printf_float+0x17e>
 8004dd6:	464a      	mov	r2, r9
 8004dd8:	3901      	subs	r1, #1
 8004dda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004dde:	910d      	str	r1, [sp, #52]	; 0x34
 8004de0:	f7ff ff1d 	bl	8004c1e <__exponent>
 8004de4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004de6:	4682      	mov	sl, r0
 8004de8:	1813      	adds	r3, r2, r0
 8004dea:	2a01      	cmp	r2, #1
 8004dec:	6123      	str	r3, [r4, #16]
 8004dee:	dc02      	bgt.n	8004df6 <_printf_float+0x15e>
 8004df0:	6822      	ldr	r2, [r4, #0]
 8004df2:	07d2      	lsls	r2, r2, #31
 8004df4:	d501      	bpl.n	8004dfa <_printf_float+0x162>
 8004df6:	3301      	adds	r3, #1
 8004df8:	6123      	str	r3, [r4, #16]
 8004dfa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d09b      	beq.n	8004d3a <_printf_float+0xa2>
 8004e02:	232d      	movs	r3, #45	; 0x2d
 8004e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e08:	e797      	b.n	8004d3a <_printf_float+0xa2>
 8004e0a:	2947      	cmp	r1, #71	; 0x47
 8004e0c:	d1bc      	bne.n	8004d88 <_printf_float+0xf0>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1ba      	bne.n	8004d88 <_printf_float+0xf0>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e7b7      	b.n	8004d86 <_printf_float+0xee>
 8004e16:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004e1a:	d118      	bne.n	8004e4e <_printf_float+0x1b6>
 8004e1c:	2900      	cmp	r1, #0
 8004e1e:	6863      	ldr	r3, [r4, #4]
 8004e20:	dd0b      	ble.n	8004e3a <_printf_float+0x1a2>
 8004e22:	6121      	str	r1, [r4, #16]
 8004e24:	b913      	cbnz	r3, 8004e2c <_printf_float+0x194>
 8004e26:	6822      	ldr	r2, [r4, #0]
 8004e28:	07d0      	lsls	r0, r2, #31
 8004e2a:	d502      	bpl.n	8004e32 <_printf_float+0x19a>
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	440b      	add	r3, r1
 8004e30:	6123      	str	r3, [r4, #16]
 8004e32:	f04f 0a00 	mov.w	sl, #0
 8004e36:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e38:	e7df      	b.n	8004dfa <_printf_float+0x162>
 8004e3a:	b913      	cbnz	r3, 8004e42 <_printf_float+0x1aa>
 8004e3c:	6822      	ldr	r2, [r4, #0]
 8004e3e:	07d2      	lsls	r2, r2, #31
 8004e40:	d501      	bpl.n	8004e46 <_printf_float+0x1ae>
 8004e42:	3302      	adds	r3, #2
 8004e44:	e7f4      	b.n	8004e30 <_printf_float+0x198>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e7f2      	b.n	8004e30 <_printf_float+0x198>
 8004e4a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004e4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e50:	4299      	cmp	r1, r3
 8004e52:	db05      	blt.n	8004e60 <_printf_float+0x1c8>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	6121      	str	r1, [r4, #16]
 8004e58:	07d8      	lsls	r0, r3, #31
 8004e5a:	d5ea      	bpl.n	8004e32 <_printf_float+0x19a>
 8004e5c:	1c4b      	adds	r3, r1, #1
 8004e5e:	e7e7      	b.n	8004e30 <_printf_float+0x198>
 8004e60:	2900      	cmp	r1, #0
 8004e62:	bfcc      	ite	gt
 8004e64:	2201      	movgt	r2, #1
 8004e66:	f1c1 0202 	rsble	r2, r1, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	e7e0      	b.n	8004e30 <_printf_float+0x198>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	055a      	lsls	r2, r3, #21
 8004e72:	d407      	bmi.n	8004e84 <_printf_float+0x1ec>
 8004e74:	6923      	ldr	r3, [r4, #16]
 8004e76:	4642      	mov	r2, r8
 8004e78:	4631      	mov	r1, r6
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	47b8      	blx	r7
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d12b      	bne.n	8004eda <_printf_float+0x242>
 8004e82:	e764      	b.n	8004d4e <_printf_float+0xb6>
 8004e84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e88:	f240 80dd 	bls.w	8005046 <_printf_float+0x3ae>
 8004e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e90:	2200      	movs	r2, #0
 8004e92:	2300      	movs	r3, #0
 8004e94:	f7fb fd88 	bl	80009a8 <__aeabi_dcmpeq>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d033      	beq.n	8004f04 <_printf_float+0x26c>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	4a35      	ldr	r2, [pc, #212]	; (8004f78 <_printf_float+0x2e0>)
 8004ea4:	47b8      	blx	r7
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	f43f af51 	beq.w	8004d4e <_printf_float+0xb6>
 8004eac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	db02      	blt.n	8004eba <_printf_float+0x222>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	07d8      	lsls	r0, r3, #31
 8004eb8:	d50f      	bpl.n	8004eda <_printf_float+0x242>
 8004eba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	47b8      	blx	r7
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	f43f af42 	beq.w	8004d4e <_printf_float+0xb6>
 8004eca:	f04f 0800 	mov.w	r8, #0
 8004ece:	f104 091a 	add.w	r9, r4, #26
 8004ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	4543      	cmp	r3, r8
 8004ed8:	dc09      	bgt.n	8004eee <_printf_float+0x256>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	079b      	lsls	r3, r3, #30
 8004ede:	f100 8104 	bmi.w	80050ea <_printf_float+0x452>
 8004ee2:	68e0      	ldr	r0, [r4, #12]
 8004ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ee6:	4298      	cmp	r0, r3
 8004ee8:	bfb8      	it	lt
 8004eea:	4618      	movlt	r0, r3
 8004eec:	e731      	b.n	8004d52 <_printf_float+0xba>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	464a      	mov	r2, r9
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b8      	blx	r7
 8004ef8:	3001      	adds	r0, #1
 8004efa:	f43f af28 	beq.w	8004d4e <_printf_float+0xb6>
 8004efe:	f108 0801 	add.w	r8, r8, #1
 8004f02:	e7e6      	b.n	8004ed2 <_printf_float+0x23a>
 8004f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	dc38      	bgt.n	8004f7c <_printf_float+0x2e4>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	4628      	mov	r0, r5
 8004f10:	4a19      	ldr	r2, [pc, #100]	; (8004f78 <_printf_float+0x2e0>)
 8004f12:	47b8      	blx	r7
 8004f14:	3001      	adds	r0, #1
 8004f16:	f43f af1a 	beq.w	8004d4e <_printf_float+0xb6>
 8004f1a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	d102      	bne.n	8004f28 <_printf_float+0x290>
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	07d9      	lsls	r1, r3, #31
 8004f26:	d5d8      	bpl.n	8004eda <_printf_float+0x242>
 8004f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	4628      	mov	r0, r5
 8004f30:	47b8      	blx	r7
 8004f32:	3001      	adds	r0, #1
 8004f34:	f43f af0b 	beq.w	8004d4e <_printf_float+0xb6>
 8004f38:	f04f 0900 	mov.w	r9, #0
 8004f3c:	f104 0a1a 	add.w	sl, r4, #26
 8004f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f42:	425b      	negs	r3, r3
 8004f44:	454b      	cmp	r3, r9
 8004f46:	dc01      	bgt.n	8004f4c <_printf_float+0x2b4>
 8004f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f4a:	e794      	b.n	8004e76 <_printf_float+0x1de>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4652      	mov	r2, sl
 8004f50:	4631      	mov	r1, r6
 8004f52:	4628      	mov	r0, r5
 8004f54:	47b8      	blx	r7
 8004f56:	3001      	adds	r0, #1
 8004f58:	f43f aef9 	beq.w	8004d4e <_printf_float+0xb6>
 8004f5c:	f109 0901 	add.w	r9, r9, #1
 8004f60:	e7ee      	b.n	8004f40 <_printf_float+0x2a8>
 8004f62:	bf00      	nop
 8004f64:	7fefffff 	.word	0x7fefffff
 8004f68:	080078ee 	.word	0x080078ee
 8004f6c:	080078f2 	.word	0x080078f2
 8004f70:	080078f6 	.word	0x080078f6
 8004f74:	080078fa 	.word	0x080078fa
 8004f78:	080078fe 	.word	0x080078fe
 8004f7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f80:	429a      	cmp	r2, r3
 8004f82:	bfa8      	it	ge
 8004f84:	461a      	movge	r2, r3
 8004f86:	2a00      	cmp	r2, #0
 8004f88:	4691      	mov	r9, r2
 8004f8a:	dc37      	bgt.n	8004ffc <_printf_float+0x364>
 8004f8c:	f04f 0b00 	mov.w	fp, #0
 8004f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f94:	f104 021a 	add.w	r2, r4, #26
 8004f98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004f9c:	ebaa 0309 	sub.w	r3, sl, r9
 8004fa0:	455b      	cmp	r3, fp
 8004fa2:	dc33      	bgt.n	800500c <_printf_float+0x374>
 8004fa4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	db3b      	blt.n	8005024 <_printf_float+0x38c>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	07da      	lsls	r2, r3, #31
 8004fb0:	d438      	bmi.n	8005024 <_printf_float+0x38c>
 8004fb2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004fb6:	eba2 0903 	sub.w	r9, r2, r3
 8004fba:	eba2 020a 	sub.w	r2, r2, sl
 8004fbe:	4591      	cmp	r9, r2
 8004fc0:	bfa8      	it	ge
 8004fc2:	4691      	movge	r9, r2
 8004fc4:	f1b9 0f00 	cmp.w	r9, #0
 8004fc8:	dc34      	bgt.n	8005034 <_printf_float+0x39c>
 8004fca:	f04f 0800 	mov.w	r8, #0
 8004fce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fd2:	f104 0a1a 	add.w	sl, r4, #26
 8004fd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	eba3 0309 	sub.w	r3, r3, r9
 8004fe0:	4543      	cmp	r3, r8
 8004fe2:	f77f af7a 	ble.w	8004eda <_printf_float+0x242>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	4652      	mov	r2, sl
 8004fea:	4631      	mov	r1, r6
 8004fec:	4628      	mov	r0, r5
 8004fee:	47b8      	blx	r7
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	f43f aeac 	beq.w	8004d4e <_printf_float+0xb6>
 8004ff6:	f108 0801 	add.w	r8, r8, #1
 8004ffa:	e7ec      	b.n	8004fd6 <_printf_float+0x33e>
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	4631      	mov	r1, r6
 8005000:	4642      	mov	r2, r8
 8005002:	4628      	mov	r0, r5
 8005004:	47b8      	blx	r7
 8005006:	3001      	adds	r0, #1
 8005008:	d1c0      	bne.n	8004f8c <_printf_float+0x2f4>
 800500a:	e6a0      	b.n	8004d4e <_printf_float+0xb6>
 800500c:	2301      	movs	r3, #1
 800500e:	4631      	mov	r1, r6
 8005010:	4628      	mov	r0, r5
 8005012:	920b      	str	r2, [sp, #44]	; 0x2c
 8005014:	47b8      	blx	r7
 8005016:	3001      	adds	r0, #1
 8005018:	f43f ae99 	beq.w	8004d4e <_printf_float+0xb6>
 800501c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800501e:	f10b 0b01 	add.w	fp, fp, #1
 8005022:	e7b9      	b.n	8004f98 <_printf_float+0x300>
 8005024:	4631      	mov	r1, r6
 8005026:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800502a:	4628      	mov	r0, r5
 800502c:	47b8      	blx	r7
 800502e:	3001      	adds	r0, #1
 8005030:	d1bf      	bne.n	8004fb2 <_printf_float+0x31a>
 8005032:	e68c      	b.n	8004d4e <_printf_float+0xb6>
 8005034:	464b      	mov	r3, r9
 8005036:	4631      	mov	r1, r6
 8005038:	4628      	mov	r0, r5
 800503a:	eb08 020a 	add.w	r2, r8, sl
 800503e:	47b8      	blx	r7
 8005040:	3001      	adds	r0, #1
 8005042:	d1c2      	bne.n	8004fca <_printf_float+0x332>
 8005044:	e683      	b.n	8004d4e <_printf_float+0xb6>
 8005046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005048:	2a01      	cmp	r2, #1
 800504a:	dc01      	bgt.n	8005050 <_printf_float+0x3b8>
 800504c:	07db      	lsls	r3, r3, #31
 800504e:	d539      	bpl.n	80050c4 <_printf_float+0x42c>
 8005050:	2301      	movs	r3, #1
 8005052:	4642      	mov	r2, r8
 8005054:	4631      	mov	r1, r6
 8005056:	4628      	mov	r0, r5
 8005058:	47b8      	blx	r7
 800505a:	3001      	adds	r0, #1
 800505c:	f43f ae77 	beq.w	8004d4e <_printf_float+0xb6>
 8005060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005064:	4631      	mov	r1, r6
 8005066:	4628      	mov	r0, r5
 8005068:	47b8      	blx	r7
 800506a:	3001      	adds	r0, #1
 800506c:	f43f ae6f 	beq.w	8004d4e <_printf_float+0xb6>
 8005070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005074:	2200      	movs	r2, #0
 8005076:	2300      	movs	r3, #0
 8005078:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800507c:	f7fb fc94 	bl	80009a8 <__aeabi_dcmpeq>
 8005080:	b9d8      	cbnz	r0, 80050ba <_printf_float+0x422>
 8005082:	f109 33ff 	add.w	r3, r9, #4294967295
 8005086:	f108 0201 	add.w	r2, r8, #1
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	d10e      	bne.n	80050b2 <_printf_float+0x41a>
 8005094:	e65b      	b.n	8004d4e <_printf_float+0xb6>
 8005096:	2301      	movs	r3, #1
 8005098:	464a      	mov	r2, r9
 800509a:	4631      	mov	r1, r6
 800509c:	4628      	mov	r0, r5
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	f43f ae54 	beq.w	8004d4e <_printf_float+0xb6>
 80050a6:	f108 0801 	add.w	r8, r8, #1
 80050aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050ac:	3b01      	subs	r3, #1
 80050ae:	4543      	cmp	r3, r8
 80050b0:	dcf1      	bgt.n	8005096 <_printf_float+0x3fe>
 80050b2:	4653      	mov	r3, sl
 80050b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050b8:	e6de      	b.n	8004e78 <_printf_float+0x1e0>
 80050ba:	f04f 0800 	mov.w	r8, #0
 80050be:	f104 091a 	add.w	r9, r4, #26
 80050c2:	e7f2      	b.n	80050aa <_printf_float+0x412>
 80050c4:	2301      	movs	r3, #1
 80050c6:	4642      	mov	r2, r8
 80050c8:	e7df      	b.n	800508a <_printf_float+0x3f2>
 80050ca:	2301      	movs	r3, #1
 80050cc:	464a      	mov	r2, r9
 80050ce:	4631      	mov	r1, r6
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b8      	blx	r7
 80050d4:	3001      	adds	r0, #1
 80050d6:	f43f ae3a 	beq.w	8004d4e <_printf_float+0xb6>
 80050da:	f108 0801 	add.w	r8, r8, #1
 80050de:	68e3      	ldr	r3, [r4, #12]
 80050e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80050e2:	1a5b      	subs	r3, r3, r1
 80050e4:	4543      	cmp	r3, r8
 80050e6:	dcf0      	bgt.n	80050ca <_printf_float+0x432>
 80050e8:	e6fb      	b.n	8004ee2 <_printf_float+0x24a>
 80050ea:	f04f 0800 	mov.w	r8, #0
 80050ee:	f104 0919 	add.w	r9, r4, #25
 80050f2:	e7f4      	b.n	80050de <_printf_float+0x446>

080050f4 <_printf_common>:
 80050f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f8:	4616      	mov	r6, r2
 80050fa:	4699      	mov	r9, r3
 80050fc:	688a      	ldr	r2, [r1, #8]
 80050fe:	690b      	ldr	r3, [r1, #16]
 8005100:	4607      	mov	r7, r0
 8005102:	4293      	cmp	r3, r2
 8005104:	bfb8      	it	lt
 8005106:	4613      	movlt	r3, r2
 8005108:	6033      	str	r3, [r6, #0]
 800510a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800510e:	460c      	mov	r4, r1
 8005110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005114:	b10a      	cbz	r2, 800511a <_printf_common+0x26>
 8005116:	3301      	adds	r3, #1
 8005118:	6033      	str	r3, [r6, #0]
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	0699      	lsls	r1, r3, #26
 800511e:	bf42      	ittt	mi
 8005120:	6833      	ldrmi	r3, [r6, #0]
 8005122:	3302      	addmi	r3, #2
 8005124:	6033      	strmi	r3, [r6, #0]
 8005126:	6825      	ldr	r5, [r4, #0]
 8005128:	f015 0506 	ands.w	r5, r5, #6
 800512c:	d106      	bne.n	800513c <_printf_common+0x48>
 800512e:	f104 0a19 	add.w	sl, r4, #25
 8005132:	68e3      	ldr	r3, [r4, #12]
 8005134:	6832      	ldr	r2, [r6, #0]
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	42ab      	cmp	r3, r5
 800513a:	dc2b      	bgt.n	8005194 <_printf_common+0xa0>
 800513c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005140:	1e13      	subs	r3, r2, #0
 8005142:	6822      	ldr	r2, [r4, #0]
 8005144:	bf18      	it	ne
 8005146:	2301      	movne	r3, #1
 8005148:	0692      	lsls	r2, r2, #26
 800514a:	d430      	bmi.n	80051ae <_printf_common+0xba>
 800514c:	4649      	mov	r1, r9
 800514e:	4638      	mov	r0, r7
 8005150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005154:	47c0      	blx	r8
 8005156:	3001      	adds	r0, #1
 8005158:	d023      	beq.n	80051a2 <_printf_common+0xae>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	6922      	ldr	r2, [r4, #16]
 800515e:	f003 0306 	and.w	r3, r3, #6
 8005162:	2b04      	cmp	r3, #4
 8005164:	bf14      	ite	ne
 8005166:	2500      	movne	r5, #0
 8005168:	6833      	ldreq	r3, [r6, #0]
 800516a:	f04f 0600 	mov.w	r6, #0
 800516e:	bf08      	it	eq
 8005170:	68e5      	ldreq	r5, [r4, #12]
 8005172:	f104 041a 	add.w	r4, r4, #26
 8005176:	bf08      	it	eq
 8005178:	1aed      	subeq	r5, r5, r3
 800517a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800517e:	bf08      	it	eq
 8005180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005184:	4293      	cmp	r3, r2
 8005186:	bfc4      	itt	gt
 8005188:	1a9b      	subgt	r3, r3, r2
 800518a:	18ed      	addgt	r5, r5, r3
 800518c:	42b5      	cmp	r5, r6
 800518e:	d11a      	bne.n	80051c6 <_printf_common+0xd2>
 8005190:	2000      	movs	r0, #0
 8005192:	e008      	b.n	80051a6 <_printf_common+0xb2>
 8005194:	2301      	movs	r3, #1
 8005196:	4652      	mov	r2, sl
 8005198:	4649      	mov	r1, r9
 800519a:	4638      	mov	r0, r7
 800519c:	47c0      	blx	r8
 800519e:	3001      	adds	r0, #1
 80051a0:	d103      	bne.n	80051aa <_printf_common+0xb6>
 80051a2:	f04f 30ff 	mov.w	r0, #4294967295
 80051a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051aa:	3501      	adds	r5, #1
 80051ac:	e7c1      	b.n	8005132 <_printf_common+0x3e>
 80051ae:	2030      	movs	r0, #48	; 0x30
 80051b0:	18e1      	adds	r1, r4, r3
 80051b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051bc:	4422      	add	r2, r4
 80051be:	3302      	adds	r3, #2
 80051c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051c4:	e7c2      	b.n	800514c <_printf_common+0x58>
 80051c6:	2301      	movs	r3, #1
 80051c8:	4622      	mov	r2, r4
 80051ca:	4649      	mov	r1, r9
 80051cc:	4638      	mov	r0, r7
 80051ce:	47c0      	blx	r8
 80051d0:	3001      	adds	r0, #1
 80051d2:	d0e6      	beq.n	80051a2 <_printf_common+0xae>
 80051d4:	3601      	adds	r6, #1
 80051d6:	e7d9      	b.n	800518c <_printf_common+0x98>

080051d8 <_printf_i>:
 80051d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051dc:	7e0f      	ldrb	r7, [r1, #24]
 80051de:	4691      	mov	r9, r2
 80051e0:	2f78      	cmp	r7, #120	; 0x78
 80051e2:	4680      	mov	r8, r0
 80051e4:	460c      	mov	r4, r1
 80051e6:	469a      	mov	sl, r3
 80051e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051ee:	d807      	bhi.n	8005200 <_printf_i+0x28>
 80051f0:	2f62      	cmp	r7, #98	; 0x62
 80051f2:	d80a      	bhi.n	800520a <_printf_i+0x32>
 80051f4:	2f00      	cmp	r7, #0
 80051f6:	f000 80d5 	beq.w	80053a4 <_printf_i+0x1cc>
 80051fa:	2f58      	cmp	r7, #88	; 0x58
 80051fc:	f000 80c1 	beq.w	8005382 <_printf_i+0x1aa>
 8005200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005208:	e03a      	b.n	8005280 <_printf_i+0xa8>
 800520a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800520e:	2b15      	cmp	r3, #21
 8005210:	d8f6      	bhi.n	8005200 <_printf_i+0x28>
 8005212:	a101      	add	r1, pc, #4	; (adr r1, 8005218 <_printf_i+0x40>)
 8005214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005218:	08005271 	.word	0x08005271
 800521c:	08005285 	.word	0x08005285
 8005220:	08005201 	.word	0x08005201
 8005224:	08005201 	.word	0x08005201
 8005228:	08005201 	.word	0x08005201
 800522c:	08005201 	.word	0x08005201
 8005230:	08005285 	.word	0x08005285
 8005234:	08005201 	.word	0x08005201
 8005238:	08005201 	.word	0x08005201
 800523c:	08005201 	.word	0x08005201
 8005240:	08005201 	.word	0x08005201
 8005244:	0800538b 	.word	0x0800538b
 8005248:	080052b1 	.word	0x080052b1
 800524c:	08005345 	.word	0x08005345
 8005250:	08005201 	.word	0x08005201
 8005254:	08005201 	.word	0x08005201
 8005258:	080053ad 	.word	0x080053ad
 800525c:	08005201 	.word	0x08005201
 8005260:	080052b1 	.word	0x080052b1
 8005264:	08005201 	.word	0x08005201
 8005268:	08005201 	.word	0x08005201
 800526c:	0800534d 	.word	0x0800534d
 8005270:	682b      	ldr	r3, [r5, #0]
 8005272:	1d1a      	adds	r2, r3, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	602a      	str	r2, [r5, #0]
 8005278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800527c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005280:	2301      	movs	r3, #1
 8005282:	e0a0      	b.n	80053c6 <_printf_i+0x1ee>
 8005284:	6820      	ldr	r0, [r4, #0]
 8005286:	682b      	ldr	r3, [r5, #0]
 8005288:	0607      	lsls	r7, r0, #24
 800528a:	f103 0104 	add.w	r1, r3, #4
 800528e:	6029      	str	r1, [r5, #0]
 8005290:	d501      	bpl.n	8005296 <_printf_i+0xbe>
 8005292:	681e      	ldr	r6, [r3, #0]
 8005294:	e003      	b.n	800529e <_printf_i+0xc6>
 8005296:	0646      	lsls	r6, r0, #25
 8005298:	d5fb      	bpl.n	8005292 <_printf_i+0xba>
 800529a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800529e:	2e00      	cmp	r6, #0
 80052a0:	da03      	bge.n	80052aa <_printf_i+0xd2>
 80052a2:	232d      	movs	r3, #45	; 0x2d
 80052a4:	4276      	negs	r6, r6
 80052a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052aa:	230a      	movs	r3, #10
 80052ac:	4859      	ldr	r0, [pc, #356]	; (8005414 <_printf_i+0x23c>)
 80052ae:	e012      	b.n	80052d6 <_printf_i+0xfe>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	6820      	ldr	r0, [r4, #0]
 80052b4:	1d19      	adds	r1, r3, #4
 80052b6:	6029      	str	r1, [r5, #0]
 80052b8:	0605      	lsls	r5, r0, #24
 80052ba:	d501      	bpl.n	80052c0 <_printf_i+0xe8>
 80052bc:	681e      	ldr	r6, [r3, #0]
 80052be:	e002      	b.n	80052c6 <_printf_i+0xee>
 80052c0:	0641      	lsls	r1, r0, #25
 80052c2:	d5fb      	bpl.n	80052bc <_printf_i+0xe4>
 80052c4:	881e      	ldrh	r6, [r3, #0]
 80052c6:	2f6f      	cmp	r7, #111	; 0x6f
 80052c8:	bf0c      	ite	eq
 80052ca:	2308      	moveq	r3, #8
 80052cc:	230a      	movne	r3, #10
 80052ce:	4851      	ldr	r0, [pc, #324]	; (8005414 <_printf_i+0x23c>)
 80052d0:	2100      	movs	r1, #0
 80052d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052d6:	6865      	ldr	r5, [r4, #4]
 80052d8:	2d00      	cmp	r5, #0
 80052da:	bfa8      	it	ge
 80052dc:	6821      	ldrge	r1, [r4, #0]
 80052de:	60a5      	str	r5, [r4, #8]
 80052e0:	bfa4      	itt	ge
 80052e2:	f021 0104 	bicge.w	r1, r1, #4
 80052e6:	6021      	strge	r1, [r4, #0]
 80052e8:	b90e      	cbnz	r6, 80052ee <_printf_i+0x116>
 80052ea:	2d00      	cmp	r5, #0
 80052ec:	d04b      	beq.n	8005386 <_printf_i+0x1ae>
 80052ee:	4615      	mov	r5, r2
 80052f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80052f4:	fb03 6711 	mls	r7, r3, r1, r6
 80052f8:	5dc7      	ldrb	r7, [r0, r7]
 80052fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052fe:	4637      	mov	r7, r6
 8005300:	42bb      	cmp	r3, r7
 8005302:	460e      	mov	r6, r1
 8005304:	d9f4      	bls.n	80052f0 <_printf_i+0x118>
 8005306:	2b08      	cmp	r3, #8
 8005308:	d10b      	bne.n	8005322 <_printf_i+0x14a>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	07de      	lsls	r6, r3, #31
 800530e:	d508      	bpl.n	8005322 <_printf_i+0x14a>
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	6861      	ldr	r1, [r4, #4]
 8005314:	4299      	cmp	r1, r3
 8005316:	bfde      	ittt	le
 8005318:	2330      	movle	r3, #48	; 0x30
 800531a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800531e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005322:	1b52      	subs	r2, r2, r5
 8005324:	6122      	str	r2, [r4, #16]
 8005326:	464b      	mov	r3, r9
 8005328:	4621      	mov	r1, r4
 800532a:	4640      	mov	r0, r8
 800532c:	f8cd a000 	str.w	sl, [sp]
 8005330:	aa03      	add	r2, sp, #12
 8005332:	f7ff fedf 	bl	80050f4 <_printf_common>
 8005336:	3001      	adds	r0, #1
 8005338:	d14a      	bne.n	80053d0 <_printf_i+0x1f8>
 800533a:	f04f 30ff 	mov.w	r0, #4294967295
 800533e:	b004      	add	sp, #16
 8005340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	f043 0320 	orr.w	r3, r3, #32
 800534a:	6023      	str	r3, [r4, #0]
 800534c:	2778      	movs	r7, #120	; 0x78
 800534e:	4832      	ldr	r0, [pc, #200]	; (8005418 <_printf_i+0x240>)
 8005350:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	6829      	ldr	r1, [r5, #0]
 8005358:	061f      	lsls	r7, r3, #24
 800535a:	f851 6b04 	ldr.w	r6, [r1], #4
 800535e:	d402      	bmi.n	8005366 <_printf_i+0x18e>
 8005360:	065f      	lsls	r7, r3, #25
 8005362:	bf48      	it	mi
 8005364:	b2b6      	uxthmi	r6, r6
 8005366:	07df      	lsls	r7, r3, #31
 8005368:	bf48      	it	mi
 800536a:	f043 0320 	orrmi.w	r3, r3, #32
 800536e:	6029      	str	r1, [r5, #0]
 8005370:	bf48      	it	mi
 8005372:	6023      	strmi	r3, [r4, #0]
 8005374:	b91e      	cbnz	r6, 800537e <_printf_i+0x1a6>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	f023 0320 	bic.w	r3, r3, #32
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	2310      	movs	r3, #16
 8005380:	e7a6      	b.n	80052d0 <_printf_i+0xf8>
 8005382:	4824      	ldr	r0, [pc, #144]	; (8005414 <_printf_i+0x23c>)
 8005384:	e7e4      	b.n	8005350 <_printf_i+0x178>
 8005386:	4615      	mov	r5, r2
 8005388:	e7bd      	b.n	8005306 <_printf_i+0x12e>
 800538a:	682b      	ldr	r3, [r5, #0]
 800538c:	6826      	ldr	r6, [r4, #0]
 800538e:	1d18      	adds	r0, r3, #4
 8005390:	6961      	ldr	r1, [r4, #20]
 8005392:	6028      	str	r0, [r5, #0]
 8005394:	0635      	lsls	r5, r6, #24
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	d501      	bpl.n	800539e <_printf_i+0x1c6>
 800539a:	6019      	str	r1, [r3, #0]
 800539c:	e002      	b.n	80053a4 <_printf_i+0x1cc>
 800539e:	0670      	lsls	r0, r6, #25
 80053a0:	d5fb      	bpl.n	800539a <_printf_i+0x1c2>
 80053a2:	8019      	strh	r1, [r3, #0]
 80053a4:	2300      	movs	r3, #0
 80053a6:	4615      	mov	r5, r2
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	e7bc      	b.n	8005326 <_printf_i+0x14e>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	2100      	movs	r1, #0
 80053b0:	1d1a      	adds	r2, r3, #4
 80053b2:	602a      	str	r2, [r5, #0]
 80053b4:	681d      	ldr	r5, [r3, #0]
 80053b6:	6862      	ldr	r2, [r4, #4]
 80053b8:	4628      	mov	r0, r5
 80053ba:	f000 f9e8 	bl	800578e <memchr>
 80053be:	b108      	cbz	r0, 80053c4 <_printf_i+0x1ec>
 80053c0:	1b40      	subs	r0, r0, r5
 80053c2:	6060      	str	r0, [r4, #4]
 80053c4:	6863      	ldr	r3, [r4, #4]
 80053c6:	6123      	str	r3, [r4, #16]
 80053c8:	2300      	movs	r3, #0
 80053ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ce:	e7aa      	b.n	8005326 <_printf_i+0x14e>
 80053d0:	462a      	mov	r2, r5
 80053d2:	4649      	mov	r1, r9
 80053d4:	4640      	mov	r0, r8
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	47d0      	blx	sl
 80053da:	3001      	adds	r0, #1
 80053dc:	d0ad      	beq.n	800533a <_printf_i+0x162>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	079b      	lsls	r3, r3, #30
 80053e2:	d413      	bmi.n	800540c <_printf_i+0x234>
 80053e4:	68e0      	ldr	r0, [r4, #12]
 80053e6:	9b03      	ldr	r3, [sp, #12]
 80053e8:	4298      	cmp	r0, r3
 80053ea:	bfb8      	it	lt
 80053ec:	4618      	movlt	r0, r3
 80053ee:	e7a6      	b.n	800533e <_printf_i+0x166>
 80053f0:	2301      	movs	r3, #1
 80053f2:	4632      	mov	r2, r6
 80053f4:	4649      	mov	r1, r9
 80053f6:	4640      	mov	r0, r8
 80053f8:	47d0      	blx	sl
 80053fa:	3001      	adds	r0, #1
 80053fc:	d09d      	beq.n	800533a <_printf_i+0x162>
 80053fe:	3501      	adds	r5, #1
 8005400:	68e3      	ldr	r3, [r4, #12]
 8005402:	9903      	ldr	r1, [sp, #12]
 8005404:	1a5b      	subs	r3, r3, r1
 8005406:	42ab      	cmp	r3, r5
 8005408:	dcf2      	bgt.n	80053f0 <_printf_i+0x218>
 800540a:	e7eb      	b.n	80053e4 <_printf_i+0x20c>
 800540c:	2500      	movs	r5, #0
 800540e:	f104 0619 	add.w	r6, r4, #25
 8005412:	e7f5      	b.n	8005400 <_printf_i+0x228>
 8005414:	08007900 	.word	0x08007900
 8005418:	08007911 	.word	0x08007911

0800541c <std>:
 800541c:	2300      	movs	r3, #0
 800541e:	b510      	push	{r4, lr}
 8005420:	4604      	mov	r4, r0
 8005422:	e9c0 3300 	strd	r3, r3, [r0]
 8005426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800542a:	6083      	str	r3, [r0, #8]
 800542c:	8181      	strh	r1, [r0, #12]
 800542e:	6643      	str	r3, [r0, #100]	; 0x64
 8005430:	81c2      	strh	r2, [r0, #14]
 8005432:	6183      	str	r3, [r0, #24]
 8005434:	4619      	mov	r1, r3
 8005436:	2208      	movs	r2, #8
 8005438:	305c      	adds	r0, #92	; 0x5c
 800543a:	f000 f928 	bl	800568e <memset>
 800543e:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <std+0x58>)
 8005440:	6224      	str	r4, [r4, #32]
 8005442:	6263      	str	r3, [r4, #36]	; 0x24
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <std+0x5c>)
 8005446:	62a3      	str	r3, [r4, #40]	; 0x28
 8005448:	4b0c      	ldr	r3, [pc, #48]	; (800547c <std+0x60>)
 800544a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800544c:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <std+0x64>)
 800544e:	6323      	str	r3, [r4, #48]	; 0x30
 8005450:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <std+0x68>)
 8005452:	429c      	cmp	r4, r3
 8005454:	d006      	beq.n	8005464 <std+0x48>
 8005456:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800545a:	4294      	cmp	r4, r2
 800545c:	d002      	beq.n	8005464 <std+0x48>
 800545e:	33d0      	adds	r3, #208	; 0xd0
 8005460:	429c      	cmp	r4, r3
 8005462:	d105      	bne.n	8005470 <std+0x54>
 8005464:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800546c:	f000 b98c 	b.w	8005788 <__retarget_lock_init_recursive>
 8005470:	bd10      	pop	{r4, pc}
 8005472:	bf00      	nop
 8005474:	08005609 	.word	0x08005609
 8005478:	0800562b 	.word	0x0800562b
 800547c:	08005663 	.word	0x08005663
 8005480:	08005687 	.word	0x08005687
 8005484:	20000348 	.word	0x20000348

08005488 <stdio_exit_handler>:
 8005488:	4a02      	ldr	r2, [pc, #8]	; (8005494 <stdio_exit_handler+0xc>)
 800548a:	4903      	ldr	r1, [pc, #12]	; (8005498 <stdio_exit_handler+0x10>)
 800548c:	4803      	ldr	r0, [pc, #12]	; (800549c <stdio_exit_handler+0x14>)
 800548e:	f000 b869 	b.w	8005564 <_fwalk_sglue>
 8005492:	bf00      	nop
 8005494:	20000010 	.word	0x20000010
 8005498:	08007125 	.word	0x08007125
 800549c:	2000001c 	.word	0x2000001c

080054a0 <cleanup_stdio>:
 80054a0:	6841      	ldr	r1, [r0, #4]
 80054a2:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <cleanup_stdio+0x34>)
 80054a4:	b510      	push	{r4, lr}
 80054a6:	4299      	cmp	r1, r3
 80054a8:	4604      	mov	r4, r0
 80054aa:	d001      	beq.n	80054b0 <cleanup_stdio+0x10>
 80054ac:	f001 fe3a 	bl	8007124 <_fflush_r>
 80054b0:	68a1      	ldr	r1, [r4, #8]
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <cleanup_stdio+0x38>)
 80054b4:	4299      	cmp	r1, r3
 80054b6:	d002      	beq.n	80054be <cleanup_stdio+0x1e>
 80054b8:	4620      	mov	r0, r4
 80054ba:	f001 fe33 	bl	8007124 <_fflush_r>
 80054be:	68e1      	ldr	r1, [r4, #12]
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <cleanup_stdio+0x3c>)
 80054c2:	4299      	cmp	r1, r3
 80054c4:	d004      	beq.n	80054d0 <cleanup_stdio+0x30>
 80054c6:	4620      	mov	r0, r4
 80054c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054cc:	f001 be2a 	b.w	8007124 <_fflush_r>
 80054d0:	bd10      	pop	{r4, pc}
 80054d2:	bf00      	nop
 80054d4:	20000348 	.word	0x20000348
 80054d8:	200003b0 	.word	0x200003b0
 80054dc:	20000418 	.word	0x20000418

080054e0 <global_stdio_init.part.0>:
 80054e0:	b510      	push	{r4, lr}
 80054e2:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <global_stdio_init.part.0+0x30>)
 80054e4:	4c0b      	ldr	r4, [pc, #44]	; (8005514 <global_stdio_init.part.0+0x34>)
 80054e6:	4a0c      	ldr	r2, [pc, #48]	; (8005518 <global_stdio_init.part.0+0x38>)
 80054e8:	4620      	mov	r0, r4
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	2104      	movs	r1, #4
 80054ee:	2200      	movs	r2, #0
 80054f0:	f7ff ff94 	bl	800541c <std>
 80054f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80054f8:	2201      	movs	r2, #1
 80054fa:	2109      	movs	r1, #9
 80054fc:	f7ff ff8e 	bl	800541c <std>
 8005500:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005504:	2202      	movs	r2, #2
 8005506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800550a:	2112      	movs	r1, #18
 800550c:	f7ff bf86 	b.w	800541c <std>
 8005510:	20000480 	.word	0x20000480
 8005514:	20000348 	.word	0x20000348
 8005518:	08005489 	.word	0x08005489

0800551c <__sfp_lock_acquire>:
 800551c:	4801      	ldr	r0, [pc, #4]	; (8005524 <__sfp_lock_acquire+0x8>)
 800551e:	f000 b934 	b.w	800578a <__retarget_lock_acquire_recursive>
 8005522:	bf00      	nop
 8005524:	20000489 	.word	0x20000489

08005528 <__sfp_lock_release>:
 8005528:	4801      	ldr	r0, [pc, #4]	; (8005530 <__sfp_lock_release+0x8>)
 800552a:	f000 b92f 	b.w	800578c <__retarget_lock_release_recursive>
 800552e:	bf00      	nop
 8005530:	20000489 	.word	0x20000489

08005534 <__sinit>:
 8005534:	b510      	push	{r4, lr}
 8005536:	4604      	mov	r4, r0
 8005538:	f7ff fff0 	bl	800551c <__sfp_lock_acquire>
 800553c:	6a23      	ldr	r3, [r4, #32]
 800553e:	b11b      	cbz	r3, 8005548 <__sinit+0x14>
 8005540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005544:	f7ff bff0 	b.w	8005528 <__sfp_lock_release>
 8005548:	4b04      	ldr	r3, [pc, #16]	; (800555c <__sinit+0x28>)
 800554a:	6223      	str	r3, [r4, #32]
 800554c:	4b04      	ldr	r3, [pc, #16]	; (8005560 <__sinit+0x2c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f5      	bne.n	8005540 <__sinit+0xc>
 8005554:	f7ff ffc4 	bl	80054e0 <global_stdio_init.part.0>
 8005558:	e7f2      	b.n	8005540 <__sinit+0xc>
 800555a:	bf00      	nop
 800555c:	080054a1 	.word	0x080054a1
 8005560:	20000480 	.word	0x20000480

08005564 <_fwalk_sglue>:
 8005564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005568:	4607      	mov	r7, r0
 800556a:	4688      	mov	r8, r1
 800556c:	4614      	mov	r4, r2
 800556e:	2600      	movs	r6, #0
 8005570:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005574:	f1b9 0901 	subs.w	r9, r9, #1
 8005578:	d505      	bpl.n	8005586 <_fwalk_sglue+0x22>
 800557a:	6824      	ldr	r4, [r4, #0]
 800557c:	2c00      	cmp	r4, #0
 800557e:	d1f7      	bne.n	8005570 <_fwalk_sglue+0xc>
 8005580:	4630      	mov	r0, r6
 8005582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005586:	89ab      	ldrh	r3, [r5, #12]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d907      	bls.n	800559c <_fwalk_sglue+0x38>
 800558c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005590:	3301      	adds	r3, #1
 8005592:	d003      	beq.n	800559c <_fwalk_sglue+0x38>
 8005594:	4629      	mov	r1, r5
 8005596:	4638      	mov	r0, r7
 8005598:	47c0      	blx	r8
 800559a:	4306      	orrs	r6, r0
 800559c:	3568      	adds	r5, #104	; 0x68
 800559e:	e7e9      	b.n	8005574 <_fwalk_sglue+0x10>

080055a0 <sniprintf>:
 80055a0:	b40c      	push	{r2, r3}
 80055a2:	b530      	push	{r4, r5, lr}
 80055a4:	4b17      	ldr	r3, [pc, #92]	; (8005604 <sniprintf+0x64>)
 80055a6:	1e0c      	subs	r4, r1, #0
 80055a8:	681d      	ldr	r5, [r3, #0]
 80055aa:	b09d      	sub	sp, #116	; 0x74
 80055ac:	da08      	bge.n	80055c0 <sniprintf+0x20>
 80055ae:	238b      	movs	r3, #139	; 0x8b
 80055b0:	f04f 30ff 	mov.w	r0, #4294967295
 80055b4:	602b      	str	r3, [r5, #0]
 80055b6:	b01d      	add	sp, #116	; 0x74
 80055b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055bc:	b002      	add	sp, #8
 80055be:	4770      	bx	lr
 80055c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80055c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80055c8:	bf0c      	ite	eq
 80055ca:	4623      	moveq	r3, r4
 80055cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	9307      	str	r3, [sp, #28]
 80055d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055d8:	9002      	str	r0, [sp, #8]
 80055da:	9006      	str	r0, [sp, #24]
 80055dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80055e0:	4628      	mov	r0, r5
 80055e2:	ab21      	add	r3, sp, #132	; 0x84
 80055e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80055e6:	a902      	add	r1, sp, #8
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	f001 fc1b 	bl	8006e24 <_svfiprintf_r>
 80055ee:	1c43      	adds	r3, r0, #1
 80055f0:	bfbc      	itt	lt
 80055f2:	238b      	movlt	r3, #139	; 0x8b
 80055f4:	602b      	strlt	r3, [r5, #0]
 80055f6:	2c00      	cmp	r4, #0
 80055f8:	d0dd      	beq.n	80055b6 <sniprintf+0x16>
 80055fa:	2200      	movs	r2, #0
 80055fc:	9b02      	ldr	r3, [sp, #8]
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	e7d9      	b.n	80055b6 <sniprintf+0x16>
 8005602:	bf00      	nop
 8005604:	20000068 	.word	0x20000068

08005608 <__sread>:
 8005608:	b510      	push	{r4, lr}
 800560a:	460c      	mov	r4, r1
 800560c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005610:	f000 f86c 	bl	80056ec <_read_r>
 8005614:	2800      	cmp	r0, #0
 8005616:	bfab      	itete	ge
 8005618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800561a:	89a3      	ldrhlt	r3, [r4, #12]
 800561c:	181b      	addge	r3, r3, r0
 800561e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005622:	bfac      	ite	ge
 8005624:	6563      	strge	r3, [r4, #84]	; 0x54
 8005626:	81a3      	strhlt	r3, [r4, #12]
 8005628:	bd10      	pop	{r4, pc}

0800562a <__swrite>:
 800562a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562e:	461f      	mov	r7, r3
 8005630:	898b      	ldrh	r3, [r1, #12]
 8005632:	4605      	mov	r5, r0
 8005634:	05db      	lsls	r3, r3, #23
 8005636:	460c      	mov	r4, r1
 8005638:	4616      	mov	r6, r2
 800563a:	d505      	bpl.n	8005648 <__swrite+0x1e>
 800563c:	2302      	movs	r3, #2
 800563e:	2200      	movs	r2, #0
 8005640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005644:	f000 f840 	bl	80056c8 <_lseek_r>
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	4632      	mov	r2, r6
 800564c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005650:	81a3      	strh	r3, [r4, #12]
 8005652:	4628      	mov	r0, r5
 8005654:	463b      	mov	r3, r7
 8005656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800565a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800565e:	f000 b857 	b.w	8005710 <_write_r>

08005662 <__sseek>:
 8005662:	b510      	push	{r4, lr}
 8005664:	460c      	mov	r4, r1
 8005666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800566a:	f000 f82d 	bl	80056c8 <_lseek_r>
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	bf15      	itete	ne
 8005674:	6560      	strne	r0, [r4, #84]	; 0x54
 8005676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800567a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800567e:	81a3      	strheq	r3, [r4, #12]
 8005680:	bf18      	it	ne
 8005682:	81a3      	strhne	r3, [r4, #12]
 8005684:	bd10      	pop	{r4, pc}

08005686 <__sclose>:
 8005686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568a:	f000 b80d 	b.w	80056a8 <_close_r>

0800568e <memset>:
 800568e:	4603      	mov	r3, r0
 8005690:	4402      	add	r2, r0
 8005692:	4293      	cmp	r3, r2
 8005694:	d100      	bne.n	8005698 <memset+0xa>
 8005696:	4770      	bx	lr
 8005698:	f803 1b01 	strb.w	r1, [r3], #1
 800569c:	e7f9      	b.n	8005692 <memset+0x4>
	...

080056a0 <_localeconv_r>:
 80056a0:	4800      	ldr	r0, [pc, #0]	; (80056a4 <_localeconv_r+0x4>)
 80056a2:	4770      	bx	lr
 80056a4:	2000015c 	.word	0x2000015c

080056a8 <_close_r>:
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	2300      	movs	r3, #0
 80056ac:	4d05      	ldr	r5, [pc, #20]	; (80056c4 <_close_r+0x1c>)
 80056ae:	4604      	mov	r4, r0
 80056b0:	4608      	mov	r0, r1
 80056b2:	602b      	str	r3, [r5, #0]
 80056b4:	f7fc f8a4 	bl	8001800 <_close>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	d102      	bne.n	80056c2 <_close_r+0x1a>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	b103      	cbz	r3, 80056c2 <_close_r+0x1a>
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	bd38      	pop	{r3, r4, r5, pc}
 80056c4:	20000484 	.word	0x20000484

080056c8 <_lseek_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4604      	mov	r4, r0
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	2200      	movs	r2, #0
 80056d2:	4d05      	ldr	r5, [pc, #20]	; (80056e8 <_lseek_r+0x20>)
 80056d4:	602a      	str	r2, [r5, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	f7fc f8b6 	bl	8001848 <_lseek>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_lseek_r+0x1e>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_lseek_r+0x1e>
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	20000484 	.word	0x20000484

080056ec <_read_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4604      	mov	r4, r0
 80056f0:	4608      	mov	r0, r1
 80056f2:	4611      	mov	r1, r2
 80056f4:	2200      	movs	r2, #0
 80056f6:	4d05      	ldr	r5, [pc, #20]	; (800570c <_read_r+0x20>)
 80056f8:	602a      	str	r2, [r5, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f7fc f847 	bl	800178e <_read>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d102      	bne.n	800570a <_read_r+0x1e>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	b103      	cbz	r3, 800570a <_read_r+0x1e>
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	20000484 	.word	0x20000484

08005710 <_write_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	4611      	mov	r1, r2
 8005718:	2200      	movs	r2, #0
 800571a:	4d05      	ldr	r5, [pc, #20]	; (8005730 <_write_r+0x20>)
 800571c:	602a      	str	r2, [r5, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	f7fc f852 	bl	80017c8 <_write>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d102      	bne.n	800572e <_write_r+0x1e>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	b103      	cbz	r3, 800572e <_write_r+0x1e>
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	20000484 	.word	0x20000484

08005734 <__errno>:
 8005734:	4b01      	ldr	r3, [pc, #4]	; (800573c <__errno+0x8>)
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	20000068 	.word	0x20000068

08005740 <__libc_init_array>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	2600      	movs	r6, #0
 8005744:	4d0c      	ldr	r5, [pc, #48]	; (8005778 <__libc_init_array+0x38>)
 8005746:	4c0d      	ldr	r4, [pc, #52]	; (800577c <__libc_init_array+0x3c>)
 8005748:	1b64      	subs	r4, r4, r5
 800574a:	10a4      	asrs	r4, r4, #2
 800574c:	42a6      	cmp	r6, r4
 800574e:	d109      	bne.n	8005764 <__libc_init_array+0x24>
 8005750:	f002 f888 	bl	8007864 <_init>
 8005754:	2600      	movs	r6, #0
 8005756:	4d0a      	ldr	r5, [pc, #40]	; (8005780 <__libc_init_array+0x40>)
 8005758:	4c0a      	ldr	r4, [pc, #40]	; (8005784 <__libc_init_array+0x44>)
 800575a:	1b64      	subs	r4, r4, r5
 800575c:	10a4      	asrs	r4, r4, #2
 800575e:	42a6      	cmp	r6, r4
 8005760:	d105      	bne.n	800576e <__libc_init_array+0x2e>
 8005762:	bd70      	pop	{r4, r5, r6, pc}
 8005764:	f855 3b04 	ldr.w	r3, [r5], #4
 8005768:	4798      	blx	r3
 800576a:	3601      	adds	r6, #1
 800576c:	e7ee      	b.n	800574c <__libc_init_array+0xc>
 800576e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005772:	4798      	blx	r3
 8005774:	3601      	adds	r6, #1
 8005776:	e7f2      	b.n	800575e <__libc_init_array+0x1e>
 8005778:	08007c5c 	.word	0x08007c5c
 800577c:	08007c5c 	.word	0x08007c5c
 8005780:	08007c5c 	.word	0x08007c5c
 8005784:	08007c60 	.word	0x08007c60

08005788 <__retarget_lock_init_recursive>:
 8005788:	4770      	bx	lr

0800578a <__retarget_lock_acquire_recursive>:
 800578a:	4770      	bx	lr

0800578c <__retarget_lock_release_recursive>:
 800578c:	4770      	bx	lr

0800578e <memchr>:
 800578e:	4603      	mov	r3, r0
 8005790:	b510      	push	{r4, lr}
 8005792:	b2c9      	uxtb	r1, r1
 8005794:	4402      	add	r2, r0
 8005796:	4293      	cmp	r3, r2
 8005798:	4618      	mov	r0, r3
 800579a:	d101      	bne.n	80057a0 <memchr+0x12>
 800579c:	2000      	movs	r0, #0
 800579e:	e003      	b.n	80057a8 <memchr+0x1a>
 80057a0:	7804      	ldrb	r4, [r0, #0]
 80057a2:	3301      	adds	r3, #1
 80057a4:	428c      	cmp	r4, r1
 80057a6:	d1f6      	bne.n	8005796 <memchr+0x8>
 80057a8:	bd10      	pop	{r4, pc}

080057aa <quorem>:
 80057aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ae:	6903      	ldr	r3, [r0, #16]
 80057b0:	690c      	ldr	r4, [r1, #16]
 80057b2:	4607      	mov	r7, r0
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	db7f      	blt.n	80058b8 <quorem+0x10e>
 80057b8:	3c01      	subs	r4, #1
 80057ba:	f100 0514 	add.w	r5, r0, #20
 80057be:	f101 0814 	add.w	r8, r1, #20
 80057c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057d0:	3301      	adds	r3, #1
 80057d2:	429a      	cmp	r2, r3
 80057d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80057d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80057dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057e0:	d331      	bcc.n	8005846 <quorem+0x9c>
 80057e2:	f04f 0e00 	mov.w	lr, #0
 80057e6:	4640      	mov	r0, r8
 80057e8:	46ac      	mov	ip, r5
 80057ea:	46f2      	mov	sl, lr
 80057ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80057f0:	b293      	uxth	r3, r2
 80057f2:	fb06 e303 	mla	r3, r6, r3, lr
 80057f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80057fa:	0c1a      	lsrs	r2, r3, #16
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	fb06 220e 	mla	r2, r6, lr, r2
 8005802:	ebaa 0303 	sub.w	r3, sl, r3
 8005806:	f8dc a000 	ldr.w	sl, [ip]
 800580a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800580e:	fa1f fa8a 	uxth.w	sl, sl
 8005812:	4453      	add	r3, sl
 8005814:	f8dc a000 	ldr.w	sl, [ip]
 8005818:	b292      	uxth	r2, r2
 800581a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800581e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005822:	b29b      	uxth	r3, r3
 8005824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005828:	4581      	cmp	r9, r0
 800582a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800582e:	f84c 3b04 	str.w	r3, [ip], #4
 8005832:	d2db      	bcs.n	80057ec <quorem+0x42>
 8005834:	f855 300b 	ldr.w	r3, [r5, fp]
 8005838:	b92b      	cbnz	r3, 8005846 <quorem+0x9c>
 800583a:	9b01      	ldr	r3, [sp, #4]
 800583c:	3b04      	subs	r3, #4
 800583e:	429d      	cmp	r5, r3
 8005840:	461a      	mov	r2, r3
 8005842:	d32d      	bcc.n	80058a0 <quorem+0xf6>
 8005844:	613c      	str	r4, [r7, #16]
 8005846:	4638      	mov	r0, r7
 8005848:	f001 f994 	bl	8006b74 <__mcmp>
 800584c:	2800      	cmp	r0, #0
 800584e:	db23      	blt.n	8005898 <quorem+0xee>
 8005850:	4629      	mov	r1, r5
 8005852:	2000      	movs	r0, #0
 8005854:	3601      	adds	r6, #1
 8005856:	f858 2b04 	ldr.w	r2, [r8], #4
 800585a:	f8d1 c000 	ldr.w	ip, [r1]
 800585e:	b293      	uxth	r3, r2
 8005860:	1ac3      	subs	r3, r0, r3
 8005862:	0c12      	lsrs	r2, r2, #16
 8005864:	fa1f f08c 	uxth.w	r0, ip
 8005868:	4403      	add	r3, r0
 800586a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800586e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005872:	b29b      	uxth	r3, r3
 8005874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005878:	45c1      	cmp	r9, r8
 800587a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800587e:	f841 3b04 	str.w	r3, [r1], #4
 8005882:	d2e8      	bcs.n	8005856 <quorem+0xac>
 8005884:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005888:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800588c:	b922      	cbnz	r2, 8005898 <quorem+0xee>
 800588e:	3b04      	subs	r3, #4
 8005890:	429d      	cmp	r5, r3
 8005892:	461a      	mov	r2, r3
 8005894:	d30a      	bcc.n	80058ac <quorem+0x102>
 8005896:	613c      	str	r4, [r7, #16]
 8005898:	4630      	mov	r0, r6
 800589a:	b003      	add	sp, #12
 800589c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a0:	6812      	ldr	r2, [r2, #0]
 80058a2:	3b04      	subs	r3, #4
 80058a4:	2a00      	cmp	r2, #0
 80058a6:	d1cd      	bne.n	8005844 <quorem+0x9a>
 80058a8:	3c01      	subs	r4, #1
 80058aa:	e7c8      	b.n	800583e <quorem+0x94>
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	3b04      	subs	r3, #4
 80058b0:	2a00      	cmp	r2, #0
 80058b2:	d1f0      	bne.n	8005896 <quorem+0xec>
 80058b4:	3c01      	subs	r4, #1
 80058b6:	e7eb      	b.n	8005890 <quorem+0xe6>
 80058b8:	2000      	movs	r0, #0
 80058ba:	e7ee      	b.n	800589a <quorem+0xf0>
 80058bc:	0000      	movs	r0, r0
	...

080058c0 <_dtoa_r>:
 80058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	4616      	mov	r6, r2
 80058c6:	461f      	mov	r7, r3
 80058c8:	69c4      	ldr	r4, [r0, #28]
 80058ca:	b099      	sub	sp, #100	; 0x64
 80058cc:	4605      	mov	r5, r0
 80058ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80058d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80058d6:	b974      	cbnz	r4, 80058f6 <_dtoa_r+0x36>
 80058d8:	2010      	movs	r0, #16
 80058da:	f000 fe1d 	bl	8006518 <malloc>
 80058de:	4602      	mov	r2, r0
 80058e0:	61e8      	str	r0, [r5, #28]
 80058e2:	b920      	cbnz	r0, 80058ee <_dtoa_r+0x2e>
 80058e4:	21ef      	movs	r1, #239	; 0xef
 80058e6:	4bac      	ldr	r3, [pc, #688]	; (8005b98 <_dtoa_r+0x2d8>)
 80058e8:	48ac      	ldr	r0, [pc, #688]	; (8005b9c <_dtoa_r+0x2dc>)
 80058ea:	f001 fc7b 	bl	80071e4 <__assert_func>
 80058ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058f2:	6004      	str	r4, [r0, #0]
 80058f4:	60c4      	str	r4, [r0, #12]
 80058f6:	69eb      	ldr	r3, [r5, #28]
 80058f8:	6819      	ldr	r1, [r3, #0]
 80058fa:	b151      	cbz	r1, 8005912 <_dtoa_r+0x52>
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	2301      	movs	r3, #1
 8005900:	4093      	lsls	r3, r2
 8005902:	604a      	str	r2, [r1, #4]
 8005904:	608b      	str	r3, [r1, #8]
 8005906:	4628      	mov	r0, r5
 8005908:	f000 fefa 	bl	8006700 <_Bfree>
 800590c:	2200      	movs	r2, #0
 800590e:	69eb      	ldr	r3, [r5, #28]
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	1e3b      	subs	r3, r7, #0
 8005914:	bfaf      	iteee	ge
 8005916:	2300      	movge	r3, #0
 8005918:	2201      	movlt	r2, #1
 800591a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800591e:	9305      	strlt	r3, [sp, #20]
 8005920:	bfa8      	it	ge
 8005922:	f8c8 3000 	strge.w	r3, [r8]
 8005926:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800592a:	4b9d      	ldr	r3, [pc, #628]	; (8005ba0 <_dtoa_r+0x2e0>)
 800592c:	bfb8      	it	lt
 800592e:	f8c8 2000 	strlt.w	r2, [r8]
 8005932:	ea33 0309 	bics.w	r3, r3, r9
 8005936:	d119      	bne.n	800596c <_dtoa_r+0xac>
 8005938:	f242 730f 	movw	r3, #9999	; 0x270f
 800593c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005944:	4333      	orrs	r3, r6
 8005946:	f000 8589 	beq.w	800645c <_dtoa_r+0xb9c>
 800594a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800594c:	b953      	cbnz	r3, 8005964 <_dtoa_r+0xa4>
 800594e:	4b95      	ldr	r3, [pc, #596]	; (8005ba4 <_dtoa_r+0x2e4>)
 8005950:	e023      	b.n	800599a <_dtoa_r+0xda>
 8005952:	4b95      	ldr	r3, [pc, #596]	; (8005ba8 <_dtoa_r+0x2e8>)
 8005954:	9303      	str	r3, [sp, #12]
 8005956:	3308      	adds	r3, #8
 8005958:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	9803      	ldr	r0, [sp, #12]
 800595e:	b019      	add	sp, #100	; 0x64
 8005960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005964:	4b8f      	ldr	r3, [pc, #572]	; (8005ba4 <_dtoa_r+0x2e4>)
 8005966:	9303      	str	r3, [sp, #12]
 8005968:	3303      	adds	r3, #3
 800596a:	e7f5      	b.n	8005958 <_dtoa_r+0x98>
 800596c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005970:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005974:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005978:	2200      	movs	r2, #0
 800597a:	2300      	movs	r3, #0
 800597c:	f7fb f814 	bl	80009a8 <__aeabi_dcmpeq>
 8005980:	4680      	mov	r8, r0
 8005982:	b160      	cbz	r0, 800599e <_dtoa_r+0xde>
 8005984:	2301      	movs	r3, #1
 8005986:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8562 	beq.w	8006456 <_dtoa_r+0xb96>
 8005992:	4b86      	ldr	r3, [pc, #536]	; (8005bac <_dtoa_r+0x2ec>)
 8005994:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	3b01      	subs	r3, #1
 800599a:	9303      	str	r3, [sp, #12]
 800599c:	e7de      	b.n	800595c <_dtoa_r+0x9c>
 800599e:	ab16      	add	r3, sp, #88	; 0x58
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	ab17      	add	r3, sp, #92	; 0x5c
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	4628      	mov	r0, r5
 80059a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059ac:	f001 f98a 	bl	8006cc4 <__d2b>
 80059b0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80059b4:	4682      	mov	sl, r0
 80059b6:	2c00      	cmp	r4, #0
 80059b8:	d07e      	beq.n	8005ab8 <_dtoa_r+0x1f8>
 80059ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059c0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80059c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059c8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80059cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80059d0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80059d4:	4619      	mov	r1, r3
 80059d6:	2200      	movs	r2, #0
 80059d8:	4b75      	ldr	r3, [pc, #468]	; (8005bb0 <_dtoa_r+0x2f0>)
 80059da:	f7fa fbc5 	bl	8000168 <__aeabi_dsub>
 80059de:	a368      	add	r3, pc, #416	; (adr r3, 8005b80 <_dtoa_r+0x2c0>)
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	f7fa fd78 	bl	80004d8 <__aeabi_dmul>
 80059e8:	a367      	add	r3, pc, #412	; (adr r3, 8005b88 <_dtoa_r+0x2c8>)
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	f7fa fbbd 	bl	800016c <__adddf3>
 80059f2:	4606      	mov	r6, r0
 80059f4:	4620      	mov	r0, r4
 80059f6:	460f      	mov	r7, r1
 80059f8:	f7fa fd04 	bl	8000404 <__aeabi_i2d>
 80059fc:	a364      	add	r3, pc, #400	; (adr r3, 8005b90 <_dtoa_r+0x2d0>)
 80059fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a02:	f7fa fd69 	bl	80004d8 <__aeabi_dmul>
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	f7fa fbad 	bl	800016c <__adddf3>
 8005a12:	4606      	mov	r6, r0
 8005a14:	460f      	mov	r7, r1
 8005a16:	f7fb f80f 	bl	8000a38 <__aeabi_d2iz>
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4683      	mov	fp, r0
 8005a1e:	2300      	movs	r3, #0
 8005a20:	4630      	mov	r0, r6
 8005a22:	4639      	mov	r1, r7
 8005a24:	f7fa ffca 	bl	80009bc <__aeabi_dcmplt>
 8005a28:	b148      	cbz	r0, 8005a3e <_dtoa_r+0x17e>
 8005a2a:	4658      	mov	r0, fp
 8005a2c:	f7fa fcea 	bl	8000404 <__aeabi_i2d>
 8005a30:	4632      	mov	r2, r6
 8005a32:	463b      	mov	r3, r7
 8005a34:	f7fa ffb8 	bl	80009a8 <__aeabi_dcmpeq>
 8005a38:	b908      	cbnz	r0, 8005a3e <_dtoa_r+0x17e>
 8005a3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a3e:	f1bb 0f16 	cmp.w	fp, #22
 8005a42:	d857      	bhi.n	8005af4 <_dtoa_r+0x234>
 8005a44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a48:	4b5a      	ldr	r3, [pc, #360]	; (8005bb4 <_dtoa_r+0x2f4>)
 8005a4a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f7fa ffb3 	bl	80009bc <__aeabi_dcmplt>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d04e      	beq.n	8005af8 <_dtoa_r+0x238>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a60:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005a64:	1b1b      	subs	r3, r3, r4
 8005a66:	1e5a      	subs	r2, r3, #1
 8005a68:	bf46      	itte	mi
 8005a6a:	f1c3 0901 	rsbmi	r9, r3, #1
 8005a6e:	2300      	movmi	r3, #0
 8005a70:	f04f 0900 	movpl.w	r9, #0
 8005a74:	9209      	str	r2, [sp, #36]	; 0x24
 8005a76:	bf48      	it	mi
 8005a78:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005a7a:	f1bb 0f00 	cmp.w	fp, #0
 8005a7e:	db3d      	blt.n	8005afc <_dtoa_r+0x23c>
 8005a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a82:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005a86:	445b      	add	r3, fp
 8005a88:	9309      	str	r3, [sp, #36]	; 0x24
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a90:	2b09      	cmp	r3, #9
 8005a92:	d867      	bhi.n	8005b64 <_dtoa_r+0x2a4>
 8005a94:	2b05      	cmp	r3, #5
 8005a96:	bfc4      	itt	gt
 8005a98:	3b04      	subgt	r3, #4
 8005a9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005a9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a9e:	bfc8      	it	gt
 8005aa0:	2400      	movgt	r4, #0
 8005aa2:	f1a3 0302 	sub.w	r3, r3, #2
 8005aa6:	bfd8      	it	le
 8005aa8:	2401      	movle	r4, #1
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	f200 8086 	bhi.w	8005bbc <_dtoa_r+0x2fc>
 8005ab0:	e8df f003 	tbb	[pc, r3]
 8005ab4:	5637392c 	.word	0x5637392c
 8005ab8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005abc:	441c      	add	r4, r3
 8005abe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	bfc1      	itttt	gt
 8005ac6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005aca:	fa09 f903 	lslgt.w	r9, r9, r3
 8005ace:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005ad2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005ad6:	bfd6      	itet	le
 8005ad8:	f1c3 0320 	rsble	r3, r3, #32
 8005adc:	ea49 0003 	orrgt.w	r0, r9, r3
 8005ae0:	fa06 f003 	lslle.w	r0, r6, r3
 8005ae4:	f7fa fc7e 	bl	80003e4 <__aeabi_ui2d>
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005aee:	3c01      	subs	r4, #1
 8005af0:	9213      	str	r2, [sp, #76]	; 0x4c
 8005af2:	e76f      	b.n	80059d4 <_dtoa_r+0x114>
 8005af4:	2301      	movs	r3, #1
 8005af6:	e7b3      	b.n	8005a60 <_dtoa_r+0x1a0>
 8005af8:	900f      	str	r0, [sp, #60]	; 0x3c
 8005afa:	e7b2      	b.n	8005a62 <_dtoa_r+0x1a2>
 8005afc:	f1cb 0300 	rsb	r3, fp, #0
 8005b00:	930a      	str	r3, [sp, #40]	; 0x28
 8005b02:	2300      	movs	r3, #0
 8005b04:	eba9 090b 	sub.w	r9, r9, fp
 8005b08:	930e      	str	r3, [sp, #56]	; 0x38
 8005b0a:	e7c0      	b.n	8005a8e <_dtoa_r+0x1ce>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	dc55      	bgt.n	8005bc2 <_dtoa_r+0x302>
 8005b16:	2301      	movs	r3, #1
 8005b18:	461a      	mov	r2, r3
 8005b1a:	9306      	str	r3, [sp, #24]
 8005b1c:	9308      	str	r3, [sp, #32]
 8005b1e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005b20:	e00b      	b.n	8005b3a <_dtoa_r+0x27a>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e7f3      	b.n	8005b0e <_dtoa_r+0x24e>
 8005b26:	2300      	movs	r3, #0
 8005b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b2c:	445b      	add	r3, fp
 8005b2e:	9306      	str	r3, [sp, #24]
 8005b30:	3301      	adds	r3, #1
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	9308      	str	r3, [sp, #32]
 8005b36:	bfb8      	it	lt
 8005b38:	2301      	movlt	r3, #1
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	69e8      	ldr	r0, [r5, #28]
 8005b40:	f102 0614 	add.w	r6, r2, #20
 8005b44:	429e      	cmp	r6, r3
 8005b46:	d940      	bls.n	8005bca <_dtoa_r+0x30a>
 8005b48:	6041      	str	r1, [r0, #4]
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 fd98 	bl	8006680 <_Balloc>
 8005b50:	9003      	str	r0, [sp, #12]
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d13c      	bne.n	8005bd0 <_dtoa_r+0x310>
 8005b56:	4602      	mov	r2, r0
 8005b58:	f240 11af 	movw	r1, #431	; 0x1af
 8005b5c:	4b16      	ldr	r3, [pc, #88]	; (8005bb8 <_dtoa_r+0x2f8>)
 8005b5e:	e6c3      	b.n	80058e8 <_dtoa_r+0x28>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e7e1      	b.n	8005b28 <_dtoa_r+0x268>
 8005b64:	2401      	movs	r4, #1
 8005b66:	2300      	movs	r3, #0
 8005b68:	940b      	str	r4, [sp, #44]	; 0x2c
 8005b6a:	9322      	str	r3, [sp, #136]	; 0x88
 8005b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b70:	2200      	movs	r2, #0
 8005b72:	9306      	str	r3, [sp, #24]
 8005b74:	9308      	str	r3, [sp, #32]
 8005b76:	2312      	movs	r3, #18
 8005b78:	e7d1      	b.n	8005b1e <_dtoa_r+0x25e>
 8005b7a:	bf00      	nop
 8005b7c:	f3af 8000 	nop.w
 8005b80:	636f4361 	.word	0x636f4361
 8005b84:	3fd287a7 	.word	0x3fd287a7
 8005b88:	8b60c8b3 	.word	0x8b60c8b3
 8005b8c:	3fc68a28 	.word	0x3fc68a28
 8005b90:	509f79fb 	.word	0x509f79fb
 8005b94:	3fd34413 	.word	0x3fd34413
 8005b98:	0800792f 	.word	0x0800792f
 8005b9c:	08007946 	.word	0x08007946
 8005ba0:	7ff00000 	.word	0x7ff00000
 8005ba4:	0800792b 	.word	0x0800792b
 8005ba8:	08007922 	.word	0x08007922
 8005bac:	080078ff 	.word	0x080078ff
 8005bb0:	3ff80000 	.word	0x3ff80000
 8005bb4:	08007a30 	.word	0x08007a30
 8005bb8:	0800799e 	.word	0x0800799e
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bc0:	e7d4      	b.n	8005b6c <_dtoa_r+0x2ac>
 8005bc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bc4:	9306      	str	r3, [sp, #24]
 8005bc6:	9308      	str	r3, [sp, #32]
 8005bc8:	e7b7      	b.n	8005b3a <_dtoa_r+0x27a>
 8005bca:	3101      	adds	r1, #1
 8005bcc:	0052      	lsls	r2, r2, #1
 8005bce:	e7b7      	b.n	8005b40 <_dtoa_r+0x280>
 8005bd0:	69eb      	ldr	r3, [r5, #28]
 8005bd2:	9a03      	ldr	r2, [sp, #12]
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	9b08      	ldr	r3, [sp, #32]
 8005bd8:	2b0e      	cmp	r3, #14
 8005bda:	f200 80a8 	bhi.w	8005d2e <_dtoa_r+0x46e>
 8005bde:	2c00      	cmp	r4, #0
 8005be0:	f000 80a5 	beq.w	8005d2e <_dtoa_r+0x46e>
 8005be4:	f1bb 0f00 	cmp.w	fp, #0
 8005be8:	dd34      	ble.n	8005c54 <_dtoa_r+0x394>
 8005bea:	4b9a      	ldr	r3, [pc, #616]	; (8005e54 <_dtoa_r+0x594>)
 8005bec:	f00b 020f 	and.w	r2, fp, #15
 8005bf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bf4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005bf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bfc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005c00:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005c04:	d016      	beq.n	8005c34 <_dtoa_r+0x374>
 8005c06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c0a:	4b93      	ldr	r3, [pc, #588]	; (8005e58 <_dtoa_r+0x598>)
 8005c0c:	2703      	movs	r7, #3
 8005c0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c12:	f7fa fd8b 	bl	800072c <__aeabi_ddiv>
 8005c16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c1a:	f004 040f 	and.w	r4, r4, #15
 8005c1e:	4e8e      	ldr	r6, [pc, #568]	; (8005e58 <_dtoa_r+0x598>)
 8005c20:	b954      	cbnz	r4, 8005c38 <_dtoa_r+0x378>
 8005c22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c2a:	f7fa fd7f 	bl	800072c <__aeabi_ddiv>
 8005c2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c32:	e029      	b.n	8005c88 <_dtoa_r+0x3c8>
 8005c34:	2702      	movs	r7, #2
 8005c36:	e7f2      	b.n	8005c1e <_dtoa_r+0x35e>
 8005c38:	07e1      	lsls	r1, r4, #31
 8005c3a:	d508      	bpl.n	8005c4e <_dtoa_r+0x38e>
 8005c3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c44:	f7fa fc48 	bl	80004d8 <__aeabi_dmul>
 8005c48:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c4c:	3701      	adds	r7, #1
 8005c4e:	1064      	asrs	r4, r4, #1
 8005c50:	3608      	adds	r6, #8
 8005c52:	e7e5      	b.n	8005c20 <_dtoa_r+0x360>
 8005c54:	f000 80a5 	beq.w	8005da2 <_dtoa_r+0x4e2>
 8005c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c5c:	f1cb 0400 	rsb	r4, fp, #0
 8005c60:	4b7c      	ldr	r3, [pc, #496]	; (8005e54 <_dtoa_r+0x594>)
 8005c62:	f004 020f 	and.w	r2, r4, #15
 8005c66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	f7fa fc33 	bl	80004d8 <__aeabi_dmul>
 8005c72:	2702      	movs	r7, #2
 8005c74:	2300      	movs	r3, #0
 8005c76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c7a:	4e77      	ldr	r6, [pc, #476]	; (8005e58 <_dtoa_r+0x598>)
 8005c7c:	1124      	asrs	r4, r4, #4
 8005c7e:	2c00      	cmp	r4, #0
 8005c80:	f040 8084 	bne.w	8005d8c <_dtoa_r+0x4cc>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1d2      	bne.n	8005c2e <_dtoa_r+0x36e>
 8005c88:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c8c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005c90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8087 	beq.w	8005da6 <_dtoa_r+0x4e6>
 8005c98:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4b6f      	ldr	r3, [pc, #444]	; (8005e5c <_dtoa_r+0x59c>)
 8005ca0:	f7fa fe8c 	bl	80009bc <__aeabi_dcmplt>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d07e      	beq.n	8005da6 <_dtoa_r+0x4e6>
 8005ca8:	9b08      	ldr	r3, [sp, #32]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d07b      	beq.n	8005da6 <_dtoa_r+0x4e6>
 8005cae:	9b06      	ldr	r3, [sp, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	dd38      	ble.n	8005d26 <_dtoa_r+0x466>
 8005cb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cb8:	2200      	movs	r2, #0
 8005cba:	4b69      	ldr	r3, [pc, #420]	; (8005e60 <_dtoa_r+0x5a0>)
 8005cbc:	f7fa fc0c 	bl	80004d8 <__aeabi_dmul>
 8005cc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cc4:	9c06      	ldr	r4, [sp, #24]
 8005cc6:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005cca:	3701      	adds	r7, #1
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f7fa fb99 	bl	8000404 <__aeabi_i2d>
 8005cd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cd6:	f7fa fbff 	bl	80004d8 <__aeabi_dmul>
 8005cda:	2200      	movs	r2, #0
 8005cdc:	4b61      	ldr	r3, [pc, #388]	; (8005e64 <_dtoa_r+0x5a4>)
 8005cde:	f7fa fa45 	bl	800016c <__adddf3>
 8005ce2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005ce6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cea:	9611      	str	r6, [sp, #68]	; 0x44
 8005cec:	2c00      	cmp	r4, #0
 8005cee:	d15d      	bne.n	8005dac <_dtoa_r+0x4ec>
 8005cf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	4b5c      	ldr	r3, [pc, #368]	; (8005e68 <_dtoa_r+0x5a8>)
 8005cf8:	f7fa fa36 	bl	8000168 <__aeabi_dsub>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d04:	4633      	mov	r3, r6
 8005d06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d08:	f7fa fe76 	bl	80009f8 <__aeabi_dcmpgt>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f040 8295 	bne.w	800623c <_dtoa_r+0x97c>
 8005d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005d1c:	f7fa fe4e 	bl	80009bc <__aeabi_dcmplt>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	f040 8289 	bne.w	8006238 <_dtoa_r+0x978>
 8005d26:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005d2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f2c0 8151 	blt.w	8005fd8 <_dtoa_r+0x718>
 8005d36:	f1bb 0f0e 	cmp.w	fp, #14
 8005d3a:	f300 814d 	bgt.w	8005fd8 <_dtoa_r+0x718>
 8005d3e:	4b45      	ldr	r3, [pc, #276]	; (8005e54 <_dtoa_r+0x594>)
 8005d40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d48:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005d4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f280 80da 	bge.w	8005f08 <_dtoa_r+0x648>
 8005d54:	9b08      	ldr	r3, [sp, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f300 80d6 	bgt.w	8005f08 <_dtoa_r+0x648>
 8005d5c:	f040 826b 	bne.w	8006236 <_dtoa_r+0x976>
 8005d60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d64:	2200      	movs	r2, #0
 8005d66:	4b40      	ldr	r3, [pc, #256]	; (8005e68 <_dtoa_r+0x5a8>)
 8005d68:	f7fa fbb6 	bl	80004d8 <__aeabi_dmul>
 8005d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d70:	f7fa fe38 	bl	80009e4 <__aeabi_dcmpge>
 8005d74:	9c08      	ldr	r4, [sp, #32]
 8005d76:	4626      	mov	r6, r4
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f040 8241 	bne.w	8006200 <_dtoa_r+0x940>
 8005d7e:	2331      	movs	r3, #49	; 0x31
 8005d80:	9f03      	ldr	r7, [sp, #12]
 8005d82:	f10b 0b01 	add.w	fp, fp, #1
 8005d86:	f807 3b01 	strb.w	r3, [r7], #1
 8005d8a:	e23d      	b.n	8006208 <_dtoa_r+0x948>
 8005d8c:	07e2      	lsls	r2, r4, #31
 8005d8e:	d505      	bpl.n	8005d9c <_dtoa_r+0x4dc>
 8005d90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d94:	f7fa fba0 	bl	80004d8 <__aeabi_dmul>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	3701      	adds	r7, #1
 8005d9c:	1064      	asrs	r4, r4, #1
 8005d9e:	3608      	adds	r6, #8
 8005da0:	e76d      	b.n	8005c7e <_dtoa_r+0x3be>
 8005da2:	2702      	movs	r7, #2
 8005da4:	e770      	b.n	8005c88 <_dtoa_r+0x3c8>
 8005da6:	46d8      	mov	r8, fp
 8005da8:	9c08      	ldr	r4, [sp, #32]
 8005daa:	e78f      	b.n	8005ccc <_dtoa_r+0x40c>
 8005dac:	9903      	ldr	r1, [sp, #12]
 8005dae:	4b29      	ldr	r3, [pc, #164]	; (8005e54 <_dtoa_r+0x594>)
 8005db0:	4421      	add	r1, r4
 8005db2:	9112      	str	r1, [sp, #72]	; 0x48
 8005db4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005db6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005dba:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005dbe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005dc2:	2900      	cmp	r1, #0
 8005dc4:	d054      	beq.n	8005e70 <_dtoa_r+0x5b0>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	4928      	ldr	r1, [pc, #160]	; (8005e6c <_dtoa_r+0x5ac>)
 8005dca:	f7fa fcaf 	bl	800072c <__aeabi_ddiv>
 8005dce:	463b      	mov	r3, r7
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	f7fa f9c9 	bl	8000168 <__aeabi_dsub>
 8005dd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dda:	9f03      	ldr	r7, [sp, #12]
 8005ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005de0:	f7fa fe2a 	bl	8000a38 <__aeabi_d2iz>
 8005de4:	4604      	mov	r4, r0
 8005de6:	f7fa fb0d 	bl	8000404 <__aeabi_i2d>
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005df2:	f7fa f9b9 	bl	8000168 <__aeabi_dsub>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	3430      	adds	r4, #48	; 0x30
 8005dfc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e04:	f807 4b01 	strb.w	r4, [r7], #1
 8005e08:	f7fa fdd8 	bl	80009bc <__aeabi_dcmplt>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d173      	bne.n	8005ef8 <_dtoa_r+0x638>
 8005e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e14:	2000      	movs	r0, #0
 8005e16:	4911      	ldr	r1, [pc, #68]	; (8005e5c <_dtoa_r+0x59c>)
 8005e18:	f7fa f9a6 	bl	8000168 <__aeabi_dsub>
 8005e1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e20:	f7fa fdcc 	bl	80009bc <__aeabi_dcmplt>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	f040 80b6 	bne.w	8005f96 <_dtoa_r+0x6d6>
 8005e2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e2c:	429f      	cmp	r7, r3
 8005e2e:	f43f af7a 	beq.w	8005d26 <_dtoa_r+0x466>
 8005e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e36:	2200      	movs	r2, #0
 8005e38:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <_dtoa_r+0x5a0>)
 8005e3a:	f7fa fb4d 	bl	80004d8 <__aeabi_dmul>
 8005e3e:	2200      	movs	r2, #0
 8005e40:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e48:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <_dtoa_r+0x5a0>)
 8005e4a:	f7fa fb45 	bl	80004d8 <__aeabi_dmul>
 8005e4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e52:	e7c3      	b.n	8005ddc <_dtoa_r+0x51c>
 8005e54:	08007a30 	.word	0x08007a30
 8005e58:	08007a08 	.word	0x08007a08
 8005e5c:	3ff00000 	.word	0x3ff00000
 8005e60:	40240000 	.word	0x40240000
 8005e64:	401c0000 	.word	0x401c0000
 8005e68:	40140000 	.word	0x40140000
 8005e6c:	3fe00000 	.word	0x3fe00000
 8005e70:	4630      	mov	r0, r6
 8005e72:	4639      	mov	r1, r7
 8005e74:	f7fa fb30 	bl	80004d8 <__aeabi_dmul>
 8005e78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e7e:	9c03      	ldr	r4, [sp, #12]
 8005e80:	9314      	str	r3, [sp, #80]	; 0x50
 8005e82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e86:	f7fa fdd7 	bl	8000a38 <__aeabi_d2iz>
 8005e8a:	9015      	str	r0, [sp, #84]	; 0x54
 8005e8c:	f7fa faba 	bl	8000404 <__aeabi_i2d>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e98:	f7fa f966 	bl	8000168 <__aeabi_dsub>
 8005e9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	3330      	adds	r3, #48	; 0x30
 8005ea2:	f804 3b01 	strb.w	r3, [r4], #1
 8005ea6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ea8:	460f      	mov	r7, r1
 8005eaa:	429c      	cmp	r4, r3
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	d124      	bne.n	8005efc <_dtoa_r+0x63c>
 8005eb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005eb6:	4baf      	ldr	r3, [pc, #700]	; (8006174 <_dtoa_r+0x8b4>)
 8005eb8:	f7fa f958 	bl	800016c <__adddf3>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	f7fa fd98 	bl	80009f8 <__aeabi_dcmpgt>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d163      	bne.n	8005f94 <_dtoa_r+0x6d4>
 8005ecc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	49a8      	ldr	r1, [pc, #672]	; (8006174 <_dtoa_r+0x8b4>)
 8005ed4:	f7fa f948 	bl	8000168 <__aeabi_dsub>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4630      	mov	r0, r6
 8005ede:	4639      	mov	r1, r7
 8005ee0:	f7fa fd6c 	bl	80009bc <__aeabi_dcmplt>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	f43f af1e 	beq.w	8005d26 <_dtoa_r+0x466>
 8005eea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005eec:	1e7b      	subs	r3, r7, #1
 8005eee:	9314      	str	r3, [sp, #80]	; 0x50
 8005ef0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005ef4:	2b30      	cmp	r3, #48	; 0x30
 8005ef6:	d0f8      	beq.n	8005eea <_dtoa_r+0x62a>
 8005ef8:	46c3      	mov	fp, r8
 8005efa:	e03b      	b.n	8005f74 <_dtoa_r+0x6b4>
 8005efc:	4b9e      	ldr	r3, [pc, #632]	; (8006178 <_dtoa_r+0x8b8>)
 8005efe:	f7fa faeb 	bl	80004d8 <__aeabi_dmul>
 8005f02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f06:	e7bc      	b.n	8005e82 <_dtoa_r+0x5c2>
 8005f08:	9f03      	ldr	r7, [sp, #12]
 8005f0a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005f0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f12:	4640      	mov	r0, r8
 8005f14:	4649      	mov	r1, r9
 8005f16:	f7fa fc09 	bl	800072c <__aeabi_ddiv>
 8005f1a:	f7fa fd8d 	bl	8000a38 <__aeabi_d2iz>
 8005f1e:	4604      	mov	r4, r0
 8005f20:	f7fa fa70 	bl	8000404 <__aeabi_i2d>
 8005f24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f28:	f7fa fad6 	bl	80004d8 <__aeabi_dmul>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4640      	mov	r0, r8
 8005f32:	4649      	mov	r1, r9
 8005f34:	f7fa f918 	bl	8000168 <__aeabi_dsub>
 8005f38:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005f3c:	f807 6b01 	strb.w	r6, [r7], #1
 8005f40:	9e03      	ldr	r6, [sp, #12]
 8005f42:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005f46:	1bbe      	subs	r6, r7, r6
 8005f48:	45b4      	cmp	ip, r6
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	d136      	bne.n	8005fbe <_dtoa_r+0x6fe>
 8005f50:	f7fa f90c 	bl	800016c <__adddf3>
 8005f54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f58:	4680      	mov	r8, r0
 8005f5a:	4689      	mov	r9, r1
 8005f5c:	f7fa fd4c 	bl	80009f8 <__aeabi_dcmpgt>
 8005f60:	bb58      	cbnz	r0, 8005fba <_dtoa_r+0x6fa>
 8005f62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f66:	4640      	mov	r0, r8
 8005f68:	4649      	mov	r1, r9
 8005f6a:	f7fa fd1d 	bl	80009a8 <__aeabi_dcmpeq>
 8005f6e:	b108      	cbz	r0, 8005f74 <_dtoa_r+0x6b4>
 8005f70:	07e3      	lsls	r3, r4, #31
 8005f72:	d422      	bmi.n	8005fba <_dtoa_r+0x6fa>
 8005f74:	4651      	mov	r1, sl
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 fbc2 	bl	8006700 <_Bfree>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f80:	703b      	strb	r3, [r7, #0]
 8005f82:	f10b 0301 	add.w	r3, fp, #1
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f43f ace6 	beq.w	800595c <_dtoa_r+0x9c>
 8005f90:	601f      	str	r7, [r3, #0]
 8005f92:	e4e3      	b.n	800595c <_dtoa_r+0x9c>
 8005f94:	4627      	mov	r7, r4
 8005f96:	463b      	mov	r3, r7
 8005f98:	461f      	mov	r7, r3
 8005f9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f9e:	2a39      	cmp	r2, #57	; 0x39
 8005fa0:	d107      	bne.n	8005fb2 <_dtoa_r+0x6f2>
 8005fa2:	9a03      	ldr	r2, [sp, #12]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d1f7      	bne.n	8005f98 <_dtoa_r+0x6d8>
 8005fa8:	2230      	movs	r2, #48	; 0x30
 8005faa:	9903      	ldr	r1, [sp, #12]
 8005fac:	f108 0801 	add.w	r8, r8, #1
 8005fb0:	700a      	strb	r2, [r1, #0]
 8005fb2:	781a      	ldrb	r2, [r3, #0]
 8005fb4:	3201      	adds	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	e79e      	b.n	8005ef8 <_dtoa_r+0x638>
 8005fba:	46d8      	mov	r8, fp
 8005fbc:	e7eb      	b.n	8005f96 <_dtoa_r+0x6d6>
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	4b6d      	ldr	r3, [pc, #436]	; (8006178 <_dtoa_r+0x8b8>)
 8005fc2:	f7fa fa89 	bl	80004d8 <__aeabi_dmul>
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2300      	movs	r3, #0
 8005fca:	4680      	mov	r8, r0
 8005fcc:	4689      	mov	r9, r1
 8005fce:	f7fa fceb 	bl	80009a8 <__aeabi_dcmpeq>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d09b      	beq.n	8005f0e <_dtoa_r+0x64e>
 8005fd6:	e7cd      	b.n	8005f74 <_dtoa_r+0x6b4>
 8005fd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fda:	2a00      	cmp	r2, #0
 8005fdc:	f000 80c4 	beq.w	8006168 <_dtoa_r+0x8a8>
 8005fe0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005fe2:	2a01      	cmp	r2, #1
 8005fe4:	f300 80a8 	bgt.w	8006138 <_dtoa_r+0x878>
 8005fe8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005fea:	2a00      	cmp	r2, #0
 8005fec:	f000 80a0 	beq.w	8006130 <_dtoa_r+0x870>
 8005ff0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ff4:	464f      	mov	r7, r9
 8005ff6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	441a      	add	r2, r3
 8005ffe:	4628      	mov	r0, r5
 8006000:	4499      	add	r9, r3
 8006002:	9209      	str	r2, [sp, #36]	; 0x24
 8006004:	f000 fc32 	bl	800686c <__i2b>
 8006008:	4606      	mov	r6, r0
 800600a:	b15f      	cbz	r7, 8006024 <_dtoa_r+0x764>
 800600c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	dd08      	ble.n	8006024 <_dtoa_r+0x764>
 8006012:	42bb      	cmp	r3, r7
 8006014:	bfa8      	it	ge
 8006016:	463b      	movge	r3, r7
 8006018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800601a:	eba9 0903 	sub.w	r9, r9, r3
 800601e:	1aff      	subs	r7, r7, r3
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	9309      	str	r3, [sp, #36]	; 0x24
 8006024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006026:	b1f3      	cbz	r3, 8006066 <_dtoa_r+0x7a6>
 8006028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 80a0 	beq.w	8006170 <_dtoa_r+0x8b0>
 8006030:	2c00      	cmp	r4, #0
 8006032:	dd10      	ble.n	8006056 <_dtoa_r+0x796>
 8006034:	4631      	mov	r1, r6
 8006036:	4622      	mov	r2, r4
 8006038:	4628      	mov	r0, r5
 800603a:	f000 fcd5 	bl	80069e8 <__pow5mult>
 800603e:	4652      	mov	r2, sl
 8006040:	4601      	mov	r1, r0
 8006042:	4606      	mov	r6, r0
 8006044:	4628      	mov	r0, r5
 8006046:	f000 fc27 	bl	8006898 <__multiply>
 800604a:	4680      	mov	r8, r0
 800604c:	4651      	mov	r1, sl
 800604e:	4628      	mov	r0, r5
 8006050:	f000 fb56 	bl	8006700 <_Bfree>
 8006054:	46c2      	mov	sl, r8
 8006056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006058:	1b1a      	subs	r2, r3, r4
 800605a:	d004      	beq.n	8006066 <_dtoa_r+0x7a6>
 800605c:	4651      	mov	r1, sl
 800605e:	4628      	mov	r0, r5
 8006060:	f000 fcc2 	bl	80069e8 <__pow5mult>
 8006064:	4682      	mov	sl, r0
 8006066:	2101      	movs	r1, #1
 8006068:	4628      	mov	r0, r5
 800606a:	f000 fbff 	bl	800686c <__i2b>
 800606e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006070:	4604      	mov	r4, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	f340 8082 	ble.w	800617c <_dtoa_r+0x8bc>
 8006078:	461a      	mov	r2, r3
 800607a:	4601      	mov	r1, r0
 800607c:	4628      	mov	r0, r5
 800607e:	f000 fcb3 	bl	80069e8 <__pow5mult>
 8006082:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006084:	4604      	mov	r4, r0
 8006086:	2b01      	cmp	r3, #1
 8006088:	dd7b      	ble.n	8006182 <_dtoa_r+0x8c2>
 800608a:	f04f 0800 	mov.w	r8, #0
 800608e:	6923      	ldr	r3, [r4, #16]
 8006090:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006094:	6918      	ldr	r0, [r3, #16]
 8006096:	f000 fb9b 	bl	80067d0 <__hi0bits>
 800609a:	f1c0 0020 	rsb	r0, r0, #32
 800609e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a0:	4418      	add	r0, r3
 80060a2:	f010 001f 	ands.w	r0, r0, #31
 80060a6:	f000 8092 	beq.w	80061ce <_dtoa_r+0x90e>
 80060aa:	f1c0 0320 	rsb	r3, r0, #32
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	f340 8085 	ble.w	80061be <_dtoa_r+0x8fe>
 80060b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b6:	f1c0 001c 	rsb	r0, r0, #28
 80060ba:	4403      	add	r3, r0
 80060bc:	4481      	add	r9, r0
 80060be:	4407      	add	r7, r0
 80060c0:	9309      	str	r3, [sp, #36]	; 0x24
 80060c2:	f1b9 0f00 	cmp.w	r9, #0
 80060c6:	dd05      	ble.n	80060d4 <_dtoa_r+0x814>
 80060c8:	4651      	mov	r1, sl
 80060ca:	464a      	mov	r2, r9
 80060cc:	4628      	mov	r0, r5
 80060ce:	f000 fce5 	bl	8006a9c <__lshift>
 80060d2:	4682      	mov	sl, r0
 80060d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	dd05      	ble.n	80060e6 <_dtoa_r+0x826>
 80060da:	4621      	mov	r1, r4
 80060dc:	461a      	mov	r2, r3
 80060de:	4628      	mov	r0, r5
 80060e0:	f000 fcdc 	bl	8006a9c <__lshift>
 80060e4:	4604      	mov	r4, r0
 80060e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d072      	beq.n	80061d2 <_dtoa_r+0x912>
 80060ec:	4621      	mov	r1, r4
 80060ee:	4650      	mov	r0, sl
 80060f0:	f000 fd40 	bl	8006b74 <__mcmp>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	da6c      	bge.n	80061d2 <_dtoa_r+0x912>
 80060f8:	2300      	movs	r3, #0
 80060fa:	4651      	mov	r1, sl
 80060fc:	220a      	movs	r2, #10
 80060fe:	4628      	mov	r0, r5
 8006100:	f000 fb20 	bl	8006744 <__multadd>
 8006104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006106:	4682      	mov	sl, r0
 8006108:	f10b 3bff 	add.w	fp, fp, #4294967295
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 81ac 	beq.w	800646a <_dtoa_r+0xbaa>
 8006112:	2300      	movs	r3, #0
 8006114:	4631      	mov	r1, r6
 8006116:	220a      	movs	r2, #10
 8006118:	4628      	mov	r0, r5
 800611a:	f000 fb13 	bl	8006744 <__multadd>
 800611e:	9b06      	ldr	r3, [sp, #24]
 8006120:	4606      	mov	r6, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	f300 8093 	bgt.w	800624e <_dtoa_r+0x98e>
 8006128:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800612a:	2b02      	cmp	r3, #2
 800612c:	dc59      	bgt.n	80061e2 <_dtoa_r+0x922>
 800612e:	e08e      	b.n	800624e <_dtoa_r+0x98e>
 8006130:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006132:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006136:	e75d      	b.n	8005ff4 <_dtoa_r+0x734>
 8006138:	9b08      	ldr	r3, [sp, #32]
 800613a:	1e5c      	subs	r4, r3, #1
 800613c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800613e:	42a3      	cmp	r3, r4
 8006140:	bfbf      	itttt	lt
 8006142:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006144:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006146:	1ae3      	sublt	r3, r4, r3
 8006148:	18d2      	addlt	r2, r2, r3
 800614a:	bfa8      	it	ge
 800614c:	1b1c      	subge	r4, r3, r4
 800614e:	9b08      	ldr	r3, [sp, #32]
 8006150:	bfbe      	ittt	lt
 8006152:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006154:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006156:	2400      	movlt	r4, #0
 8006158:	2b00      	cmp	r3, #0
 800615a:	bfb5      	itete	lt
 800615c:	eba9 0703 	sublt.w	r7, r9, r3
 8006160:	464f      	movge	r7, r9
 8006162:	2300      	movlt	r3, #0
 8006164:	9b08      	ldrge	r3, [sp, #32]
 8006166:	e747      	b.n	8005ff8 <_dtoa_r+0x738>
 8006168:	464f      	mov	r7, r9
 800616a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800616c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800616e:	e74c      	b.n	800600a <_dtoa_r+0x74a>
 8006170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006172:	e773      	b.n	800605c <_dtoa_r+0x79c>
 8006174:	3fe00000 	.word	0x3fe00000
 8006178:	40240000 	.word	0x40240000
 800617c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800617e:	2b01      	cmp	r3, #1
 8006180:	dc18      	bgt.n	80061b4 <_dtoa_r+0x8f4>
 8006182:	9b04      	ldr	r3, [sp, #16]
 8006184:	b9b3      	cbnz	r3, 80061b4 <_dtoa_r+0x8f4>
 8006186:	9b05      	ldr	r3, [sp, #20]
 8006188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800618c:	b993      	cbnz	r3, 80061b4 <_dtoa_r+0x8f4>
 800618e:	9b05      	ldr	r3, [sp, #20]
 8006190:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006194:	0d1b      	lsrs	r3, r3, #20
 8006196:	051b      	lsls	r3, r3, #20
 8006198:	b17b      	cbz	r3, 80061ba <_dtoa_r+0x8fa>
 800619a:	f04f 0801 	mov.w	r8, #1
 800619e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a0:	f109 0901 	add.w	r9, r9, #1
 80061a4:	3301      	adds	r3, #1
 80061a6:	9309      	str	r3, [sp, #36]	; 0x24
 80061a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f47f af6f 	bne.w	800608e <_dtoa_r+0x7ce>
 80061b0:	2001      	movs	r0, #1
 80061b2:	e774      	b.n	800609e <_dtoa_r+0x7de>
 80061b4:	f04f 0800 	mov.w	r8, #0
 80061b8:	e7f6      	b.n	80061a8 <_dtoa_r+0x8e8>
 80061ba:	4698      	mov	r8, r3
 80061bc:	e7f4      	b.n	80061a8 <_dtoa_r+0x8e8>
 80061be:	d080      	beq.n	80060c2 <_dtoa_r+0x802>
 80061c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061c2:	331c      	adds	r3, #28
 80061c4:	441a      	add	r2, r3
 80061c6:	4499      	add	r9, r3
 80061c8:	441f      	add	r7, r3
 80061ca:	9209      	str	r2, [sp, #36]	; 0x24
 80061cc:	e779      	b.n	80060c2 <_dtoa_r+0x802>
 80061ce:	4603      	mov	r3, r0
 80061d0:	e7f6      	b.n	80061c0 <_dtoa_r+0x900>
 80061d2:	9b08      	ldr	r3, [sp, #32]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	dc34      	bgt.n	8006242 <_dtoa_r+0x982>
 80061d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061da:	2b02      	cmp	r3, #2
 80061dc:	dd31      	ble.n	8006242 <_dtoa_r+0x982>
 80061de:	9b08      	ldr	r3, [sp, #32]
 80061e0:	9306      	str	r3, [sp, #24]
 80061e2:	9b06      	ldr	r3, [sp, #24]
 80061e4:	b963      	cbnz	r3, 8006200 <_dtoa_r+0x940>
 80061e6:	4621      	mov	r1, r4
 80061e8:	2205      	movs	r2, #5
 80061ea:	4628      	mov	r0, r5
 80061ec:	f000 faaa 	bl	8006744 <__multadd>
 80061f0:	4601      	mov	r1, r0
 80061f2:	4604      	mov	r4, r0
 80061f4:	4650      	mov	r0, sl
 80061f6:	f000 fcbd 	bl	8006b74 <__mcmp>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	f73f adbf 	bgt.w	8005d7e <_dtoa_r+0x4be>
 8006200:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006202:	9f03      	ldr	r7, [sp, #12]
 8006204:	ea6f 0b03 	mvn.w	fp, r3
 8006208:	f04f 0800 	mov.w	r8, #0
 800620c:	4621      	mov	r1, r4
 800620e:	4628      	mov	r0, r5
 8006210:	f000 fa76 	bl	8006700 <_Bfree>
 8006214:	2e00      	cmp	r6, #0
 8006216:	f43f aead 	beq.w	8005f74 <_dtoa_r+0x6b4>
 800621a:	f1b8 0f00 	cmp.w	r8, #0
 800621e:	d005      	beq.n	800622c <_dtoa_r+0x96c>
 8006220:	45b0      	cmp	r8, r6
 8006222:	d003      	beq.n	800622c <_dtoa_r+0x96c>
 8006224:	4641      	mov	r1, r8
 8006226:	4628      	mov	r0, r5
 8006228:	f000 fa6a 	bl	8006700 <_Bfree>
 800622c:	4631      	mov	r1, r6
 800622e:	4628      	mov	r0, r5
 8006230:	f000 fa66 	bl	8006700 <_Bfree>
 8006234:	e69e      	b.n	8005f74 <_dtoa_r+0x6b4>
 8006236:	2400      	movs	r4, #0
 8006238:	4626      	mov	r6, r4
 800623a:	e7e1      	b.n	8006200 <_dtoa_r+0x940>
 800623c:	46c3      	mov	fp, r8
 800623e:	4626      	mov	r6, r4
 8006240:	e59d      	b.n	8005d7e <_dtoa_r+0x4be>
 8006242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 80c8 	beq.w	80063da <_dtoa_r+0xb1a>
 800624a:	9b08      	ldr	r3, [sp, #32]
 800624c:	9306      	str	r3, [sp, #24]
 800624e:	2f00      	cmp	r7, #0
 8006250:	dd05      	ble.n	800625e <_dtoa_r+0x99e>
 8006252:	4631      	mov	r1, r6
 8006254:	463a      	mov	r2, r7
 8006256:	4628      	mov	r0, r5
 8006258:	f000 fc20 	bl	8006a9c <__lshift>
 800625c:	4606      	mov	r6, r0
 800625e:	f1b8 0f00 	cmp.w	r8, #0
 8006262:	d05b      	beq.n	800631c <_dtoa_r+0xa5c>
 8006264:	4628      	mov	r0, r5
 8006266:	6871      	ldr	r1, [r6, #4]
 8006268:	f000 fa0a 	bl	8006680 <_Balloc>
 800626c:	4607      	mov	r7, r0
 800626e:	b928      	cbnz	r0, 800627c <_dtoa_r+0x9bc>
 8006270:	4602      	mov	r2, r0
 8006272:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006276:	4b81      	ldr	r3, [pc, #516]	; (800647c <_dtoa_r+0xbbc>)
 8006278:	f7ff bb36 	b.w	80058e8 <_dtoa_r+0x28>
 800627c:	6932      	ldr	r2, [r6, #16]
 800627e:	f106 010c 	add.w	r1, r6, #12
 8006282:	3202      	adds	r2, #2
 8006284:	0092      	lsls	r2, r2, #2
 8006286:	300c      	adds	r0, #12
 8006288:	f000 ff9e 	bl	80071c8 <memcpy>
 800628c:	2201      	movs	r2, #1
 800628e:	4639      	mov	r1, r7
 8006290:	4628      	mov	r0, r5
 8006292:	f000 fc03 	bl	8006a9c <__lshift>
 8006296:	46b0      	mov	r8, r6
 8006298:	4606      	mov	r6, r0
 800629a:	9b03      	ldr	r3, [sp, #12]
 800629c:	9a03      	ldr	r2, [sp, #12]
 800629e:	3301      	adds	r3, #1
 80062a0:	9308      	str	r3, [sp, #32]
 80062a2:	9b06      	ldr	r3, [sp, #24]
 80062a4:	4413      	add	r3, r2
 80062a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062a8:	9b04      	ldr	r3, [sp, #16]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	930a      	str	r3, [sp, #40]	; 0x28
 80062b0:	9b08      	ldr	r3, [sp, #32]
 80062b2:	4621      	mov	r1, r4
 80062b4:	3b01      	subs	r3, #1
 80062b6:	4650      	mov	r0, sl
 80062b8:	9304      	str	r3, [sp, #16]
 80062ba:	f7ff fa76 	bl	80057aa <quorem>
 80062be:	4641      	mov	r1, r8
 80062c0:	9006      	str	r0, [sp, #24]
 80062c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80062c6:	4650      	mov	r0, sl
 80062c8:	f000 fc54 	bl	8006b74 <__mcmp>
 80062cc:	4632      	mov	r2, r6
 80062ce:	9009      	str	r0, [sp, #36]	; 0x24
 80062d0:	4621      	mov	r1, r4
 80062d2:	4628      	mov	r0, r5
 80062d4:	f000 fc6a 	bl	8006bac <__mdiff>
 80062d8:	68c2      	ldr	r2, [r0, #12]
 80062da:	4607      	mov	r7, r0
 80062dc:	bb02      	cbnz	r2, 8006320 <_dtoa_r+0xa60>
 80062de:	4601      	mov	r1, r0
 80062e0:	4650      	mov	r0, sl
 80062e2:	f000 fc47 	bl	8006b74 <__mcmp>
 80062e6:	4602      	mov	r2, r0
 80062e8:	4639      	mov	r1, r7
 80062ea:	4628      	mov	r0, r5
 80062ec:	920c      	str	r2, [sp, #48]	; 0x30
 80062ee:	f000 fa07 	bl	8006700 <_Bfree>
 80062f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062f6:	9f08      	ldr	r7, [sp, #32]
 80062f8:	ea43 0102 	orr.w	r1, r3, r2
 80062fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062fe:	4319      	orrs	r1, r3
 8006300:	d110      	bne.n	8006324 <_dtoa_r+0xa64>
 8006302:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006306:	d029      	beq.n	800635c <_dtoa_r+0xa9c>
 8006308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800630a:	2b00      	cmp	r3, #0
 800630c:	dd02      	ble.n	8006314 <_dtoa_r+0xa54>
 800630e:	9b06      	ldr	r3, [sp, #24]
 8006310:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006314:	9b04      	ldr	r3, [sp, #16]
 8006316:	f883 9000 	strb.w	r9, [r3]
 800631a:	e777      	b.n	800620c <_dtoa_r+0x94c>
 800631c:	4630      	mov	r0, r6
 800631e:	e7ba      	b.n	8006296 <_dtoa_r+0x9d6>
 8006320:	2201      	movs	r2, #1
 8006322:	e7e1      	b.n	80062e8 <_dtoa_r+0xa28>
 8006324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006326:	2b00      	cmp	r3, #0
 8006328:	db04      	blt.n	8006334 <_dtoa_r+0xa74>
 800632a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800632c:	430b      	orrs	r3, r1
 800632e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006330:	430b      	orrs	r3, r1
 8006332:	d120      	bne.n	8006376 <_dtoa_r+0xab6>
 8006334:	2a00      	cmp	r2, #0
 8006336:	dded      	ble.n	8006314 <_dtoa_r+0xa54>
 8006338:	4651      	mov	r1, sl
 800633a:	2201      	movs	r2, #1
 800633c:	4628      	mov	r0, r5
 800633e:	f000 fbad 	bl	8006a9c <__lshift>
 8006342:	4621      	mov	r1, r4
 8006344:	4682      	mov	sl, r0
 8006346:	f000 fc15 	bl	8006b74 <__mcmp>
 800634a:	2800      	cmp	r0, #0
 800634c:	dc03      	bgt.n	8006356 <_dtoa_r+0xa96>
 800634e:	d1e1      	bne.n	8006314 <_dtoa_r+0xa54>
 8006350:	f019 0f01 	tst.w	r9, #1
 8006354:	d0de      	beq.n	8006314 <_dtoa_r+0xa54>
 8006356:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800635a:	d1d8      	bne.n	800630e <_dtoa_r+0xa4e>
 800635c:	2339      	movs	r3, #57	; 0x39
 800635e:	9a04      	ldr	r2, [sp, #16]
 8006360:	7013      	strb	r3, [r2, #0]
 8006362:	463b      	mov	r3, r7
 8006364:	461f      	mov	r7, r3
 8006366:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800636a:	3b01      	subs	r3, #1
 800636c:	2a39      	cmp	r2, #57	; 0x39
 800636e:	d06b      	beq.n	8006448 <_dtoa_r+0xb88>
 8006370:	3201      	adds	r2, #1
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	e74a      	b.n	800620c <_dtoa_r+0x94c>
 8006376:	2a00      	cmp	r2, #0
 8006378:	dd07      	ble.n	800638a <_dtoa_r+0xaca>
 800637a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800637e:	d0ed      	beq.n	800635c <_dtoa_r+0xa9c>
 8006380:	9a04      	ldr	r2, [sp, #16]
 8006382:	f109 0301 	add.w	r3, r9, #1
 8006386:	7013      	strb	r3, [r2, #0]
 8006388:	e740      	b.n	800620c <_dtoa_r+0x94c>
 800638a:	9b08      	ldr	r3, [sp, #32]
 800638c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800638e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006392:	4293      	cmp	r3, r2
 8006394:	d042      	beq.n	800641c <_dtoa_r+0xb5c>
 8006396:	4651      	mov	r1, sl
 8006398:	2300      	movs	r3, #0
 800639a:	220a      	movs	r2, #10
 800639c:	4628      	mov	r0, r5
 800639e:	f000 f9d1 	bl	8006744 <__multadd>
 80063a2:	45b0      	cmp	r8, r6
 80063a4:	4682      	mov	sl, r0
 80063a6:	f04f 0300 	mov.w	r3, #0
 80063aa:	f04f 020a 	mov.w	r2, #10
 80063ae:	4641      	mov	r1, r8
 80063b0:	4628      	mov	r0, r5
 80063b2:	d107      	bne.n	80063c4 <_dtoa_r+0xb04>
 80063b4:	f000 f9c6 	bl	8006744 <__multadd>
 80063b8:	4680      	mov	r8, r0
 80063ba:	4606      	mov	r6, r0
 80063bc:	9b08      	ldr	r3, [sp, #32]
 80063be:	3301      	adds	r3, #1
 80063c0:	9308      	str	r3, [sp, #32]
 80063c2:	e775      	b.n	80062b0 <_dtoa_r+0x9f0>
 80063c4:	f000 f9be 	bl	8006744 <__multadd>
 80063c8:	4631      	mov	r1, r6
 80063ca:	4680      	mov	r8, r0
 80063cc:	2300      	movs	r3, #0
 80063ce:	220a      	movs	r2, #10
 80063d0:	4628      	mov	r0, r5
 80063d2:	f000 f9b7 	bl	8006744 <__multadd>
 80063d6:	4606      	mov	r6, r0
 80063d8:	e7f0      	b.n	80063bc <_dtoa_r+0xafc>
 80063da:	9b08      	ldr	r3, [sp, #32]
 80063dc:	9306      	str	r3, [sp, #24]
 80063de:	9f03      	ldr	r7, [sp, #12]
 80063e0:	4621      	mov	r1, r4
 80063e2:	4650      	mov	r0, sl
 80063e4:	f7ff f9e1 	bl	80057aa <quorem>
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80063ee:	f807 9b01 	strb.w	r9, [r7], #1
 80063f2:	1afa      	subs	r2, r7, r3
 80063f4:	9b06      	ldr	r3, [sp, #24]
 80063f6:	4293      	cmp	r3, r2
 80063f8:	dd07      	ble.n	800640a <_dtoa_r+0xb4a>
 80063fa:	4651      	mov	r1, sl
 80063fc:	2300      	movs	r3, #0
 80063fe:	220a      	movs	r2, #10
 8006400:	4628      	mov	r0, r5
 8006402:	f000 f99f 	bl	8006744 <__multadd>
 8006406:	4682      	mov	sl, r0
 8006408:	e7ea      	b.n	80063e0 <_dtoa_r+0xb20>
 800640a:	9b06      	ldr	r3, [sp, #24]
 800640c:	f04f 0800 	mov.w	r8, #0
 8006410:	2b00      	cmp	r3, #0
 8006412:	bfcc      	ite	gt
 8006414:	461f      	movgt	r7, r3
 8006416:	2701      	movle	r7, #1
 8006418:	9b03      	ldr	r3, [sp, #12]
 800641a:	441f      	add	r7, r3
 800641c:	4651      	mov	r1, sl
 800641e:	2201      	movs	r2, #1
 8006420:	4628      	mov	r0, r5
 8006422:	f000 fb3b 	bl	8006a9c <__lshift>
 8006426:	4621      	mov	r1, r4
 8006428:	4682      	mov	sl, r0
 800642a:	f000 fba3 	bl	8006b74 <__mcmp>
 800642e:	2800      	cmp	r0, #0
 8006430:	dc97      	bgt.n	8006362 <_dtoa_r+0xaa2>
 8006432:	d102      	bne.n	800643a <_dtoa_r+0xb7a>
 8006434:	f019 0f01 	tst.w	r9, #1
 8006438:	d193      	bne.n	8006362 <_dtoa_r+0xaa2>
 800643a:	463b      	mov	r3, r7
 800643c:	461f      	mov	r7, r3
 800643e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006442:	2a30      	cmp	r2, #48	; 0x30
 8006444:	d0fa      	beq.n	800643c <_dtoa_r+0xb7c>
 8006446:	e6e1      	b.n	800620c <_dtoa_r+0x94c>
 8006448:	9a03      	ldr	r2, [sp, #12]
 800644a:	429a      	cmp	r2, r3
 800644c:	d18a      	bne.n	8006364 <_dtoa_r+0xaa4>
 800644e:	2331      	movs	r3, #49	; 0x31
 8006450:	f10b 0b01 	add.w	fp, fp, #1
 8006454:	e797      	b.n	8006386 <_dtoa_r+0xac6>
 8006456:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <_dtoa_r+0xbc0>)
 8006458:	f7ff ba9f 	b.w	800599a <_dtoa_r+0xda>
 800645c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800645e:	2b00      	cmp	r3, #0
 8006460:	f47f aa77 	bne.w	8005952 <_dtoa_r+0x92>
 8006464:	4b07      	ldr	r3, [pc, #28]	; (8006484 <_dtoa_r+0xbc4>)
 8006466:	f7ff ba98 	b.w	800599a <_dtoa_r+0xda>
 800646a:	9b06      	ldr	r3, [sp, #24]
 800646c:	2b00      	cmp	r3, #0
 800646e:	dcb6      	bgt.n	80063de <_dtoa_r+0xb1e>
 8006470:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006472:	2b02      	cmp	r3, #2
 8006474:	f73f aeb5 	bgt.w	80061e2 <_dtoa_r+0x922>
 8006478:	e7b1      	b.n	80063de <_dtoa_r+0xb1e>
 800647a:	bf00      	nop
 800647c:	0800799e 	.word	0x0800799e
 8006480:	080078fe 	.word	0x080078fe
 8006484:	08007922 	.word	0x08007922

08006488 <_free_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	4605      	mov	r5, r0
 800648c:	2900      	cmp	r1, #0
 800648e:	d040      	beq.n	8006512 <_free_r+0x8a>
 8006490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006494:	1f0c      	subs	r4, r1, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	bfb8      	it	lt
 800649a:	18e4      	addlt	r4, r4, r3
 800649c:	f000 f8e4 	bl	8006668 <__malloc_lock>
 80064a0:	4a1c      	ldr	r2, [pc, #112]	; (8006514 <_free_r+0x8c>)
 80064a2:	6813      	ldr	r3, [r2, #0]
 80064a4:	b933      	cbnz	r3, 80064b4 <_free_r+0x2c>
 80064a6:	6063      	str	r3, [r4, #4]
 80064a8:	6014      	str	r4, [r2, #0]
 80064aa:	4628      	mov	r0, r5
 80064ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064b0:	f000 b8e0 	b.w	8006674 <__malloc_unlock>
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	d908      	bls.n	80064ca <_free_r+0x42>
 80064b8:	6820      	ldr	r0, [r4, #0]
 80064ba:	1821      	adds	r1, r4, r0
 80064bc:	428b      	cmp	r3, r1
 80064be:	bf01      	itttt	eq
 80064c0:	6819      	ldreq	r1, [r3, #0]
 80064c2:	685b      	ldreq	r3, [r3, #4]
 80064c4:	1809      	addeq	r1, r1, r0
 80064c6:	6021      	streq	r1, [r4, #0]
 80064c8:	e7ed      	b.n	80064a6 <_free_r+0x1e>
 80064ca:	461a      	mov	r2, r3
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	b10b      	cbz	r3, 80064d4 <_free_r+0x4c>
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	d9fa      	bls.n	80064ca <_free_r+0x42>
 80064d4:	6811      	ldr	r1, [r2, #0]
 80064d6:	1850      	adds	r0, r2, r1
 80064d8:	42a0      	cmp	r0, r4
 80064da:	d10b      	bne.n	80064f4 <_free_r+0x6c>
 80064dc:	6820      	ldr	r0, [r4, #0]
 80064de:	4401      	add	r1, r0
 80064e0:	1850      	adds	r0, r2, r1
 80064e2:	4283      	cmp	r3, r0
 80064e4:	6011      	str	r1, [r2, #0]
 80064e6:	d1e0      	bne.n	80064aa <_free_r+0x22>
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	4408      	add	r0, r1
 80064ee:	6010      	str	r0, [r2, #0]
 80064f0:	6053      	str	r3, [r2, #4]
 80064f2:	e7da      	b.n	80064aa <_free_r+0x22>
 80064f4:	d902      	bls.n	80064fc <_free_r+0x74>
 80064f6:	230c      	movs	r3, #12
 80064f8:	602b      	str	r3, [r5, #0]
 80064fa:	e7d6      	b.n	80064aa <_free_r+0x22>
 80064fc:	6820      	ldr	r0, [r4, #0]
 80064fe:	1821      	adds	r1, r4, r0
 8006500:	428b      	cmp	r3, r1
 8006502:	bf01      	itttt	eq
 8006504:	6819      	ldreq	r1, [r3, #0]
 8006506:	685b      	ldreq	r3, [r3, #4]
 8006508:	1809      	addeq	r1, r1, r0
 800650a:	6021      	streq	r1, [r4, #0]
 800650c:	6063      	str	r3, [r4, #4]
 800650e:	6054      	str	r4, [r2, #4]
 8006510:	e7cb      	b.n	80064aa <_free_r+0x22>
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	2000048c 	.word	0x2000048c

08006518 <malloc>:
 8006518:	4b02      	ldr	r3, [pc, #8]	; (8006524 <malloc+0xc>)
 800651a:	4601      	mov	r1, r0
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	f000 b823 	b.w	8006568 <_malloc_r>
 8006522:	bf00      	nop
 8006524:	20000068 	.word	0x20000068

08006528 <sbrk_aligned>:
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	4e0e      	ldr	r6, [pc, #56]	; (8006564 <sbrk_aligned+0x3c>)
 800652c:	460c      	mov	r4, r1
 800652e:	6831      	ldr	r1, [r6, #0]
 8006530:	4605      	mov	r5, r0
 8006532:	b911      	cbnz	r1, 800653a <sbrk_aligned+0x12>
 8006534:	f000 fe38 	bl	80071a8 <_sbrk_r>
 8006538:	6030      	str	r0, [r6, #0]
 800653a:	4621      	mov	r1, r4
 800653c:	4628      	mov	r0, r5
 800653e:	f000 fe33 	bl	80071a8 <_sbrk_r>
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	d00a      	beq.n	800655c <sbrk_aligned+0x34>
 8006546:	1cc4      	adds	r4, r0, #3
 8006548:	f024 0403 	bic.w	r4, r4, #3
 800654c:	42a0      	cmp	r0, r4
 800654e:	d007      	beq.n	8006560 <sbrk_aligned+0x38>
 8006550:	1a21      	subs	r1, r4, r0
 8006552:	4628      	mov	r0, r5
 8006554:	f000 fe28 	bl	80071a8 <_sbrk_r>
 8006558:	3001      	adds	r0, #1
 800655a:	d101      	bne.n	8006560 <sbrk_aligned+0x38>
 800655c:	f04f 34ff 	mov.w	r4, #4294967295
 8006560:	4620      	mov	r0, r4
 8006562:	bd70      	pop	{r4, r5, r6, pc}
 8006564:	20000490 	.word	0x20000490

08006568 <_malloc_r>:
 8006568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800656c:	1ccd      	adds	r5, r1, #3
 800656e:	f025 0503 	bic.w	r5, r5, #3
 8006572:	3508      	adds	r5, #8
 8006574:	2d0c      	cmp	r5, #12
 8006576:	bf38      	it	cc
 8006578:	250c      	movcc	r5, #12
 800657a:	2d00      	cmp	r5, #0
 800657c:	4607      	mov	r7, r0
 800657e:	db01      	blt.n	8006584 <_malloc_r+0x1c>
 8006580:	42a9      	cmp	r1, r5
 8006582:	d905      	bls.n	8006590 <_malloc_r+0x28>
 8006584:	230c      	movs	r3, #12
 8006586:	2600      	movs	r6, #0
 8006588:	603b      	str	r3, [r7, #0]
 800658a:	4630      	mov	r0, r6
 800658c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006590:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006664 <_malloc_r+0xfc>
 8006594:	f000 f868 	bl	8006668 <__malloc_lock>
 8006598:	f8d8 3000 	ldr.w	r3, [r8]
 800659c:	461c      	mov	r4, r3
 800659e:	bb5c      	cbnz	r4, 80065f8 <_malloc_r+0x90>
 80065a0:	4629      	mov	r1, r5
 80065a2:	4638      	mov	r0, r7
 80065a4:	f7ff ffc0 	bl	8006528 <sbrk_aligned>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	4604      	mov	r4, r0
 80065ac:	d155      	bne.n	800665a <_malloc_r+0xf2>
 80065ae:	f8d8 4000 	ldr.w	r4, [r8]
 80065b2:	4626      	mov	r6, r4
 80065b4:	2e00      	cmp	r6, #0
 80065b6:	d145      	bne.n	8006644 <_malloc_r+0xdc>
 80065b8:	2c00      	cmp	r4, #0
 80065ba:	d048      	beq.n	800664e <_malloc_r+0xe6>
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	4631      	mov	r1, r6
 80065c0:	4638      	mov	r0, r7
 80065c2:	eb04 0903 	add.w	r9, r4, r3
 80065c6:	f000 fdef 	bl	80071a8 <_sbrk_r>
 80065ca:	4581      	cmp	r9, r0
 80065cc:	d13f      	bne.n	800664e <_malloc_r+0xe6>
 80065ce:	6821      	ldr	r1, [r4, #0]
 80065d0:	4638      	mov	r0, r7
 80065d2:	1a6d      	subs	r5, r5, r1
 80065d4:	4629      	mov	r1, r5
 80065d6:	f7ff ffa7 	bl	8006528 <sbrk_aligned>
 80065da:	3001      	adds	r0, #1
 80065dc:	d037      	beq.n	800664e <_malloc_r+0xe6>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	442b      	add	r3, r5
 80065e2:	6023      	str	r3, [r4, #0]
 80065e4:	f8d8 3000 	ldr.w	r3, [r8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d038      	beq.n	800665e <_malloc_r+0xf6>
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	42a2      	cmp	r2, r4
 80065f0:	d12b      	bne.n	800664a <_malloc_r+0xe2>
 80065f2:	2200      	movs	r2, #0
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	e00f      	b.n	8006618 <_malloc_r+0xb0>
 80065f8:	6822      	ldr	r2, [r4, #0]
 80065fa:	1b52      	subs	r2, r2, r5
 80065fc:	d41f      	bmi.n	800663e <_malloc_r+0xd6>
 80065fe:	2a0b      	cmp	r2, #11
 8006600:	d917      	bls.n	8006632 <_malloc_r+0xca>
 8006602:	1961      	adds	r1, r4, r5
 8006604:	42a3      	cmp	r3, r4
 8006606:	6025      	str	r5, [r4, #0]
 8006608:	bf18      	it	ne
 800660a:	6059      	strne	r1, [r3, #4]
 800660c:	6863      	ldr	r3, [r4, #4]
 800660e:	bf08      	it	eq
 8006610:	f8c8 1000 	streq.w	r1, [r8]
 8006614:	5162      	str	r2, [r4, r5]
 8006616:	604b      	str	r3, [r1, #4]
 8006618:	4638      	mov	r0, r7
 800661a:	f104 060b 	add.w	r6, r4, #11
 800661e:	f000 f829 	bl	8006674 <__malloc_unlock>
 8006622:	f026 0607 	bic.w	r6, r6, #7
 8006626:	1d23      	adds	r3, r4, #4
 8006628:	1af2      	subs	r2, r6, r3
 800662a:	d0ae      	beq.n	800658a <_malloc_r+0x22>
 800662c:	1b9b      	subs	r3, r3, r6
 800662e:	50a3      	str	r3, [r4, r2]
 8006630:	e7ab      	b.n	800658a <_malloc_r+0x22>
 8006632:	42a3      	cmp	r3, r4
 8006634:	6862      	ldr	r2, [r4, #4]
 8006636:	d1dd      	bne.n	80065f4 <_malloc_r+0x8c>
 8006638:	f8c8 2000 	str.w	r2, [r8]
 800663c:	e7ec      	b.n	8006618 <_malloc_r+0xb0>
 800663e:	4623      	mov	r3, r4
 8006640:	6864      	ldr	r4, [r4, #4]
 8006642:	e7ac      	b.n	800659e <_malloc_r+0x36>
 8006644:	4634      	mov	r4, r6
 8006646:	6876      	ldr	r6, [r6, #4]
 8006648:	e7b4      	b.n	80065b4 <_malloc_r+0x4c>
 800664a:	4613      	mov	r3, r2
 800664c:	e7cc      	b.n	80065e8 <_malloc_r+0x80>
 800664e:	230c      	movs	r3, #12
 8006650:	4638      	mov	r0, r7
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	f000 f80e 	bl	8006674 <__malloc_unlock>
 8006658:	e797      	b.n	800658a <_malloc_r+0x22>
 800665a:	6025      	str	r5, [r4, #0]
 800665c:	e7dc      	b.n	8006618 <_malloc_r+0xb0>
 800665e:	605b      	str	r3, [r3, #4]
 8006660:	deff      	udf	#255	; 0xff
 8006662:	bf00      	nop
 8006664:	2000048c 	.word	0x2000048c

08006668 <__malloc_lock>:
 8006668:	4801      	ldr	r0, [pc, #4]	; (8006670 <__malloc_lock+0x8>)
 800666a:	f7ff b88e 	b.w	800578a <__retarget_lock_acquire_recursive>
 800666e:	bf00      	nop
 8006670:	20000488 	.word	0x20000488

08006674 <__malloc_unlock>:
 8006674:	4801      	ldr	r0, [pc, #4]	; (800667c <__malloc_unlock+0x8>)
 8006676:	f7ff b889 	b.w	800578c <__retarget_lock_release_recursive>
 800667a:	bf00      	nop
 800667c:	20000488 	.word	0x20000488

08006680 <_Balloc>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	69c6      	ldr	r6, [r0, #28]
 8006684:	4604      	mov	r4, r0
 8006686:	460d      	mov	r5, r1
 8006688:	b976      	cbnz	r6, 80066a8 <_Balloc+0x28>
 800668a:	2010      	movs	r0, #16
 800668c:	f7ff ff44 	bl	8006518 <malloc>
 8006690:	4602      	mov	r2, r0
 8006692:	61e0      	str	r0, [r4, #28]
 8006694:	b920      	cbnz	r0, 80066a0 <_Balloc+0x20>
 8006696:	216b      	movs	r1, #107	; 0x6b
 8006698:	4b17      	ldr	r3, [pc, #92]	; (80066f8 <_Balloc+0x78>)
 800669a:	4818      	ldr	r0, [pc, #96]	; (80066fc <_Balloc+0x7c>)
 800669c:	f000 fda2 	bl	80071e4 <__assert_func>
 80066a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066a4:	6006      	str	r6, [r0, #0]
 80066a6:	60c6      	str	r6, [r0, #12]
 80066a8:	69e6      	ldr	r6, [r4, #28]
 80066aa:	68f3      	ldr	r3, [r6, #12]
 80066ac:	b183      	cbz	r3, 80066d0 <_Balloc+0x50>
 80066ae:	69e3      	ldr	r3, [r4, #28]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066b6:	b9b8      	cbnz	r0, 80066e8 <_Balloc+0x68>
 80066b8:	2101      	movs	r1, #1
 80066ba:	fa01 f605 	lsl.w	r6, r1, r5
 80066be:	1d72      	adds	r2, r6, #5
 80066c0:	4620      	mov	r0, r4
 80066c2:	0092      	lsls	r2, r2, #2
 80066c4:	f000 fdac 	bl	8007220 <_calloc_r>
 80066c8:	b160      	cbz	r0, 80066e4 <_Balloc+0x64>
 80066ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066ce:	e00e      	b.n	80066ee <_Balloc+0x6e>
 80066d0:	2221      	movs	r2, #33	; 0x21
 80066d2:	2104      	movs	r1, #4
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 fda3 	bl	8007220 <_calloc_r>
 80066da:	69e3      	ldr	r3, [r4, #28]
 80066dc:	60f0      	str	r0, [r6, #12]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e4      	bne.n	80066ae <_Balloc+0x2e>
 80066e4:	2000      	movs	r0, #0
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	6802      	ldr	r2, [r0, #0]
 80066ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066ee:	2300      	movs	r3, #0
 80066f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066f4:	e7f7      	b.n	80066e6 <_Balloc+0x66>
 80066f6:	bf00      	nop
 80066f8:	0800792f 	.word	0x0800792f
 80066fc:	080079af 	.word	0x080079af

08006700 <_Bfree>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	69c6      	ldr	r6, [r0, #28]
 8006704:	4605      	mov	r5, r0
 8006706:	460c      	mov	r4, r1
 8006708:	b976      	cbnz	r6, 8006728 <_Bfree+0x28>
 800670a:	2010      	movs	r0, #16
 800670c:	f7ff ff04 	bl	8006518 <malloc>
 8006710:	4602      	mov	r2, r0
 8006712:	61e8      	str	r0, [r5, #28]
 8006714:	b920      	cbnz	r0, 8006720 <_Bfree+0x20>
 8006716:	218f      	movs	r1, #143	; 0x8f
 8006718:	4b08      	ldr	r3, [pc, #32]	; (800673c <_Bfree+0x3c>)
 800671a:	4809      	ldr	r0, [pc, #36]	; (8006740 <_Bfree+0x40>)
 800671c:	f000 fd62 	bl	80071e4 <__assert_func>
 8006720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006724:	6006      	str	r6, [r0, #0]
 8006726:	60c6      	str	r6, [r0, #12]
 8006728:	b13c      	cbz	r4, 800673a <_Bfree+0x3a>
 800672a:	69eb      	ldr	r3, [r5, #28]
 800672c:	6862      	ldr	r2, [r4, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006734:	6021      	str	r1, [r4, #0]
 8006736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	0800792f 	.word	0x0800792f
 8006740:	080079af 	.word	0x080079af

08006744 <__multadd>:
 8006744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006748:	4607      	mov	r7, r0
 800674a:	460c      	mov	r4, r1
 800674c:	461e      	mov	r6, r3
 800674e:	2000      	movs	r0, #0
 8006750:	690d      	ldr	r5, [r1, #16]
 8006752:	f101 0c14 	add.w	ip, r1, #20
 8006756:	f8dc 3000 	ldr.w	r3, [ip]
 800675a:	3001      	adds	r0, #1
 800675c:	b299      	uxth	r1, r3
 800675e:	fb02 6101 	mla	r1, r2, r1, r6
 8006762:	0c1e      	lsrs	r6, r3, #16
 8006764:	0c0b      	lsrs	r3, r1, #16
 8006766:	fb02 3306 	mla	r3, r2, r6, r3
 800676a:	b289      	uxth	r1, r1
 800676c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006770:	4285      	cmp	r5, r0
 8006772:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006776:	f84c 1b04 	str.w	r1, [ip], #4
 800677a:	dcec      	bgt.n	8006756 <__multadd+0x12>
 800677c:	b30e      	cbz	r6, 80067c2 <__multadd+0x7e>
 800677e:	68a3      	ldr	r3, [r4, #8]
 8006780:	42ab      	cmp	r3, r5
 8006782:	dc19      	bgt.n	80067b8 <__multadd+0x74>
 8006784:	6861      	ldr	r1, [r4, #4]
 8006786:	4638      	mov	r0, r7
 8006788:	3101      	adds	r1, #1
 800678a:	f7ff ff79 	bl	8006680 <_Balloc>
 800678e:	4680      	mov	r8, r0
 8006790:	b928      	cbnz	r0, 800679e <__multadd+0x5a>
 8006792:	4602      	mov	r2, r0
 8006794:	21ba      	movs	r1, #186	; 0xba
 8006796:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <__multadd+0x84>)
 8006798:	480c      	ldr	r0, [pc, #48]	; (80067cc <__multadd+0x88>)
 800679a:	f000 fd23 	bl	80071e4 <__assert_func>
 800679e:	6922      	ldr	r2, [r4, #16]
 80067a0:	f104 010c 	add.w	r1, r4, #12
 80067a4:	3202      	adds	r2, #2
 80067a6:	0092      	lsls	r2, r2, #2
 80067a8:	300c      	adds	r0, #12
 80067aa:	f000 fd0d 	bl	80071c8 <memcpy>
 80067ae:	4621      	mov	r1, r4
 80067b0:	4638      	mov	r0, r7
 80067b2:	f7ff ffa5 	bl	8006700 <_Bfree>
 80067b6:	4644      	mov	r4, r8
 80067b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067bc:	3501      	adds	r5, #1
 80067be:	615e      	str	r6, [r3, #20]
 80067c0:	6125      	str	r5, [r4, #16]
 80067c2:	4620      	mov	r0, r4
 80067c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c8:	0800799e 	.word	0x0800799e
 80067cc:	080079af 	.word	0x080079af

080067d0 <__hi0bits>:
 80067d0:	0c02      	lsrs	r2, r0, #16
 80067d2:	0412      	lsls	r2, r2, #16
 80067d4:	4603      	mov	r3, r0
 80067d6:	b9ca      	cbnz	r2, 800680c <__hi0bits+0x3c>
 80067d8:	0403      	lsls	r3, r0, #16
 80067da:	2010      	movs	r0, #16
 80067dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80067e0:	bf04      	itt	eq
 80067e2:	021b      	lsleq	r3, r3, #8
 80067e4:	3008      	addeq	r0, #8
 80067e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80067ea:	bf04      	itt	eq
 80067ec:	011b      	lsleq	r3, r3, #4
 80067ee:	3004      	addeq	r0, #4
 80067f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80067f4:	bf04      	itt	eq
 80067f6:	009b      	lsleq	r3, r3, #2
 80067f8:	3002      	addeq	r0, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	db05      	blt.n	800680a <__hi0bits+0x3a>
 80067fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006802:	f100 0001 	add.w	r0, r0, #1
 8006806:	bf08      	it	eq
 8006808:	2020      	moveq	r0, #32
 800680a:	4770      	bx	lr
 800680c:	2000      	movs	r0, #0
 800680e:	e7e5      	b.n	80067dc <__hi0bits+0xc>

08006810 <__lo0bits>:
 8006810:	6803      	ldr	r3, [r0, #0]
 8006812:	4602      	mov	r2, r0
 8006814:	f013 0007 	ands.w	r0, r3, #7
 8006818:	d00b      	beq.n	8006832 <__lo0bits+0x22>
 800681a:	07d9      	lsls	r1, r3, #31
 800681c:	d421      	bmi.n	8006862 <__lo0bits+0x52>
 800681e:	0798      	lsls	r0, r3, #30
 8006820:	bf49      	itett	mi
 8006822:	085b      	lsrmi	r3, r3, #1
 8006824:	089b      	lsrpl	r3, r3, #2
 8006826:	2001      	movmi	r0, #1
 8006828:	6013      	strmi	r3, [r2, #0]
 800682a:	bf5c      	itt	pl
 800682c:	2002      	movpl	r0, #2
 800682e:	6013      	strpl	r3, [r2, #0]
 8006830:	4770      	bx	lr
 8006832:	b299      	uxth	r1, r3
 8006834:	b909      	cbnz	r1, 800683a <__lo0bits+0x2a>
 8006836:	2010      	movs	r0, #16
 8006838:	0c1b      	lsrs	r3, r3, #16
 800683a:	b2d9      	uxtb	r1, r3
 800683c:	b909      	cbnz	r1, 8006842 <__lo0bits+0x32>
 800683e:	3008      	adds	r0, #8
 8006840:	0a1b      	lsrs	r3, r3, #8
 8006842:	0719      	lsls	r1, r3, #28
 8006844:	bf04      	itt	eq
 8006846:	091b      	lsreq	r3, r3, #4
 8006848:	3004      	addeq	r0, #4
 800684a:	0799      	lsls	r1, r3, #30
 800684c:	bf04      	itt	eq
 800684e:	089b      	lsreq	r3, r3, #2
 8006850:	3002      	addeq	r0, #2
 8006852:	07d9      	lsls	r1, r3, #31
 8006854:	d403      	bmi.n	800685e <__lo0bits+0x4e>
 8006856:	085b      	lsrs	r3, r3, #1
 8006858:	f100 0001 	add.w	r0, r0, #1
 800685c:	d003      	beq.n	8006866 <__lo0bits+0x56>
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	4770      	bx	lr
 8006862:	2000      	movs	r0, #0
 8006864:	4770      	bx	lr
 8006866:	2020      	movs	r0, #32
 8006868:	4770      	bx	lr
	...

0800686c <__i2b>:
 800686c:	b510      	push	{r4, lr}
 800686e:	460c      	mov	r4, r1
 8006870:	2101      	movs	r1, #1
 8006872:	f7ff ff05 	bl	8006680 <_Balloc>
 8006876:	4602      	mov	r2, r0
 8006878:	b928      	cbnz	r0, 8006886 <__i2b+0x1a>
 800687a:	f240 1145 	movw	r1, #325	; 0x145
 800687e:	4b04      	ldr	r3, [pc, #16]	; (8006890 <__i2b+0x24>)
 8006880:	4804      	ldr	r0, [pc, #16]	; (8006894 <__i2b+0x28>)
 8006882:	f000 fcaf 	bl	80071e4 <__assert_func>
 8006886:	2301      	movs	r3, #1
 8006888:	6144      	str	r4, [r0, #20]
 800688a:	6103      	str	r3, [r0, #16]
 800688c:	bd10      	pop	{r4, pc}
 800688e:	bf00      	nop
 8006890:	0800799e 	.word	0x0800799e
 8006894:	080079af 	.word	0x080079af

08006898 <__multiply>:
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	4691      	mov	r9, r2
 800689e:	690a      	ldr	r2, [r1, #16]
 80068a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068a4:	460c      	mov	r4, r1
 80068a6:	429a      	cmp	r2, r3
 80068a8:	bfbe      	ittt	lt
 80068aa:	460b      	movlt	r3, r1
 80068ac:	464c      	movlt	r4, r9
 80068ae:	4699      	movlt	r9, r3
 80068b0:	6927      	ldr	r7, [r4, #16]
 80068b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80068b6:	68a3      	ldr	r3, [r4, #8]
 80068b8:	6861      	ldr	r1, [r4, #4]
 80068ba:	eb07 060a 	add.w	r6, r7, sl
 80068be:	42b3      	cmp	r3, r6
 80068c0:	b085      	sub	sp, #20
 80068c2:	bfb8      	it	lt
 80068c4:	3101      	addlt	r1, #1
 80068c6:	f7ff fedb 	bl	8006680 <_Balloc>
 80068ca:	b930      	cbnz	r0, 80068da <__multiply+0x42>
 80068cc:	4602      	mov	r2, r0
 80068ce:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80068d2:	4b43      	ldr	r3, [pc, #268]	; (80069e0 <__multiply+0x148>)
 80068d4:	4843      	ldr	r0, [pc, #268]	; (80069e4 <__multiply+0x14c>)
 80068d6:	f000 fc85 	bl	80071e4 <__assert_func>
 80068da:	f100 0514 	add.w	r5, r0, #20
 80068de:	462b      	mov	r3, r5
 80068e0:	2200      	movs	r2, #0
 80068e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068e6:	4543      	cmp	r3, r8
 80068e8:	d321      	bcc.n	800692e <__multiply+0x96>
 80068ea:	f104 0314 	add.w	r3, r4, #20
 80068ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80068f2:	f109 0314 	add.w	r3, r9, #20
 80068f6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80068fa:	9202      	str	r2, [sp, #8]
 80068fc:	1b3a      	subs	r2, r7, r4
 80068fe:	3a15      	subs	r2, #21
 8006900:	f022 0203 	bic.w	r2, r2, #3
 8006904:	3204      	adds	r2, #4
 8006906:	f104 0115 	add.w	r1, r4, #21
 800690a:	428f      	cmp	r7, r1
 800690c:	bf38      	it	cc
 800690e:	2204      	movcc	r2, #4
 8006910:	9201      	str	r2, [sp, #4]
 8006912:	9a02      	ldr	r2, [sp, #8]
 8006914:	9303      	str	r3, [sp, #12]
 8006916:	429a      	cmp	r2, r3
 8006918:	d80c      	bhi.n	8006934 <__multiply+0x9c>
 800691a:	2e00      	cmp	r6, #0
 800691c:	dd03      	ble.n	8006926 <__multiply+0x8e>
 800691e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006922:	2b00      	cmp	r3, #0
 8006924:	d05a      	beq.n	80069dc <__multiply+0x144>
 8006926:	6106      	str	r6, [r0, #16]
 8006928:	b005      	add	sp, #20
 800692a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692e:	f843 2b04 	str.w	r2, [r3], #4
 8006932:	e7d8      	b.n	80068e6 <__multiply+0x4e>
 8006934:	f8b3 a000 	ldrh.w	sl, [r3]
 8006938:	f1ba 0f00 	cmp.w	sl, #0
 800693c:	d023      	beq.n	8006986 <__multiply+0xee>
 800693e:	46a9      	mov	r9, r5
 8006940:	f04f 0c00 	mov.w	ip, #0
 8006944:	f104 0e14 	add.w	lr, r4, #20
 8006948:	f85e 2b04 	ldr.w	r2, [lr], #4
 800694c:	f8d9 1000 	ldr.w	r1, [r9]
 8006950:	fa1f fb82 	uxth.w	fp, r2
 8006954:	b289      	uxth	r1, r1
 8006956:	fb0a 110b 	mla	r1, sl, fp, r1
 800695a:	4461      	add	r1, ip
 800695c:	f8d9 c000 	ldr.w	ip, [r9]
 8006960:	0c12      	lsrs	r2, r2, #16
 8006962:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006966:	fb0a c202 	mla	r2, sl, r2, ip
 800696a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800696e:	b289      	uxth	r1, r1
 8006970:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006974:	4577      	cmp	r7, lr
 8006976:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800697a:	f849 1b04 	str.w	r1, [r9], #4
 800697e:	d8e3      	bhi.n	8006948 <__multiply+0xb0>
 8006980:	9a01      	ldr	r2, [sp, #4]
 8006982:	f845 c002 	str.w	ip, [r5, r2]
 8006986:	9a03      	ldr	r2, [sp, #12]
 8006988:	3304      	adds	r3, #4
 800698a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800698e:	f1b9 0f00 	cmp.w	r9, #0
 8006992:	d021      	beq.n	80069d8 <__multiply+0x140>
 8006994:	46ae      	mov	lr, r5
 8006996:	f04f 0a00 	mov.w	sl, #0
 800699a:	6829      	ldr	r1, [r5, #0]
 800699c:	f104 0c14 	add.w	ip, r4, #20
 80069a0:	f8bc b000 	ldrh.w	fp, [ip]
 80069a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80069a8:	b289      	uxth	r1, r1
 80069aa:	fb09 220b 	mla	r2, r9, fp, r2
 80069ae:	4452      	add	r2, sl
 80069b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80069b4:	f84e 1b04 	str.w	r1, [lr], #4
 80069b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80069bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069c0:	f8be 1000 	ldrh.w	r1, [lr]
 80069c4:	4567      	cmp	r7, ip
 80069c6:	fb09 110a 	mla	r1, r9, sl, r1
 80069ca:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80069ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069d2:	d8e5      	bhi.n	80069a0 <__multiply+0x108>
 80069d4:	9a01      	ldr	r2, [sp, #4]
 80069d6:	50a9      	str	r1, [r5, r2]
 80069d8:	3504      	adds	r5, #4
 80069da:	e79a      	b.n	8006912 <__multiply+0x7a>
 80069dc:	3e01      	subs	r6, #1
 80069de:	e79c      	b.n	800691a <__multiply+0x82>
 80069e0:	0800799e 	.word	0x0800799e
 80069e4:	080079af 	.word	0x080079af

080069e8 <__pow5mult>:
 80069e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ec:	4615      	mov	r5, r2
 80069ee:	f012 0203 	ands.w	r2, r2, #3
 80069f2:	4606      	mov	r6, r0
 80069f4:	460f      	mov	r7, r1
 80069f6:	d007      	beq.n	8006a08 <__pow5mult+0x20>
 80069f8:	4c25      	ldr	r4, [pc, #148]	; (8006a90 <__pow5mult+0xa8>)
 80069fa:	3a01      	subs	r2, #1
 80069fc:	2300      	movs	r3, #0
 80069fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a02:	f7ff fe9f 	bl	8006744 <__multadd>
 8006a06:	4607      	mov	r7, r0
 8006a08:	10ad      	asrs	r5, r5, #2
 8006a0a:	d03d      	beq.n	8006a88 <__pow5mult+0xa0>
 8006a0c:	69f4      	ldr	r4, [r6, #28]
 8006a0e:	b97c      	cbnz	r4, 8006a30 <__pow5mult+0x48>
 8006a10:	2010      	movs	r0, #16
 8006a12:	f7ff fd81 	bl	8006518 <malloc>
 8006a16:	4602      	mov	r2, r0
 8006a18:	61f0      	str	r0, [r6, #28]
 8006a1a:	b928      	cbnz	r0, 8006a28 <__pow5mult+0x40>
 8006a1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006a20:	4b1c      	ldr	r3, [pc, #112]	; (8006a94 <__pow5mult+0xac>)
 8006a22:	481d      	ldr	r0, [pc, #116]	; (8006a98 <__pow5mult+0xb0>)
 8006a24:	f000 fbde 	bl	80071e4 <__assert_func>
 8006a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a2c:	6004      	str	r4, [r0, #0]
 8006a2e:	60c4      	str	r4, [r0, #12]
 8006a30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a38:	b94c      	cbnz	r4, 8006a4e <__pow5mult+0x66>
 8006a3a:	f240 2171 	movw	r1, #625	; 0x271
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f7ff ff14 	bl	800686c <__i2b>
 8006a44:	2300      	movs	r3, #0
 8006a46:	4604      	mov	r4, r0
 8006a48:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a4c:	6003      	str	r3, [r0, #0]
 8006a4e:	f04f 0900 	mov.w	r9, #0
 8006a52:	07eb      	lsls	r3, r5, #31
 8006a54:	d50a      	bpl.n	8006a6c <__pow5mult+0x84>
 8006a56:	4639      	mov	r1, r7
 8006a58:	4622      	mov	r2, r4
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f7ff ff1c 	bl	8006898 <__multiply>
 8006a60:	4680      	mov	r8, r0
 8006a62:	4639      	mov	r1, r7
 8006a64:	4630      	mov	r0, r6
 8006a66:	f7ff fe4b 	bl	8006700 <_Bfree>
 8006a6a:	4647      	mov	r7, r8
 8006a6c:	106d      	asrs	r5, r5, #1
 8006a6e:	d00b      	beq.n	8006a88 <__pow5mult+0xa0>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	b938      	cbnz	r0, 8006a84 <__pow5mult+0x9c>
 8006a74:	4622      	mov	r2, r4
 8006a76:	4621      	mov	r1, r4
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f7ff ff0d 	bl	8006898 <__multiply>
 8006a7e:	6020      	str	r0, [r4, #0]
 8006a80:	f8c0 9000 	str.w	r9, [r0]
 8006a84:	4604      	mov	r4, r0
 8006a86:	e7e4      	b.n	8006a52 <__pow5mult+0x6a>
 8006a88:	4638      	mov	r0, r7
 8006a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a8e:	bf00      	nop
 8006a90:	08007af8 	.word	0x08007af8
 8006a94:	0800792f 	.word	0x0800792f
 8006a98:	080079af 	.word	0x080079af

08006a9c <__lshift>:
 8006a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	4691      	mov	r9, r2
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	6849      	ldr	r1, [r1, #4]
 8006aaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006aae:	68a3      	ldr	r3, [r4, #8]
 8006ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ab4:	f108 0601 	add.w	r6, r8, #1
 8006ab8:	42b3      	cmp	r3, r6
 8006aba:	db0b      	blt.n	8006ad4 <__lshift+0x38>
 8006abc:	4638      	mov	r0, r7
 8006abe:	f7ff fddf 	bl	8006680 <_Balloc>
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	b948      	cbnz	r0, 8006ada <__lshift+0x3e>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006acc:	4b27      	ldr	r3, [pc, #156]	; (8006b6c <__lshift+0xd0>)
 8006ace:	4828      	ldr	r0, [pc, #160]	; (8006b70 <__lshift+0xd4>)
 8006ad0:	f000 fb88 	bl	80071e4 <__assert_func>
 8006ad4:	3101      	adds	r1, #1
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	e7ee      	b.n	8006ab8 <__lshift+0x1c>
 8006ada:	2300      	movs	r3, #0
 8006adc:	f100 0114 	add.w	r1, r0, #20
 8006ae0:	f100 0210 	add.w	r2, r0, #16
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	4553      	cmp	r3, sl
 8006ae8:	db33      	blt.n	8006b52 <__lshift+0xb6>
 8006aea:	6920      	ldr	r0, [r4, #16]
 8006aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006af0:	f104 0314 	add.w	r3, r4, #20
 8006af4:	f019 091f 	ands.w	r9, r9, #31
 8006af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006afc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b00:	d02b      	beq.n	8006b5a <__lshift+0xbe>
 8006b02:	468a      	mov	sl, r1
 8006b04:	2200      	movs	r2, #0
 8006b06:	f1c9 0e20 	rsb	lr, r9, #32
 8006b0a:	6818      	ldr	r0, [r3, #0]
 8006b0c:	fa00 f009 	lsl.w	r0, r0, r9
 8006b10:	4310      	orrs	r0, r2
 8006b12:	f84a 0b04 	str.w	r0, [sl], #4
 8006b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b1a:	459c      	cmp	ip, r3
 8006b1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006b20:	d8f3      	bhi.n	8006b0a <__lshift+0x6e>
 8006b22:	ebac 0304 	sub.w	r3, ip, r4
 8006b26:	3b15      	subs	r3, #21
 8006b28:	f023 0303 	bic.w	r3, r3, #3
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	f104 0015 	add.w	r0, r4, #21
 8006b32:	4584      	cmp	ip, r0
 8006b34:	bf38      	it	cc
 8006b36:	2304      	movcc	r3, #4
 8006b38:	50ca      	str	r2, [r1, r3]
 8006b3a:	b10a      	cbz	r2, 8006b40 <__lshift+0xa4>
 8006b3c:	f108 0602 	add.w	r6, r8, #2
 8006b40:	3e01      	subs	r6, #1
 8006b42:	4638      	mov	r0, r7
 8006b44:	4621      	mov	r1, r4
 8006b46:	612e      	str	r6, [r5, #16]
 8006b48:	f7ff fdda 	bl	8006700 <_Bfree>
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b52:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b56:	3301      	adds	r3, #1
 8006b58:	e7c5      	b.n	8006ae6 <__lshift+0x4a>
 8006b5a:	3904      	subs	r1, #4
 8006b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b60:	459c      	cmp	ip, r3
 8006b62:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b66:	d8f9      	bhi.n	8006b5c <__lshift+0xc0>
 8006b68:	e7ea      	b.n	8006b40 <__lshift+0xa4>
 8006b6a:	bf00      	nop
 8006b6c:	0800799e 	.word	0x0800799e
 8006b70:	080079af 	.word	0x080079af

08006b74 <__mcmp>:
 8006b74:	4603      	mov	r3, r0
 8006b76:	690a      	ldr	r2, [r1, #16]
 8006b78:	6900      	ldr	r0, [r0, #16]
 8006b7a:	b530      	push	{r4, r5, lr}
 8006b7c:	1a80      	subs	r0, r0, r2
 8006b7e:	d10d      	bne.n	8006b9c <__mcmp+0x28>
 8006b80:	3314      	adds	r3, #20
 8006b82:	3114      	adds	r1, #20
 8006b84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b94:	4295      	cmp	r5, r2
 8006b96:	d002      	beq.n	8006b9e <__mcmp+0x2a>
 8006b98:	d304      	bcc.n	8006ba4 <__mcmp+0x30>
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	bd30      	pop	{r4, r5, pc}
 8006b9e:	42a3      	cmp	r3, r4
 8006ba0:	d3f4      	bcc.n	8006b8c <__mcmp+0x18>
 8006ba2:	e7fb      	b.n	8006b9c <__mcmp+0x28>
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba8:	e7f8      	b.n	8006b9c <__mcmp+0x28>
	...

08006bac <__mdiff>:
 8006bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	460d      	mov	r5, r1
 8006bb2:	4607      	mov	r7, r0
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	4614      	mov	r4, r2
 8006bba:	f7ff ffdb 	bl	8006b74 <__mcmp>
 8006bbe:	1e06      	subs	r6, r0, #0
 8006bc0:	d111      	bne.n	8006be6 <__mdiff+0x3a>
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f7ff fd5b 	bl	8006680 <_Balloc>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	b928      	cbnz	r0, 8006bda <__mdiff+0x2e>
 8006bce:	f240 2137 	movw	r1, #567	; 0x237
 8006bd2:	4b3a      	ldr	r3, [pc, #232]	; (8006cbc <__mdiff+0x110>)
 8006bd4:	483a      	ldr	r0, [pc, #232]	; (8006cc0 <__mdiff+0x114>)
 8006bd6:	f000 fb05 	bl	80071e4 <__assert_func>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006be0:	4610      	mov	r0, r2
 8006be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be6:	bfa4      	itt	ge
 8006be8:	4623      	movge	r3, r4
 8006bea:	462c      	movge	r4, r5
 8006bec:	4638      	mov	r0, r7
 8006bee:	6861      	ldr	r1, [r4, #4]
 8006bf0:	bfa6      	itte	ge
 8006bf2:	461d      	movge	r5, r3
 8006bf4:	2600      	movge	r6, #0
 8006bf6:	2601      	movlt	r6, #1
 8006bf8:	f7ff fd42 	bl	8006680 <_Balloc>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	b918      	cbnz	r0, 8006c08 <__mdiff+0x5c>
 8006c00:	f240 2145 	movw	r1, #581	; 0x245
 8006c04:	4b2d      	ldr	r3, [pc, #180]	; (8006cbc <__mdiff+0x110>)
 8006c06:	e7e5      	b.n	8006bd4 <__mdiff+0x28>
 8006c08:	f102 0814 	add.w	r8, r2, #20
 8006c0c:	46c2      	mov	sl, r8
 8006c0e:	f04f 0c00 	mov.w	ip, #0
 8006c12:	6927      	ldr	r7, [r4, #16]
 8006c14:	60c6      	str	r6, [r0, #12]
 8006c16:	692e      	ldr	r6, [r5, #16]
 8006c18:	f104 0014 	add.w	r0, r4, #20
 8006c1c:	f105 0914 	add.w	r9, r5, #20
 8006c20:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006c24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c28:	3410      	adds	r4, #16
 8006c2a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006c2e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c32:	fa1f f18b 	uxth.w	r1, fp
 8006c36:	4461      	add	r1, ip
 8006c38:	fa1f fc83 	uxth.w	ip, r3
 8006c3c:	0c1b      	lsrs	r3, r3, #16
 8006c3e:	eba1 010c 	sub.w	r1, r1, ip
 8006c42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c46:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006c4a:	b289      	uxth	r1, r1
 8006c4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006c50:	454e      	cmp	r6, r9
 8006c52:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006c56:	f84a 1b04 	str.w	r1, [sl], #4
 8006c5a:	d8e6      	bhi.n	8006c2a <__mdiff+0x7e>
 8006c5c:	1b73      	subs	r3, r6, r5
 8006c5e:	3b15      	subs	r3, #21
 8006c60:	f023 0303 	bic.w	r3, r3, #3
 8006c64:	3515      	adds	r5, #21
 8006c66:	3304      	adds	r3, #4
 8006c68:	42ae      	cmp	r6, r5
 8006c6a:	bf38      	it	cc
 8006c6c:	2304      	movcc	r3, #4
 8006c6e:	4418      	add	r0, r3
 8006c70:	4443      	add	r3, r8
 8006c72:	461e      	mov	r6, r3
 8006c74:	4605      	mov	r5, r0
 8006c76:	4575      	cmp	r5, lr
 8006c78:	d30e      	bcc.n	8006c98 <__mdiff+0xec>
 8006c7a:	f10e 0103 	add.w	r1, lr, #3
 8006c7e:	1a09      	subs	r1, r1, r0
 8006c80:	f021 0103 	bic.w	r1, r1, #3
 8006c84:	3803      	subs	r0, #3
 8006c86:	4586      	cmp	lr, r0
 8006c88:	bf38      	it	cc
 8006c8a:	2100      	movcc	r1, #0
 8006c8c:	440b      	add	r3, r1
 8006c8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c92:	b189      	cbz	r1, 8006cb8 <__mdiff+0x10c>
 8006c94:	6117      	str	r7, [r2, #16]
 8006c96:	e7a3      	b.n	8006be0 <__mdiff+0x34>
 8006c98:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c9c:	fa1f f188 	uxth.w	r1, r8
 8006ca0:	4461      	add	r1, ip
 8006ca2:	140c      	asrs	r4, r1, #16
 8006ca4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ca8:	b289      	uxth	r1, r1
 8006caa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006cae:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006cb2:	f846 1b04 	str.w	r1, [r6], #4
 8006cb6:	e7de      	b.n	8006c76 <__mdiff+0xca>
 8006cb8:	3f01      	subs	r7, #1
 8006cba:	e7e8      	b.n	8006c8e <__mdiff+0xe2>
 8006cbc:	0800799e 	.word	0x0800799e
 8006cc0:	080079af 	.word	0x080079af

08006cc4 <__d2b>:
 8006cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	4617      	mov	r7, r2
 8006cca:	461c      	mov	r4, r3
 8006ccc:	9e08      	ldr	r6, [sp, #32]
 8006cce:	f7ff fcd7 	bl	8006680 <_Balloc>
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	b930      	cbnz	r0, 8006ce4 <__d2b+0x20>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	f240 310f 	movw	r1, #783	; 0x30f
 8006cdc:	4b22      	ldr	r3, [pc, #136]	; (8006d68 <__d2b+0xa4>)
 8006cde:	4823      	ldr	r0, [pc, #140]	; (8006d6c <__d2b+0xa8>)
 8006ce0:	f000 fa80 	bl	80071e4 <__assert_func>
 8006ce4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006ce8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006cec:	bb24      	cbnz	r4, 8006d38 <__d2b+0x74>
 8006cee:	2f00      	cmp	r7, #0
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	d026      	beq.n	8006d42 <__d2b+0x7e>
 8006cf4:	4668      	mov	r0, sp
 8006cf6:	9700      	str	r7, [sp, #0]
 8006cf8:	f7ff fd8a 	bl	8006810 <__lo0bits>
 8006cfc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006d00:	b1e8      	cbz	r0, 8006d3e <__d2b+0x7a>
 8006d02:	f1c0 0320 	rsb	r3, r0, #32
 8006d06:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	40c2      	lsrs	r2, r0
 8006d0e:	616b      	str	r3, [r5, #20]
 8006d10:	9201      	str	r2, [sp, #4]
 8006d12:	9b01      	ldr	r3, [sp, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bf14      	ite	ne
 8006d18:	2102      	movne	r1, #2
 8006d1a:	2101      	moveq	r1, #1
 8006d1c:	61ab      	str	r3, [r5, #24]
 8006d1e:	6129      	str	r1, [r5, #16]
 8006d20:	b1bc      	cbz	r4, 8006d52 <__d2b+0x8e>
 8006d22:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006d26:	4404      	add	r4, r0
 8006d28:	6034      	str	r4, [r6, #0]
 8006d2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d30:	6018      	str	r0, [r3, #0]
 8006d32:	4628      	mov	r0, r5
 8006d34:	b003      	add	sp, #12
 8006d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d3c:	e7d7      	b.n	8006cee <__d2b+0x2a>
 8006d3e:	6169      	str	r1, [r5, #20]
 8006d40:	e7e7      	b.n	8006d12 <__d2b+0x4e>
 8006d42:	a801      	add	r0, sp, #4
 8006d44:	f7ff fd64 	bl	8006810 <__lo0bits>
 8006d48:	9b01      	ldr	r3, [sp, #4]
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	616b      	str	r3, [r5, #20]
 8006d4e:	3020      	adds	r0, #32
 8006d50:	e7e5      	b.n	8006d1e <__d2b+0x5a>
 8006d52:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d56:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006d5a:	6030      	str	r0, [r6, #0]
 8006d5c:	6918      	ldr	r0, [r3, #16]
 8006d5e:	f7ff fd37 	bl	80067d0 <__hi0bits>
 8006d62:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006d66:	e7e2      	b.n	8006d2e <__d2b+0x6a>
 8006d68:	0800799e 	.word	0x0800799e
 8006d6c:	080079af 	.word	0x080079af

08006d70 <__ssputs_r>:
 8006d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d74:	461f      	mov	r7, r3
 8006d76:	688e      	ldr	r6, [r1, #8]
 8006d78:	4682      	mov	sl, r0
 8006d7a:	42be      	cmp	r6, r7
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	4690      	mov	r8, r2
 8006d80:	680b      	ldr	r3, [r1, #0]
 8006d82:	d82c      	bhi.n	8006dde <__ssputs_r+0x6e>
 8006d84:	898a      	ldrh	r2, [r1, #12]
 8006d86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d8a:	d026      	beq.n	8006dda <__ssputs_r+0x6a>
 8006d8c:	6965      	ldr	r5, [r4, #20]
 8006d8e:	6909      	ldr	r1, [r1, #16]
 8006d90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d94:	eba3 0901 	sub.w	r9, r3, r1
 8006d98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d9c:	1c7b      	adds	r3, r7, #1
 8006d9e:	444b      	add	r3, r9
 8006da0:	106d      	asrs	r5, r5, #1
 8006da2:	429d      	cmp	r5, r3
 8006da4:	bf38      	it	cc
 8006da6:	461d      	movcc	r5, r3
 8006da8:	0553      	lsls	r3, r2, #21
 8006daa:	d527      	bpl.n	8006dfc <__ssputs_r+0x8c>
 8006dac:	4629      	mov	r1, r5
 8006dae:	f7ff fbdb 	bl	8006568 <_malloc_r>
 8006db2:	4606      	mov	r6, r0
 8006db4:	b360      	cbz	r0, 8006e10 <__ssputs_r+0xa0>
 8006db6:	464a      	mov	r2, r9
 8006db8:	6921      	ldr	r1, [r4, #16]
 8006dba:	f000 fa05 	bl	80071c8 <memcpy>
 8006dbe:	89a3      	ldrh	r3, [r4, #12]
 8006dc0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	6126      	str	r6, [r4, #16]
 8006dcc:	444e      	add	r6, r9
 8006dce:	6026      	str	r6, [r4, #0]
 8006dd0:	463e      	mov	r6, r7
 8006dd2:	6165      	str	r5, [r4, #20]
 8006dd4:	eba5 0509 	sub.w	r5, r5, r9
 8006dd8:	60a5      	str	r5, [r4, #8]
 8006dda:	42be      	cmp	r6, r7
 8006ddc:	d900      	bls.n	8006de0 <__ssputs_r+0x70>
 8006dde:	463e      	mov	r6, r7
 8006de0:	4632      	mov	r2, r6
 8006de2:	4641      	mov	r1, r8
 8006de4:	6820      	ldr	r0, [r4, #0]
 8006de6:	f000 f9c5 	bl	8007174 <memmove>
 8006dea:	2000      	movs	r0, #0
 8006dec:	68a3      	ldr	r3, [r4, #8]
 8006dee:	1b9b      	subs	r3, r3, r6
 8006df0:	60a3      	str	r3, [r4, #8]
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	4433      	add	r3, r6
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfc:	462a      	mov	r2, r5
 8006dfe:	f000 fa35 	bl	800726c <_realloc_r>
 8006e02:	4606      	mov	r6, r0
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d1e0      	bne.n	8006dca <__ssputs_r+0x5a>
 8006e08:	4650      	mov	r0, sl
 8006e0a:	6921      	ldr	r1, [r4, #16]
 8006e0c:	f7ff fb3c 	bl	8006488 <_free_r>
 8006e10:	230c      	movs	r3, #12
 8006e12:	f8ca 3000 	str.w	r3, [sl]
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e20:	81a3      	strh	r3, [r4, #12]
 8006e22:	e7e9      	b.n	8006df8 <__ssputs_r+0x88>

08006e24 <_svfiprintf_r>:
 8006e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e28:	4698      	mov	r8, r3
 8006e2a:	898b      	ldrh	r3, [r1, #12]
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	061b      	lsls	r3, r3, #24
 8006e30:	460d      	mov	r5, r1
 8006e32:	4614      	mov	r4, r2
 8006e34:	b09d      	sub	sp, #116	; 0x74
 8006e36:	d50e      	bpl.n	8006e56 <_svfiprintf_r+0x32>
 8006e38:	690b      	ldr	r3, [r1, #16]
 8006e3a:	b963      	cbnz	r3, 8006e56 <_svfiprintf_r+0x32>
 8006e3c:	2140      	movs	r1, #64	; 0x40
 8006e3e:	f7ff fb93 	bl	8006568 <_malloc_r>
 8006e42:	6028      	str	r0, [r5, #0]
 8006e44:	6128      	str	r0, [r5, #16]
 8006e46:	b920      	cbnz	r0, 8006e52 <_svfiprintf_r+0x2e>
 8006e48:	230c      	movs	r3, #12
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e50:	e0d0      	b.n	8006ff4 <_svfiprintf_r+0x1d0>
 8006e52:	2340      	movs	r3, #64	; 0x40
 8006e54:	616b      	str	r3, [r5, #20]
 8006e56:	2300      	movs	r3, #0
 8006e58:	9309      	str	r3, [sp, #36]	; 0x24
 8006e5a:	2320      	movs	r3, #32
 8006e5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e60:	2330      	movs	r3, #48	; 0x30
 8006e62:	f04f 0901 	mov.w	r9, #1
 8006e66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e6a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800700c <_svfiprintf_r+0x1e8>
 8006e6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e72:	4623      	mov	r3, r4
 8006e74:	469a      	mov	sl, r3
 8006e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e7a:	b10a      	cbz	r2, 8006e80 <_svfiprintf_r+0x5c>
 8006e7c:	2a25      	cmp	r2, #37	; 0x25
 8006e7e:	d1f9      	bne.n	8006e74 <_svfiprintf_r+0x50>
 8006e80:	ebba 0b04 	subs.w	fp, sl, r4
 8006e84:	d00b      	beq.n	8006e9e <_svfiprintf_r+0x7a>
 8006e86:	465b      	mov	r3, fp
 8006e88:	4622      	mov	r2, r4
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	f7ff ff6f 	bl	8006d70 <__ssputs_r>
 8006e92:	3001      	adds	r0, #1
 8006e94:	f000 80a9 	beq.w	8006fea <_svfiprintf_r+0x1c6>
 8006e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e9a:	445a      	add	r2, fp
 8006e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 80a1 	beq.w	8006fea <_svfiprintf_r+0x1c6>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8006eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eb2:	f10a 0a01 	add.w	sl, sl, #1
 8006eb6:	9304      	str	r3, [sp, #16]
 8006eb8:	9307      	str	r3, [sp, #28]
 8006eba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ebe:	931a      	str	r3, [sp, #104]	; 0x68
 8006ec0:	4654      	mov	r4, sl
 8006ec2:	2205      	movs	r2, #5
 8006ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec8:	4850      	ldr	r0, [pc, #320]	; (800700c <_svfiprintf_r+0x1e8>)
 8006eca:	f7fe fc60 	bl	800578e <memchr>
 8006ece:	9a04      	ldr	r2, [sp, #16]
 8006ed0:	b9d8      	cbnz	r0, 8006f0a <_svfiprintf_r+0xe6>
 8006ed2:	06d0      	lsls	r0, r2, #27
 8006ed4:	bf44      	itt	mi
 8006ed6:	2320      	movmi	r3, #32
 8006ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006edc:	0711      	lsls	r1, r2, #28
 8006ede:	bf44      	itt	mi
 8006ee0:	232b      	movmi	r3, #43	; 0x2b
 8006ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8006eea:	2b2a      	cmp	r3, #42	; 0x2a
 8006eec:	d015      	beq.n	8006f1a <_svfiprintf_r+0xf6>
 8006eee:	4654      	mov	r4, sl
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	f04f 0c0a 	mov.w	ip, #10
 8006ef6:	9a07      	ldr	r2, [sp, #28]
 8006ef8:	4621      	mov	r1, r4
 8006efa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006efe:	3b30      	subs	r3, #48	; 0x30
 8006f00:	2b09      	cmp	r3, #9
 8006f02:	d94d      	bls.n	8006fa0 <_svfiprintf_r+0x17c>
 8006f04:	b1b0      	cbz	r0, 8006f34 <_svfiprintf_r+0x110>
 8006f06:	9207      	str	r2, [sp, #28]
 8006f08:	e014      	b.n	8006f34 <_svfiprintf_r+0x110>
 8006f0a:	eba0 0308 	sub.w	r3, r0, r8
 8006f0e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f12:	4313      	orrs	r3, r2
 8006f14:	46a2      	mov	sl, r4
 8006f16:	9304      	str	r3, [sp, #16]
 8006f18:	e7d2      	b.n	8006ec0 <_svfiprintf_r+0x9c>
 8006f1a:	9b03      	ldr	r3, [sp, #12]
 8006f1c:	1d19      	adds	r1, r3, #4
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	9103      	str	r1, [sp, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	bfbb      	ittet	lt
 8006f26:	425b      	neglt	r3, r3
 8006f28:	f042 0202 	orrlt.w	r2, r2, #2
 8006f2c:	9307      	strge	r3, [sp, #28]
 8006f2e:	9307      	strlt	r3, [sp, #28]
 8006f30:	bfb8      	it	lt
 8006f32:	9204      	strlt	r2, [sp, #16]
 8006f34:	7823      	ldrb	r3, [r4, #0]
 8006f36:	2b2e      	cmp	r3, #46	; 0x2e
 8006f38:	d10c      	bne.n	8006f54 <_svfiprintf_r+0x130>
 8006f3a:	7863      	ldrb	r3, [r4, #1]
 8006f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f3e:	d134      	bne.n	8006faa <_svfiprintf_r+0x186>
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	3402      	adds	r4, #2
 8006f44:	1d1a      	adds	r2, r3, #4
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	9203      	str	r2, [sp, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bfb8      	it	lt
 8006f4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f52:	9305      	str	r3, [sp, #20]
 8006f54:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007010 <_svfiprintf_r+0x1ec>
 8006f58:	2203      	movs	r2, #3
 8006f5a:	4650      	mov	r0, sl
 8006f5c:	7821      	ldrb	r1, [r4, #0]
 8006f5e:	f7fe fc16 	bl	800578e <memchr>
 8006f62:	b138      	cbz	r0, 8006f74 <_svfiprintf_r+0x150>
 8006f64:	2240      	movs	r2, #64	; 0x40
 8006f66:	9b04      	ldr	r3, [sp, #16]
 8006f68:	eba0 000a 	sub.w	r0, r0, sl
 8006f6c:	4082      	lsls	r2, r0
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	3401      	adds	r4, #1
 8006f72:	9304      	str	r3, [sp, #16]
 8006f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f78:	2206      	movs	r2, #6
 8006f7a:	4826      	ldr	r0, [pc, #152]	; (8007014 <_svfiprintf_r+0x1f0>)
 8006f7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f80:	f7fe fc05 	bl	800578e <memchr>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d038      	beq.n	8006ffa <_svfiprintf_r+0x1d6>
 8006f88:	4b23      	ldr	r3, [pc, #140]	; (8007018 <_svfiprintf_r+0x1f4>)
 8006f8a:	bb1b      	cbnz	r3, 8006fd4 <_svfiprintf_r+0x1b0>
 8006f8c:	9b03      	ldr	r3, [sp, #12]
 8006f8e:	3307      	adds	r3, #7
 8006f90:	f023 0307 	bic.w	r3, r3, #7
 8006f94:	3308      	adds	r3, #8
 8006f96:	9303      	str	r3, [sp, #12]
 8006f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f9a:	4433      	add	r3, r6
 8006f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9e:	e768      	b.n	8006e72 <_svfiprintf_r+0x4e>
 8006fa0:	460c      	mov	r4, r1
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fa8:	e7a6      	b.n	8006ef8 <_svfiprintf_r+0xd4>
 8006faa:	2300      	movs	r3, #0
 8006fac:	f04f 0c0a 	mov.w	ip, #10
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	3401      	adds	r4, #1
 8006fb4:	9305      	str	r3, [sp, #20]
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fbc:	3a30      	subs	r2, #48	; 0x30
 8006fbe:	2a09      	cmp	r2, #9
 8006fc0:	d903      	bls.n	8006fca <_svfiprintf_r+0x1a6>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0c6      	beq.n	8006f54 <_svfiprintf_r+0x130>
 8006fc6:	9105      	str	r1, [sp, #20]
 8006fc8:	e7c4      	b.n	8006f54 <_svfiprintf_r+0x130>
 8006fca:	4604      	mov	r4, r0
 8006fcc:	2301      	movs	r3, #1
 8006fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fd2:	e7f0      	b.n	8006fb6 <_svfiprintf_r+0x192>
 8006fd4:	ab03      	add	r3, sp, #12
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	462a      	mov	r2, r5
 8006fda:	4638      	mov	r0, r7
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	; (800701c <_svfiprintf_r+0x1f8>)
 8006fde:	a904      	add	r1, sp, #16
 8006fe0:	f7fd fe5a 	bl	8004c98 <_printf_float>
 8006fe4:	1c42      	adds	r2, r0, #1
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	d1d6      	bne.n	8006f98 <_svfiprintf_r+0x174>
 8006fea:	89ab      	ldrh	r3, [r5, #12]
 8006fec:	065b      	lsls	r3, r3, #25
 8006fee:	f53f af2d 	bmi.w	8006e4c <_svfiprintf_r+0x28>
 8006ff2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ff4:	b01d      	add	sp, #116	; 0x74
 8006ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffa:	ab03      	add	r3, sp, #12
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	462a      	mov	r2, r5
 8007000:	4638      	mov	r0, r7
 8007002:	4b06      	ldr	r3, [pc, #24]	; (800701c <_svfiprintf_r+0x1f8>)
 8007004:	a904      	add	r1, sp, #16
 8007006:	f7fe f8e7 	bl	80051d8 <_printf_i>
 800700a:	e7eb      	b.n	8006fe4 <_svfiprintf_r+0x1c0>
 800700c:	08007b04 	.word	0x08007b04
 8007010:	08007b0a 	.word	0x08007b0a
 8007014:	08007b0e 	.word	0x08007b0e
 8007018:	08004c99 	.word	0x08004c99
 800701c:	08006d71 	.word	0x08006d71

08007020 <__sflush_r>:
 8007020:	898a      	ldrh	r2, [r1, #12]
 8007022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007024:	4605      	mov	r5, r0
 8007026:	0710      	lsls	r0, r2, #28
 8007028:	460c      	mov	r4, r1
 800702a:	d457      	bmi.n	80070dc <__sflush_r+0xbc>
 800702c:	684b      	ldr	r3, [r1, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	dc04      	bgt.n	800703c <__sflush_r+0x1c>
 8007032:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007034:	2b00      	cmp	r3, #0
 8007036:	dc01      	bgt.n	800703c <__sflush_r+0x1c>
 8007038:	2000      	movs	r0, #0
 800703a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800703c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800703e:	2e00      	cmp	r6, #0
 8007040:	d0fa      	beq.n	8007038 <__sflush_r+0x18>
 8007042:	2300      	movs	r3, #0
 8007044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007048:	682f      	ldr	r7, [r5, #0]
 800704a:	6a21      	ldr	r1, [r4, #32]
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	d032      	beq.n	80070b6 <__sflush_r+0x96>
 8007050:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	075a      	lsls	r2, r3, #29
 8007056:	d505      	bpl.n	8007064 <__sflush_r+0x44>
 8007058:	6863      	ldr	r3, [r4, #4]
 800705a:	1ac0      	subs	r0, r0, r3
 800705c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800705e:	b10b      	cbz	r3, 8007064 <__sflush_r+0x44>
 8007060:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007062:	1ac0      	subs	r0, r0, r3
 8007064:	2300      	movs	r3, #0
 8007066:	4602      	mov	r2, r0
 8007068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800706a:	4628      	mov	r0, r5
 800706c:	6a21      	ldr	r1, [r4, #32]
 800706e:	47b0      	blx	r6
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	d106      	bne.n	8007084 <__sflush_r+0x64>
 8007076:	6829      	ldr	r1, [r5, #0]
 8007078:	291d      	cmp	r1, #29
 800707a:	d82b      	bhi.n	80070d4 <__sflush_r+0xb4>
 800707c:	4a28      	ldr	r2, [pc, #160]	; (8007120 <__sflush_r+0x100>)
 800707e:	410a      	asrs	r2, r1
 8007080:	07d6      	lsls	r6, r2, #31
 8007082:	d427      	bmi.n	80070d4 <__sflush_r+0xb4>
 8007084:	2200      	movs	r2, #0
 8007086:	6062      	str	r2, [r4, #4]
 8007088:	6922      	ldr	r2, [r4, #16]
 800708a:	04d9      	lsls	r1, r3, #19
 800708c:	6022      	str	r2, [r4, #0]
 800708e:	d504      	bpl.n	800709a <__sflush_r+0x7a>
 8007090:	1c42      	adds	r2, r0, #1
 8007092:	d101      	bne.n	8007098 <__sflush_r+0x78>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	b903      	cbnz	r3, 800709a <__sflush_r+0x7a>
 8007098:	6560      	str	r0, [r4, #84]	; 0x54
 800709a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800709c:	602f      	str	r7, [r5, #0]
 800709e:	2900      	cmp	r1, #0
 80070a0:	d0ca      	beq.n	8007038 <__sflush_r+0x18>
 80070a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070a6:	4299      	cmp	r1, r3
 80070a8:	d002      	beq.n	80070b0 <__sflush_r+0x90>
 80070aa:	4628      	mov	r0, r5
 80070ac:	f7ff f9ec 	bl	8006488 <_free_r>
 80070b0:	2000      	movs	r0, #0
 80070b2:	6360      	str	r0, [r4, #52]	; 0x34
 80070b4:	e7c1      	b.n	800703a <__sflush_r+0x1a>
 80070b6:	2301      	movs	r3, #1
 80070b8:	4628      	mov	r0, r5
 80070ba:	47b0      	blx	r6
 80070bc:	1c41      	adds	r1, r0, #1
 80070be:	d1c8      	bne.n	8007052 <__sflush_r+0x32>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0c5      	beq.n	8007052 <__sflush_r+0x32>
 80070c6:	2b1d      	cmp	r3, #29
 80070c8:	d001      	beq.n	80070ce <__sflush_r+0xae>
 80070ca:	2b16      	cmp	r3, #22
 80070cc:	d101      	bne.n	80070d2 <__sflush_r+0xb2>
 80070ce:	602f      	str	r7, [r5, #0]
 80070d0:	e7b2      	b.n	8007038 <__sflush_r+0x18>
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	e7ae      	b.n	800703a <__sflush_r+0x1a>
 80070dc:	690f      	ldr	r7, [r1, #16]
 80070de:	2f00      	cmp	r7, #0
 80070e0:	d0aa      	beq.n	8007038 <__sflush_r+0x18>
 80070e2:	0793      	lsls	r3, r2, #30
 80070e4:	bf18      	it	ne
 80070e6:	2300      	movne	r3, #0
 80070e8:	680e      	ldr	r6, [r1, #0]
 80070ea:	bf08      	it	eq
 80070ec:	694b      	ldreq	r3, [r1, #20]
 80070ee:	1bf6      	subs	r6, r6, r7
 80070f0:	600f      	str	r7, [r1, #0]
 80070f2:	608b      	str	r3, [r1, #8]
 80070f4:	2e00      	cmp	r6, #0
 80070f6:	dd9f      	ble.n	8007038 <__sflush_r+0x18>
 80070f8:	4633      	mov	r3, r6
 80070fa:	463a      	mov	r2, r7
 80070fc:	4628      	mov	r0, r5
 80070fe:	6a21      	ldr	r1, [r4, #32]
 8007100:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007104:	47e0      	blx	ip
 8007106:	2800      	cmp	r0, #0
 8007108:	dc06      	bgt.n	8007118 <__sflush_r+0xf8>
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007114:	81a3      	strh	r3, [r4, #12]
 8007116:	e790      	b.n	800703a <__sflush_r+0x1a>
 8007118:	4407      	add	r7, r0
 800711a:	1a36      	subs	r6, r6, r0
 800711c:	e7ea      	b.n	80070f4 <__sflush_r+0xd4>
 800711e:	bf00      	nop
 8007120:	dfbffffe 	.word	0xdfbffffe

08007124 <_fflush_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	690b      	ldr	r3, [r1, #16]
 8007128:	4605      	mov	r5, r0
 800712a:	460c      	mov	r4, r1
 800712c:	b913      	cbnz	r3, 8007134 <_fflush_r+0x10>
 800712e:	2500      	movs	r5, #0
 8007130:	4628      	mov	r0, r5
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	b118      	cbz	r0, 800713e <_fflush_r+0x1a>
 8007136:	6a03      	ldr	r3, [r0, #32]
 8007138:	b90b      	cbnz	r3, 800713e <_fflush_r+0x1a>
 800713a:	f7fe f9fb 	bl	8005534 <__sinit>
 800713e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0f3      	beq.n	800712e <_fflush_r+0xa>
 8007146:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007148:	07d0      	lsls	r0, r2, #31
 800714a:	d404      	bmi.n	8007156 <_fflush_r+0x32>
 800714c:	0599      	lsls	r1, r3, #22
 800714e:	d402      	bmi.n	8007156 <_fflush_r+0x32>
 8007150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007152:	f7fe fb1a 	bl	800578a <__retarget_lock_acquire_recursive>
 8007156:	4628      	mov	r0, r5
 8007158:	4621      	mov	r1, r4
 800715a:	f7ff ff61 	bl	8007020 <__sflush_r>
 800715e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007160:	4605      	mov	r5, r0
 8007162:	07da      	lsls	r2, r3, #31
 8007164:	d4e4      	bmi.n	8007130 <_fflush_r+0xc>
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	059b      	lsls	r3, r3, #22
 800716a:	d4e1      	bmi.n	8007130 <_fflush_r+0xc>
 800716c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800716e:	f7fe fb0d 	bl	800578c <__retarget_lock_release_recursive>
 8007172:	e7dd      	b.n	8007130 <_fflush_r+0xc>

08007174 <memmove>:
 8007174:	4288      	cmp	r0, r1
 8007176:	b510      	push	{r4, lr}
 8007178:	eb01 0402 	add.w	r4, r1, r2
 800717c:	d902      	bls.n	8007184 <memmove+0x10>
 800717e:	4284      	cmp	r4, r0
 8007180:	4623      	mov	r3, r4
 8007182:	d807      	bhi.n	8007194 <memmove+0x20>
 8007184:	1e43      	subs	r3, r0, #1
 8007186:	42a1      	cmp	r1, r4
 8007188:	d008      	beq.n	800719c <memmove+0x28>
 800718a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800718e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007192:	e7f8      	b.n	8007186 <memmove+0x12>
 8007194:	4601      	mov	r1, r0
 8007196:	4402      	add	r2, r0
 8007198:	428a      	cmp	r2, r1
 800719a:	d100      	bne.n	800719e <memmove+0x2a>
 800719c:	bd10      	pop	{r4, pc}
 800719e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071a6:	e7f7      	b.n	8007198 <memmove+0x24>

080071a8 <_sbrk_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	2300      	movs	r3, #0
 80071ac:	4d05      	ldr	r5, [pc, #20]	; (80071c4 <_sbrk_r+0x1c>)
 80071ae:	4604      	mov	r4, r0
 80071b0:	4608      	mov	r0, r1
 80071b2:	602b      	str	r3, [r5, #0]
 80071b4:	f7fa fb54 	bl	8001860 <_sbrk>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d102      	bne.n	80071c2 <_sbrk_r+0x1a>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	b103      	cbz	r3, 80071c2 <_sbrk_r+0x1a>
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	20000484 	.word	0x20000484

080071c8 <memcpy>:
 80071c8:	440a      	add	r2, r1
 80071ca:	4291      	cmp	r1, r2
 80071cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80071d0:	d100      	bne.n	80071d4 <memcpy+0xc>
 80071d2:	4770      	bx	lr
 80071d4:	b510      	push	{r4, lr}
 80071d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071da:	4291      	cmp	r1, r2
 80071dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071e0:	d1f9      	bne.n	80071d6 <memcpy+0xe>
 80071e2:	bd10      	pop	{r4, pc}

080071e4 <__assert_func>:
 80071e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071e6:	4614      	mov	r4, r2
 80071e8:	461a      	mov	r2, r3
 80071ea:	4b09      	ldr	r3, [pc, #36]	; (8007210 <__assert_func+0x2c>)
 80071ec:	4605      	mov	r5, r0
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68d8      	ldr	r0, [r3, #12]
 80071f2:	b14c      	cbz	r4, 8007208 <__assert_func+0x24>
 80071f4:	4b07      	ldr	r3, [pc, #28]	; (8007214 <__assert_func+0x30>)
 80071f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071fa:	9100      	str	r1, [sp, #0]
 80071fc:	462b      	mov	r3, r5
 80071fe:	4906      	ldr	r1, [pc, #24]	; (8007218 <__assert_func+0x34>)
 8007200:	f000 f870 	bl	80072e4 <fiprintf>
 8007204:	f000 f880 	bl	8007308 <abort>
 8007208:	4b04      	ldr	r3, [pc, #16]	; (800721c <__assert_func+0x38>)
 800720a:	461c      	mov	r4, r3
 800720c:	e7f3      	b.n	80071f6 <__assert_func+0x12>
 800720e:	bf00      	nop
 8007210:	20000068 	.word	0x20000068
 8007214:	08007b1f 	.word	0x08007b1f
 8007218:	08007b2c 	.word	0x08007b2c
 800721c:	08007b5a 	.word	0x08007b5a

08007220 <_calloc_r>:
 8007220:	b570      	push	{r4, r5, r6, lr}
 8007222:	fba1 5402 	umull	r5, r4, r1, r2
 8007226:	b934      	cbnz	r4, 8007236 <_calloc_r+0x16>
 8007228:	4629      	mov	r1, r5
 800722a:	f7ff f99d 	bl	8006568 <_malloc_r>
 800722e:	4606      	mov	r6, r0
 8007230:	b928      	cbnz	r0, 800723e <_calloc_r+0x1e>
 8007232:	4630      	mov	r0, r6
 8007234:	bd70      	pop	{r4, r5, r6, pc}
 8007236:	220c      	movs	r2, #12
 8007238:	2600      	movs	r6, #0
 800723a:	6002      	str	r2, [r0, #0]
 800723c:	e7f9      	b.n	8007232 <_calloc_r+0x12>
 800723e:	462a      	mov	r2, r5
 8007240:	4621      	mov	r1, r4
 8007242:	f7fe fa24 	bl	800568e <memset>
 8007246:	e7f4      	b.n	8007232 <_calloc_r+0x12>

08007248 <__ascii_mbtowc>:
 8007248:	b082      	sub	sp, #8
 800724a:	b901      	cbnz	r1, 800724e <__ascii_mbtowc+0x6>
 800724c:	a901      	add	r1, sp, #4
 800724e:	b142      	cbz	r2, 8007262 <__ascii_mbtowc+0x1a>
 8007250:	b14b      	cbz	r3, 8007266 <__ascii_mbtowc+0x1e>
 8007252:	7813      	ldrb	r3, [r2, #0]
 8007254:	600b      	str	r3, [r1, #0]
 8007256:	7812      	ldrb	r2, [r2, #0]
 8007258:	1e10      	subs	r0, r2, #0
 800725a:	bf18      	it	ne
 800725c:	2001      	movne	r0, #1
 800725e:	b002      	add	sp, #8
 8007260:	4770      	bx	lr
 8007262:	4610      	mov	r0, r2
 8007264:	e7fb      	b.n	800725e <__ascii_mbtowc+0x16>
 8007266:	f06f 0001 	mvn.w	r0, #1
 800726a:	e7f8      	b.n	800725e <__ascii_mbtowc+0x16>

0800726c <_realloc_r>:
 800726c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007270:	4680      	mov	r8, r0
 8007272:	4614      	mov	r4, r2
 8007274:	460e      	mov	r6, r1
 8007276:	b921      	cbnz	r1, 8007282 <_realloc_r+0x16>
 8007278:	4611      	mov	r1, r2
 800727a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800727e:	f7ff b973 	b.w	8006568 <_malloc_r>
 8007282:	b92a      	cbnz	r2, 8007290 <_realloc_r+0x24>
 8007284:	f7ff f900 	bl	8006488 <_free_r>
 8007288:	4625      	mov	r5, r4
 800728a:	4628      	mov	r0, r5
 800728c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007290:	f000 f841 	bl	8007316 <_malloc_usable_size_r>
 8007294:	4284      	cmp	r4, r0
 8007296:	4607      	mov	r7, r0
 8007298:	d802      	bhi.n	80072a0 <_realloc_r+0x34>
 800729a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800729e:	d812      	bhi.n	80072c6 <_realloc_r+0x5a>
 80072a0:	4621      	mov	r1, r4
 80072a2:	4640      	mov	r0, r8
 80072a4:	f7ff f960 	bl	8006568 <_malloc_r>
 80072a8:	4605      	mov	r5, r0
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d0ed      	beq.n	800728a <_realloc_r+0x1e>
 80072ae:	42bc      	cmp	r4, r7
 80072b0:	4622      	mov	r2, r4
 80072b2:	4631      	mov	r1, r6
 80072b4:	bf28      	it	cs
 80072b6:	463a      	movcs	r2, r7
 80072b8:	f7ff ff86 	bl	80071c8 <memcpy>
 80072bc:	4631      	mov	r1, r6
 80072be:	4640      	mov	r0, r8
 80072c0:	f7ff f8e2 	bl	8006488 <_free_r>
 80072c4:	e7e1      	b.n	800728a <_realloc_r+0x1e>
 80072c6:	4635      	mov	r5, r6
 80072c8:	e7df      	b.n	800728a <_realloc_r+0x1e>

080072ca <__ascii_wctomb>:
 80072ca:	4603      	mov	r3, r0
 80072cc:	4608      	mov	r0, r1
 80072ce:	b141      	cbz	r1, 80072e2 <__ascii_wctomb+0x18>
 80072d0:	2aff      	cmp	r2, #255	; 0xff
 80072d2:	d904      	bls.n	80072de <__ascii_wctomb+0x14>
 80072d4:	228a      	movs	r2, #138	; 0x8a
 80072d6:	f04f 30ff 	mov.w	r0, #4294967295
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	4770      	bx	lr
 80072de:	2001      	movs	r0, #1
 80072e0:	700a      	strb	r2, [r1, #0]
 80072e2:	4770      	bx	lr

080072e4 <fiprintf>:
 80072e4:	b40e      	push	{r1, r2, r3}
 80072e6:	b503      	push	{r0, r1, lr}
 80072e8:	4601      	mov	r1, r0
 80072ea:	ab03      	add	r3, sp, #12
 80072ec:	4805      	ldr	r0, [pc, #20]	; (8007304 <fiprintf+0x20>)
 80072ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80072f2:	6800      	ldr	r0, [r0, #0]
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	f000 f83d 	bl	8007374 <_vfiprintf_r>
 80072fa:	b002      	add	sp, #8
 80072fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007300:	b003      	add	sp, #12
 8007302:	4770      	bx	lr
 8007304:	20000068 	.word	0x20000068

08007308 <abort>:
 8007308:	2006      	movs	r0, #6
 800730a:	b508      	push	{r3, lr}
 800730c:	f000 fa0a 	bl	8007724 <raise>
 8007310:	2001      	movs	r0, #1
 8007312:	f7fa fa32 	bl	800177a <_exit>

08007316 <_malloc_usable_size_r>:
 8007316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800731a:	1f18      	subs	r0, r3, #4
 800731c:	2b00      	cmp	r3, #0
 800731e:	bfbc      	itt	lt
 8007320:	580b      	ldrlt	r3, [r1, r0]
 8007322:	18c0      	addlt	r0, r0, r3
 8007324:	4770      	bx	lr

08007326 <__sfputc_r>:
 8007326:	6893      	ldr	r3, [r2, #8]
 8007328:	b410      	push	{r4}
 800732a:	3b01      	subs	r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	6093      	str	r3, [r2, #8]
 8007330:	da07      	bge.n	8007342 <__sfputc_r+0x1c>
 8007332:	6994      	ldr	r4, [r2, #24]
 8007334:	42a3      	cmp	r3, r4
 8007336:	db01      	blt.n	800733c <__sfputc_r+0x16>
 8007338:	290a      	cmp	r1, #10
 800733a:	d102      	bne.n	8007342 <__sfputc_r+0x1c>
 800733c:	bc10      	pop	{r4}
 800733e:	f000 b933 	b.w	80075a8 <__swbuf_r>
 8007342:	6813      	ldr	r3, [r2, #0]
 8007344:	1c58      	adds	r0, r3, #1
 8007346:	6010      	str	r0, [r2, #0]
 8007348:	7019      	strb	r1, [r3, #0]
 800734a:	4608      	mov	r0, r1
 800734c:	bc10      	pop	{r4}
 800734e:	4770      	bx	lr

08007350 <__sfputs_r>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	4606      	mov	r6, r0
 8007354:	460f      	mov	r7, r1
 8007356:	4614      	mov	r4, r2
 8007358:	18d5      	adds	r5, r2, r3
 800735a:	42ac      	cmp	r4, r5
 800735c:	d101      	bne.n	8007362 <__sfputs_r+0x12>
 800735e:	2000      	movs	r0, #0
 8007360:	e007      	b.n	8007372 <__sfputs_r+0x22>
 8007362:	463a      	mov	r2, r7
 8007364:	4630      	mov	r0, r6
 8007366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800736a:	f7ff ffdc 	bl	8007326 <__sfputc_r>
 800736e:	1c43      	adds	r3, r0, #1
 8007370:	d1f3      	bne.n	800735a <__sfputs_r+0xa>
 8007372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007374 <_vfiprintf_r>:
 8007374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007378:	460d      	mov	r5, r1
 800737a:	4614      	mov	r4, r2
 800737c:	4698      	mov	r8, r3
 800737e:	4606      	mov	r6, r0
 8007380:	b09d      	sub	sp, #116	; 0x74
 8007382:	b118      	cbz	r0, 800738c <_vfiprintf_r+0x18>
 8007384:	6a03      	ldr	r3, [r0, #32]
 8007386:	b90b      	cbnz	r3, 800738c <_vfiprintf_r+0x18>
 8007388:	f7fe f8d4 	bl	8005534 <__sinit>
 800738c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800738e:	07d9      	lsls	r1, r3, #31
 8007390:	d405      	bmi.n	800739e <_vfiprintf_r+0x2a>
 8007392:	89ab      	ldrh	r3, [r5, #12]
 8007394:	059a      	lsls	r2, r3, #22
 8007396:	d402      	bmi.n	800739e <_vfiprintf_r+0x2a>
 8007398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800739a:	f7fe f9f6 	bl	800578a <__retarget_lock_acquire_recursive>
 800739e:	89ab      	ldrh	r3, [r5, #12]
 80073a0:	071b      	lsls	r3, r3, #28
 80073a2:	d501      	bpl.n	80073a8 <_vfiprintf_r+0x34>
 80073a4:	692b      	ldr	r3, [r5, #16]
 80073a6:	b99b      	cbnz	r3, 80073d0 <_vfiprintf_r+0x5c>
 80073a8:	4629      	mov	r1, r5
 80073aa:	4630      	mov	r0, r6
 80073ac:	f000 f93a 	bl	8007624 <__swsetup_r>
 80073b0:	b170      	cbz	r0, 80073d0 <_vfiprintf_r+0x5c>
 80073b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073b4:	07dc      	lsls	r4, r3, #31
 80073b6:	d504      	bpl.n	80073c2 <_vfiprintf_r+0x4e>
 80073b8:	f04f 30ff 	mov.w	r0, #4294967295
 80073bc:	b01d      	add	sp, #116	; 0x74
 80073be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c2:	89ab      	ldrh	r3, [r5, #12]
 80073c4:	0598      	lsls	r0, r3, #22
 80073c6:	d4f7      	bmi.n	80073b8 <_vfiprintf_r+0x44>
 80073c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073ca:	f7fe f9df 	bl	800578c <__retarget_lock_release_recursive>
 80073ce:	e7f3      	b.n	80073b8 <_vfiprintf_r+0x44>
 80073d0:	2300      	movs	r3, #0
 80073d2:	9309      	str	r3, [sp, #36]	; 0x24
 80073d4:	2320      	movs	r3, #32
 80073d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073da:	2330      	movs	r3, #48	; 0x30
 80073dc:	f04f 0901 	mov.w	r9, #1
 80073e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80073e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007594 <_vfiprintf_r+0x220>
 80073e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073ec:	4623      	mov	r3, r4
 80073ee:	469a      	mov	sl, r3
 80073f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073f4:	b10a      	cbz	r2, 80073fa <_vfiprintf_r+0x86>
 80073f6:	2a25      	cmp	r2, #37	; 0x25
 80073f8:	d1f9      	bne.n	80073ee <_vfiprintf_r+0x7a>
 80073fa:	ebba 0b04 	subs.w	fp, sl, r4
 80073fe:	d00b      	beq.n	8007418 <_vfiprintf_r+0xa4>
 8007400:	465b      	mov	r3, fp
 8007402:	4622      	mov	r2, r4
 8007404:	4629      	mov	r1, r5
 8007406:	4630      	mov	r0, r6
 8007408:	f7ff ffa2 	bl	8007350 <__sfputs_r>
 800740c:	3001      	adds	r0, #1
 800740e:	f000 80a9 	beq.w	8007564 <_vfiprintf_r+0x1f0>
 8007412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007414:	445a      	add	r2, fp
 8007416:	9209      	str	r2, [sp, #36]	; 0x24
 8007418:	f89a 3000 	ldrb.w	r3, [sl]
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 80a1 	beq.w	8007564 <_vfiprintf_r+0x1f0>
 8007422:	2300      	movs	r3, #0
 8007424:	f04f 32ff 	mov.w	r2, #4294967295
 8007428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800742c:	f10a 0a01 	add.w	sl, sl, #1
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	9307      	str	r3, [sp, #28]
 8007434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007438:	931a      	str	r3, [sp, #104]	; 0x68
 800743a:	4654      	mov	r4, sl
 800743c:	2205      	movs	r2, #5
 800743e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007442:	4854      	ldr	r0, [pc, #336]	; (8007594 <_vfiprintf_r+0x220>)
 8007444:	f7fe f9a3 	bl	800578e <memchr>
 8007448:	9a04      	ldr	r2, [sp, #16]
 800744a:	b9d8      	cbnz	r0, 8007484 <_vfiprintf_r+0x110>
 800744c:	06d1      	lsls	r1, r2, #27
 800744e:	bf44      	itt	mi
 8007450:	2320      	movmi	r3, #32
 8007452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007456:	0713      	lsls	r3, r2, #28
 8007458:	bf44      	itt	mi
 800745a:	232b      	movmi	r3, #43	; 0x2b
 800745c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007460:	f89a 3000 	ldrb.w	r3, [sl]
 8007464:	2b2a      	cmp	r3, #42	; 0x2a
 8007466:	d015      	beq.n	8007494 <_vfiprintf_r+0x120>
 8007468:	4654      	mov	r4, sl
 800746a:	2000      	movs	r0, #0
 800746c:	f04f 0c0a 	mov.w	ip, #10
 8007470:	9a07      	ldr	r2, [sp, #28]
 8007472:	4621      	mov	r1, r4
 8007474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007478:	3b30      	subs	r3, #48	; 0x30
 800747a:	2b09      	cmp	r3, #9
 800747c:	d94d      	bls.n	800751a <_vfiprintf_r+0x1a6>
 800747e:	b1b0      	cbz	r0, 80074ae <_vfiprintf_r+0x13a>
 8007480:	9207      	str	r2, [sp, #28]
 8007482:	e014      	b.n	80074ae <_vfiprintf_r+0x13a>
 8007484:	eba0 0308 	sub.w	r3, r0, r8
 8007488:	fa09 f303 	lsl.w	r3, r9, r3
 800748c:	4313      	orrs	r3, r2
 800748e:	46a2      	mov	sl, r4
 8007490:	9304      	str	r3, [sp, #16]
 8007492:	e7d2      	b.n	800743a <_vfiprintf_r+0xc6>
 8007494:	9b03      	ldr	r3, [sp, #12]
 8007496:	1d19      	adds	r1, r3, #4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	9103      	str	r1, [sp, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	bfbb      	ittet	lt
 80074a0:	425b      	neglt	r3, r3
 80074a2:	f042 0202 	orrlt.w	r2, r2, #2
 80074a6:	9307      	strge	r3, [sp, #28]
 80074a8:	9307      	strlt	r3, [sp, #28]
 80074aa:	bfb8      	it	lt
 80074ac:	9204      	strlt	r2, [sp, #16]
 80074ae:	7823      	ldrb	r3, [r4, #0]
 80074b0:	2b2e      	cmp	r3, #46	; 0x2e
 80074b2:	d10c      	bne.n	80074ce <_vfiprintf_r+0x15a>
 80074b4:	7863      	ldrb	r3, [r4, #1]
 80074b6:	2b2a      	cmp	r3, #42	; 0x2a
 80074b8:	d134      	bne.n	8007524 <_vfiprintf_r+0x1b0>
 80074ba:	9b03      	ldr	r3, [sp, #12]
 80074bc:	3402      	adds	r4, #2
 80074be:	1d1a      	adds	r2, r3, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	9203      	str	r2, [sp, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bfb8      	it	lt
 80074c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80074cc:	9305      	str	r3, [sp, #20]
 80074ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007598 <_vfiprintf_r+0x224>
 80074d2:	2203      	movs	r2, #3
 80074d4:	4650      	mov	r0, sl
 80074d6:	7821      	ldrb	r1, [r4, #0]
 80074d8:	f7fe f959 	bl	800578e <memchr>
 80074dc:	b138      	cbz	r0, 80074ee <_vfiprintf_r+0x17a>
 80074de:	2240      	movs	r2, #64	; 0x40
 80074e0:	9b04      	ldr	r3, [sp, #16]
 80074e2:	eba0 000a 	sub.w	r0, r0, sl
 80074e6:	4082      	lsls	r2, r0
 80074e8:	4313      	orrs	r3, r2
 80074ea:	3401      	adds	r4, #1
 80074ec:	9304      	str	r3, [sp, #16]
 80074ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f2:	2206      	movs	r2, #6
 80074f4:	4829      	ldr	r0, [pc, #164]	; (800759c <_vfiprintf_r+0x228>)
 80074f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074fa:	f7fe f948 	bl	800578e <memchr>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d03f      	beq.n	8007582 <_vfiprintf_r+0x20e>
 8007502:	4b27      	ldr	r3, [pc, #156]	; (80075a0 <_vfiprintf_r+0x22c>)
 8007504:	bb1b      	cbnz	r3, 800754e <_vfiprintf_r+0x1da>
 8007506:	9b03      	ldr	r3, [sp, #12]
 8007508:	3307      	adds	r3, #7
 800750a:	f023 0307 	bic.w	r3, r3, #7
 800750e:	3308      	adds	r3, #8
 8007510:	9303      	str	r3, [sp, #12]
 8007512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007514:	443b      	add	r3, r7
 8007516:	9309      	str	r3, [sp, #36]	; 0x24
 8007518:	e768      	b.n	80073ec <_vfiprintf_r+0x78>
 800751a:	460c      	mov	r4, r1
 800751c:	2001      	movs	r0, #1
 800751e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007522:	e7a6      	b.n	8007472 <_vfiprintf_r+0xfe>
 8007524:	2300      	movs	r3, #0
 8007526:	f04f 0c0a 	mov.w	ip, #10
 800752a:	4619      	mov	r1, r3
 800752c:	3401      	adds	r4, #1
 800752e:	9305      	str	r3, [sp, #20]
 8007530:	4620      	mov	r0, r4
 8007532:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007536:	3a30      	subs	r2, #48	; 0x30
 8007538:	2a09      	cmp	r2, #9
 800753a:	d903      	bls.n	8007544 <_vfiprintf_r+0x1d0>
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0c6      	beq.n	80074ce <_vfiprintf_r+0x15a>
 8007540:	9105      	str	r1, [sp, #20]
 8007542:	e7c4      	b.n	80074ce <_vfiprintf_r+0x15a>
 8007544:	4604      	mov	r4, r0
 8007546:	2301      	movs	r3, #1
 8007548:	fb0c 2101 	mla	r1, ip, r1, r2
 800754c:	e7f0      	b.n	8007530 <_vfiprintf_r+0x1bc>
 800754e:	ab03      	add	r3, sp, #12
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	462a      	mov	r2, r5
 8007554:	4630      	mov	r0, r6
 8007556:	4b13      	ldr	r3, [pc, #76]	; (80075a4 <_vfiprintf_r+0x230>)
 8007558:	a904      	add	r1, sp, #16
 800755a:	f7fd fb9d 	bl	8004c98 <_printf_float>
 800755e:	4607      	mov	r7, r0
 8007560:	1c78      	adds	r0, r7, #1
 8007562:	d1d6      	bne.n	8007512 <_vfiprintf_r+0x19e>
 8007564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007566:	07d9      	lsls	r1, r3, #31
 8007568:	d405      	bmi.n	8007576 <_vfiprintf_r+0x202>
 800756a:	89ab      	ldrh	r3, [r5, #12]
 800756c:	059a      	lsls	r2, r3, #22
 800756e:	d402      	bmi.n	8007576 <_vfiprintf_r+0x202>
 8007570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007572:	f7fe f90b 	bl	800578c <__retarget_lock_release_recursive>
 8007576:	89ab      	ldrh	r3, [r5, #12]
 8007578:	065b      	lsls	r3, r3, #25
 800757a:	f53f af1d 	bmi.w	80073b8 <_vfiprintf_r+0x44>
 800757e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007580:	e71c      	b.n	80073bc <_vfiprintf_r+0x48>
 8007582:	ab03      	add	r3, sp, #12
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	462a      	mov	r2, r5
 8007588:	4630      	mov	r0, r6
 800758a:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <_vfiprintf_r+0x230>)
 800758c:	a904      	add	r1, sp, #16
 800758e:	f7fd fe23 	bl	80051d8 <_printf_i>
 8007592:	e7e4      	b.n	800755e <_vfiprintf_r+0x1ea>
 8007594:	08007b04 	.word	0x08007b04
 8007598:	08007b0a 	.word	0x08007b0a
 800759c:	08007b0e 	.word	0x08007b0e
 80075a0:	08004c99 	.word	0x08004c99
 80075a4:	08007351 	.word	0x08007351

080075a8 <__swbuf_r>:
 80075a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075aa:	460e      	mov	r6, r1
 80075ac:	4614      	mov	r4, r2
 80075ae:	4605      	mov	r5, r0
 80075b0:	b118      	cbz	r0, 80075ba <__swbuf_r+0x12>
 80075b2:	6a03      	ldr	r3, [r0, #32]
 80075b4:	b90b      	cbnz	r3, 80075ba <__swbuf_r+0x12>
 80075b6:	f7fd ffbd 	bl	8005534 <__sinit>
 80075ba:	69a3      	ldr	r3, [r4, #24]
 80075bc:	60a3      	str	r3, [r4, #8]
 80075be:	89a3      	ldrh	r3, [r4, #12]
 80075c0:	071a      	lsls	r2, r3, #28
 80075c2:	d525      	bpl.n	8007610 <__swbuf_r+0x68>
 80075c4:	6923      	ldr	r3, [r4, #16]
 80075c6:	b31b      	cbz	r3, 8007610 <__swbuf_r+0x68>
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	6922      	ldr	r2, [r4, #16]
 80075cc:	b2f6      	uxtb	r6, r6
 80075ce:	1a98      	subs	r0, r3, r2
 80075d0:	6963      	ldr	r3, [r4, #20]
 80075d2:	4637      	mov	r7, r6
 80075d4:	4283      	cmp	r3, r0
 80075d6:	dc04      	bgt.n	80075e2 <__swbuf_r+0x3a>
 80075d8:	4621      	mov	r1, r4
 80075da:	4628      	mov	r0, r5
 80075dc:	f7ff fda2 	bl	8007124 <_fflush_r>
 80075e0:	b9e0      	cbnz	r0, 800761c <__swbuf_r+0x74>
 80075e2:	68a3      	ldr	r3, [r4, #8]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	60a3      	str	r3, [r4, #8]
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	6022      	str	r2, [r4, #0]
 80075ee:	701e      	strb	r6, [r3, #0]
 80075f0:	6962      	ldr	r2, [r4, #20]
 80075f2:	1c43      	adds	r3, r0, #1
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d004      	beq.n	8007602 <__swbuf_r+0x5a>
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	07db      	lsls	r3, r3, #31
 80075fc:	d506      	bpl.n	800760c <__swbuf_r+0x64>
 80075fe:	2e0a      	cmp	r6, #10
 8007600:	d104      	bne.n	800760c <__swbuf_r+0x64>
 8007602:	4621      	mov	r1, r4
 8007604:	4628      	mov	r0, r5
 8007606:	f7ff fd8d 	bl	8007124 <_fflush_r>
 800760a:	b938      	cbnz	r0, 800761c <__swbuf_r+0x74>
 800760c:	4638      	mov	r0, r7
 800760e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007610:	4621      	mov	r1, r4
 8007612:	4628      	mov	r0, r5
 8007614:	f000 f806 	bl	8007624 <__swsetup_r>
 8007618:	2800      	cmp	r0, #0
 800761a:	d0d5      	beq.n	80075c8 <__swbuf_r+0x20>
 800761c:	f04f 37ff 	mov.w	r7, #4294967295
 8007620:	e7f4      	b.n	800760c <__swbuf_r+0x64>
	...

08007624 <__swsetup_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	4b2a      	ldr	r3, [pc, #168]	; (80076d0 <__swsetup_r+0xac>)
 8007628:	4605      	mov	r5, r0
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	460c      	mov	r4, r1
 800762e:	b118      	cbz	r0, 8007638 <__swsetup_r+0x14>
 8007630:	6a03      	ldr	r3, [r0, #32]
 8007632:	b90b      	cbnz	r3, 8007638 <__swsetup_r+0x14>
 8007634:	f7fd ff7e 	bl	8005534 <__sinit>
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800763e:	0718      	lsls	r0, r3, #28
 8007640:	d422      	bmi.n	8007688 <__swsetup_r+0x64>
 8007642:	06d9      	lsls	r1, r3, #27
 8007644:	d407      	bmi.n	8007656 <__swsetup_r+0x32>
 8007646:	2309      	movs	r3, #9
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800764e:	f04f 30ff 	mov.w	r0, #4294967295
 8007652:	81a3      	strh	r3, [r4, #12]
 8007654:	e034      	b.n	80076c0 <__swsetup_r+0x9c>
 8007656:	0758      	lsls	r0, r3, #29
 8007658:	d512      	bpl.n	8007680 <__swsetup_r+0x5c>
 800765a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800765c:	b141      	cbz	r1, 8007670 <__swsetup_r+0x4c>
 800765e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007662:	4299      	cmp	r1, r3
 8007664:	d002      	beq.n	800766c <__swsetup_r+0x48>
 8007666:	4628      	mov	r0, r5
 8007668:	f7fe ff0e 	bl	8006488 <_free_r>
 800766c:	2300      	movs	r3, #0
 800766e:	6363      	str	r3, [r4, #52]	; 0x34
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007676:	81a3      	strh	r3, [r4, #12]
 8007678:	2300      	movs	r3, #0
 800767a:	6063      	str	r3, [r4, #4]
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	6023      	str	r3, [r4, #0]
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	f043 0308 	orr.w	r3, r3, #8
 8007686:	81a3      	strh	r3, [r4, #12]
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	b94b      	cbnz	r3, 80076a0 <__swsetup_r+0x7c>
 800768c:	89a3      	ldrh	r3, [r4, #12]
 800768e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007696:	d003      	beq.n	80076a0 <__swsetup_r+0x7c>
 8007698:	4621      	mov	r1, r4
 800769a:	4628      	mov	r0, r5
 800769c:	f000 f883 	bl	80077a6 <__smakebuf_r>
 80076a0:	89a0      	ldrh	r0, [r4, #12]
 80076a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076a6:	f010 0301 	ands.w	r3, r0, #1
 80076aa:	d00a      	beq.n	80076c2 <__swsetup_r+0x9e>
 80076ac:	2300      	movs	r3, #0
 80076ae:	60a3      	str	r3, [r4, #8]
 80076b0:	6963      	ldr	r3, [r4, #20]
 80076b2:	425b      	negs	r3, r3
 80076b4:	61a3      	str	r3, [r4, #24]
 80076b6:	6923      	ldr	r3, [r4, #16]
 80076b8:	b943      	cbnz	r3, 80076cc <__swsetup_r+0xa8>
 80076ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076be:	d1c4      	bne.n	800764a <__swsetup_r+0x26>
 80076c0:	bd38      	pop	{r3, r4, r5, pc}
 80076c2:	0781      	lsls	r1, r0, #30
 80076c4:	bf58      	it	pl
 80076c6:	6963      	ldrpl	r3, [r4, #20]
 80076c8:	60a3      	str	r3, [r4, #8]
 80076ca:	e7f4      	b.n	80076b6 <__swsetup_r+0x92>
 80076cc:	2000      	movs	r0, #0
 80076ce:	e7f7      	b.n	80076c0 <__swsetup_r+0x9c>
 80076d0:	20000068 	.word	0x20000068

080076d4 <_raise_r>:
 80076d4:	291f      	cmp	r1, #31
 80076d6:	b538      	push	{r3, r4, r5, lr}
 80076d8:	4604      	mov	r4, r0
 80076da:	460d      	mov	r5, r1
 80076dc:	d904      	bls.n	80076e8 <_raise_r+0x14>
 80076de:	2316      	movs	r3, #22
 80076e0:	6003      	str	r3, [r0, #0]
 80076e2:	f04f 30ff 	mov.w	r0, #4294967295
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80076ea:	b112      	cbz	r2, 80076f2 <_raise_r+0x1e>
 80076ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076f0:	b94b      	cbnz	r3, 8007706 <_raise_r+0x32>
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 f830 	bl	8007758 <_getpid_r>
 80076f8:	462a      	mov	r2, r5
 80076fa:	4601      	mov	r1, r0
 80076fc:	4620      	mov	r0, r4
 80076fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007702:	f000 b817 	b.w	8007734 <_kill_r>
 8007706:	2b01      	cmp	r3, #1
 8007708:	d00a      	beq.n	8007720 <_raise_r+0x4c>
 800770a:	1c59      	adds	r1, r3, #1
 800770c:	d103      	bne.n	8007716 <_raise_r+0x42>
 800770e:	2316      	movs	r3, #22
 8007710:	6003      	str	r3, [r0, #0]
 8007712:	2001      	movs	r0, #1
 8007714:	e7e7      	b.n	80076e6 <_raise_r+0x12>
 8007716:	2400      	movs	r4, #0
 8007718:	4628      	mov	r0, r5
 800771a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800771e:	4798      	blx	r3
 8007720:	2000      	movs	r0, #0
 8007722:	e7e0      	b.n	80076e6 <_raise_r+0x12>

08007724 <raise>:
 8007724:	4b02      	ldr	r3, [pc, #8]	; (8007730 <raise+0xc>)
 8007726:	4601      	mov	r1, r0
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	f7ff bfd3 	b.w	80076d4 <_raise_r>
 800772e:	bf00      	nop
 8007730:	20000068 	.word	0x20000068

08007734 <_kill_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	2300      	movs	r3, #0
 8007738:	4d06      	ldr	r5, [pc, #24]	; (8007754 <_kill_r+0x20>)
 800773a:	4604      	mov	r4, r0
 800773c:	4608      	mov	r0, r1
 800773e:	4611      	mov	r1, r2
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	f7fa f80a 	bl	800175a <_kill>
 8007746:	1c43      	adds	r3, r0, #1
 8007748:	d102      	bne.n	8007750 <_kill_r+0x1c>
 800774a:	682b      	ldr	r3, [r5, #0]
 800774c:	b103      	cbz	r3, 8007750 <_kill_r+0x1c>
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	bd38      	pop	{r3, r4, r5, pc}
 8007752:	bf00      	nop
 8007754:	20000484 	.word	0x20000484

08007758 <_getpid_r>:
 8007758:	f7f9 bff8 	b.w	800174c <_getpid>

0800775c <__swhatbuf_r>:
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	460c      	mov	r4, r1
 8007760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007764:	4615      	mov	r5, r2
 8007766:	2900      	cmp	r1, #0
 8007768:	461e      	mov	r6, r3
 800776a:	b096      	sub	sp, #88	; 0x58
 800776c:	da0c      	bge.n	8007788 <__swhatbuf_r+0x2c>
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	2100      	movs	r1, #0
 8007772:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007776:	bf0c      	ite	eq
 8007778:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800777c:	2340      	movne	r3, #64	; 0x40
 800777e:	2000      	movs	r0, #0
 8007780:	6031      	str	r1, [r6, #0]
 8007782:	602b      	str	r3, [r5, #0]
 8007784:	b016      	add	sp, #88	; 0x58
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	466a      	mov	r2, sp
 800778a:	f000 f849 	bl	8007820 <_fstat_r>
 800778e:	2800      	cmp	r0, #0
 8007790:	dbed      	blt.n	800776e <__swhatbuf_r+0x12>
 8007792:	9901      	ldr	r1, [sp, #4]
 8007794:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007798:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800779c:	4259      	negs	r1, r3
 800779e:	4159      	adcs	r1, r3
 80077a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077a4:	e7eb      	b.n	800777e <__swhatbuf_r+0x22>

080077a6 <__smakebuf_r>:
 80077a6:	898b      	ldrh	r3, [r1, #12]
 80077a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077aa:	079d      	lsls	r5, r3, #30
 80077ac:	4606      	mov	r6, r0
 80077ae:	460c      	mov	r4, r1
 80077b0:	d507      	bpl.n	80077c2 <__smakebuf_r+0x1c>
 80077b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077b6:	6023      	str	r3, [r4, #0]
 80077b8:	6123      	str	r3, [r4, #16]
 80077ba:	2301      	movs	r3, #1
 80077bc:	6163      	str	r3, [r4, #20]
 80077be:	b002      	add	sp, #8
 80077c0:	bd70      	pop	{r4, r5, r6, pc}
 80077c2:	466a      	mov	r2, sp
 80077c4:	ab01      	add	r3, sp, #4
 80077c6:	f7ff ffc9 	bl	800775c <__swhatbuf_r>
 80077ca:	9900      	ldr	r1, [sp, #0]
 80077cc:	4605      	mov	r5, r0
 80077ce:	4630      	mov	r0, r6
 80077d0:	f7fe feca 	bl	8006568 <_malloc_r>
 80077d4:	b948      	cbnz	r0, 80077ea <__smakebuf_r+0x44>
 80077d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077da:	059a      	lsls	r2, r3, #22
 80077dc:	d4ef      	bmi.n	80077be <__smakebuf_r+0x18>
 80077de:	f023 0303 	bic.w	r3, r3, #3
 80077e2:	f043 0302 	orr.w	r3, r3, #2
 80077e6:	81a3      	strh	r3, [r4, #12]
 80077e8:	e7e3      	b.n	80077b2 <__smakebuf_r+0xc>
 80077ea:	89a3      	ldrh	r3, [r4, #12]
 80077ec:	6020      	str	r0, [r4, #0]
 80077ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f2:	81a3      	strh	r3, [r4, #12]
 80077f4:	9b00      	ldr	r3, [sp, #0]
 80077f6:	6120      	str	r0, [r4, #16]
 80077f8:	6163      	str	r3, [r4, #20]
 80077fa:	9b01      	ldr	r3, [sp, #4]
 80077fc:	b15b      	cbz	r3, 8007816 <__smakebuf_r+0x70>
 80077fe:	4630      	mov	r0, r6
 8007800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007804:	f000 f81e 	bl	8007844 <_isatty_r>
 8007808:	b128      	cbz	r0, 8007816 <__smakebuf_r+0x70>
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	f023 0303 	bic.w	r3, r3, #3
 8007810:	f043 0301 	orr.w	r3, r3, #1
 8007814:	81a3      	strh	r3, [r4, #12]
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	431d      	orrs	r5, r3
 800781a:	81a5      	strh	r5, [r4, #12]
 800781c:	e7cf      	b.n	80077be <__smakebuf_r+0x18>
	...

08007820 <_fstat_r>:
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	2300      	movs	r3, #0
 8007824:	4d06      	ldr	r5, [pc, #24]	; (8007840 <_fstat_r+0x20>)
 8007826:	4604      	mov	r4, r0
 8007828:	4608      	mov	r0, r1
 800782a:	4611      	mov	r1, r2
 800782c:	602b      	str	r3, [r5, #0]
 800782e:	f7f9 fff2 	bl	8001816 <_fstat>
 8007832:	1c43      	adds	r3, r0, #1
 8007834:	d102      	bne.n	800783c <_fstat_r+0x1c>
 8007836:	682b      	ldr	r3, [r5, #0]
 8007838:	b103      	cbz	r3, 800783c <_fstat_r+0x1c>
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	bd38      	pop	{r3, r4, r5, pc}
 800783e:	bf00      	nop
 8007840:	20000484 	.word	0x20000484

08007844 <_isatty_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	2300      	movs	r3, #0
 8007848:	4d05      	ldr	r5, [pc, #20]	; (8007860 <_isatty_r+0x1c>)
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	f7f9 fff0 	bl	8001834 <_isatty>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d102      	bne.n	800785e <_isatty_r+0x1a>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	b103      	cbz	r3, 800785e <_isatty_r+0x1a>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	20000484 	.word	0x20000484

08007864 <_init>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	bf00      	nop
 8007868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786a:	bc08      	pop	{r3}
 800786c:	469e      	mov	lr, r3
 800786e:	4770      	bx	lr

08007870 <_fini>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	bf00      	nop
 8007874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007876:	bc08      	pop	{r3}
 8007878:	469e      	mov	lr, r3
 800787a:	4770      	bx	lr
