
lego_pf_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bfc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08007d10  08007d10  00017d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080ec  080080ec  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  080080ec  080080ec  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080ec  080080ec  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080080f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200001fc  080082f0  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  080082f0  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce51  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e83  00000000  00000000  0002d0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  0002ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a91  00000000  00000000  0002fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001873d  00000000  00000000  00030759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e821  00000000  00000000  00048e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c515  00000000  00000000  000576b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049c8  00000000  00000000  000e3bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e8594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007cf4 	.word	0x08007cf4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	08007cf4 	.word	0x08007cf4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <led_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void led_init(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	char str1[7] = "\nINIT;\n";
 8000a8e:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <led_init+0x4c>)
 8000a90:	463b      	mov	r3, r7
 8000a92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a96:	6018      	str	r0, [r3, #0]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	8019      	strh	r1, [r3, #0]
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	0c0a      	lsrs	r2, r1, #16
 8000aa0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 1000);
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fb53 	bl	8000150 <strlen>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	4639      	mov	r1, r7
 8000ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <led_init+0x50>)
 8000ab6:	f003 fc49 	bl	800434c <HAL_UART_Transmit>

    all_led_on();
 8000aba:	f000 f80f 	bl	8000adc <all_led_on>
    HAL_Delay(1000);
 8000abe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac2:	f001 f9c3 	bl	8001e4c <HAL_Delay>
    all_led_off();
 8000ac6:	f000 f82b 	bl	8000b20 <all_led_off>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	08007d10 	.word	0x08007d10
 8000ad8:	200002f0 	.word	0x200002f0

08000adc <all_led_on>:

void all_led_on(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET); //revers t.k pc13
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <all_led_on+0x3c>)
 8000ae8:	f001 fd2f 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2102      	movs	r1, #2
 8000af0:	480a      	ldr	r0, [pc, #40]	; (8000b1c <all_led_on+0x40>)
 8000af2:	f001 fd2a 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2108      	movs	r1, #8
 8000afa:	4808      	ldr	r0, [pc, #32]	; (8000b1c <all_led_on+0x40>)
 8000afc:	f001 fd25 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2120      	movs	r1, #32
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <all_led_on+0x40>)
 8000b06:	f001 fd20 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2140      	movs	r1, #64	; 0x40
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <all_led_on+0x40>)
 8000b10:	f001 fd1b 	bl	800254a <HAL_GPIO_WritePin>
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40011000 	.word	0x40011000
 8000b1c:	40010800 	.word	0x40010800

08000b20 <all_led_off>:

void all_led_off(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET); //revers t.k pc13
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2a:	480c      	ldr	r0, [pc, #48]	; (8000b5c <all_led_off+0x3c>)
 8000b2c:	f001 fd0d 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2102      	movs	r1, #2
 8000b34:	480a      	ldr	r0, [pc, #40]	; (8000b60 <all_led_off+0x40>)
 8000b36:	f001 fd08 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	4808      	ldr	r0, [pc, #32]	; (8000b60 <all_led_off+0x40>)
 8000b40:	f001 fd03 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2120      	movs	r1, #32
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <all_led_off+0x40>)
 8000b4a:	f001 fcfe 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4803      	ldr	r0, [pc, #12]	; (8000b60 <all_led_off+0x40>)
 8000b54:	f001 fcf9 	bl	800254a <HAL_GPIO_WritePin>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40011000 	.word	0x40011000
 8000b60:	40010800 	.word	0x40010800

08000b64 <driver_motor1_ports_init>:

void driver_motor1_ports_init() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	480a      	ldr	r0, [pc, #40]	; (8000b94 <driver_motor1_ports_init+0x30>)
 8000b6c:	f002 f9e0 	bl	8002f30 <HAL_TIM_PWM_Start>
	  HAL_GPIO_WritePin(an1_GPIO_Port, an1_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2120      	movs	r1, #32
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <driver_motor1_ports_init+0x34>)
 8000b76:	f001 fce8 	bl	800254a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(an2_GPIO_Port, an2_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <driver_motor1_ports_init+0x34>)
 8000b80:	f001 fce3 	bl	800254a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2108      	movs	r1, #8
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <driver_motor1_ports_init+0x34>)
 8000b8a:	f001 fcde 	bl	800254a <HAL_GPIO_WritePin>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200002a8 	.word	0x200002a8
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <tim1_for_motor1_ports_init>:

void tim1_for_motor1_ports_init() {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <tim1_for_motor1_ports_init+0x28>)
 8000ba4:	f002 fabe 	bl	8003124 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000ba8:	2104      	movs	r1, #4
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <tim1_for_motor1_ports_init+0x28>)
 8000bac:	f002 faba 	bl	8003124 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <tim1_for_motor1_ports_init+0x28>)
 8000bb4:	f002 fab6 	bl	8003124 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000bb8:	210c      	movs	r1, #12
 8000bba:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <tim1_for_motor1_ports_init+0x28>)
 8000bbc:	f002 fab2 	bl	8003124 <HAL_TIM_IC_Start_IT>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000218 	.word	0x20000218

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f001 f8dc 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f816 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f000 fa36 	bl	8001044 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000bd8:	f000 f858 	bl	8000c8c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bdc:	f000 f8f6 	bl	8000dcc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000be0:	f000 fa06 	bl	8000ff0 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000be4:	f000 f98e 	bl	8000f04 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  led_init();
 8000be8:	f7ff ff4e 	bl	8000a88 <led_init>
  driver_motor1_ports_init();
 8000bec:	f7ff ffba 	bl	8000b64 <driver_motor1_ports_init>
  tim1_for_motor1_ports_init();
 8000bf0:	f7ff ffd4 	bl	8000b9c <tim1_for_motor1_ports_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  hnd_state_for_motor1();
 8000bf4:	f000 fb1c 	bl	8001230 <hnd_state_for_motor1>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //button_hnd();
	  HAL_Delay(2);
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f001 f927 	bl	8001e4c <HAL_Delay>
	  hnd_state_for_motor1();
 8000bfe:	e7f9      	b.n	8000bf4 <main+0x2c>

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	; 0x40
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f004 ff87 	bl	8005b22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c30:	2301      	movs	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c34:	2302      	movs	r3, #2
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c3e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f001 fcb9 	bl	80025c0 <HAL_RCC_OscConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c54:	f000 fe12 	bl	800187c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c58:	230f      	movs	r3, #15
 8000c5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2102      	movs	r1, #2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 ff26 	bl	8002ac4 <HAL_RCC_ClockConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c7e:	f000 fdfd 	bl	800187c <Error_Handler>
  }
}
 8000c82:	bf00      	nop
 8000c84:	3740      	adds	r7, #64	; 0x40
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c92:	f107 0318 	add.w	r3, r7, #24
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000caa:	463b      	mov	r3, r7
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cb6:	4b43      	ldr	r3, [pc, #268]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000cb8:	4a43      	ldr	r2, [pc, #268]	; (8000dc8 <MX_TIM1_Init+0x13c>)
 8000cba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000cbc:	4b41      	ldr	r3, [pc, #260]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000cbe:	2247      	movs	r2, #71	; 0x47
 8000cc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc2:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000-1;
 8000cc8:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000cca:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000cce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd0:	4b3c      	ldr	r3, [pc, #240]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd6:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cdc:	4b39      	ldr	r3, [pc, #228]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ce2:	4838      	ldr	r0, [pc, #224]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000ce4:	f002 f87c 	bl	8002de0 <HAL_TIM_Base_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000cee:	f000 fdc5 	bl	800187c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cf8:	f107 0318 	add.w	r3, r7, #24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4831      	ldr	r0, [pc, #196]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000d00:	f002 fd82 	bl	8003808 <HAL_TIM_ConfigClockSource>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000d0a:	f000 fdb7 	bl	800187c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000d0e:	482d      	ldr	r0, [pc, #180]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000d10:	f002 f9b0 	bl	8003074 <HAL_TIM_IC_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000d1a:	f000 fdaf 	bl	800187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4825      	ldr	r0, [pc, #148]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000d2e:	f003 fa4d 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000d38:	f000 fda0 	bl	800187c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d40:	2301      	movs	r3, #1
 8000d42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4619      	mov	r1, r3
 8000d52:	481c      	ldr	r0, [pc, #112]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000d54:	f002 fbfa 	bl	800354c <HAL_TIM_IC_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000d5e:	f000 fd8d 	bl	800187c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d66:	2302      	movs	r3, #2
 8000d68:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000d72:	f002 fbeb 	bl	800354c <HAL_TIM_IC_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000d7c:	f000 fd7e 	bl	800187c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d80:	2302      	movs	r3, #2
 8000d82:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d84:	2301      	movs	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000d90:	f002 fbdc 	bl	800354c <HAL_TIM_IC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000d9a:	f000 fd6f 	bl	800187c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000da2:	2302      	movs	r3, #2
 8000da4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	220c      	movs	r2, #12
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_TIM1_Init+0x138>)
 8000dae:	f002 fbcd 	bl	800354c <HAL_TIM_IC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000db8:	f000 fd60 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000218 	.word	0x20000218
 8000dc8:	40012c00 	.word	0x40012c00

08000dcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df6:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000dfe:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000e00:	2247      	movs	r2, #71	; 0x47
 8000e02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b3e      	ldr	r3, [pc, #248]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000-1;
 8000e0a:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000e0c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000e10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e12:	4b3b      	ldr	r3, [pc, #236]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e18:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e1e:	4838      	ldr	r0, [pc, #224]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000e20:	f001 ffde 	bl	8002de0 <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000e2a:	f000 fd27 	bl	800187c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e32:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e34:	f107 0318 	add.w	r3, r7, #24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4831      	ldr	r0, [pc, #196]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000e3c:	f002 fce4 	bl	8003808 <HAL_TIM_ConfigClockSource>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e46:	f000 fd19 	bl	800187c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e4a:	482d      	ldr	r0, [pc, #180]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000e4c:	f002 f912 	bl	8003074 <HAL_TIM_IC_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e56:	f000 fd11 	bl	800187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	4619      	mov	r1, r3
 8000e68:	4825      	ldr	r0, [pc, #148]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000e6a:	f003 f9af 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000e74:	f000 fd02 	bl	800187c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481c      	ldr	r0, [pc, #112]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000e90:	f002 fb5c 	bl	800354c <HAL_TIM_IC_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000e9a:	f000 fcef 	bl	800187c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4814      	ldr	r0, [pc, #80]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000eae:	f002 fb4d 	bl	800354c <HAL_TIM_IC_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000eb8:	f000 fce0 	bl	800187c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000ecc:	f002 fb3e 	bl	800354c <HAL_TIM_IC_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8000ed6:	f000 fcd1 	bl	800187c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000eda:	2302      	movs	r3, #2
 8000edc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	220c      	movs	r2, #12
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_TIM2_Init+0x134>)
 8000eea:	f002 fb2f 	bl	800354c <HAL_TIM_IC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8000ef4:	f000 fcc2 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000260 	.word	0x20000260

08000f04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	; 0x38
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f18:	f107 0320 	add.w	r3, r7, #32
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f34:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <MX_TIM4_Init+0xe4>)
 8000f36:	4a2d      	ldr	r2, [pc, #180]	; (8000fec <MX_TIM4_Init+0xe8>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1-1;
 8000f3a:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <MX_TIM4_Init+0xe4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <MX_TIM4_Init+0xe4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 62600;
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <MX_TIM4_Init+0xe4>)
 8000f48:	f24f 4288 	movw	r2, #62600	; 0xf488
 8000f4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <MX_TIM4_Init+0xe4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <MX_TIM4_Init+0xe4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f5a:	4823      	ldr	r0, [pc, #140]	; (8000fe8 <MX_TIM4_Init+0xe4>)
 8000f5c:	f001 ff40 	bl	8002de0 <HAL_TIM_Base_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000f66:	f000 fc89 	bl	800187c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f74:	4619      	mov	r1, r3
 8000f76:	481c      	ldr	r0, [pc, #112]	; (8000fe8 <MX_TIM4_Init+0xe4>)
 8000f78:	f002 fc46 	bl	8003808 <HAL_TIM_ConfigClockSource>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000f82:	f000 fc7b 	bl	800187c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f86:	4818      	ldr	r0, [pc, #96]	; (8000fe8 <MX_TIM4_Init+0xe4>)
 8000f88:	f001 ff79 	bl	8002e7e <HAL_TIM_PWM_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f92:	f000 fc73 	bl	800187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4810      	ldr	r0, [pc, #64]	; (8000fe8 <MX_TIM4_Init+0xe4>)
 8000fa6:	f003 f911 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000fb0:	f000 fc64 	bl	800187c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb4:	2360      	movs	r3, #96	; 0x60
 8000fb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <MX_TIM4_Init+0xe4>)
 8000fcc:	f002 fb5a 	bl	8003684 <HAL_TIM_PWM_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000fd6:	f000 fc51 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fda:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <MX_TIM4_Init+0xe4>)
 8000fdc:	f000 fd14 	bl	8001a08 <HAL_TIM_MspPostInit>

}
 8000fe0:	bf00      	nop
 8000fe2:	3738      	adds	r7, #56	; 0x38
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200002a8 	.word	0x200002a8
 8000fec:	40000800 	.word	0x40000800

08000ff0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_USART3_UART_Init+0x50>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8000ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001000:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USART3_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USART3_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001028:	f003 f940 	bl	80042ac <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001032:	f000 fc23 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200002f0 	.word	0x200002f0
 8001040:	40004800 	.word	0x40004800

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001058:	4b47      	ldr	r3, [pc, #284]	; (8001178 <MX_GPIO_Init+0x134>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a46      	ldr	r2, [pc, #280]	; (8001178 <MX_GPIO_Init+0x134>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b44      	ldr	r3, [pc, #272]	; (8001178 <MX_GPIO_Init+0x134>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001070:	4b41      	ldr	r3, [pc, #260]	; (8001178 <MX_GPIO_Init+0x134>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a40      	ldr	r2, [pc, #256]	; (8001178 <MX_GPIO_Init+0x134>)
 8001076:	f043 0320 	orr.w	r3, r3, #32
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <MX_GPIO_Init+0x134>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0320 	and.w	r3, r3, #32
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <MX_GPIO_Init+0x134>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a3a      	ldr	r2, [pc, #232]	; (8001178 <MX_GPIO_Init+0x134>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b38      	ldr	r3, [pc, #224]	; (8001178 <MX_GPIO_Init+0x134>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	4b35      	ldr	r3, [pc, #212]	; (8001178 <MX_GPIO_Init+0x134>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a34      	ldr	r2, [pc, #208]	; (8001178 <MX_GPIO_Init+0x134>)
 80010a6:	f043 0308 	orr.w	r3, r3, #8
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b32      	ldr	r3, [pc, #200]	; (8001178 <MX_GPIO_Init+0x134>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010be:	482f      	ldr	r0, [pc, #188]	; (800117c <MX_GPIO_Init+0x138>)
 80010c0:	f001 fa43 	bl	800254a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_Pin|led2_Pin|led3_Pin|led4_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	216a      	movs	r1, #106	; 0x6a
 80010c8:	482d      	ldr	r0, [pc, #180]	; (8001180 <MX_GPIO_Init+0x13c>)
 80010ca:	f001 fa3e 	bl	800254a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, stby_Pin|an2_Pin|an1_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2138      	movs	r1, #56	; 0x38
 80010d2:	482c      	ldr	r0, [pc, #176]	; (8001184 <MX_GPIO_Init+0x140>)
 80010d4:	f001 fa39 	bl	800254a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80010d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4619      	mov	r1, r3
 80010f0:	4822      	ldr	r0, [pc, #136]	; (800117c <MX_GPIO_Init+0x138>)
 80010f2:	f001 f88f 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin led2_Pin led3_Pin led4_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin|led4_Pin;
 80010f6:	236a      	movs	r3, #106	; 0x6a
 80010f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2302      	movs	r3, #2
 8001104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	481c      	ldr	r0, [pc, #112]	; (8001180 <MX_GPIO_Init+0x13c>)
 800110e:	f001 f881 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : in1_L_Pin in1_R_Pin */
  GPIO_InitStruct.Pin = in1_L_Pin|in1_R_Pin;
 8001112:	2303      	movs	r3, #3
 8001114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4619      	mov	r1, r3
 8001124:	4817      	ldr	r0, [pc, #92]	; (8001184 <MX_GPIO_Init+0x140>)
 8001126:	f001 f875 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 800112a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800112e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <MX_GPIO_Init+0x144>)
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4619      	mov	r1, r3
 800113e:	4810      	ldr	r0, [pc, #64]	; (8001180 <MX_GPIO_Init+0x13c>)
 8001140:	f001 f868 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : stby_Pin an2_Pin an1_Pin */
  GPIO_InitStruct.Pin = stby_Pin|an2_Pin|an1_Pin;
 8001144:	2338      	movs	r3, #56	; 0x38
 8001146:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2302      	movs	r3, #2
 8001152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4619      	mov	r1, r3
 800115a:	480a      	ldr	r0, [pc, #40]	; (8001184 <MX_GPIO_Init+0x140>)
 800115c:	f001 f85a 	bl	8002214 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	2028      	movs	r0, #40	; 0x28
 8001166:	f000 ff6c 	bl	8002042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800116a:	2028      	movs	r0, #40	; 0x28
 800116c:	f000 ff85 	bl	800207a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000
 800117c:	40011000 	.word	0x40011000
 8001180:	40010800 	.word	0x40010800
 8001184:	40010c00 	.word	0x40010c00
 8001188:	10110000 	.word	0x10110000

0800118c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  if (huart == &huart3) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <HAL_UART_RxCpltCallback+0x48>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d116      	bne.n	80011ca <HAL_UART_RxCpltCallback+0x3e>
    dataReceived=1;
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_RxCpltCallback+0x4c>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]

    if (dataTransmitted != 0) {
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <HAL_UART_RxCpltCallback+0x50>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00a      	beq.n	80011c0 <HAL_UART_RxCpltCallback+0x34>
      HAL_UART_Transmit_IT(&huart3, str_uart_buffer, 1);
 80011aa:	2201      	movs	r2, #1
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <HAL_UART_RxCpltCallback+0x54>)
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <HAL_UART_RxCpltCallback+0x48>)
 80011b0:	f003 f94f 	bl	8004452 <HAL_UART_Transmit_IT>
      dataReceived=0;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_UART_RxCpltCallback+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
      dataTransmitted=0;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_UART_RxCpltCallback+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
    }

    HAL_UART_Receive_IT (&huart3, str_uart_buffer, 1);
 80011c0:	2201      	movs	r2, #1
 80011c2:	4907      	ldr	r1, [pc, #28]	; (80011e0 <HAL_UART_RxCpltCallback+0x54>)
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <HAL_UART_RxCpltCallback+0x48>)
 80011c6:	f003 f979 	bl	80044bc <HAL_UART_Receive_IT>
  }
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200002f0 	.word	0x200002f0
 80011d8:	20000338 	.word	0x20000338
 80011dc:	20000000 	.word	0x20000000
 80011e0:	2000033c 	.word	0x2000033c

080011e4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  if (huart == &huart3) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a0c      	ldr	r2, [pc, #48]	; (8001220 <HAL_UART_TxCpltCallback+0x3c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d111      	bne.n	8001218 <HAL_UART_TxCpltCallback+0x34>
    dataTransmitted=1;
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_UART_TxCpltCallback+0x40>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]

    if (dataReceived != 0) {
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_UART_TxCpltCallback+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00a      	beq.n	8001218 <HAL_UART_TxCpltCallback+0x34>
      HAL_UART_Transmit_IT(&huart3, str_uart_buffer, 1);
 8001202:	2201      	movs	r2, #1
 8001204:	4909      	ldr	r1, [pc, #36]	; (800122c <HAL_UART_TxCpltCallback+0x48>)
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <HAL_UART_TxCpltCallback+0x3c>)
 8001208:	f003 f923 	bl	8004452 <HAL_UART_Transmit_IT>
      dataReceived=0;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_UART_TxCpltCallback+0x44>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
      dataTransmitted=0;
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <HAL_UART_TxCpltCallback+0x40>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002f0 	.word	0x200002f0
 8001224:	20000000 	.word	0x20000000
 8001228:	20000338 	.word	0x20000338
 800122c:	2000033c 	.word	0x2000033c

08001230 <hnd_state_for_motor1>:
	if (flag_read) HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
}
*/


void hnd_state_for_motor1(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	STATE_PWM_PIN current_state_R = hnd_state_in_pwm_R();
 8001236:	f000 f81b 	bl	8001270 <hnd_state_in_pwm_R>
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	STATE_PWM_PIN current_state_L = hnd_state_in_pwm_L();
 800123e:	f000 f837 	bl	80012b0 <hnd_state_in_pwm_L>
 8001242:	4603      	mov	r3, r0
 8001244:	71bb      	strb	r3, [r7, #6]
	transition_callback worker = FSM_table[current_state_L][current_state_R].worker;
 8001246:	79ba      	ldrb	r2, [r7, #6]
 8001248:	79f9      	ldrb	r1, [r7, #7]
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <hnd_state_for_motor1+0x3c>)
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	440b      	add	r3, r1
 8001254:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001258:	603b      	str	r3, [r7, #0]
	if (worker != NULL) {
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <hnd_state_for_motor1+0x34>
		worker();
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	4798      	blx	r3
	}
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000004 	.word	0x20000004

08001270 <hnd_state_in_pwm_R>:

STATE_PWM_PIN hnd_state_in_pwm_R(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af02      	add	r7, sp, #8
	GPIO_PinState stateR = HAL_GPIO_ReadPin(in1_R_GPIO_Port, in1_R_Pin);
 8001276:	2102      	movs	r1, #2
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <hnd_state_in_pwm_R+0x30>)
 800127a:	f001 f94f 	bl	800251c <HAL_GPIO_ReadPin>
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
	return hnd_state_in_pwm_i(
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <hnd_state_in_pwm_R+0x34>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	79f8      	ldrb	r0, [r7, #7]
 8001288:	2252      	movs	r2, #82	; 0x52
 800128a:	9200      	str	r2, [sp, #0]
 800128c:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <hnd_state_in_pwm_R+0x38>)
 800128e:	4907      	ldr	r1, [pc, #28]	; (80012ac <hnd_state_in_pwm_R+0x3c>)
 8001290:	f000 f82e 	bl	80012f0 <hnd_state_in_pwm_i>
 8001294:	4603      	mov	r3, r0
			stateR, &statepwm1_R,
			&flag_pwm1_R, last_capture_time1_R,
			'R');
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40010c00 	.word	0x40010c00
 80012a4:	20000360 	.word	0x20000360
 80012a8:	2000035c 	.word	0x2000035c
 80012ac:	20000001 	.word	0x20000001

080012b0 <hnd_state_in_pwm_L>:

STATE_PWM_PIN hnd_state_in_pwm_L(void) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af02      	add	r7, sp, #8
	GPIO_PinState stateL = HAL_GPIO_ReadPin(in1_L_GPIO_Port, in1_L_Pin);
 80012b6:	2101      	movs	r1, #1
 80012b8:	4809      	ldr	r0, [pc, #36]	; (80012e0 <hnd_state_in_pwm_L+0x30>)
 80012ba:	f001 f92f 	bl	800251c <HAL_GPIO_ReadPin>
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	return hnd_state_in_pwm_i(
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <hnd_state_in_pwm_L+0x34>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	79f8      	ldrb	r0, [r7, #7]
 80012c8:	224c      	movs	r2, #76	; 0x4c
 80012ca:	9200      	str	r2, [sp, #0]
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <hnd_state_in_pwm_L+0x38>)
 80012ce:	4907      	ldr	r1, [pc, #28]	; (80012ec <hnd_state_in_pwm_L+0x3c>)
 80012d0:	f000 f80e 	bl	80012f0 <hnd_state_in_pwm_i>
 80012d4:	4603      	mov	r3, r0
			stateL, &statepwm1_L,
			&flag_pwm1_L, last_capture_time1_L,
			'L');
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40010c00 	.word	0x40010c00
 80012e4:	20000364 	.word	0x20000364
 80012e8:	2000035d 	.word	0x2000035d
 80012ec:	20000002 	.word	0x20000002

080012f0 <hnd_state_in_pwm_i>:


STATE_PWM_PIN hnd_state_in_pwm_i(
		GPIO_PinState state, STATE_PWM_PIN *statepwm,
		volatile uint8_t *flag_pwm, volatile uint32_t last_capture_time,
		char type) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]

    uint32_t current_time = HAL_GetTick();
 8001300:	f000 fd9a 	bl	8001e38 <HAL_GetTick>
 8001304:	6178      	str	r0, [r7, #20]
    // Если прошло больше 5 мс с последнего захвата фронта - считаем, что Ш�?М отсутствует
    if (*flag_pwm == 1 && (current_time - last_capture_time > 5)) {
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d107      	bne.n	8001320 <hnd_state_in_pwm_i+0x30>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b05      	cmp	r3, #5
 8001318:	d902      	bls.n	8001320 <hnd_state_in_pwm_i+0x30>
    	*flag_pwm = 0; // Ш�?М отсутствует
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
    }

	if (*flag_pwm) *statepwm = PWM;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <hnd_state_in_pwm_i+0x42>
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	e007      	b.n	8001342 <hnd_state_in_pwm_i+0x52>
	else *statepwm = (state == GPIO_PIN_SET) ? HIGH : LOW;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <hnd_state_in_pwm_i+0x4c>
 8001338:	2200      	movs	r2, #0
 800133a:	e000      	b.n	800133e <hnd_state_in_pwm_i+0x4e>
 800133c:	2202      	movs	r2, #2
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	701a      	strb	r2, [r3, #0]

	led_state_pwm(statepwm, type);
 8001342:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001346:	4619      	mov	r1, r3
 8001348:	68b8      	ldr	r0, [r7, #8]
 800134a:	f000 f807 	bl	800135c <led_state_pwm>

	return *statepwm;
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	781b      	ldrb	r3, [r3, #0]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <led_state_pwm>:

void led_state_pwm(STATE_PWM_PIN *statepwm, char type) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	70fb      	strb	r3, [r7, #3]
	switch(*statepwm) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d040      	beq.n	80013f2 <led_state_pwm+0x96>
 8001370:	2b02      	cmp	r3, #2
 8001372:	dc5b      	bgt.n	800142c <led_state_pwm+0xd0>
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <led_state_pwm+0x22>
 8001378:	2b01      	cmp	r3, #1
 800137a:	d01d      	beq.n	80013b8 <led_state_pwm+0x5c>
			}

	    }
	    break;
	}
}
 800137c:	e056      	b.n	800142c <led_state_pwm+0xd0>
	    	switch (type) {
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	2b4c      	cmp	r3, #76	; 0x4c
 8001382:	d002      	beq.n	800138a <led_state_pwm+0x2e>
 8001384:	2b52      	cmp	r3, #82	; 0x52
 8001386:	d00b      	beq.n	80013a0 <led_state_pwm+0x44>
	    break;
 8001388:	e050      	b.n	800142c <led_state_pwm+0xd0>
			    	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	2102      	movs	r1, #2
 800138e:	4829      	ldr	r0, [pc, #164]	; (8001434 <led_state_pwm+0xd8>)
 8001390:	f001 f8db 	bl	800254a <HAL_GPIO_WritePin>
			    	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2108      	movs	r1, #8
 8001398:	4826      	ldr	r0, [pc, #152]	; (8001434 <led_state_pwm+0xd8>)
 800139a:	f001 f8d6 	bl	800254a <HAL_GPIO_WritePin>
				break;
 800139e:	e00a      	b.n	80013b6 <led_state_pwm+0x5a>
			    	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2120      	movs	r1, #32
 80013a4:	4823      	ldr	r0, [pc, #140]	; (8001434 <led_state_pwm+0xd8>)
 80013a6:	f001 f8d0 	bl	800254a <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2140      	movs	r1, #64	; 0x40
 80013ae:	4821      	ldr	r0, [pc, #132]	; (8001434 <led_state_pwm+0xd8>)
 80013b0:	f001 f8cb 	bl	800254a <HAL_GPIO_WritePin>
				break;
 80013b4:	bf00      	nop
	    break;
 80013b6:	e039      	b.n	800142c <led_state_pwm+0xd0>
	    	switch (type) {
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	2b4c      	cmp	r3, #76	; 0x4c
 80013bc:	d002      	beq.n	80013c4 <led_state_pwm+0x68>
 80013be:	2b52      	cmp	r3, #82	; 0x52
 80013c0:	d00b      	beq.n	80013da <led_state_pwm+0x7e>
	    break;
 80013c2:	e033      	b.n	800142c <led_state_pwm+0xd0>
			    	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2102      	movs	r1, #2
 80013c8:	481a      	ldr	r0, [pc, #104]	; (8001434 <led_state_pwm+0xd8>)
 80013ca:	f001 f8be 	bl	800254a <HAL_GPIO_WritePin>
			    	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2108      	movs	r1, #8
 80013d2:	4818      	ldr	r0, [pc, #96]	; (8001434 <led_state_pwm+0xd8>)
 80013d4:	f001 f8b9 	bl	800254a <HAL_GPIO_WritePin>
				break;
 80013d8:	e00a      	b.n	80013f0 <led_state_pwm+0x94>
			    	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2120      	movs	r1, #32
 80013de:	4815      	ldr	r0, [pc, #84]	; (8001434 <led_state_pwm+0xd8>)
 80013e0:	f001 f8b3 	bl	800254a <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2140      	movs	r1, #64	; 0x40
 80013e8:	4812      	ldr	r0, [pc, #72]	; (8001434 <led_state_pwm+0xd8>)
 80013ea:	f001 f8ae 	bl	800254a <HAL_GPIO_WritePin>
				break;
 80013ee:	bf00      	nop
	    break;
 80013f0:	e01c      	b.n	800142c <led_state_pwm+0xd0>
	    	switch (type) {
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	2b4c      	cmp	r3, #76	; 0x4c
 80013f6:	d002      	beq.n	80013fe <led_state_pwm+0xa2>
 80013f8:	2b52      	cmp	r3, #82	; 0x52
 80013fa:	d00b      	beq.n	8001414 <led_state_pwm+0xb8>
	    break;
 80013fc:	e015      	b.n	800142a <led_state_pwm+0xce>
			    	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	2102      	movs	r1, #2
 8001402:	480c      	ldr	r0, [pc, #48]	; (8001434 <led_state_pwm+0xd8>)
 8001404:	f001 f8a1 	bl	800254a <HAL_GPIO_WritePin>
			    	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	2108      	movs	r1, #8
 800140c:	4809      	ldr	r0, [pc, #36]	; (8001434 <led_state_pwm+0xd8>)
 800140e:	f001 f89c 	bl	800254a <HAL_GPIO_WritePin>
				break;
 8001412:	e00a      	b.n	800142a <led_state_pwm+0xce>
			    	HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	2120      	movs	r1, #32
 8001418:	4806      	ldr	r0, [pc, #24]	; (8001434 <led_state_pwm+0xd8>)
 800141a:	f001 f896 	bl	800254a <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	2140      	movs	r1, #64	; 0x40
 8001422:	4804      	ldr	r0, [pc, #16]	; (8001434 <led_state_pwm+0xd8>)
 8001424:	f001 f891 	bl	800254a <HAL_GPIO_WritePin>
				break;
 8001428:	bf00      	nop
	    break;
 800142a:	bf00      	nop
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40010800 	.word	0x40010800

08001438 <hal_tim_set_compare>:

void hal_tim_set_compare(uint16_t pwm) {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm);
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <hal_tim_set_compare+0x1c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	635a      	str	r2, [r3, #52]	; 0x34
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	200002a8 	.word	0x200002a8

08001458 <state_zero>:

void state_zero(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2108      	movs	r1, #8
 8001460:	4808      	ldr	r0, [pc, #32]	; (8001484 <state_zero+0x2c>)
 8001462:	f001 f872 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(an1_GPIO_Port, an1_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2120      	movs	r1, #32
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <state_zero+0x2c>)
 800146c:	f001 f86d 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(an2_GPIO_Port, an2_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2110      	movs	r1, #16
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <state_zero+0x2c>)
 8001476:	f001 f868 	bl	800254a <HAL_GPIO_WritePin>
	hal_tim_set_compare(0);
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff ffdc 	bl	8001438 <hal_tim_set_compare>
	//print_uart_data(0, "STATE ZERO");
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40010c00 	.word	0x40010c00

08001488 <enable_L>:

void enable_L(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(an1_GPIO_Port, an1_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	2120      	movs	r1, #32
 8001490:	4807      	ldr	r0, [pc, #28]	; (80014b0 <enable_L+0x28>)
 8001492:	f001 f85a 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(an2_GPIO_Port, an2_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	2110      	movs	r1, #16
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <enable_L+0x28>)
 800149c:	f001 f855 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2108      	movs	r1, #8
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <enable_L+0x28>)
 80014a6:	f001 f850 	bl	800254a <HAL_GPIO_WritePin>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40010c00 	.word	0x40010c00

080014b4 <enable_R>:

void enable_R(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(an1_GPIO_Port, an1_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2120      	movs	r1, #32
 80014bc:	4807      	ldr	r0, [pc, #28]	; (80014dc <enable_R+0x28>)
 80014be:	f001 f844 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(an2_GPIO_Port, an2_Pin, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	2110      	movs	r1, #16
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <enable_R+0x28>)
 80014c8:	f001 f83f 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2108      	movs	r1, #8
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <enable_R+0x28>)
 80014d2:	f001 f83a 	bl	800254a <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40010c00 	.word	0x40010c00

080014e0 <state_MAX_L>:

void state_MAX_L(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	enable_L();
 80014e4:	f7ff ffd0 	bl	8001488 <enable_L>
	hal_tim_set_compare(PERIOD_MAX);
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <state_MAX_L+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ffa2 	bl	8001438 <hal_tim_set_compare>
	//print_uart_data(0, "STATE L MAX");
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200002a8 	.word	0x200002a8

080014fc <state_MAX_R>:

void state_MAX_R(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	enable_R();
 8001500:	f7ff ffd8 	bl	80014b4 <enable_R>
	hal_tim_set_compare(PERIOD_MAX);
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <state_MAX_R+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	b29b      	uxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff94 	bl	8001438 <hal_tim_set_compare>
	//print_uart_data(0, "STATE R MAX");
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200002a8 	.word	0x200002a8

08001518 <state_PWM_L>:

void state_PWM_L(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
	enable_L();
 800151e:	f7ff ffb3 	bl	8001488 <enable_L>
	uint16_t pwm1 = falling_to_pwm(falling1_L, "STATE L PWM");
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <state_PWM_L+0x2c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4908      	ldr	r1, [pc, #32]	; (8001548 <state_PWM_L+0x30>)
 8001528:	4618      	mov	r0, r3
 800152a:	f000 f829 	bl	8001580 <falling_to_pwm>
 800152e:	4603      	mov	r3, r0
 8001530:	80fb      	strh	r3, [r7, #6]
	hal_tim_set_compare(pwm1);
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff7f 	bl	8001438 <hal_tim_set_compare>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000344 	.word	0x20000344
 8001548:	08007d18 	.word	0x08007d18

0800154c <state_PWM_R>:

void state_PWM_R(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
	enable_R();
 8001552:	f7ff ffaf 	bl	80014b4 <enable_R>
	uint16_t pwm1 = falling_to_pwm(falling1_R, "STATE R PWM");
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <state_PWM_R+0x2c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <state_PWM_R+0x30>)
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f80f 	bl	8001580 <falling_to_pwm>
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
	hal_tim_set_compare(pwm1);
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff65 	bl	8001438 <hal_tim_set_compare>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000340 	.word	0x20000340
 800157c:	08007d24 	.word	0x08007d24

08001580 <falling_to_pwm>:


uint16_t falling_to_pwm(volatile uint32_t falling, char *type) {
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	uint16_t pwm1 = pwm_old;
 800158a:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <falling_to_pwm+0x120>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	81fb      	strh	r3, [r7, #14]

	//print_uart_data(falling, type);
    //print_uniq_uart_data(falling, type);


	switch (falling) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001596:	d06a      	beq.n	800166e <falling_to_pwm+0xee>
 8001598:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800159c:	d876      	bhi.n	800168c <falling_to_pwm+0x10c>
 800159e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d054      	beq.n	8001650 <falling_to_pwm+0xd0>
 80015a6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d86e      	bhi.n	800168c <falling_to_pwm+0x10c>
 80015ae:	f240 5214 	movw	r2, #1300	; 0x514
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d03d      	beq.n	8001632 <falling_to_pwm+0xb2>
 80015b6:	f240 5214 	movw	r2, #1300	; 0x514
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d866      	bhi.n	800168c <falling_to_pwm+0x10c>
 80015be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015c2:	d027      	beq.n	8001614 <falling_to_pwm+0x94>
 80015c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015c8:	d860      	bhi.n	800168c <falling_to_pwm+0x10c>
 80015ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015ce:	d003      	beq.n	80015d8 <falling_to_pwm+0x58>
 80015d0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80015d4:	d00f      	beq.n	80015f6 <falling_to_pwm+0x76>
 80015d6:	e059      	b.n	800168c <falling_to_pwm+0x10c>
		case 500: {
			pwm1 = PERIOD_MAX * 266 / 1000;
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <falling_to_pwm+0x124>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4a30      	ldr	r2, [pc, #192]	; (80016a8 <falling_to_pwm+0x128>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	099b      	lsrs	r3, r3, #6
 80015ec:	81fb      	strh	r3, [r7, #14]
			pwm_old = pwm1;
 80015ee:	89fb      	ldrh	r3, [r7, #14]
 80015f0:	4a2b      	ldr	r2, [pc, #172]	; (80016a0 <falling_to_pwm+0x120>)
 80015f2:	6013      	str	r3, [r2, #0]
		}
			break;
 80015f4:	e04d      	b.n	8001692 <falling_to_pwm+0x112>
		case 700: {
			pwm1 = PERIOD_MAX * 389 / 1000;
 80015f6:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <falling_to_pwm+0x124>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f240 1285 	movw	r2, #389	; 0x185
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	4a29      	ldr	r2, [pc, #164]	; (80016a8 <falling_to_pwm+0x128>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	81fb      	strh	r3, [r7, #14]
			pwm_old = pwm1;
 800160c:	89fb      	ldrh	r3, [r7, #14]
 800160e:	4a24      	ldr	r2, [pc, #144]	; (80016a0 <falling_to_pwm+0x120>)
 8001610:	6013      	str	r3, [r2, #0]
		}
			break;
 8001612:	e03e      	b.n	8001692 <falling_to_pwm+0x112>
		case 1000: {
			pwm1 = PERIOD_MAX * 266 / 1000;
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <falling_to_pwm+0x124>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f44f 7285 	mov.w	r2, #266	; 0x10a
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <falling_to_pwm+0x128>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	099b      	lsrs	r3, r3, #6
 8001628:	81fb      	strh	r3, [r7, #14]
			pwm_old = pwm1;
 800162a:	89fb      	ldrh	r3, [r7, #14]
 800162c:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <falling_to_pwm+0x120>)
 800162e:	6013      	str	r3, [r2, #0]
		}
			break;
 8001630:	e02f      	b.n	8001692 <falling_to_pwm+0x112>
		case 1300: {
			pwm1 = PERIOD_MAX * 630 / 1000;
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <falling_to_pwm+0x124>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f240 2276 	movw	r2, #630	; 0x276
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <falling_to_pwm+0x128>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	81fb      	strh	r3, [r7, #14]
			pwm_old = pwm1;
 8001648:	89fb      	ldrh	r3, [r7, #14]
 800164a:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <falling_to_pwm+0x120>)
 800164c:	6013      	str	r3, [r2, #0]
		}
			break;
 800164e:	e020      	b.n	8001692 <falling_to_pwm+0x112>
		case 1500: {
			pwm1 = PERIOD_MAX * 750 / 1000;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <falling_to_pwm+0x124>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <falling_to_pwm+0x128>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	099b      	lsrs	r3, r3, #6
 8001664:	81fb      	strh	r3, [r7, #14]
			pwm_old = pwm1;
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <falling_to_pwm+0x120>)
 800166a:	6013      	str	r3, [r2, #0]
		}
			break;
 800166c:	e011      	b.n	8001692 <falling_to_pwm+0x112>
		case 1800: {
			pwm1 = PERIOD_MAX * 872 / 1000;
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <falling_to_pwm+0x124>)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f44f 725a 	mov.w	r2, #872	; 0x368
 8001676:	fb02 f303 	mul.w	r3, r2, r3
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <falling_to_pwm+0x128>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	81fb      	strh	r3, [r7, #14]
			pwm_old = pwm1;
 8001684:	89fb      	ldrh	r3, [r7, #14]
 8001686:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <falling_to_pwm+0x120>)
 8001688:	6013      	str	r3, [r2, #0]
		}
			break;
 800168a:	e002      	b.n	8001692 <falling_to_pwm+0x112>
		default: pwm1 = pwm_old;
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <falling_to_pwm+0x120>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	81fb      	strh	r3, [r7, #14]
	} else if (1700 <= falling && falling <= 1900) { //1800
		pwm1 = PERIOD_MAX * 872 / 1000;
	}
*/

	return pwm1;
 8001692:	89fb      	ldrh	r3, [r7, #14]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	2000034c 	.word	0x2000034c
 80016a4:	200002a8 	.word	0x200002a8
 80016a8:	10624dd3 	.word	0x10624dd3

080016ac <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1 ) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a23      	ldr	r2, [pc, #140]	; (8001748 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d140      	bne.n	8001740 <HAL_TIM_IC_CaptureCallback+0x94>
		uint32_t current_time = HAL_GetTick(); // Получаем текущее время в мс
 80016be:	f000 fbbb 	bl	8001e38 <HAL_GetTick>
 80016c2:	6178      	str	r0, [r7, #20]

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7f1b      	ldrb	r3, [r3, #28]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d103      	bne.n	80016d4 <HAL_TIM_IC_CaptureCallback+0x28>
			__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <HAL_TIM_IC_CaptureCallback+0xa0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7f1b      	ldrb	r3, [r3, #28]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d112      	bne.n	8001702 <HAL_TIM_IC_CaptureCallback+0x56>
			uint32_t falling0 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 80016dc:	2104      	movs	r1, #4
 80016de:	481b      	ldr	r0, [pc, #108]	; (800174c <HAL_TIM_IC_CaptureCallback+0xa0>)
 80016e0:	f002 f95a 	bl	8003998 <HAL_TIM_ReadCapturedValue>
 80016e4:	6138      	str	r0, [r7, #16]
			fill_arr(&counter1_R, &arr_falling1_R, &falling1_R, falling0, "TIM1  R");
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4a19      	ldr	r2, [pc, #100]	; (8001754 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80016ee:	491a      	ldr	r1, [pc, #104]	; (8001758 <HAL_TIM_IC_CaptureCallback+0xac>)
 80016f0:	481a      	ldr	r0, [pc, #104]	; (800175c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80016f2:	f000 f845 	bl	8001780 <fill_arr>

            flag_pwm1_R = 1; // ШИМ обнаружен
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
            last_capture_time1_R = current_time;
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	6013      	str	r3, [r2, #0]
		 }

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7f1b      	ldrb	r3, [r3, #28]
 8001706:	2b04      	cmp	r3, #4
 8001708:	d103      	bne.n	8001712 <HAL_TIM_IC_CaptureCallback+0x66>
			__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_TIM_IC_CaptureCallback+0xa0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7f1b      	ldrb	r3, [r3, #28]
 8001716:	2b08      	cmp	r3, #8
 8001718:	d112      	bne.n	8001740 <HAL_TIM_IC_CaptureCallback+0x94>
			uint32_t falling0 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_4);
 800171a:	210c      	movs	r1, #12
 800171c:	480b      	ldr	r0, [pc, #44]	; (800174c <HAL_TIM_IC_CaptureCallback+0xa0>)
 800171e:	f002 f93b 	bl	8003998 <HAL_TIM_ReadCapturedValue>
 8001722:	60f8      	str	r0, [r7, #12]
			fill_arr(&counter1_L, &arr_falling1_L, &falling1_L, falling0, "TIM1  L");
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <HAL_TIM_IC_CaptureCallback+0xc0>)
 800172c:	4910      	ldr	r1, [pc, #64]	; (8001770 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800172e:	4811      	ldr	r0, [pc, #68]	; (8001774 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001730:	f000 f826 	bl	8001780 <fill_arr>

            flag_pwm1_L = 1; // ШИМ обнаружен
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
            last_capture_time1_L = current_time;
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_TIM_IC_CaptureCallback+0xd0>)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	6013      	str	r3, [r2, #0]
		}

	 }

}
 8001740:	bf00      	nop
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40012c00 	.word	0x40012c00
 800174c:	20000218 	.word	0x20000218
 8001750:	08007d30 	.word	0x08007d30
 8001754:	20000340 	.word	0x20000340
 8001758:	20000354 	.word	0x20000354
 800175c:	20000350 	.word	0x20000350
 8001760:	2000035c 	.word	0x2000035c
 8001764:	20000360 	.word	0x20000360
 8001768:	08007d38 	.word	0x08007d38
 800176c:	20000344 	.word	0x20000344
 8001770:	20000358 	.word	0x20000358
 8001774:	20000351 	.word	0x20000351
 8001778:	2000035d 	.word	0x2000035d
 800177c:	20000364 	.word	0x20000364

08001780 <fill_arr>:

void fill_arr(uint8_t *counter, uint32_t *arr_falling, volatile uint32_t *falling, uint32_t falling0, char *type) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	603b      	str	r3, [r7, #0]
	//*falling = (falling0 / 100) * 100;
	//print_uniq_uart_data(*falling, type);

	*arr_falling += falling0;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	441a      	add	r2, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	601a      	str	r2, [r3, #0]
	(*counter)++;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	701a      	strb	r2, [r3, #0]
    if (*counter == size_arr) {
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d11a      	bne.n	80017e4 <fill_arr+0x64>
        *falling = *arr_falling / size_arr;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	601a      	str	r2, [r3, #0]

        *falling = (*falling / 100) * 100;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <fill_arr+0x6c>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	2264      	movs	r2, #100	; 0x64
 80017c4:	fb03 f202 	mul.w	r2, r3, r2
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	601a      	str	r2, [r3, #0]

        *counter = 0;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
        *arr_falling = 0;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        //print_uart_data(*falling, type);
        print_uniq_uart_data(*falling, type);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	69b9      	ldr	r1, [r7, #24]
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f806 	bl	80017f0 <print_uniq_uart_data>
    }


}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	51eb851f 	.word	0x51eb851f

080017f0 <print_uniq_uart_data>:

void print_uniq_uart_data(volatile uint32_t falling, char *str) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	if (falling != falling_buffer) {
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <print_uniq_uart_data+0x2c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d007      	beq.n	8001814 <print_uniq_uart_data+0x24>
		print_uart_data(falling, str);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6839      	ldr	r1, [r7, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f809 	bl	8001820 <print_uart_data>
		falling_buffer = falling;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a02      	ldr	r2, [pc, #8]	; (800181c <print_uniq_uart_data+0x2c>)
 8001812:	6013      	str	r3, [r2, #0]
	}
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000348 	.word	0x20000348

08001820 <print_uart_data>:

void print_uart_data(volatile uint32_t falling, char *str) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b094      	sub	sp, #80	; 0x50
 8001824:	af02      	add	r7, sp, #8
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	char str1[63] = {0,};
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	223b      	movs	r2, #59	; 0x3b
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f004 f973 	bl	8005b22 <memset>
    snprintf(str1, 63, "\nResult %s= %lu\n", str, falling);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f107 0008 	add.w	r0, r7, #8
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <print_uart_data+0x54>)
 8001848:	213f      	movs	r1, #63	; 0x3f
 800184a:	f004 f8f3 	bl	8005a34 <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 1000);
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fc7c 	bl	8000150 <strlen>
 8001858:	4603      	mov	r3, r0
 800185a:	b29a      	uxth	r2, r3
 800185c:	f107 0108 	add.w	r1, r7, #8
 8001860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001864:	4804      	ldr	r0, [pc, #16]	; (8001878 <print_uart_data+0x58>)
 8001866:	f002 fd71 	bl	800434c <HAL_UART_Transmit>
}
 800186a:	bf00      	nop
 800186c:	3748      	adds	r7, #72	; 0x48
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	08007d40 	.word	0x08007d40
 8001878:	200002f0 	.word	0x200002f0

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
}
 8001882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001884:	e7fe      	b.n	8001884 <Error_Handler+0x8>
	...

08001888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_MspInit+0x5c>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <HAL_MspInit+0x5c>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6193      	str	r3, [r2, #24]
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_MspInit+0x5c>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_MspInit+0x5c>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_MspInit+0x5c>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	61d3      	str	r3, [r2, #28]
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_MspInit+0x5c>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_MspInit+0x60>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_MspInit+0x60>)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010000 	.word	0x40010000

080018ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0320 	add.w	r3, r7, #32
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a3c      	ldr	r2, [pc, #240]	; (80019f8 <HAL_TIM_Base_MspInit+0x10c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d12d      	bne.n	8001968 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800190c:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a3a      	ldr	r2, [pc, #232]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 8001912:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b38      	ldr	r3, [pc, #224]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a34      	ldr	r2, [pc, #208]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800193c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	4619      	mov	r1, r3
 8001950:	482b      	ldr	r0, [pc, #172]	; (8001a00 <HAL_TIM_Base_MspInit+0x114>)
 8001952:	f000 fc5f 	bl	8002214 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	201b      	movs	r0, #27
 800195c:	f000 fb71 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001960:	201b      	movs	r0, #27
 8001962:	f000 fb8a 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001966:	e042      	b.n	80019ee <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001970:	d12c      	bne.n	80019cc <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a21      	ldr	r2, [pc, #132]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6193      	str	r3, [r2, #24]
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80019a2:	2305      	movs	r3, #5
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 0320 	add.w	r3, r7, #32
 80019b2:	4619      	mov	r1, r3
 80019b4:	4812      	ldr	r0, [pc, #72]	; (8001a00 <HAL_TIM_Base_MspInit+0x114>)
 80019b6:	f000 fc2d 	bl	8002214 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	201c      	movs	r0, #28
 80019c0:	f000 fb3f 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019c4:	201c      	movs	r0, #28
 80019c6:	f000 fb58 	bl	800207a <HAL_NVIC_EnableIRQ>
}
 80019ca:	e010      	b.n	80019ee <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM4)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0c      	ldr	r2, [pc, #48]	; (8001a04 <HAL_TIM_Base_MspInit+0x118>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10b      	bne.n	80019ee <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_TIM_Base_MspInit+0x110>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
}
 80019ee:	bf00      	nop
 80019f0:	3730      	adds	r7, #48	; 0x30
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40012c00 	.word	0x40012c00
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010800 	.word	0x40010800
 8001a04:	40000800 	.word	0x40000800

08001a08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <HAL_TIM_MspPostInit+0x58>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d117      	bne.n	8001a58 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_TIM_MspPostInit+0x5c>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_TIM_MspPostInit+0x5c>)
 8001a2e:	f043 0308 	orr.w	r3, r3, #8
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_TIM_MspPostInit+0x5c>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a40:	2340      	movs	r3, #64	; 0x40
 8001a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	4619      	mov	r1, r3
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <HAL_TIM_MspPostInit+0x60>)
 8001a54:	f000 fbde 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40000800 	.word	0x40000800
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010c00 	.word	0x40010c00

08001a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a20      	ldr	r2, [pc, #128]	; (8001b08 <HAL_UART_MspInit+0x9c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d139      	bne.n	8001b00 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <HAL_UART_MspInit+0xa0>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	4a1e      	ldr	r2, [pc, #120]	; (8001b0c <HAL_UART_MspInit+0xa0>)
 8001a92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a96:	61d3      	str	r3, [r2, #28]
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <HAL_UART_MspInit+0xa0>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_UART_MspInit+0xa0>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <HAL_UART_MspInit+0xa0>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_UART_MspInit+0xa0>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480f      	ldr	r0, [pc, #60]	; (8001b10 <HAL_UART_MspInit+0xa4>)
 8001ad2:	f000 fb9f 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4809      	ldr	r0, [pc, #36]	; (8001b10 <HAL_UART_MspInit+0xa4>)
 8001aec:	f000 fb92 	bl	8002214 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2027      	movs	r0, #39	; 0x27
 8001af6:	f000 faa4 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001afa:	2027      	movs	r0, #39	; 0x27
 8001afc:	f000 fabd 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40004800 	.word	0x40004800
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010c00 	.word	0x40010c00

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler+0x4>

08001b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <MemManage_Handler+0x4>

08001b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5a:	f000 f95b 	bl	8001e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <TIM1_CC_IRQHandler+0x10>)
 8001b6a:	f001 fbe7 	bl	800333c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000218 	.word	0x20000218

08001b78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <TIM2_IRQHandler+0x10>)
 8001b7e:	f001 fbdd 	bl	800333c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000260 	.word	0x20000260

08001b8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <USART3_IRQHandler+0x10>)
 8001b92:	f002 fcb9 	bl	8004508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200002f0 	.word	0x200002f0

08001ba0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8001ba4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ba8:	f000 fce8 	bl	800257c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return 1;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <_kill>:

int _kill(int pid, int sig)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc8:	f003 fffe 	bl	8005bc8 <__errno>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2216      	movs	r2, #22
 8001bd0:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <_exit>:

void _exit (int status)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be6:	f04f 31ff 	mov.w	r1, #4294967295
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffe7 	bl	8001bbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bf0:	e7fe      	b.n	8001bf0 <_exit+0x12>

08001bf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e00a      	b.n	8001c1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c04:	f3af 8000 	nop.w
 8001c08:	4601      	mov	r1, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	b2ca      	uxtb	r2, r1
 8001c12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dbf0      	blt.n	8001c04 <_read+0x12>
  }

  return len;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e009      	b.n	8001c52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	60ba      	str	r2, [r7, #8]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dbf1      	blt.n	8001c3e <_write+0x12>
  }
  return len;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_close>:

int _close(int file)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c8a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <_isatty>:

int _isatty(int file)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <_sbrk+0x5c>)
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <_sbrk+0x60>)
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <_sbrk+0x64>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <_sbrk+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d207      	bcs.n	8001d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf4:	f003 ff68 	bl	8005bc8 <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e009      	b.n	8001d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <_sbrk+0x64>)
 8001d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20005000 	.word	0x20005000
 8001d24:	00000400 	.word	0x00000400
 8001d28:	20000368 	.word	0x20000368
 8001d2c:	200004c0 	.word	0x200004c0

08001d30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d3c:	f7ff fff8 	bl	8001d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d40:	480b      	ldr	r0, [pc, #44]	; (8001d70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d42:	490c      	ldr	r1, [pc, #48]	; (8001d74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d44:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d58:	4c09      	ldr	r4, [pc, #36]	; (8001d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d66:	f003 ff35 	bl	8005bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d6a:	f7fe ff2d 	bl	8000bc8 <main>
  bx lr
 8001d6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001d78:	080080f4 	.word	0x080080f4
  ldr r2, =_sbss
 8001d7c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001d80:	200004bc 	.word	0x200004bc

08001d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC1_2_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_Init+0x28>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <HAL_Init+0x28>)
 8001d92:	f043 0310 	orr.w	r3, r3, #16
 8001d96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f000 f947 	bl	800202c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9e:	200f      	movs	r0, #15
 8001da0:	f000 f808 	bl	8001db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da4:	f7ff fd70 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40022000 	.word	0x40022000

08001db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_InitTick+0x54>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_InitTick+0x58>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f95f 	bl	8002096 <HAL_SYSTICK_Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00e      	b.n	8001e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b0f      	cmp	r3, #15
 8001de6:	d80a      	bhi.n	8001dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de8:	2200      	movs	r2, #0
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f000 f927 	bl	8002042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df4:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <HAL_InitTick+0x5c>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000028 	.word	0x20000028
 8001e0c:	20000030 	.word	0x20000030
 8001e10:	2000002c 	.word	0x2000002c

08001e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_IncTick+0x1c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_IncTick+0x20>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a03      	ldr	r2, [pc, #12]	; (8001e34 <HAL_IncTick+0x20>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	20000030 	.word	0x20000030
 8001e34:	2000036c 	.word	0x2000036c

08001e38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b02      	ldr	r3, [pc, #8]	; (8001e48 <HAL_GetTick+0x10>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	2000036c 	.word	0x2000036c

08001e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff fff0 	bl	8001e38 <HAL_GetTick>
 8001e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d005      	beq.n	8001e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_Delay+0x44>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e72:	bf00      	nop
 8001e74:	f7ff ffe0 	bl	8001e38 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d8f7      	bhi.n	8001e74 <HAL_Delay+0x28>
  {
  }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000030 	.word	0x20000030

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4906      	ldr	r1, [pc, #24]	; (8001f2c <__NVIC_EnableIRQ+0x34>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db0a      	blt.n	8001f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	490c      	ldr	r1, [pc, #48]	; (8001f7c <__NVIC_SetPriority+0x4c>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	0112      	lsls	r2, r2, #4
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f58:	e00a      	b.n	8001f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4908      	ldr	r1, [pc, #32]	; (8001f80 <__NVIC_SetPriority+0x50>)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	3b04      	subs	r3, #4
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	761a      	strb	r2, [r3, #24]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	; 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f1c3 0307 	rsb	r3, r3, #7
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	bf28      	it	cs
 8001fa2:	2304      	movcs	r3, #4
 8001fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2b06      	cmp	r3, #6
 8001fac:	d902      	bls.n	8001fb4 <NVIC_EncodePriority+0x30>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3b03      	subs	r3, #3
 8001fb2:	e000      	b.n	8001fb6 <NVIC_EncodePriority+0x32>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	43d9      	mvns	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	4313      	orrs	r3, r2
         );
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3724      	adds	r7, #36	; 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff8:	d301      	bcc.n	8001ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00f      	b.n	800201e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <SysTick_Config+0x40>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002006:	210f      	movs	r1, #15
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f7ff ff90 	bl	8001f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SysTick_Config+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002016:	4b04      	ldr	r3, [pc, #16]	; (8002028 <SysTick_Config+0x40>)
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff2d 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002054:	f7ff ff42 	bl	8001edc <__NVIC_GetPriorityGrouping>
 8002058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f7ff ff90 	bl	8001f84 <NVIC_EncodePriority>
 8002064:	4602      	mov	r2, r0
 8002066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff5f 	bl	8001f30 <__NVIC_SetPriority>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff35 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffa2 	bl	8001fe8 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d008      	beq.n	80020d8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2204      	movs	r2, #4
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e020      	b.n	800211a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 020e 	bic.w	r2, r2, #14
 80020e6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002100:	2101      	movs	r1, #1
 8002102:	fa01 f202 	lsl.w	r2, r1, r2
 8002106:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002118:	7bfb      	ldrb	r3, [r7, #15]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d005      	beq.n	8002148 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2204      	movs	r2, #4
 8002140:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	e051      	b.n	80021ec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 020e 	bic.w	r2, r2, #14
 8002156:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a22      	ldr	r2, [pc, #136]	; (80021f8 <HAL_DMA_Abort_IT+0xd4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d029      	beq.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a21      	ldr	r2, [pc, #132]	; (80021fc <HAL_DMA_Abort_IT+0xd8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d022      	beq.n	80021c2 <HAL_DMA_Abort_IT+0x9e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <HAL_DMA_Abort_IT+0xdc>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d01a      	beq.n	80021bc <HAL_DMA_Abort_IT+0x98>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_DMA_Abort_IT+0xe0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d012      	beq.n	80021b6 <HAL_DMA_Abort_IT+0x92>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_DMA_Abort_IT+0xe4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00a      	beq.n	80021b0 <HAL_DMA_Abort_IT+0x8c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1b      	ldr	r2, [pc, #108]	; (800220c <HAL_DMA_Abort_IT+0xe8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d102      	bne.n	80021aa <HAL_DMA_Abort_IT+0x86>
 80021a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021a8:	e00e      	b.n	80021c8 <HAL_DMA_Abort_IT+0xa4>
 80021aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ae:	e00b      	b.n	80021c8 <HAL_DMA_Abort_IT+0xa4>
 80021b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b4:	e008      	b.n	80021c8 <HAL_DMA_Abort_IT+0xa4>
 80021b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ba:	e005      	b.n	80021c8 <HAL_DMA_Abort_IT+0xa4>
 80021bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c0:	e002      	b.n	80021c8 <HAL_DMA_Abort_IT+0xa4>
 80021c2:	2310      	movs	r3, #16
 80021c4:	e000      	b.n	80021c8 <HAL_DMA_Abort_IT+0xa4>
 80021c6:	2301      	movs	r3, #1
 80021c8:	4a11      	ldr	r2, [pc, #68]	; (8002210 <HAL_DMA_Abort_IT+0xec>)
 80021ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
    } 
  }
  return status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40020008 	.word	0x40020008
 80021fc:	4002001c 	.word	0x4002001c
 8002200:	40020030 	.word	0x40020030
 8002204:	40020044 	.word	0x40020044
 8002208:	40020058 	.word	0x40020058
 800220c:	4002006c 	.word	0x4002006c
 8002210:	40020000 	.word	0x40020000

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b08b      	sub	sp, #44	; 0x2c
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	e169      	b.n	80024fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002228:	2201      	movs	r2, #1
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	429a      	cmp	r2, r3
 8002242:	f040 8158 	bne.w	80024f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4a9a      	ldr	r2, [pc, #616]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d05e      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 8002250:	4a98      	ldr	r2, [pc, #608]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d875      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 8002256:	4a98      	ldr	r2, [pc, #608]	; (80024b8 <HAL_GPIO_Init+0x2a4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d058      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 800225c:	4a96      	ldr	r2, [pc, #600]	; (80024b8 <HAL_GPIO_Init+0x2a4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d86f      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 8002262:	4a96      	ldr	r2, [pc, #600]	; (80024bc <HAL_GPIO_Init+0x2a8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d052      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 8002268:	4a94      	ldr	r2, [pc, #592]	; (80024bc <HAL_GPIO_Init+0x2a8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d869      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 800226e:	4a94      	ldr	r2, [pc, #592]	; (80024c0 <HAL_GPIO_Init+0x2ac>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d04c      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 8002274:	4a92      	ldr	r2, [pc, #584]	; (80024c0 <HAL_GPIO_Init+0x2ac>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d863      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 800227a:	4a92      	ldr	r2, [pc, #584]	; (80024c4 <HAL_GPIO_Init+0x2b0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d046      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 8002280:	4a90      	ldr	r2, [pc, #576]	; (80024c4 <HAL_GPIO_Init+0x2b0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d85d      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 8002286:	2b12      	cmp	r3, #18
 8002288:	d82a      	bhi.n	80022e0 <HAL_GPIO_Init+0xcc>
 800228a:	2b12      	cmp	r3, #18
 800228c:	d859      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 800228e:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <HAL_GPIO_Init+0x80>)
 8002290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002294:	0800230f 	.word	0x0800230f
 8002298:	080022e9 	.word	0x080022e9
 800229c:	080022fb 	.word	0x080022fb
 80022a0:	0800233d 	.word	0x0800233d
 80022a4:	08002343 	.word	0x08002343
 80022a8:	08002343 	.word	0x08002343
 80022ac:	08002343 	.word	0x08002343
 80022b0:	08002343 	.word	0x08002343
 80022b4:	08002343 	.word	0x08002343
 80022b8:	08002343 	.word	0x08002343
 80022bc:	08002343 	.word	0x08002343
 80022c0:	08002343 	.word	0x08002343
 80022c4:	08002343 	.word	0x08002343
 80022c8:	08002343 	.word	0x08002343
 80022cc:	08002343 	.word	0x08002343
 80022d0:	08002343 	.word	0x08002343
 80022d4:	08002343 	.word	0x08002343
 80022d8:	080022f1 	.word	0x080022f1
 80022dc:	08002305 	.word	0x08002305
 80022e0:	4a79      	ldr	r2, [pc, #484]	; (80024c8 <HAL_GPIO_Init+0x2b4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022e6:	e02c      	b.n	8002342 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	623b      	str	r3, [r7, #32]
          break;
 80022ee:	e029      	b.n	8002344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	3304      	adds	r3, #4
 80022f6:	623b      	str	r3, [r7, #32]
          break;
 80022f8:	e024      	b.n	8002344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	3308      	adds	r3, #8
 8002300:	623b      	str	r3, [r7, #32]
          break;
 8002302:	e01f      	b.n	8002344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	330c      	adds	r3, #12
 800230a:	623b      	str	r3, [r7, #32]
          break;
 800230c:	e01a      	b.n	8002344 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d102      	bne.n	800231c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002316:	2304      	movs	r3, #4
 8002318:	623b      	str	r3, [r7, #32]
          break;
 800231a:	e013      	b.n	8002344 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002324:	2308      	movs	r3, #8
 8002326:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	611a      	str	r2, [r3, #16]
          break;
 800232e:	e009      	b.n	8002344 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002330:	2308      	movs	r3, #8
 8002332:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	615a      	str	r2, [r3, #20]
          break;
 800233a:	e003      	b.n	8002344 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800233c:	2300      	movs	r3, #0
 800233e:	623b      	str	r3, [r7, #32]
          break;
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x130>
          break;
 8002342:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2bff      	cmp	r3, #255	; 0xff
 8002348:	d801      	bhi.n	800234e <HAL_GPIO_Init+0x13a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	e001      	b.n	8002352 <HAL_GPIO_Init+0x13e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2bff      	cmp	r3, #255	; 0xff
 8002358:	d802      	bhi.n	8002360 <HAL_GPIO_Init+0x14c>
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	e002      	b.n	8002366 <HAL_GPIO_Init+0x152>
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	3b08      	subs	r3, #8
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	210f      	movs	r1, #15
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	401a      	ands	r2, r3
 8002378:	6a39      	ldr	r1, [r7, #32]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	431a      	orrs	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80b1 	beq.w	80024f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002394:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <HAL_GPIO_Init+0x2b8>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a4c      	ldr	r2, [pc, #304]	; (80024cc <HAL_GPIO_Init+0x2b8>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6193      	str	r3, [r2, #24]
 80023a0:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_GPIO_Init+0x2b8>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023ac:	4a48      	ldr	r2, [pc, #288]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a40      	ldr	r2, [pc, #256]	; (80024d4 <HAL_GPIO_Init+0x2c0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d013      	beq.n	8002400 <HAL_GPIO_Init+0x1ec>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a3f      	ldr	r2, [pc, #252]	; (80024d8 <HAL_GPIO_Init+0x2c4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d00d      	beq.n	80023fc <HAL_GPIO_Init+0x1e8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a3e      	ldr	r2, [pc, #248]	; (80024dc <HAL_GPIO_Init+0x2c8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d007      	beq.n	80023f8 <HAL_GPIO_Init+0x1e4>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a3d      	ldr	r2, [pc, #244]	; (80024e0 <HAL_GPIO_Init+0x2cc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d101      	bne.n	80023f4 <HAL_GPIO_Init+0x1e0>
 80023f0:	2303      	movs	r3, #3
 80023f2:	e006      	b.n	8002402 <HAL_GPIO_Init+0x1ee>
 80023f4:	2304      	movs	r3, #4
 80023f6:	e004      	b.n	8002402 <HAL_GPIO_Init+0x1ee>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e002      	b.n	8002402 <HAL_GPIO_Init+0x1ee>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_GPIO_Init+0x1ee>
 8002400:	2300      	movs	r3, #0
 8002402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002404:	f002 0203 	and.w	r2, r2, #3
 8002408:	0092      	lsls	r2, r2, #2
 800240a:	4093      	lsls	r3, r2
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002412:	492f      	ldr	r1, [pc, #188]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	3302      	adds	r3, #2
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	492c      	ldr	r1, [pc, #176]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	43db      	mvns	r3, r3
 8002442:	4928      	ldr	r1, [pc, #160]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002444:	4013      	ands	r3, r2
 8002446:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	4922      	ldr	r1, [pc, #136]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	60cb      	str	r3, [r1, #12]
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	43db      	mvns	r3, r3
 800246a:	491e      	ldr	r1, [pc, #120]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800246c:	4013      	ands	r3, r2
 800246e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	4918      	ldr	r1, [pc, #96]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	43db      	mvns	r3, r3
 8002492:	4914      	ldr	r1, [pc, #80]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002494:	4013      	ands	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d021      	beq.n	80024e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	490e      	ldr	r1, [pc, #56]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
 80024b0:	e021      	b.n	80024f6 <HAL_GPIO_Init+0x2e2>
 80024b2:	bf00      	nop
 80024b4:	10320000 	.word	0x10320000
 80024b8:	10310000 	.word	0x10310000
 80024bc:	10220000 	.word	0x10220000
 80024c0:	10210000 	.word	0x10210000
 80024c4:	10120000 	.word	0x10120000
 80024c8:	10110000 	.word	0x10110000
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40010000 	.word	0x40010000
 80024d4:	40010800 	.word	0x40010800
 80024d8:	40010c00 	.word	0x40010c00
 80024dc:	40011000 	.word	0x40011000
 80024e0:	40011400 	.word	0x40011400
 80024e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_GPIO_Init+0x304>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	4909      	ldr	r1, [pc, #36]	; (8002518 <HAL_GPIO_Init+0x304>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	3301      	adds	r3, #1
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	f47f ae8e 	bne.w	8002228 <HAL_GPIO_Init+0x14>
  }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	372c      	adds	r7, #44	; 0x2c
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	40010400 	.word	0x40010400

0800251c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	887b      	ldrh	r3, [r7, #2]
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	e001      	b.n	800253e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800253e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	807b      	strh	r3, [r7, #2]
 8002556:	4613      	mov	r3, r2
 8002558:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800255a:	787b      	ldrb	r3, [r7, #1]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002560:	887a      	ldrh	r2, [r7, #2]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002566:	e003      	b.n	8002570 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	041a      	lsls	r2, r3, #16
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	611a      	str	r2, [r3, #16]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
	...

0800257c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d006      	beq.n	80025a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f806 	bl	80025ac <HAL_GPIO_EXTI_Callback>
  }
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40010400 	.word	0x40010400

080025ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e272      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8087 	beq.w	80026ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e0:	4b92      	ldr	r3, [pc, #584]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d00c      	beq.n	8002606 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ec:	4b8f      	ldr	r3, [pc, #572]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d112      	bne.n	800261e <HAL_RCC_OscConfig+0x5e>
 80025f8:	4b8c      	ldr	r3, [pc, #560]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d10b      	bne.n	800261e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002606:	4b89      	ldr	r3, [pc, #548]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d06c      	beq.n	80026ec <HAL_RCC_OscConfig+0x12c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d168      	bne.n	80026ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e24c      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x76>
 8002628:	4b80      	ldr	r3, [pc, #512]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a7f      	ldr	r2, [pc, #508]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e02e      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x98>
 800263e:	4b7b      	ldr	r3, [pc, #492]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a7a      	ldr	r2, [pc, #488]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b78      	ldr	r3, [pc, #480]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a77      	ldr	r2, [pc, #476]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e01d      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0xbc>
 8002662:	4b72      	ldr	r3, [pc, #456]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a71      	ldr	r2, [pc, #452]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b6f      	ldr	r3, [pc, #444]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a6e      	ldr	r2, [pc, #440]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 800267c:	4b6b      	ldr	r3, [pc, #428]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a6a      	ldr	r2, [pc, #424]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a67      	ldr	r2, [pc, #412]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002692:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7ff fbcc 	bl	8001e38 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7ff fbc8 	bl	8001e38 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e200      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	4b5d      	ldr	r3, [pc, #372]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0xe4>
 80026c2:	e014      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff fbb8 	bl	8001e38 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7ff fbb4 	bl	8001e38 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e1ec      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x10c>
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d063      	beq.n	80027c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026fa:	4b4c      	ldr	r3, [pc, #304]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002706:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b08      	cmp	r3, #8
 8002710:	d11c      	bne.n	800274c <HAL_RCC_OscConfig+0x18c>
 8002712:	4b46      	ldr	r3, [pc, #280]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d116      	bne.n	800274c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	4b43      	ldr	r3, [pc, #268]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_RCC_OscConfig+0x176>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e1c0      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4939      	ldr	r1, [pc, #228]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	e03a      	b.n	80027c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002754:	4b36      	ldr	r3, [pc, #216]	; (8002830 <HAL_RCC_OscConfig+0x270>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7ff fb6d 	bl	8001e38 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002762:	f7ff fb69 	bl	8001e38 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e1a1      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4927      	ldr	r1, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
 8002794:	e015      	b.n	80027c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_RCC_OscConfig+0x270>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7ff fb4c 	bl	8001e38 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a4:	f7ff fb48 	bl	8001e38 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e180      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d03a      	beq.n	8002844 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d019      	beq.n	800280a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_RCC_OscConfig+0x274>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7ff fb2c 	bl	8001e38 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e4:	f7ff fb28 	bl	8001e38 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e160      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002802:	2001      	movs	r0, #1
 8002804:	f000 face 	bl	8002da4 <RCC_Delay>
 8002808:	e01c      	b.n	8002844 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_RCC_OscConfig+0x274>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002810:	f7ff fb12 	bl	8001e38 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002816:	e00f      	b.n	8002838 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7ff fb0e 	bl	8001e38 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d908      	bls.n	8002838 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e146      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	42420000 	.word	0x42420000
 8002834:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	4b92      	ldr	r3, [pc, #584]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e9      	bne.n	8002818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a6 	beq.w	800299e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002856:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10d      	bne.n	800287e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	4a87      	ldr	r2, [pc, #540]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	61d3      	str	r3, [r2, #28]
 800286e:	4b85      	ldr	r3, [pc, #532]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d118      	bne.n	80028bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288a:	4b7f      	ldr	r3, [pc, #508]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a7e      	ldr	r2, [pc, #504]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002896:	f7ff facf 	bl	8001e38 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7ff facb 	bl	8001e38 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b64      	cmp	r3, #100	; 0x64
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e103      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	4b75      	ldr	r3, [pc, #468]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x312>
 80028c4:	4b6f      	ldr	r3, [pc, #444]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4a6e      	ldr	r2, [pc, #440]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6213      	str	r3, [r2, #32]
 80028d0:	e02d      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x334>
 80028da:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a69      	ldr	r2, [pc, #420]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	6213      	str	r3, [r2, #32]
 80028e6:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a66      	ldr	r2, [pc, #408]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	6213      	str	r3, [r2, #32]
 80028f2:	e01c      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d10c      	bne.n	8002916 <HAL_RCC_OscConfig+0x356>
 80028fc:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4a60      	ldr	r2, [pc, #384]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	f043 0304 	orr.w	r3, r3, #4
 8002906:	6213      	str	r3, [r2, #32]
 8002908:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a5d      	ldr	r2, [pc, #372]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	e00b      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 8002916:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	4a5a      	ldr	r2, [pc, #360]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	6213      	str	r3, [r2, #32]
 8002922:	4b58      	ldr	r3, [pc, #352]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4a57      	ldr	r2, [pc, #348]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	f023 0304 	bic.w	r3, r3, #4
 800292c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d015      	beq.n	8002962 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002936:	f7ff fa7f 	bl	8001e38 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7ff fa7b 	bl	8001e38 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0b1      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002954:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ee      	beq.n	800293e <HAL_RCC_OscConfig+0x37e>
 8002960:	e014      	b.n	800298c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002962:	f7ff fa69 	bl	8001e38 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	e00a      	b.n	8002980 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7ff fa65 	bl	8001e38 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f241 3288 	movw	r2, #5000	; 0x1388
 8002978:	4293      	cmp	r3, r2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e09b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002980:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ee      	bne.n	800296a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d105      	bne.n	800299e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002992:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8087 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a8:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d061      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d146      	bne.n	8002a4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029bc:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <HAL_RCC_OscConfig+0x4cc>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7ff fa39 	bl	8001e38 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ca:	f7ff fa35 	bl	8001e38 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e06d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029dc:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d108      	bne.n	8002a04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4921      	ldr	r1, [pc, #132]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a04:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a19      	ldr	r1, [r3, #32]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	430b      	orrs	r3, r1
 8002a16:	491b      	ldr	r1, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_RCC_OscConfig+0x4cc>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7ff fa09 	bl	8001e38 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7ff fa05 	bl	8001e38 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e03d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x46a>
 8002a48:	e035      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_RCC_OscConfig+0x4cc>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7ff f9f2 	bl	8001e38 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a58:	f7ff f9ee 	bl	8001e38 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e026      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x498>
 8002a76:	e01e      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e019      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_OscConfig+0x500>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0d0      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b6a      	ldr	r3, [pc, #424]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d910      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b67      	ldr	r3, [pc, #412]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 0207 	bic.w	r2, r3, #7
 8002aee:	4965      	ldr	r1, [pc, #404]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b8      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	494d      	ldr	r1, [pc, #308]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d040      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d115      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e073      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e06b      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba2:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f023 0203 	bic.w	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4936      	ldr	r1, [pc, #216]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb4:	f7ff f940 	bl	8001e38 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbc:	f7ff f93c 	bl	8001e38 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e053      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 020c 	and.w	r2, r3, #12
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d1eb      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d210      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 0207 	bic.w	r2, r3, #7
 8002bfa:	4922      	ldr	r1, [pc, #136]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e032      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4916      	ldr	r1, [pc, #88]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	490e      	ldr	r1, [pc, #56]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c52:	f000 f821 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c64:	5ccb      	ldrb	r3, [r1, r3]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1cc>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1d0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff f89e 	bl	8001db4 <HAL_InitTick>

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40022000 	.word	0x40022000
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	08007d54 	.word	0x08007d54
 8002c90:	20000028 	.word	0x20000028
 8002c94:	2000002c 	.word	0x2000002c

08002c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x94>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d002      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x30>
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x36>
 8002cc6:	e027      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cca:	613b      	str	r3, [r7, #16]
      break;
 8002ccc:	e027      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	0c9b      	lsrs	r3, r3, #18
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	4a17      	ldr	r2, [pc, #92]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cd8:	5cd3      	ldrb	r3, [r2, r3]
 8002cda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d010      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	0c5b      	lsrs	r3, r3, #17
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cfa:	fb03 f202 	mul.w	r2, r3, r2
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e004      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	613b      	str	r3, [r7, #16]
      break;
 8002d16:	e002      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d1a:	613b      	str	r3, [r7, #16]
      break;
 8002d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d1e:	693b      	ldr	r3, [r7, #16]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	007a1200 	.word	0x007a1200
 8002d34:	08007d6c 	.word	0x08007d6c
 8002d38:	08007d7c 	.word	0x08007d7c
 8002d3c:	003d0900 	.word	0x003d0900

08002d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d44:	4b02      	ldr	r3, [pc, #8]	; (8002d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	20000028 	.word	0x20000028

08002d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d58:	f7ff fff2 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4903      	ldr	r1, [pc, #12]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	08007d64 	.word	0x08007d64

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d80:	f7ff ffde 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	0adb      	lsrs	r3, r3, #11
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4903      	ldr	r1, [pc, #12]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08007d64 	.word	0x08007d64

08002da4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <RCC_Delay+0x34>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <RCC_Delay+0x38>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0a5b      	lsrs	r3, r3, #9
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dc0:	bf00      	nop
  }
  while (Delay --);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1e5a      	subs	r2, r3, #1
 8002dc6:	60fa      	str	r2, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f9      	bne.n	8002dc0 <RCC_Delay+0x1c>
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	20000028 	.word	0x20000028
 8002ddc:	10624dd3 	.word	0x10624dd3

08002de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e041      	b.n	8002e76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fe fd70 	bl	80018ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	f000 fe22 	bl	8003a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e041      	b.n	8002f14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f839 	bl	8002f1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2202      	movs	r2, #2
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	f000 fdd3 	bl	8003a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d109      	bne.n	8002f54 <HAL_TIM_PWM_Start+0x24>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	bf14      	ite	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	2300      	moveq	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e022      	b.n	8002f9a <HAL_TIM_PWM_Start+0x6a>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d109      	bne.n	8002f6e <HAL_TIM_PWM_Start+0x3e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	e015      	b.n	8002f9a <HAL_TIM_PWM_Start+0x6a>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d109      	bne.n	8002f88 <HAL_TIM_PWM_Start+0x58>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e008      	b.n	8002f9a <HAL_TIM_PWM_Start+0x6a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	bf14      	ite	ne
 8002f94:	2301      	movne	r3, #1
 8002f96:	2300      	moveq	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e05e      	b.n	8003060 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d104      	bne.n	8002fb2 <HAL_TIM_PWM_Start+0x82>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb0:	e013      	b.n	8002fda <HAL_TIM_PWM_Start+0xaa>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d104      	bne.n	8002fc2 <HAL_TIM_PWM_Start+0x92>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc0:	e00b      	b.n	8002fda <HAL_TIM_PWM_Start+0xaa>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d104      	bne.n	8002fd2 <HAL_TIM_PWM_Start+0xa2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd0:	e003      	b.n	8002fda <HAL_TIM_PWM_Start+0xaa>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f001 f8cd 	bl	8004182 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <HAL_TIM_PWM_Start+0x138>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d107      	bne.n	8003002 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003000:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a18      	ldr	r2, [pc, #96]	; (8003068 <HAL_TIM_PWM_Start+0x138>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00e      	beq.n	800302a <HAL_TIM_PWM_Start+0xfa>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003014:	d009      	beq.n	800302a <HAL_TIM_PWM_Start+0xfa>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <HAL_TIM_PWM_Start+0x13c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_TIM_PWM_Start+0xfa>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a12      	ldr	r2, [pc, #72]	; (8003070 <HAL_TIM_PWM_Start+0x140>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d111      	bne.n	800304e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b06      	cmp	r3, #6
 800303a:	d010      	beq.n	800305e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304c:	e007      	b.n	800305e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40000400 	.word	0x40000400
 8003070:	40000800 	.word	0x40000800

08003074 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e041      	b.n	800310a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f839 	bl	8003112 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f000 fcd8 	bl	8003a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d104      	bne.n	8003142 <HAL_TIM_IC_Start_IT+0x1e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800313e:	b2db      	uxtb	r3, r3
 8003140:	e013      	b.n	800316a <HAL_TIM_IC_Start_IT+0x46>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b04      	cmp	r3, #4
 8003146:	d104      	bne.n	8003152 <HAL_TIM_IC_Start_IT+0x2e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800314e:	b2db      	uxtb	r3, r3
 8003150:	e00b      	b.n	800316a <HAL_TIM_IC_Start_IT+0x46>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b08      	cmp	r3, #8
 8003156:	d104      	bne.n	8003162 <HAL_TIM_IC_Start_IT+0x3e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800315e:	b2db      	uxtb	r3, r3
 8003160:	e003      	b.n	800316a <HAL_TIM_IC_Start_IT+0x46>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003168:	b2db      	uxtb	r3, r3
 800316a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d104      	bne.n	800317c <HAL_TIM_IC_Start_IT+0x58>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003178:	b2db      	uxtb	r3, r3
 800317a:	e013      	b.n	80031a4 <HAL_TIM_IC_Start_IT+0x80>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b04      	cmp	r3, #4
 8003180:	d104      	bne.n	800318c <HAL_TIM_IC_Start_IT+0x68>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e00b      	b.n	80031a4 <HAL_TIM_IC_Start_IT+0x80>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b08      	cmp	r3, #8
 8003190:	d104      	bne.n	800319c <HAL_TIM_IC_Start_IT+0x78>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e003      	b.n	80031a4 <HAL_TIM_IC_Start_IT+0x80>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80031a6:	7bbb      	ldrb	r3, [r7, #14]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d102      	bne.n	80031b2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80031ac:	7b7b      	ldrb	r3, [r7, #13]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d001      	beq.n	80031b6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e0b8      	b.n	8003328 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_IC_Start_IT+0xa2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c4:	e013      	b.n	80031ee <HAL_TIM_IC_Start_IT+0xca>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_IC_Start_IT+0xb2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d4:	e00b      	b.n	80031ee <HAL_TIM_IC_Start_IT+0xca>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_IC_Start_IT+0xc2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e4:	e003      	b.n	80031ee <HAL_TIM_IC_Start_IT+0xca>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_IC_Start_IT+0xda>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031fc:	e013      	b.n	8003226 <HAL_TIM_IC_Start_IT+0x102>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d104      	bne.n	800320e <HAL_TIM_IC_Start_IT+0xea>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800320c:	e00b      	b.n	8003226 <HAL_TIM_IC_Start_IT+0x102>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d104      	bne.n	800321e <HAL_TIM_IC_Start_IT+0xfa>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321c:	e003      	b.n	8003226 <HAL_TIM_IC_Start_IT+0x102>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b0c      	cmp	r3, #12
 800322a:	d841      	bhi.n	80032b0 <HAL_TIM_IC_Start_IT+0x18c>
 800322c:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <HAL_TIM_IC_Start_IT+0x110>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003269 	.word	0x08003269
 8003238:	080032b1 	.word	0x080032b1
 800323c:	080032b1 	.word	0x080032b1
 8003240:	080032b1 	.word	0x080032b1
 8003244:	0800327b 	.word	0x0800327b
 8003248:	080032b1 	.word	0x080032b1
 800324c:	080032b1 	.word	0x080032b1
 8003250:	080032b1 	.word	0x080032b1
 8003254:	0800328d 	.word	0x0800328d
 8003258:	080032b1 	.word	0x080032b1
 800325c:	080032b1 	.word	0x080032b1
 8003260:	080032b1 	.word	0x080032b1
 8003264:	0800329f 	.word	0x0800329f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0202 	orr.w	r2, r2, #2
 8003276:	60da      	str	r2, [r3, #12]
      break;
 8003278:	e01d      	b.n	80032b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0204 	orr.w	r2, r2, #4
 8003288:	60da      	str	r2, [r3, #12]
      break;
 800328a:	e014      	b.n	80032b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0208 	orr.w	r2, r2, #8
 800329a:	60da      	str	r2, [r3, #12]
      break;
 800329c:	e00b      	b.n	80032b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0210 	orr.w	r2, r2, #16
 80032ac:	60da      	str	r2, [r3, #12]
      break;
 80032ae:	e002      	b.n	80032b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
      break;
 80032b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d134      	bne.n	8003326 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2201      	movs	r2, #1
 80032c2:	6839      	ldr	r1, [r7, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 ff5c 	bl	8004182 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <HAL_TIM_IC_Start_IT+0x20c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00e      	beq.n	80032f2 <HAL_TIM_IC_Start_IT+0x1ce>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d009      	beq.n	80032f2 <HAL_TIM_IC_Start_IT+0x1ce>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a14      	ldr	r2, [pc, #80]	; (8003334 <HAL_TIM_IC_Start_IT+0x210>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <HAL_TIM_IC_Start_IT+0x1ce>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a12      	ldr	r2, [pc, #72]	; (8003338 <HAL_TIM_IC_Start_IT+0x214>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d111      	bne.n	8003316 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b06      	cmp	r3, #6
 8003302:	d010      	beq.n	8003326 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003314:	e007      	b.n	8003326 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003326:	7bfb      	ldrb	r3, [r7, #15]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40000400 	.word	0x40000400
 8003338:	40000800 	.word	0x40000800

0800333c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b02      	cmp	r3, #2
 8003350:	d122      	bne.n	8003398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b02      	cmp	r3, #2
 800335e:	d11b      	bne.n	8003398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0202 	mvn.w	r2, #2
 8003368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe f994 	bl	80016ac <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fb53 	bl	8003a32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fb59 	bl	8003a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d122      	bne.n	80033ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d11b      	bne.n	80033ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0204 	mvn.w	r2, #4
 80033bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe f96a 	bl	80016ac <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fb29 	bl	8003a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fb2f 	bl	8003a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d122      	bne.n	8003440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b08      	cmp	r3, #8
 8003406:	d11b      	bne.n	8003440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0208 	mvn.w	r2, #8
 8003410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2204      	movs	r2, #4
 8003416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fe f940 	bl	80016ac <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 faff 	bl	8003a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fb05 	bl	8003a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b10      	cmp	r3, #16
 800344c:	d122      	bne.n	8003494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b10      	cmp	r3, #16
 800345a:	d11b      	bne.n	8003494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0210 	mvn.w	r2, #16
 8003464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2208      	movs	r2, #8
 800346a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fe f916 	bl	80016ac <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fad5 	bl	8003a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fadb 	bl	8003a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10e      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d107      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0201 	mvn.w	r2, #1
 80034b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fab0 	bl	8003a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d10e      	bne.n	80034ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d107      	bne.n	80034ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fed7 	bl	800429a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d10e      	bne.n	8003518 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d107      	bne.n	8003518 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa9f 	bl	8003a56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b20      	cmp	r3, #32
 8003524:	d10e      	bne.n	8003544 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b20      	cmp	r3, #32
 8003532:	d107      	bne.n	8003544 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0220 	mvn.w	r2, #32
 800353c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fea2 	bl	8004288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003566:	2302      	movs	r3, #2
 8003568:	e088      	b.n	800367c <HAL_TIM_IC_ConfigChannel+0x130>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d11b      	bne.n	80035b0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003588:	f000 fc58 	bl	8003e3c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 020c 	bic.w	r2, r2, #12
 800359a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6999      	ldr	r1, [r3, #24]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	619a      	str	r2, [r3, #24]
 80035ae:	e060      	b.n	8003672 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d11c      	bne.n	80035f0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80035c6:	f000 fcc1 	bl	8003f4c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699a      	ldr	r2, [r3, #24]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6999      	ldr	r1, [r3, #24]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	021a      	lsls	r2, r3, #8
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	619a      	str	r2, [r3, #24]
 80035ee:	e040      	b.n	8003672 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d11b      	bne.n	800362e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003606:	f000 fd0c 	bl	8004022 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 020c 	bic.w	r2, r2, #12
 8003618:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69d9      	ldr	r1, [r3, #28]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	61da      	str	r2, [r3, #28]
 800362c:	e021      	b.n	8003672 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b0c      	cmp	r3, #12
 8003632:	d11c      	bne.n	800366e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003644:	f000 fd28 	bl	8004098 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	69da      	ldr	r2, [r3, #28]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003656:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69d9      	ldr	r1, [r3, #28]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	021a      	lsls	r2, r3, #8
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	61da      	str	r2, [r3, #28]
 800366c:	e001      	b.n	8003672 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800367a:	7dfb      	ldrb	r3, [r7, #23]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800369e:	2302      	movs	r3, #2
 80036a0:	e0ae      	b.n	8003800 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b0c      	cmp	r3, #12
 80036ae:	f200 809f 	bhi.w	80037f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036b2:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b8:	080036ed 	.word	0x080036ed
 80036bc:	080037f1 	.word	0x080037f1
 80036c0:	080037f1 	.word	0x080037f1
 80036c4:	080037f1 	.word	0x080037f1
 80036c8:	0800372d 	.word	0x0800372d
 80036cc:	080037f1 	.word	0x080037f1
 80036d0:	080037f1 	.word	0x080037f1
 80036d4:	080037f1 	.word	0x080037f1
 80036d8:	0800376f 	.word	0x0800376f
 80036dc:	080037f1 	.word	0x080037f1
 80036e0:	080037f1 	.word	0x080037f1
 80036e4:	080037f1 	.word	0x080037f1
 80036e8:	080037af 	.word	0x080037af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fa1a 	bl	8003b2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0208 	orr.w	r2, r2, #8
 8003706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0204 	bic.w	r2, r2, #4
 8003716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6999      	ldr	r1, [r3, #24]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	619a      	str	r2, [r3, #24]
      break;
 800372a:	e064      	b.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fa60 	bl	8003bf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6999      	ldr	r1, [r3, #24]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	021a      	lsls	r2, r3, #8
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	619a      	str	r2, [r3, #24]
      break;
 800376c:	e043      	b.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 faa9 	bl	8003ccc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0208 	orr.w	r2, r2, #8
 8003788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0204 	bic.w	r2, r2, #4
 8003798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69d9      	ldr	r1, [r3, #28]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	61da      	str	r2, [r3, #28]
      break;
 80037ac:	e023      	b.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 faf3 	bl	8003da0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69d9      	ldr	r1, [r3, #28]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	021a      	lsls	r2, r3, #8
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	61da      	str	r2, [r3, #28]
      break;
 80037ee:	e002      	b.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	75fb      	strb	r3, [r7, #23]
      break;
 80037f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_TIM_ConfigClockSource+0x1c>
 8003820:	2302      	movs	r3, #2
 8003822:	e0b4      	b.n	800398e <HAL_TIM_ConfigClockSource+0x186>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800384a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385c:	d03e      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0xd4>
 800385e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003862:	f200 8087 	bhi.w	8003974 <HAL_TIM_ConfigClockSource+0x16c>
 8003866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386a:	f000 8086 	beq.w	800397a <HAL_TIM_ConfigClockSource+0x172>
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003872:	d87f      	bhi.n	8003974 <HAL_TIM_ConfigClockSource+0x16c>
 8003874:	2b70      	cmp	r3, #112	; 0x70
 8003876:	d01a      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0xa6>
 8003878:	2b70      	cmp	r3, #112	; 0x70
 800387a:	d87b      	bhi.n	8003974 <HAL_TIM_ConfigClockSource+0x16c>
 800387c:	2b60      	cmp	r3, #96	; 0x60
 800387e:	d050      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x11a>
 8003880:	2b60      	cmp	r3, #96	; 0x60
 8003882:	d877      	bhi.n	8003974 <HAL_TIM_ConfigClockSource+0x16c>
 8003884:	2b50      	cmp	r3, #80	; 0x50
 8003886:	d03c      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0xfa>
 8003888:	2b50      	cmp	r3, #80	; 0x50
 800388a:	d873      	bhi.n	8003974 <HAL_TIM_ConfigClockSource+0x16c>
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d058      	beq.n	8003942 <HAL_TIM_ConfigClockSource+0x13a>
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d86f      	bhi.n	8003974 <HAL_TIM_ConfigClockSource+0x16c>
 8003894:	2b30      	cmp	r3, #48	; 0x30
 8003896:	d064      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x15a>
 8003898:	2b30      	cmp	r3, #48	; 0x30
 800389a:	d86b      	bhi.n	8003974 <HAL_TIM_ConfigClockSource+0x16c>
 800389c:	2b20      	cmp	r3, #32
 800389e:	d060      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x15a>
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d867      	bhi.n	8003974 <HAL_TIM_ConfigClockSource+0x16c>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d05c      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x15a>
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d05a      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x15a>
 80038ac:	e062      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038be:	f000 fc41 	bl	8004144 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	609a      	str	r2, [r3, #8]
      break;
 80038da:	e04f      	b.n	800397c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038ec:	f000 fc2a 	bl	8004144 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038fe:	609a      	str	r2, [r3, #8]
      break;
 8003900:	e03c      	b.n	800397c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	461a      	mov	r2, r3
 8003910:	f000 faee 	bl	8003ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2150      	movs	r1, #80	; 0x50
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fbf8 	bl	8004110 <TIM_ITRx_SetConfig>
      break;
 8003920:	e02c      	b.n	800397c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800392e:	461a      	mov	r2, r3
 8003930:	f000 fb48 	bl	8003fc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2160      	movs	r1, #96	; 0x60
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fbe8 	bl	8004110 <TIM_ITRx_SetConfig>
      break;
 8003940:	e01c      	b.n	800397c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800394e:	461a      	mov	r2, r3
 8003950:	f000 face 	bl	8003ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2140      	movs	r1, #64	; 0x40
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fbd8 	bl	8004110 <TIM_ITRx_SetConfig>
      break;
 8003960:	e00c      	b.n	800397c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4619      	mov	r1, r3
 800396c:	4610      	mov	r0, r2
 800396e:	f000 fbcf 	bl	8004110 <TIM_ITRx_SetConfig>
      break;
 8003972:	e003      	b.n	800397c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
      break;
 8003978:	e000      	b.n	800397c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800397a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	d831      	bhi.n	8003a10 <HAL_TIM_ReadCapturedValue+0x78>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039e9 	.word	0x080039e9
 80039b8:	08003a11 	.word	0x08003a11
 80039bc:	08003a11 	.word	0x08003a11
 80039c0:	08003a11 	.word	0x08003a11
 80039c4:	080039f3 	.word	0x080039f3
 80039c8:	08003a11 	.word	0x08003a11
 80039cc:	08003a11 	.word	0x08003a11
 80039d0:	08003a11 	.word	0x08003a11
 80039d4:	080039fd 	.word	0x080039fd
 80039d8:	08003a11 	.word	0x08003a11
 80039dc:	08003a11 	.word	0x08003a11
 80039e0:	08003a11 	.word	0x08003a11
 80039e4:	08003a07 	.word	0x08003a07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ee:	60fb      	str	r3, [r7, #12]

      break;
 80039f0:	e00f      	b.n	8003a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	60fb      	str	r3, [r7, #12]

      break;
 80039fa:	e00a      	b.n	8003a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a02:	60fb      	str	r3, [r7, #12]

      break;
 8003a04:	e005      	b.n	8003a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	60fb      	str	r3, [r7, #12]

      break;
 8003a0e:	e000      	b.n	8003a12 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003a10:	bf00      	nop
  }

  return tmpreg;
 8003a12:	68fb      	ldr	r3, [r7, #12]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop

08003a20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a29      	ldr	r2, [pc, #164]	; (8003b20 <TIM_Base_SetConfig+0xb8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00b      	beq.n	8003a98 <TIM_Base_SetConfig+0x30>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a86:	d007      	beq.n	8003a98 <TIM_Base_SetConfig+0x30>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a26      	ldr	r2, [pc, #152]	; (8003b24 <TIM_Base_SetConfig+0xbc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_Base_SetConfig+0x30>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a25      	ldr	r2, [pc, #148]	; (8003b28 <TIM_Base_SetConfig+0xc0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d108      	bne.n	8003aaa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <TIM_Base_SetConfig+0xb8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_Base_SetConfig+0x62>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d007      	beq.n	8003aca <TIM_Base_SetConfig+0x62>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a19      	ldr	r2, [pc, #100]	; (8003b24 <TIM_Base_SetConfig+0xbc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_Base_SetConfig+0x62>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <TIM_Base_SetConfig+0xc0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d108      	bne.n	8003adc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a07      	ldr	r2, [pc, #28]	; (8003b20 <TIM_Base_SetConfig+0xb8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d103      	bne.n	8003b10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	615a      	str	r2, [r3, #20]
}
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800

08003b2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f023 0201 	bic.w	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f023 0302 	bic.w	r3, r3, #2
 8003b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <TIM_OC1_SetConfig+0xc8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10c      	bne.n	8003ba2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0308 	bic.w	r3, r3, #8
 8003b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <TIM_OC1_SetConfig+0xc8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d111      	bne.n	8003bce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	621a      	str	r2, [r3, #32]
}
 8003be8:	bf00      	nop
 8003bea:	371c      	adds	r7, #28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40012c00 	.word	0x40012c00

08003bf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f023 0210 	bic.w	r2, r3, #16
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0320 	bic.w	r3, r3, #32
 8003c42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <TIM_OC2_SetConfig+0xd0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d10d      	bne.n	8003c74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a14      	ldr	r2, [pc, #80]	; (8003cc8 <TIM_OC2_SetConfig+0xd0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d113      	bne.n	8003ca4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	40012c00 	.word	0x40012c00

08003ccc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <TIM_OC3_SetConfig+0xd0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d10d      	bne.n	8003d46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <TIM_OC3_SetConfig+0xd0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d113      	bne.n	8003d76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	621a      	str	r2, [r3, #32]
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40012c00 	.word	0x40012c00

08003da0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	021b      	lsls	r3, r3, #8
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	031b      	lsls	r3, r3, #12
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a0f      	ldr	r2, [pc, #60]	; (8003e38 <TIM_OC4_SetConfig+0x98>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d109      	bne.n	8003e14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	019b      	lsls	r3, r3, #6
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	40012c00 	.word	0x40012c00

08003e3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f023 0201 	bic.w	r2, r3, #1
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <TIM_TI1_SetConfig+0xa8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00b      	beq.n	8003e82 <TIM_TI1_SetConfig+0x46>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e70:	d007      	beq.n	8003e82 <TIM_TI1_SetConfig+0x46>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4a1c      	ldr	r2, [pc, #112]	; (8003ee8 <TIM_TI1_SetConfig+0xac>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d003      	beq.n	8003e82 <TIM_TI1_SetConfig+0x46>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4a1b      	ldr	r2, [pc, #108]	; (8003eec <TIM_TI1_SetConfig+0xb0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <TIM_TI1_SetConfig+0x4a>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <TIM_TI1_SetConfig+0x4c>
 8003e86:	2300      	movs	r3, #0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f023 0303 	bic.w	r3, r3, #3
 8003e92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	e003      	b.n	8003ea6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f023 030a 	bic.w	r3, r3, #10
 8003ec0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f003 030a 	and.w	r3, r3, #10
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	40012c00 	.word	0x40012c00
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800

08003ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	f023 0201 	bic.w	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f023 030a 	bic.w	r3, r3, #10
 8003f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	621a      	str	r2, [r3, #32]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f023 0210 	bic.w	r2, r3, #16
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	031b      	lsls	r3, r3, #12
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f9e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f023 0210 	bic.w	r2, r3, #16
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	031b      	lsls	r3, r3, #12
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004000:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	621a      	str	r2, [r3, #32]
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004022:	b480      	push	{r7}
 8004024:	b087      	sub	sp, #28
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	b2db      	uxtb	r3, r3
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004072:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	031b      	lsls	r3, r3, #12
 80040dc:	b29b      	uxth	r3, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	031b      	lsls	r3, r3, #12
 80040f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004126:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	f043 0307 	orr.w	r3, r3, #7
 8004132:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	609a      	str	r2, [r3, #8]
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	021a      	lsls	r2, r3, #8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	431a      	orrs	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4313      	orrs	r3, r2
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	609a      	str	r2, [r3, #8]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004182:	b480      	push	{r7}
 8004184:	b087      	sub	sp, #28
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	2201      	movs	r2, #1
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a1a      	ldr	r2, [r3, #32]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	401a      	ands	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1a      	ldr	r2, [r3, #32]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ba:	431a      	orrs	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr
	...

080041cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e046      	b.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a16      	ldr	r2, [pc, #88]	; (800427c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00e      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004230:	d009      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a12      	ldr	r2, [pc, #72]	; (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a10      	ldr	r2, [pc, #64]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d10c      	bne.n	8004260 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800424c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	4313      	orrs	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800

08004288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr

0800429a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e042      	b.n	8004344 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fd fbca 	bl	8001a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2224      	movs	r2, #36	; 0x24
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fdf1 	bl	8004ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08a      	sub	sp, #40	; 0x28
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b20      	cmp	r3, #32
 800436a:	d16d      	bne.n	8004448 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_UART_Transmit+0x2c>
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e066      	b.n	800444a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2221      	movs	r2, #33	; 0x21
 8004386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800438a:	f7fd fd55 	bl	8001e38 <HAL_GetTick>
 800438e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	88fa      	ldrh	r2, [r7, #6]
 800439a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a4:	d108      	bne.n	80043b8 <HAL_UART_Transmit+0x6c>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	e003      	b.n	80043c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043c0:	e02a      	b.n	8004418 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	2180      	movs	r1, #128	; 0x80
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 fb41 	bl	8004a54 <UART_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e036      	b.n	800444a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	3302      	adds	r3, #2
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	e007      	b.n	800440a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3301      	adds	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1cf      	bne.n	80043c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2200      	movs	r2, #0
 800442a:	2140      	movs	r1, #64	; 0x40
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fb11 	bl	8004a54 <UART_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e006      	b.n	800444a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	e000      	b.n	800444a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004448:	2302      	movs	r3, #2
  }
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	4613      	mov	r3, r2
 800445e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b20      	cmp	r3, #32
 800446a:	d121      	bne.n	80044b0 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <HAL_UART_Transmit_IT+0x26>
 8004472:	88fb      	ldrh	r3, [r7, #6]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e01a      	b.n	80044b2 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	88fa      	ldrh	r2, [r7, #6]
 8004486:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2221      	movs	r2, #33	; 0x21
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044aa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	e000      	b.n	80044b2 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80044b0:	2302      	movs	r3, #2
  }
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	4613      	mov	r3, r2
 80044c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	d112      	bne.n	80044fc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <HAL_UART_Receive_IT+0x26>
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e00b      	b.n	80044fe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	461a      	mov	r2, r3
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fb1c 	bl	8004b30 <UART_Start_Receive_IT>
 80044f8:	4603      	mov	r3, r0
 80044fa:	e000      	b.n	80044fe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80044fc:	2302      	movs	r3, #2
  }
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b0ba      	sub	sp, #232	; 0xe8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800452e:	2300      	movs	r3, #0
 8004530:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004534:	2300      	movs	r3, #0
 8004536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800453a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10f      	bne.n	800456e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <HAL_UART_IRQHandler+0x66>
 800455a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fbf8 	bl	8004d5c <UART_Receive_IT>
      return;
 800456c:	e25b      	b.n	8004a26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800456e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80de 	beq.w	8004734 <HAL_UART_IRQHandler+0x22c>
 8004578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004588:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80d1 	beq.w	8004734 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_UART_IRQHandler+0xae>
 800459e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <HAL_UART_IRQHandler+0xd2>
 80045c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	f043 0202 	orr.w	r2, r3, #2
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00b      	beq.n	80045fe <HAL_UART_IRQHandler+0xf6>
 80045e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	f043 0204 	orr.w	r2, r3, #4
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d011      	beq.n	800462e <HAL_UART_IRQHandler+0x126>
 800460a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	f043 0208 	orr.w	r2, r3, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 81f2 	beq.w	8004a1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_UART_IRQHandler+0x14e>
 8004644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fb83 	bl	8004d5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d103      	bne.n	8004682 <HAL_UART_IRQHandler+0x17a>
 800467a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d04f      	beq.n	8004722 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fa8d 	bl	8004ba2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d041      	beq.n	800471a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3314      	adds	r3, #20
 800469c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3314      	adds	r3, #20
 80046be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1d9      	bne.n	8004696 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d013      	beq.n	8004712 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ee:	4a7e      	ldr	r2, [pc, #504]	; (80048e8 <HAL_UART_IRQHandler+0x3e0>)
 80046f0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fd fd14 	bl	8002124 <HAL_DMA_Abort_IT>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d016      	beq.n	8004730 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800470c:	4610      	mov	r0, r2
 800470e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	e00e      	b.n	8004730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f98a 	bl	8004a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	e00a      	b.n	8004730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f986 	bl	8004a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	e006      	b.n	8004730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f982 	bl	8004a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800472e:	e175      	b.n	8004a1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	bf00      	nop
    return;
 8004732:	e173      	b.n	8004a1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	2b01      	cmp	r3, #1
 800473a:	f040 814f 	bne.w	80049dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800473e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8148 	beq.w	80049dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800474c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8141 	beq.w	80049dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80b6 	beq.w	80048ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800478c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8145 	beq.w	8004a20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800479a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800479e:	429a      	cmp	r2, r3
 80047a0:	f080 813e 	bcs.w	8004a20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	f000 8088 	beq.w	80048c8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047e4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1d9      	bne.n	80047b8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3314      	adds	r3, #20
 800480a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004814:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3314      	adds	r3, #20
 8004824:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004828:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800482c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004830:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800483a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e1      	bne.n	8004804 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3314      	adds	r3, #20
 8004860:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004864:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004866:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800486a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e3      	bne.n	8004840 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	330c      	adds	r3, #12
 800488c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004898:	f023 0310 	bic.w	r3, r3, #16
 800489c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	330c      	adds	r3, #12
 80048a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80048ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e3      	bne.n	8004886 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fd fbf3 	bl	80020ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	b29b      	uxth	r3, r3
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f8ad 	bl	8004a3e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048e4:	e09c      	b.n	8004a20 <HAL_UART_IRQHandler+0x518>
 80048e6:	bf00      	nop
 80048e8:	08004c67 	.word	0x08004c67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 808e 	beq.w	8004a24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8089 	beq.w	8004a24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	330c      	adds	r3, #12
 8004918:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004928:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004936:	647a      	str	r2, [r7, #68]	; 0x44
 8004938:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800493c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e3      	bne.n	8004912 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3314      	adds	r3, #20
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	623b      	str	r3, [r7, #32]
   return(result);
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3314      	adds	r3, #20
 800496a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800496e:	633a      	str	r2, [r7, #48]	; 0x30
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004976:	e841 2300 	strex	r3, r2, [r1]
 800497a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1e3      	bne.n	800494a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0310 	bic.w	r3, r3, #16
 80049a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049b4:	61fa      	str	r2, [r7, #28]
 80049b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	69b9      	ldr	r1, [r7, #24]
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	617b      	str	r3, [r7, #20]
   return(result);
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e3      	bne.n	8004990 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f832 	bl	8004a3e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049da:	e023      	b.n	8004a24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d009      	beq.n	80049fc <HAL_UART_IRQHandler+0x4f4>
 80049e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f94a 	bl	8004c8e <UART_Transmit_IT>
    return;
 80049fa:	e014      	b.n	8004a26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <HAL_UART_IRQHandler+0x51e>
 8004a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f989 	bl	8004d2c <UART_EndTransmit_IT>
    return;
 8004a1a:	e004      	b.n	8004a26 <HAL_UART_IRQHandler+0x51e>
    return;
 8004a1c:	bf00      	nop
 8004a1e:	e002      	b.n	8004a26 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a20:	bf00      	nop
 8004a22:	e000      	b.n	8004a26 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a24:	bf00      	nop
  }
}
 8004a26:	37e8      	adds	r7, #232	; 0xe8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	460b      	mov	r3, r1
 8004a48:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b090      	sub	sp, #64	; 0x40
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	4613      	mov	r3, r2
 8004a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a64:	e050      	b.n	8004b08 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6c:	d04c      	beq.n	8004b08 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a74:	f7fd f9e0 	bl	8001e38 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d241      	bcs.n	8004b08 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	330c      	adds	r3, #12
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004aa4:	637a      	str	r2, [r7, #52]	; 0x34
 8004aa6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e5      	bne.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3314      	adds	r3, #20
 8004abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3314      	adds	r3, #20
 8004ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ad8:	623a      	str	r2, [r7, #32]
 8004ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	69f9      	ldr	r1, [r7, #28]
 8004ade:	6a3a      	ldr	r2, [r7, #32]
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e5      	bne.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e00f      	b.n	8004b28 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4013      	ands	r3, r2
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d09f      	beq.n	8004a66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3740      	adds	r7, #64	; 0x40
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	88fa      	ldrh	r2, [r7, #6]
 8004b4e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2222      	movs	r2, #34	; 0x22
 8004b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0201 	orr.w	r2, r2, #1
 8004b84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0220 	orr.w	r2, r2, #32
 8004b94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b095      	sub	sp, #84	; 0x54
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	330c      	adds	r3, #12
 8004bc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bca:	643a      	str	r2, [r7, #64]	; 0x40
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e5      	bne.n	8004baa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3314      	adds	r3, #20
 8004be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3314      	adds	r3, #20
 8004bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e5      	bne.n	8004bde <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d119      	bne.n	8004c4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	330c      	adds	r3, #12
 8004c20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f023 0310 	bic.w	r3, r3, #16
 8004c30:	647b      	str	r3, [r7, #68]	; 0x44
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c3a:	61ba      	str	r2, [r7, #24]
 8004c3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6979      	ldr	r1, [r7, #20]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	613b      	str	r3, [r7, #16]
   return(result);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e5      	bne.n	8004c1a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c5c:	bf00      	nop
 8004c5e:	3754      	adds	r7, #84	; 0x54
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr

08004c66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b084      	sub	sp, #16
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff fed3 	bl	8004a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c86:	bf00      	nop
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b21      	cmp	r3, #33	; 0x21
 8004ca0:	d13e      	bne.n	8004d20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004caa:	d114      	bne.n	8004cd6 <UART_Transmit_IT+0x48>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d110      	bne.n	8004cd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	621a      	str	r2, [r3, #32]
 8004cd4:	e008      	b.n	8004ce8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	1c59      	adds	r1, r3, #1
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6211      	str	r1, [r2, #32]
 8004ce0:	781a      	ldrb	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10f      	bne.n	8004d1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	e000      	b.n	8004d22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
  }
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7fc fa49 	bl	80011e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08c      	sub	sp, #48	; 0x30
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b22      	cmp	r3, #34	; 0x22
 8004d6e:	f040 80ae 	bne.w	8004ece <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7a:	d117      	bne.n	8004dac <UART_Receive_IT+0x50>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d113      	bne.n	8004dac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	1c9a      	adds	r2, r3, #2
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	629a      	str	r2, [r3, #40]	; 0x28
 8004daa:	e026      	b.n	8004dfa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dbe:	d007      	beq.n	8004dd0 <UART_Receive_IT+0x74>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <UART_Receive_IT+0x82>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d106      	bne.n	8004dde <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e008      	b.n	8004df0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	4619      	mov	r1, r3
 8004e08:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d15d      	bne.n	8004eca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0220 	bic.w	r2, r2, #32
 8004e1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695a      	ldr	r2, [r3, #20]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0201 	bic.w	r2, r2, #1
 8004e3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d135      	bne.n	8004ec0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f023 0310 	bic.w	r3, r3, #16
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7a:	623a      	str	r2, [r7, #32]
 8004e7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	69f9      	ldr	r1, [r7, #28]
 8004e80:	6a3a      	ldr	r2, [r7, #32]
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e5      	bne.n	8004e5a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d10a      	bne.n	8004eb2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff fdc0 	bl	8004a3e <HAL_UARTEx_RxEventCallback>
 8004ebe:	e002      	b.n	8004ec6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fc f963 	bl	800118c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e002      	b.n	8004ed0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e000      	b.n	8004ed0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ece:	2302      	movs	r3, #2
  }
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3730      	adds	r7, #48	; 0x30
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f12:	f023 030c 	bic.w	r3, r3, #12
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a2c      	ldr	r2, [pc, #176]	; (8004fec <UART_SetConfig+0x114>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d103      	bne.n	8004f48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f40:	f7fd ff1c 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	e002      	b.n	8004f4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f48:	f7fd ff04 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8004f4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	009a      	lsls	r2, r3, #2
 8004f58:	441a      	add	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	4a22      	ldr	r2, [pc, #136]	; (8004ff0 <UART_SetConfig+0x118>)
 8004f66:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	0119      	lsls	r1, r3, #4
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	009a      	lsls	r2, r3, #2
 8004f78:	441a      	add	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f84:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <UART_SetConfig+0x118>)
 8004f86:	fba3 0302 	umull	r0, r3, r3, r2
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	2064      	movs	r0, #100	; 0x64
 8004f8e:	fb00 f303 	mul.w	r3, r0, r3
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	3332      	adds	r3, #50	; 0x32
 8004f98:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <UART_SetConfig+0x118>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa4:	4419      	add	r1, r3
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	009a      	lsls	r2, r3, #2
 8004fb0:	441a      	add	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <UART_SetConfig+0x118>)
 8004fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	2064      	movs	r0, #100	; 0x64
 8004fc6:	fb00 f303 	mul.w	r3, r0, r3
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	3332      	adds	r3, #50	; 0x32
 8004fd0:	4a07      	ldr	r2, [pc, #28]	; (8004ff0 <UART_SetConfig+0x118>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	f003 020f 	and.w	r2, r3, #15
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40013800 	.word	0x40013800
 8004ff0:	51eb851f 	.word	0x51eb851f

08004ff4 <__cvt>:
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ffa:	461f      	mov	r7, r3
 8004ffc:	bfbb      	ittet	lt
 8004ffe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005002:	461f      	movlt	r7, r3
 8005004:	2300      	movge	r3, #0
 8005006:	232d      	movlt	r3, #45	; 0x2d
 8005008:	b088      	sub	sp, #32
 800500a:	4614      	mov	r4, r2
 800500c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800500e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005010:	7013      	strb	r3, [r2, #0]
 8005012:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005014:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005018:	f023 0820 	bic.w	r8, r3, #32
 800501c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005020:	d005      	beq.n	800502e <__cvt+0x3a>
 8005022:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005026:	d100      	bne.n	800502a <__cvt+0x36>
 8005028:	3501      	adds	r5, #1
 800502a:	2302      	movs	r3, #2
 800502c:	e000      	b.n	8005030 <__cvt+0x3c>
 800502e:	2303      	movs	r3, #3
 8005030:	aa07      	add	r2, sp, #28
 8005032:	9204      	str	r2, [sp, #16]
 8005034:	aa06      	add	r2, sp, #24
 8005036:	e9cd a202 	strd	sl, r2, [sp, #8]
 800503a:	e9cd 3500 	strd	r3, r5, [sp]
 800503e:	4622      	mov	r2, r4
 8005040:	463b      	mov	r3, r7
 8005042:	f000 fe85 	bl	8005d50 <_dtoa_r>
 8005046:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800504a:	4606      	mov	r6, r0
 800504c:	d102      	bne.n	8005054 <__cvt+0x60>
 800504e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005050:	07db      	lsls	r3, r3, #31
 8005052:	d522      	bpl.n	800509a <__cvt+0xa6>
 8005054:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005058:	eb06 0905 	add.w	r9, r6, r5
 800505c:	d110      	bne.n	8005080 <__cvt+0x8c>
 800505e:	7833      	ldrb	r3, [r6, #0]
 8005060:	2b30      	cmp	r3, #48	; 0x30
 8005062:	d10a      	bne.n	800507a <__cvt+0x86>
 8005064:	2200      	movs	r2, #0
 8005066:	2300      	movs	r3, #0
 8005068:	4620      	mov	r0, r4
 800506a:	4639      	mov	r1, r7
 800506c:	f7fb fc9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005070:	b918      	cbnz	r0, 800507a <__cvt+0x86>
 8005072:	f1c5 0501 	rsb	r5, r5, #1
 8005076:	f8ca 5000 	str.w	r5, [sl]
 800507a:	f8da 3000 	ldr.w	r3, [sl]
 800507e:	4499      	add	r9, r3
 8005080:	2200      	movs	r2, #0
 8005082:	2300      	movs	r3, #0
 8005084:	4620      	mov	r0, r4
 8005086:	4639      	mov	r1, r7
 8005088:	f7fb fc8e 	bl	80009a8 <__aeabi_dcmpeq>
 800508c:	b108      	cbz	r0, 8005092 <__cvt+0x9e>
 800508e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005092:	2230      	movs	r2, #48	; 0x30
 8005094:	9b07      	ldr	r3, [sp, #28]
 8005096:	454b      	cmp	r3, r9
 8005098:	d307      	bcc.n	80050aa <__cvt+0xb6>
 800509a:	4630      	mov	r0, r6
 800509c:	9b07      	ldr	r3, [sp, #28]
 800509e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80050a0:	1b9b      	subs	r3, r3, r6
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	b008      	add	sp, #32
 80050a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050aa:	1c59      	adds	r1, r3, #1
 80050ac:	9107      	str	r1, [sp, #28]
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	e7f0      	b.n	8005094 <__cvt+0xa0>

080050b2 <__exponent>:
 80050b2:	4603      	mov	r3, r0
 80050b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050b6:	2900      	cmp	r1, #0
 80050b8:	f803 2b02 	strb.w	r2, [r3], #2
 80050bc:	bfb6      	itet	lt
 80050be:	222d      	movlt	r2, #45	; 0x2d
 80050c0:	222b      	movge	r2, #43	; 0x2b
 80050c2:	4249      	neglt	r1, r1
 80050c4:	2909      	cmp	r1, #9
 80050c6:	7042      	strb	r2, [r0, #1]
 80050c8:	dd2a      	ble.n	8005120 <__exponent+0x6e>
 80050ca:	f10d 0207 	add.w	r2, sp, #7
 80050ce:	4617      	mov	r7, r2
 80050d0:	260a      	movs	r6, #10
 80050d2:	fb91 f5f6 	sdiv	r5, r1, r6
 80050d6:	4694      	mov	ip, r2
 80050d8:	fb06 1415 	mls	r4, r6, r5, r1
 80050dc:	3430      	adds	r4, #48	; 0x30
 80050de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80050e2:	460c      	mov	r4, r1
 80050e4:	2c63      	cmp	r4, #99	; 0x63
 80050e6:	4629      	mov	r1, r5
 80050e8:	f102 32ff 	add.w	r2, r2, #4294967295
 80050ec:	dcf1      	bgt.n	80050d2 <__exponent+0x20>
 80050ee:	3130      	adds	r1, #48	; 0x30
 80050f0:	f1ac 0402 	sub.w	r4, ip, #2
 80050f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80050f8:	4622      	mov	r2, r4
 80050fa:	1c41      	adds	r1, r0, #1
 80050fc:	42ba      	cmp	r2, r7
 80050fe:	d30a      	bcc.n	8005116 <__exponent+0x64>
 8005100:	f10d 0209 	add.w	r2, sp, #9
 8005104:	eba2 020c 	sub.w	r2, r2, ip
 8005108:	42bc      	cmp	r4, r7
 800510a:	bf88      	it	hi
 800510c:	2200      	movhi	r2, #0
 800510e:	4413      	add	r3, r2
 8005110:	1a18      	subs	r0, r3, r0
 8005112:	b003      	add	sp, #12
 8005114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005116:	f812 5b01 	ldrb.w	r5, [r2], #1
 800511a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800511e:	e7ed      	b.n	80050fc <__exponent+0x4a>
 8005120:	2330      	movs	r3, #48	; 0x30
 8005122:	3130      	adds	r1, #48	; 0x30
 8005124:	7083      	strb	r3, [r0, #2]
 8005126:	70c1      	strb	r1, [r0, #3]
 8005128:	1d03      	adds	r3, r0, #4
 800512a:	e7f1      	b.n	8005110 <__exponent+0x5e>

0800512c <_printf_float>:
 800512c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005130:	b091      	sub	sp, #68	; 0x44
 8005132:	460c      	mov	r4, r1
 8005134:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005138:	4616      	mov	r6, r2
 800513a:	461f      	mov	r7, r3
 800513c:	4605      	mov	r5, r0
 800513e:	f000 fcf9 	bl	8005b34 <_localeconv_r>
 8005142:	6803      	ldr	r3, [r0, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	9309      	str	r3, [sp, #36]	; 0x24
 8005148:	f7fb f802 	bl	8000150 <strlen>
 800514c:	2300      	movs	r3, #0
 800514e:	930e      	str	r3, [sp, #56]	; 0x38
 8005150:	f8d8 3000 	ldr.w	r3, [r8]
 8005154:	900a      	str	r0, [sp, #40]	; 0x28
 8005156:	3307      	adds	r3, #7
 8005158:	f023 0307 	bic.w	r3, r3, #7
 800515c:	f103 0208 	add.w	r2, r3, #8
 8005160:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005164:	f8d4 b000 	ldr.w	fp, [r4]
 8005168:	f8c8 2000 	str.w	r2, [r8]
 800516c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005170:	4652      	mov	r2, sl
 8005172:	4643      	mov	r3, r8
 8005174:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005178:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800517c:	930b      	str	r3, [sp, #44]	; 0x2c
 800517e:	f04f 32ff 	mov.w	r2, #4294967295
 8005182:	4650      	mov	r0, sl
 8005184:	4b9c      	ldr	r3, [pc, #624]	; (80053f8 <_printf_float+0x2cc>)
 8005186:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005188:	f7fb fc40 	bl	8000a0c <__aeabi_dcmpun>
 800518c:	bb70      	cbnz	r0, 80051ec <_printf_float+0xc0>
 800518e:	f04f 32ff 	mov.w	r2, #4294967295
 8005192:	4650      	mov	r0, sl
 8005194:	4b98      	ldr	r3, [pc, #608]	; (80053f8 <_printf_float+0x2cc>)
 8005196:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005198:	f7fb fc1a 	bl	80009d0 <__aeabi_dcmple>
 800519c:	bb30      	cbnz	r0, 80051ec <_printf_float+0xc0>
 800519e:	2200      	movs	r2, #0
 80051a0:	2300      	movs	r3, #0
 80051a2:	4650      	mov	r0, sl
 80051a4:	4641      	mov	r1, r8
 80051a6:	f7fb fc09 	bl	80009bc <__aeabi_dcmplt>
 80051aa:	b110      	cbz	r0, 80051b2 <_printf_float+0x86>
 80051ac:	232d      	movs	r3, #45	; 0x2d
 80051ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b2:	4a92      	ldr	r2, [pc, #584]	; (80053fc <_printf_float+0x2d0>)
 80051b4:	4b92      	ldr	r3, [pc, #584]	; (8005400 <_printf_float+0x2d4>)
 80051b6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80051ba:	bf94      	ite	ls
 80051bc:	4690      	movls	r8, r2
 80051be:	4698      	movhi	r8, r3
 80051c0:	2303      	movs	r3, #3
 80051c2:	f04f 0a00 	mov.w	sl, #0
 80051c6:	6123      	str	r3, [r4, #16]
 80051c8:	f02b 0304 	bic.w	r3, fp, #4
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	4633      	mov	r3, r6
 80051d0:	4621      	mov	r1, r4
 80051d2:	4628      	mov	r0, r5
 80051d4:	9700      	str	r7, [sp, #0]
 80051d6:	aa0f      	add	r2, sp, #60	; 0x3c
 80051d8:	f000 f9d6 	bl	8005588 <_printf_common>
 80051dc:	3001      	adds	r0, #1
 80051de:	f040 8090 	bne.w	8005302 <_printf_float+0x1d6>
 80051e2:	f04f 30ff 	mov.w	r0, #4294967295
 80051e6:	b011      	add	sp, #68	; 0x44
 80051e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ec:	4652      	mov	r2, sl
 80051ee:	4643      	mov	r3, r8
 80051f0:	4650      	mov	r0, sl
 80051f2:	4641      	mov	r1, r8
 80051f4:	f7fb fc0a 	bl	8000a0c <__aeabi_dcmpun>
 80051f8:	b148      	cbz	r0, 800520e <_printf_float+0xe2>
 80051fa:	f1b8 0f00 	cmp.w	r8, #0
 80051fe:	bfb8      	it	lt
 8005200:	232d      	movlt	r3, #45	; 0x2d
 8005202:	4a80      	ldr	r2, [pc, #512]	; (8005404 <_printf_float+0x2d8>)
 8005204:	bfb8      	it	lt
 8005206:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800520a:	4b7f      	ldr	r3, [pc, #508]	; (8005408 <_printf_float+0x2dc>)
 800520c:	e7d3      	b.n	80051b6 <_printf_float+0x8a>
 800520e:	6863      	ldr	r3, [r4, #4]
 8005210:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	d142      	bne.n	800529e <_printf_float+0x172>
 8005218:	2306      	movs	r3, #6
 800521a:	6063      	str	r3, [r4, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	9206      	str	r2, [sp, #24]
 8005220:	aa0e      	add	r2, sp, #56	; 0x38
 8005222:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005226:	aa0d      	add	r2, sp, #52	; 0x34
 8005228:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800522c:	9203      	str	r2, [sp, #12]
 800522e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005232:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005236:	6023      	str	r3, [r4, #0]
 8005238:	6863      	ldr	r3, [r4, #4]
 800523a:	4652      	mov	r2, sl
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	4628      	mov	r0, r5
 8005240:	4643      	mov	r3, r8
 8005242:	910b      	str	r1, [sp, #44]	; 0x2c
 8005244:	f7ff fed6 	bl	8004ff4 <__cvt>
 8005248:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800524a:	4680      	mov	r8, r0
 800524c:	2947      	cmp	r1, #71	; 0x47
 800524e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005250:	d108      	bne.n	8005264 <_printf_float+0x138>
 8005252:	1cc8      	adds	r0, r1, #3
 8005254:	db02      	blt.n	800525c <_printf_float+0x130>
 8005256:	6863      	ldr	r3, [r4, #4]
 8005258:	4299      	cmp	r1, r3
 800525a:	dd40      	ble.n	80052de <_printf_float+0x1b2>
 800525c:	f1a9 0902 	sub.w	r9, r9, #2
 8005260:	fa5f f989 	uxtb.w	r9, r9
 8005264:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005268:	d81f      	bhi.n	80052aa <_printf_float+0x17e>
 800526a:	464a      	mov	r2, r9
 800526c:	3901      	subs	r1, #1
 800526e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005272:	910d      	str	r1, [sp, #52]	; 0x34
 8005274:	f7ff ff1d 	bl	80050b2 <__exponent>
 8005278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800527a:	4682      	mov	sl, r0
 800527c:	1813      	adds	r3, r2, r0
 800527e:	2a01      	cmp	r2, #1
 8005280:	6123      	str	r3, [r4, #16]
 8005282:	dc02      	bgt.n	800528a <_printf_float+0x15e>
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	07d2      	lsls	r2, r2, #31
 8005288:	d501      	bpl.n	800528e <_printf_float+0x162>
 800528a:	3301      	adds	r3, #1
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005292:	2b00      	cmp	r3, #0
 8005294:	d09b      	beq.n	80051ce <_printf_float+0xa2>
 8005296:	232d      	movs	r3, #45	; 0x2d
 8005298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800529c:	e797      	b.n	80051ce <_printf_float+0xa2>
 800529e:	2947      	cmp	r1, #71	; 0x47
 80052a0:	d1bc      	bne.n	800521c <_printf_float+0xf0>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1ba      	bne.n	800521c <_printf_float+0xf0>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e7b7      	b.n	800521a <_printf_float+0xee>
 80052aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80052ae:	d118      	bne.n	80052e2 <_printf_float+0x1b6>
 80052b0:	2900      	cmp	r1, #0
 80052b2:	6863      	ldr	r3, [r4, #4]
 80052b4:	dd0b      	ble.n	80052ce <_printf_float+0x1a2>
 80052b6:	6121      	str	r1, [r4, #16]
 80052b8:	b913      	cbnz	r3, 80052c0 <_printf_float+0x194>
 80052ba:	6822      	ldr	r2, [r4, #0]
 80052bc:	07d0      	lsls	r0, r2, #31
 80052be:	d502      	bpl.n	80052c6 <_printf_float+0x19a>
 80052c0:	3301      	adds	r3, #1
 80052c2:	440b      	add	r3, r1
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	f04f 0a00 	mov.w	sl, #0
 80052ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80052cc:	e7df      	b.n	800528e <_printf_float+0x162>
 80052ce:	b913      	cbnz	r3, 80052d6 <_printf_float+0x1aa>
 80052d0:	6822      	ldr	r2, [r4, #0]
 80052d2:	07d2      	lsls	r2, r2, #31
 80052d4:	d501      	bpl.n	80052da <_printf_float+0x1ae>
 80052d6:	3302      	adds	r3, #2
 80052d8:	e7f4      	b.n	80052c4 <_printf_float+0x198>
 80052da:	2301      	movs	r3, #1
 80052dc:	e7f2      	b.n	80052c4 <_printf_float+0x198>
 80052de:	f04f 0967 	mov.w	r9, #103	; 0x67
 80052e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052e4:	4299      	cmp	r1, r3
 80052e6:	db05      	blt.n	80052f4 <_printf_float+0x1c8>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	6121      	str	r1, [r4, #16]
 80052ec:	07d8      	lsls	r0, r3, #31
 80052ee:	d5ea      	bpl.n	80052c6 <_printf_float+0x19a>
 80052f0:	1c4b      	adds	r3, r1, #1
 80052f2:	e7e7      	b.n	80052c4 <_printf_float+0x198>
 80052f4:	2900      	cmp	r1, #0
 80052f6:	bfcc      	ite	gt
 80052f8:	2201      	movgt	r2, #1
 80052fa:	f1c1 0202 	rsble	r2, r1, #2
 80052fe:	4413      	add	r3, r2
 8005300:	e7e0      	b.n	80052c4 <_printf_float+0x198>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	055a      	lsls	r2, r3, #21
 8005306:	d407      	bmi.n	8005318 <_printf_float+0x1ec>
 8005308:	6923      	ldr	r3, [r4, #16]
 800530a:	4642      	mov	r2, r8
 800530c:	4631      	mov	r1, r6
 800530e:	4628      	mov	r0, r5
 8005310:	47b8      	blx	r7
 8005312:	3001      	adds	r0, #1
 8005314:	d12b      	bne.n	800536e <_printf_float+0x242>
 8005316:	e764      	b.n	80051e2 <_printf_float+0xb6>
 8005318:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800531c:	f240 80dd 	bls.w	80054da <_printf_float+0x3ae>
 8005320:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005324:	2200      	movs	r2, #0
 8005326:	2300      	movs	r3, #0
 8005328:	f7fb fb3e 	bl	80009a8 <__aeabi_dcmpeq>
 800532c:	2800      	cmp	r0, #0
 800532e:	d033      	beq.n	8005398 <_printf_float+0x26c>
 8005330:	2301      	movs	r3, #1
 8005332:	4631      	mov	r1, r6
 8005334:	4628      	mov	r0, r5
 8005336:	4a35      	ldr	r2, [pc, #212]	; (800540c <_printf_float+0x2e0>)
 8005338:	47b8      	blx	r7
 800533a:	3001      	adds	r0, #1
 800533c:	f43f af51 	beq.w	80051e2 <_printf_float+0xb6>
 8005340:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005344:	429a      	cmp	r2, r3
 8005346:	db02      	blt.n	800534e <_printf_float+0x222>
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	07d8      	lsls	r0, r3, #31
 800534c:	d50f      	bpl.n	800536e <_printf_float+0x242>
 800534e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005352:	4631      	mov	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	47b8      	blx	r7
 8005358:	3001      	adds	r0, #1
 800535a:	f43f af42 	beq.w	80051e2 <_printf_float+0xb6>
 800535e:	f04f 0800 	mov.w	r8, #0
 8005362:	f104 091a 	add.w	r9, r4, #26
 8005366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005368:	3b01      	subs	r3, #1
 800536a:	4543      	cmp	r3, r8
 800536c:	dc09      	bgt.n	8005382 <_printf_float+0x256>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	079b      	lsls	r3, r3, #30
 8005372:	f100 8104 	bmi.w	800557e <_printf_float+0x452>
 8005376:	68e0      	ldr	r0, [r4, #12]
 8005378:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800537a:	4298      	cmp	r0, r3
 800537c:	bfb8      	it	lt
 800537e:	4618      	movlt	r0, r3
 8005380:	e731      	b.n	80051e6 <_printf_float+0xba>
 8005382:	2301      	movs	r3, #1
 8005384:	464a      	mov	r2, r9
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	f43f af28 	beq.w	80051e2 <_printf_float+0xb6>
 8005392:	f108 0801 	add.w	r8, r8, #1
 8005396:	e7e6      	b.n	8005366 <_printf_float+0x23a>
 8005398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800539a:	2b00      	cmp	r3, #0
 800539c:	dc38      	bgt.n	8005410 <_printf_float+0x2e4>
 800539e:	2301      	movs	r3, #1
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	4a19      	ldr	r2, [pc, #100]	; (800540c <_printf_float+0x2e0>)
 80053a6:	47b8      	blx	r7
 80053a8:	3001      	adds	r0, #1
 80053aa:	f43f af1a 	beq.w	80051e2 <_printf_float+0xb6>
 80053ae:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80053b2:	4313      	orrs	r3, r2
 80053b4:	d102      	bne.n	80053bc <_printf_float+0x290>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	07d9      	lsls	r1, r3, #31
 80053ba:	d5d8      	bpl.n	800536e <_printf_float+0x242>
 80053bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053c0:	4631      	mov	r1, r6
 80053c2:	4628      	mov	r0, r5
 80053c4:	47b8      	blx	r7
 80053c6:	3001      	adds	r0, #1
 80053c8:	f43f af0b 	beq.w	80051e2 <_printf_float+0xb6>
 80053cc:	f04f 0900 	mov.w	r9, #0
 80053d0:	f104 0a1a 	add.w	sl, r4, #26
 80053d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053d6:	425b      	negs	r3, r3
 80053d8:	454b      	cmp	r3, r9
 80053da:	dc01      	bgt.n	80053e0 <_printf_float+0x2b4>
 80053dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053de:	e794      	b.n	800530a <_printf_float+0x1de>
 80053e0:	2301      	movs	r3, #1
 80053e2:	4652      	mov	r2, sl
 80053e4:	4631      	mov	r1, r6
 80053e6:	4628      	mov	r0, r5
 80053e8:	47b8      	blx	r7
 80053ea:	3001      	adds	r0, #1
 80053ec:	f43f aef9 	beq.w	80051e2 <_printf_float+0xb6>
 80053f0:	f109 0901 	add.w	r9, r9, #1
 80053f4:	e7ee      	b.n	80053d4 <_printf_float+0x2a8>
 80053f6:	bf00      	nop
 80053f8:	7fefffff 	.word	0x7fefffff
 80053fc:	08007d7e 	.word	0x08007d7e
 8005400:	08007d82 	.word	0x08007d82
 8005404:	08007d86 	.word	0x08007d86
 8005408:	08007d8a 	.word	0x08007d8a
 800540c:	08007d8e 	.word	0x08007d8e
 8005410:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005412:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005414:	429a      	cmp	r2, r3
 8005416:	bfa8      	it	ge
 8005418:	461a      	movge	r2, r3
 800541a:	2a00      	cmp	r2, #0
 800541c:	4691      	mov	r9, r2
 800541e:	dc37      	bgt.n	8005490 <_printf_float+0x364>
 8005420:	f04f 0b00 	mov.w	fp, #0
 8005424:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005428:	f104 021a 	add.w	r2, r4, #26
 800542c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005430:	ebaa 0309 	sub.w	r3, sl, r9
 8005434:	455b      	cmp	r3, fp
 8005436:	dc33      	bgt.n	80054a0 <_printf_float+0x374>
 8005438:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800543c:	429a      	cmp	r2, r3
 800543e:	db3b      	blt.n	80054b8 <_printf_float+0x38c>
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	07da      	lsls	r2, r3, #31
 8005444:	d438      	bmi.n	80054b8 <_printf_float+0x38c>
 8005446:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800544a:	eba2 0903 	sub.w	r9, r2, r3
 800544e:	eba2 020a 	sub.w	r2, r2, sl
 8005452:	4591      	cmp	r9, r2
 8005454:	bfa8      	it	ge
 8005456:	4691      	movge	r9, r2
 8005458:	f1b9 0f00 	cmp.w	r9, #0
 800545c:	dc34      	bgt.n	80054c8 <_printf_float+0x39c>
 800545e:	f04f 0800 	mov.w	r8, #0
 8005462:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005466:	f104 0a1a 	add.w	sl, r4, #26
 800546a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	eba3 0309 	sub.w	r3, r3, r9
 8005474:	4543      	cmp	r3, r8
 8005476:	f77f af7a 	ble.w	800536e <_printf_float+0x242>
 800547a:	2301      	movs	r3, #1
 800547c:	4652      	mov	r2, sl
 800547e:	4631      	mov	r1, r6
 8005480:	4628      	mov	r0, r5
 8005482:	47b8      	blx	r7
 8005484:	3001      	adds	r0, #1
 8005486:	f43f aeac 	beq.w	80051e2 <_printf_float+0xb6>
 800548a:	f108 0801 	add.w	r8, r8, #1
 800548e:	e7ec      	b.n	800546a <_printf_float+0x33e>
 8005490:	4613      	mov	r3, r2
 8005492:	4631      	mov	r1, r6
 8005494:	4642      	mov	r2, r8
 8005496:	4628      	mov	r0, r5
 8005498:	47b8      	blx	r7
 800549a:	3001      	adds	r0, #1
 800549c:	d1c0      	bne.n	8005420 <_printf_float+0x2f4>
 800549e:	e6a0      	b.n	80051e2 <_printf_float+0xb6>
 80054a0:	2301      	movs	r3, #1
 80054a2:	4631      	mov	r1, r6
 80054a4:	4628      	mov	r0, r5
 80054a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80054a8:	47b8      	blx	r7
 80054aa:	3001      	adds	r0, #1
 80054ac:	f43f ae99 	beq.w	80051e2 <_printf_float+0xb6>
 80054b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054b2:	f10b 0b01 	add.w	fp, fp, #1
 80054b6:	e7b9      	b.n	800542c <_printf_float+0x300>
 80054b8:	4631      	mov	r1, r6
 80054ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054be:	4628      	mov	r0, r5
 80054c0:	47b8      	blx	r7
 80054c2:	3001      	adds	r0, #1
 80054c4:	d1bf      	bne.n	8005446 <_printf_float+0x31a>
 80054c6:	e68c      	b.n	80051e2 <_printf_float+0xb6>
 80054c8:	464b      	mov	r3, r9
 80054ca:	4631      	mov	r1, r6
 80054cc:	4628      	mov	r0, r5
 80054ce:	eb08 020a 	add.w	r2, r8, sl
 80054d2:	47b8      	blx	r7
 80054d4:	3001      	adds	r0, #1
 80054d6:	d1c2      	bne.n	800545e <_printf_float+0x332>
 80054d8:	e683      	b.n	80051e2 <_printf_float+0xb6>
 80054da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054dc:	2a01      	cmp	r2, #1
 80054de:	dc01      	bgt.n	80054e4 <_printf_float+0x3b8>
 80054e0:	07db      	lsls	r3, r3, #31
 80054e2:	d539      	bpl.n	8005558 <_printf_float+0x42c>
 80054e4:	2301      	movs	r3, #1
 80054e6:	4642      	mov	r2, r8
 80054e8:	4631      	mov	r1, r6
 80054ea:	4628      	mov	r0, r5
 80054ec:	47b8      	blx	r7
 80054ee:	3001      	adds	r0, #1
 80054f0:	f43f ae77 	beq.w	80051e2 <_printf_float+0xb6>
 80054f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054f8:	4631      	mov	r1, r6
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b8      	blx	r7
 80054fe:	3001      	adds	r0, #1
 8005500:	f43f ae6f 	beq.w	80051e2 <_printf_float+0xb6>
 8005504:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005508:	2200      	movs	r2, #0
 800550a:	2300      	movs	r3, #0
 800550c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005510:	f7fb fa4a 	bl	80009a8 <__aeabi_dcmpeq>
 8005514:	b9d8      	cbnz	r0, 800554e <_printf_float+0x422>
 8005516:	f109 33ff 	add.w	r3, r9, #4294967295
 800551a:	f108 0201 	add.w	r2, r8, #1
 800551e:	4631      	mov	r1, r6
 8005520:	4628      	mov	r0, r5
 8005522:	47b8      	blx	r7
 8005524:	3001      	adds	r0, #1
 8005526:	d10e      	bne.n	8005546 <_printf_float+0x41a>
 8005528:	e65b      	b.n	80051e2 <_printf_float+0xb6>
 800552a:	2301      	movs	r3, #1
 800552c:	464a      	mov	r2, r9
 800552e:	4631      	mov	r1, r6
 8005530:	4628      	mov	r0, r5
 8005532:	47b8      	blx	r7
 8005534:	3001      	adds	r0, #1
 8005536:	f43f ae54 	beq.w	80051e2 <_printf_float+0xb6>
 800553a:	f108 0801 	add.w	r8, r8, #1
 800553e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005540:	3b01      	subs	r3, #1
 8005542:	4543      	cmp	r3, r8
 8005544:	dcf1      	bgt.n	800552a <_printf_float+0x3fe>
 8005546:	4653      	mov	r3, sl
 8005548:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800554c:	e6de      	b.n	800530c <_printf_float+0x1e0>
 800554e:	f04f 0800 	mov.w	r8, #0
 8005552:	f104 091a 	add.w	r9, r4, #26
 8005556:	e7f2      	b.n	800553e <_printf_float+0x412>
 8005558:	2301      	movs	r3, #1
 800555a:	4642      	mov	r2, r8
 800555c:	e7df      	b.n	800551e <_printf_float+0x3f2>
 800555e:	2301      	movs	r3, #1
 8005560:	464a      	mov	r2, r9
 8005562:	4631      	mov	r1, r6
 8005564:	4628      	mov	r0, r5
 8005566:	47b8      	blx	r7
 8005568:	3001      	adds	r0, #1
 800556a:	f43f ae3a 	beq.w	80051e2 <_printf_float+0xb6>
 800556e:	f108 0801 	add.w	r8, r8, #1
 8005572:	68e3      	ldr	r3, [r4, #12]
 8005574:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005576:	1a5b      	subs	r3, r3, r1
 8005578:	4543      	cmp	r3, r8
 800557a:	dcf0      	bgt.n	800555e <_printf_float+0x432>
 800557c:	e6fb      	b.n	8005376 <_printf_float+0x24a>
 800557e:	f04f 0800 	mov.w	r8, #0
 8005582:	f104 0919 	add.w	r9, r4, #25
 8005586:	e7f4      	b.n	8005572 <_printf_float+0x446>

08005588 <_printf_common>:
 8005588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800558c:	4616      	mov	r6, r2
 800558e:	4699      	mov	r9, r3
 8005590:	688a      	ldr	r2, [r1, #8]
 8005592:	690b      	ldr	r3, [r1, #16]
 8005594:	4607      	mov	r7, r0
 8005596:	4293      	cmp	r3, r2
 8005598:	bfb8      	it	lt
 800559a:	4613      	movlt	r3, r2
 800559c:	6033      	str	r3, [r6, #0]
 800559e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055a2:	460c      	mov	r4, r1
 80055a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055a8:	b10a      	cbz	r2, 80055ae <_printf_common+0x26>
 80055aa:	3301      	adds	r3, #1
 80055ac:	6033      	str	r3, [r6, #0]
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	0699      	lsls	r1, r3, #26
 80055b2:	bf42      	ittt	mi
 80055b4:	6833      	ldrmi	r3, [r6, #0]
 80055b6:	3302      	addmi	r3, #2
 80055b8:	6033      	strmi	r3, [r6, #0]
 80055ba:	6825      	ldr	r5, [r4, #0]
 80055bc:	f015 0506 	ands.w	r5, r5, #6
 80055c0:	d106      	bne.n	80055d0 <_printf_common+0x48>
 80055c2:	f104 0a19 	add.w	sl, r4, #25
 80055c6:	68e3      	ldr	r3, [r4, #12]
 80055c8:	6832      	ldr	r2, [r6, #0]
 80055ca:	1a9b      	subs	r3, r3, r2
 80055cc:	42ab      	cmp	r3, r5
 80055ce:	dc2b      	bgt.n	8005628 <_printf_common+0xa0>
 80055d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055d4:	1e13      	subs	r3, r2, #0
 80055d6:	6822      	ldr	r2, [r4, #0]
 80055d8:	bf18      	it	ne
 80055da:	2301      	movne	r3, #1
 80055dc:	0692      	lsls	r2, r2, #26
 80055de:	d430      	bmi.n	8005642 <_printf_common+0xba>
 80055e0:	4649      	mov	r1, r9
 80055e2:	4638      	mov	r0, r7
 80055e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055e8:	47c0      	blx	r8
 80055ea:	3001      	adds	r0, #1
 80055ec:	d023      	beq.n	8005636 <_printf_common+0xae>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	6922      	ldr	r2, [r4, #16]
 80055f2:	f003 0306 	and.w	r3, r3, #6
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	bf14      	ite	ne
 80055fa:	2500      	movne	r5, #0
 80055fc:	6833      	ldreq	r3, [r6, #0]
 80055fe:	f04f 0600 	mov.w	r6, #0
 8005602:	bf08      	it	eq
 8005604:	68e5      	ldreq	r5, [r4, #12]
 8005606:	f104 041a 	add.w	r4, r4, #26
 800560a:	bf08      	it	eq
 800560c:	1aed      	subeq	r5, r5, r3
 800560e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005612:	bf08      	it	eq
 8005614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005618:	4293      	cmp	r3, r2
 800561a:	bfc4      	itt	gt
 800561c:	1a9b      	subgt	r3, r3, r2
 800561e:	18ed      	addgt	r5, r5, r3
 8005620:	42b5      	cmp	r5, r6
 8005622:	d11a      	bne.n	800565a <_printf_common+0xd2>
 8005624:	2000      	movs	r0, #0
 8005626:	e008      	b.n	800563a <_printf_common+0xb2>
 8005628:	2301      	movs	r3, #1
 800562a:	4652      	mov	r2, sl
 800562c:	4649      	mov	r1, r9
 800562e:	4638      	mov	r0, r7
 8005630:	47c0      	blx	r8
 8005632:	3001      	adds	r0, #1
 8005634:	d103      	bne.n	800563e <_printf_common+0xb6>
 8005636:	f04f 30ff 	mov.w	r0, #4294967295
 800563a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800563e:	3501      	adds	r5, #1
 8005640:	e7c1      	b.n	80055c6 <_printf_common+0x3e>
 8005642:	2030      	movs	r0, #48	; 0x30
 8005644:	18e1      	adds	r1, r4, r3
 8005646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005650:	4422      	add	r2, r4
 8005652:	3302      	adds	r3, #2
 8005654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005658:	e7c2      	b.n	80055e0 <_printf_common+0x58>
 800565a:	2301      	movs	r3, #1
 800565c:	4622      	mov	r2, r4
 800565e:	4649      	mov	r1, r9
 8005660:	4638      	mov	r0, r7
 8005662:	47c0      	blx	r8
 8005664:	3001      	adds	r0, #1
 8005666:	d0e6      	beq.n	8005636 <_printf_common+0xae>
 8005668:	3601      	adds	r6, #1
 800566a:	e7d9      	b.n	8005620 <_printf_common+0x98>

0800566c <_printf_i>:
 800566c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005670:	7e0f      	ldrb	r7, [r1, #24]
 8005672:	4691      	mov	r9, r2
 8005674:	2f78      	cmp	r7, #120	; 0x78
 8005676:	4680      	mov	r8, r0
 8005678:	460c      	mov	r4, r1
 800567a:	469a      	mov	sl, r3
 800567c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800567e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005682:	d807      	bhi.n	8005694 <_printf_i+0x28>
 8005684:	2f62      	cmp	r7, #98	; 0x62
 8005686:	d80a      	bhi.n	800569e <_printf_i+0x32>
 8005688:	2f00      	cmp	r7, #0
 800568a:	f000 80d5 	beq.w	8005838 <_printf_i+0x1cc>
 800568e:	2f58      	cmp	r7, #88	; 0x58
 8005690:	f000 80c1 	beq.w	8005816 <_printf_i+0x1aa>
 8005694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800569c:	e03a      	b.n	8005714 <_printf_i+0xa8>
 800569e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056a2:	2b15      	cmp	r3, #21
 80056a4:	d8f6      	bhi.n	8005694 <_printf_i+0x28>
 80056a6:	a101      	add	r1, pc, #4	; (adr r1, 80056ac <_printf_i+0x40>)
 80056a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056ac:	08005705 	.word	0x08005705
 80056b0:	08005719 	.word	0x08005719
 80056b4:	08005695 	.word	0x08005695
 80056b8:	08005695 	.word	0x08005695
 80056bc:	08005695 	.word	0x08005695
 80056c0:	08005695 	.word	0x08005695
 80056c4:	08005719 	.word	0x08005719
 80056c8:	08005695 	.word	0x08005695
 80056cc:	08005695 	.word	0x08005695
 80056d0:	08005695 	.word	0x08005695
 80056d4:	08005695 	.word	0x08005695
 80056d8:	0800581f 	.word	0x0800581f
 80056dc:	08005745 	.word	0x08005745
 80056e0:	080057d9 	.word	0x080057d9
 80056e4:	08005695 	.word	0x08005695
 80056e8:	08005695 	.word	0x08005695
 80056ec:	08005841 	.word	0x08005841
 80056f0:	08005695 	.word	0x08005695
 80056f4:	08005745 	.word	0x08005745
 80056f8:	08005695 	.word	0x08005695
 80056fc:	08005695 	.word	0x08005695
 8005700:	080057e1 	.word	0x080057e1
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	1d1a      	adds	r2, r3, #4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	602a      	str	r2, [r5, #0]
 800570c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005714:	2301      	movs	r3, #1
 8005716:	e0a0      	b.n	800585a <_printf_i+0x1ee>
 8005718:	6820      	ldr	r0, [r4, #0]
 800571a:	682b      	ldr	r3, [r5, #0]
 800571c:	0607      	lsls	r7, r0, #24
 800571e:	f103 0104 	add.w	r1, r3, #4
 8005722:	6029      	str	r1, [r5, #0]
 8005724:	d501      	bpl.n	800572a <_printf_i+0xbe>
 8005726:	681e      	ldr	r6, [r3, #0]
 8005728:	e003      	b.n	8005732 <_printf_i+0xc6>
 800572a:	0646      	lsls	r6, r0, #25
 800572c:	d5fb      	bpl.n	8005726 <_printf_i+0xba>
 800572e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005732:	2e00      	cmp	r6, #0
 8005734:	da03      	bge.n	800573e <_printf_i+0xd2>
 8005736:	232d      	movs	r3, #45	; 0x2d
 8005738:	4276      	negs	r6, r6
 800573a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800573e:	230a      	movs	r3, #10
 8005740:	4859      	ldr	r0, [pc, #356]	; (80058a8 <_printf_i+0x23c>)
 8005742:	e012      	b.n	800576a <_printf_i+0xfe>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	6820      	ldr	r0, [r4, #0]
 8005748:	1d19      	adds	r1, r3, #4
 800574a:	6029      	str	r1, [r5, #0]
 800574c:	0605      	lsls	r5, r0, #24
 800574e:	d501      	bpl.n	8005754 <_printf_i+0xe8>
 8005750:	681e      	ldr	r6, [r3, #0]
 8005752:	e002      	b.n	800575a <_printf_i+0xee>
 8005754:	0641      	lsls	r1, r0, #25
 8005756:	d5fb      	bpl.n	8005750 <_printf_i+0xe4>
 8005758:	881e      	ldrh	r6, [r3, #0]
 800575a:	2f6f      	cmp	r7, #111	; 0x6f
 800575c:	bf0c      	ite	eq
 800575e:	2308      	moveq	r3, #8
 8005760:	230a      	movne	r3, #10
 8005762:	4851      	ldr	r0, [pc, #324]	; (80058a8 <_printf_i+0x23c>)
 8005764:	2100      	movs	r1, #0
 8005766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800576a:	6865      	ldr	r5, [r4, #4]
 800576c:	2d00      	cmp	r5, #0
 800576e:	bfa8      	it	ge
 8005770:	6821      	ldrge	r1, [r4, #0]
 8005772:	60a5      	str	r5, [r4, #8]
 8005774:	bfa4      	itt	ge
 8005776:	f021 0104 	bicge.w	r1, r1, #4
 800577a:	6021      	strge	r1, [r4, #0]
 800577c:	b90e      	cbnz	r6, 8005782 <_printf_i+0x116>
 800577e:	2d00      	cmp	r5, #0
 8005780:	d04b      	beq.n	800581a <_printf_i+0x1ae>
 8005782:	4615      	mov	r5, r2
 8005784:	fbb6 f1f3 	udiv	r1, r6, r3
 8005788:	fb03 6711 	mls	r7, r3, r1, r6
 800578c:	5dc7      	ldrb	r7, [r0, r7]
 800578e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005792:	4637      	mov	r7, r6
 8005794:	42bb      	cmp	r3, r7
 8005796:	460e      	mov	r6, r1
 8005798:	d9f4      	bls.n	8005784 <_printf_i+0x118>
 800579a:	2b08      	cmp	r3, #8
 800579c:	d10b      	bne.n	80057b6 <_printf_i+0x14a>
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	07de      	lsls	r6, r3, #31
 80057a2:	d508      	bpl.n	80057b6 <_printf_i+0x14a>
 80057a4:	6923      	ldr	r3, [r4, #16]
 80057a6:	6861      	ldr	r1, [r4, #4]
 80057a8:	4299      	cmp	r1, r3
 80057aa:	bfde      	ittt	le
 80057ac:	2330      	movle	r3, #48	; 0x30
 80057ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057b6:	1b52      	subs	r2, r2, r5
 80057b8:	6122      	str	r2, [r4, #16]
 80057ba:	464b      	mov	r3, r9
 80057bc:	4621      	mov	r1, r4
 80057be:	4640      	mov	r0, r8
 80057c0:	f8cd a000 	str.w	sl, [sp]
 80057c4:	aa03      	add	r2, sp, #12
 80057c6:	f7ff fedf 	bl	8005588 <_printf_common>
 80057ca:	3001      	adds	r0, #1
 80057cc:	d14a      	bne.n	8005864 <_printf_i+0x1f8>
 80057ce:	f04f 30ff 	mov.w	r0, #4294967295
 80057d2:	b004      	add	sp, #16
 80057d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	f043 0320 	orr.w	r3, r3, #32
 80057de:	6023      	str	r3, [r4, #0]
 80057e0:	2778      	movs	r7, #120	; 0x78
 80057e2:	4832      	ldr	r0, [pc, #200]	; (80058ac <_printf_i+0x240>)
 80057e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	6829      	ldr	r1, [r5, #0]
 80057ec:	061f      	lsls	r7, r3, #24
 80057ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80057f2:	d402      	bmi.n	80057fa <_printf_i+0x18e>
 80057f4:	065f      	lsls	r7, r3, #25
 80057f6:	bf48      	it	mi
 80057f8:	b2b6      	uxthmi	r6, r6
 80057fa:	07df      	lsls	r7, r3, #31
 80057fc:	bf48      	it	mi
 80057fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005802:	6029      	str	r1, [r5, #0]
 8005804:	bf48      	it	mi
 8005806:	6023      	strmi	r3, [r4, #0]
 8005808:	b91e      	cbnz	r6, 8005812 <_printf_i+0x1a6>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	f023 0320 	bic.w	r3, r3, #32
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	2310      	movs	r3, #16
 8005814:	e7a6      	b.n	8005764 <_printf_i+0xf8>
 8005816:	4824      	ldr	r0, [pc, #144]	; (80058a8 <_printf_i+0x23c>)
 8005818:	e7e4      	b.n	80057e4 <_printf_i+0x178>
 800581a:	4615      	mov	r5, r2
 800581c:	e7bd      	b.n	800579a <_printf_i+0x12e>
 800581e:	682b      	ldr	r3, [r5, #0]
 8005820:	6826      	ldr	r6, [r4, #0]
 8005822:	1d18      	adds	r0, r3, #4
 8005824:	6961      	ldr	r1, [r4, #20]
 8005826:	6028      	str	r0, [r5, #0]
 8005828:	0635      	lsls	r5, r6, #24
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	d501      	bpl.n	8005832 <_printf_i+0x1c6>
 800582e:	6019      	str	r1, [r3, #0]
 8005830:	e002      	b.n	8005838 <_printf_i+0x1cc>
 8005832:	0670      	lsls	r0, r6, #25
 8005834:	d5fb      	bpl.n	800582e <_printf_i+0x1c2>
 8005836:	8019      	strh	r1, [r3, #0]
 8005838:	2300      	movs	r3, #0
 800583a:	4615      	mov	r5, r2
 800583c:	6123      	str	r3, [r4, #16]
 800583e:	e7bc      	b.n	80057ba <_printf_i+0x14e>
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	2100      	movs	r1, #0
 8005844:	1d1a      	adds	r2, r3, #4
 8005846:	602a      	str	r2, [r5, #0]
 8005848:	681d      	ldr	r5, [r3, #0]
 800584a:	6862      	ldr	r2, [r4, #4]
 800584c:	4628      	mov	r0, r5
 800584e:	f000 f9e8 	bl	8005c22 <memchr>
 8005852:	b108      	cbz	r0, 8005858 <_printf_i+0x1ec>
 8005854:	1b40      	subs	r0, r0, r5
 8005856:	6060      	str	r0, [r4, #4]
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	6123      	str	r3, [r4, #16]
 800585c:	2300      	movs	r3, #0
 800585e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005862:	e7aa      	b.n	80057ba <_printf_i+0x14e>
 8005864:	462a      	mov	r2, r5
 8005866:	4649      	mov	r1, r9
 8005868:	4640      	mov	r0, r8
 800586a:	6923      	ldr	r3, [r4, #16]
 800586c:	47d0      	blx	sl
 800586e:	3001      	adds	r0, #1
 8005870:	d0ad      	beq.n	80057ce <_printf_i+0x162>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	079b      	lsls	r3, r3, #30
 8005876:	d413      	bmi.n	80058a0 <_printf_i+0x234>
 8005878:	68e0      	ldr	r0, [r4, #12]
 800587a:	9b03      	ldr	r3, [sp, #12]
 800587c:	4298      	cmp	r0, r3
 800587e:	bfb8      	it	lt
 8005880:	4618      	movlt	r0, r3
 8005882:	e7a6      	b.n	80057d2 <_printf_i+0x166>
 8005884:	2301      	movs	r3, #1
 8005886:	4632      	mov	r2, r6
 8005888:	4649      	mov	r1, r9
 800588a:	4640      	mov	r0, r8
 800588c:	47d0      	blx	sl
 800588e:	3001      	adds	r0, #1
 8005890:	d09d      	beq.n	80057ce <_printf_i+0x162>
 8005892:	3501      	adds	r5, #1
 8005894:	68e3      	ldr	r3, [r4, #12]
 8005896:	9903      	ldr	r1, [sp, #12]
 8005898:	1a5b      	subs	r3, r3, r1
 800589a:	42ab      	cmp	r3, r5
 800589c:	dcf2      	bgt.n	8005884 <_printf_i+0x218>
 800589e:	e7eb      	b.n	8005878 <_printf_i+0x20c>
 80058a0:	2500      	movs	r5, #0
 80058a2:	f104 0619 	add.w	r6, r4, #25
 80058a6:	e7f5      	b.n	8005894 <_printf_i+0x228>
 80058a8:	08007d90 	.word	0x08007d90
 80058ac:	08007da1 	.word	0x08007da1

080058b0 <std>:
 80058b0:	2300      	movs	r3, #0
 80058b2:	b510      	push	{r4, lr}
 80058b4:	4604      	mov	r4, r0
 80058b6:	e9c0 3300 	strd	r3, r3, [r0]
 80058ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058be:	6083      	str	r3, [r0, #8]
 80058c0:	8181      	strh	r1, [r0, #12]
 80058c2:	6643      	str	r3, [r0, #100]	; 0x64
 80058c4:	81c2      	strh	r2, [r0, #14]
 80058c6:	6183      	str	r3, [r0, #24]
 80058c8:	4619      	mov	r1, r3
 80058ca:	2208      	movs	r2, #8
 80058cc:	305c      	adds	r0, #92	; 0x5c
 80058ce:	f000 f928 	bl	8005b22 <memset>
 80058d2:	4b0d      	ldr	r3, [pc, #52]	; (8005908 <std+0x58>)
 80058d4:	6224      	str	r4, [r4, #32]
 80058d6:	6263      	str	r3, [r4, #36]	; 0x24
 80058d8:	4b0c      	ldr	r3, [pc, #48]	; (800590c <std+0x5c>)
 80058da:	62a3      	str	r3, [r4, #40]	; 0x28
 80058dc:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <std+0x60>)
 80058de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058e0:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <std+0x64>)
 80058e2:	6323      	str	r3, [r4, #48]	; 0x30
 80058e4:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <std+0x68>)
 80058e6:	429c      	cmp	r4, r3
 80058e8:	d006      	beq.n	80058f8 <std+0x48>
 80058ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80058ee:	4294      	cmp	r4, r2
 80058f0:	d002      	beq.n	80058f8 <std+0x48>
 80058f2:	33d0      	adds	r3, #208	; 0xd0
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d105      	bne.n	8005904 <std+0x54>
 80058f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005900:	f000 b98c 	b.w	8005c1c <__retarget_lock_init_recursive>
 8005904:	bd10      	pop	{r4, pc}
 8005906:	bf00      	nop
 8005908:	08005a9d 	.word	0x08005a9d
 800590c:	08005abf 	.word	0x08005abf
 8005910:	08005af7 	.word	0x08005af7
 8005914:	08005b1b 	.word	0x08005b1b
 8005918:	20000370 	.word	0x20000370

0800591c <stdio_exit_handler>:
 800591c:	4a02      	ldr	r2, [pc, #8]	; (8005928 <stdio_exit_handler+0xc>)
 800591e:	4903      	ldr	r1, [pc, #12]	; (800592c <stdio_exit_handler+0x10>)
 8005920:	4803      	ldr	r0, [pc, #12]	; (8005930 <stdio_exit_handler+0x14>)
 8005922:	f000 b869 	b.w	80059f8 <_fwalk_sglue>
 8005926:	bf00      	nop
 8005928:	20000034 	.word	0x20000034
 800592c:	080075b5 	.word	0x080075b5
 8005930:	20000040 	.word	0x20000040

08005934 <cleanup_stdio>:
 8005934:	6841      	ldr	r1, [r0, #4]
 8005936:	4b0c      	ldr	r3, [pc, #48]	; (8005968 <cleanup_stdio+0x34>)
 8005938:	b510      	push	{r4, lr}
 800593a:	4299      	cmp	r1, r3
 800593c:	4604      	mov	r4, r0
 800593e:	d001      	beq.n	8005944 <cleanup_stdio+0x10>
 8005940:	f001 fe38 	bl	80075b4 <_fflush_r>
 8005944:	68a1      	ldr	r1, [r4, #8]
 8005946:	4b09      	ldr	r3, [pc, #36]	; (800596c <cleanup_stdio+0x38>)
 8005948:	4299      	cmp	r1, r3
 800594a:	d002      	beq.n	8005952 <cleanup_stdio+0x1e>
 800594c:	4620      	mov	r0, r4
 800594e:	f001 fe31 	bl	80075b4 <_fflush_r>
 8005952:	68e1      	ldr	r1, [r4, #12]
 8005954:	4b06      	ldr	r3, [pc, #24]	; (8005970 <cleanup_stdio+0x3c>)
 8005956:	4299      	cmp	r1, r3
 8005958:	d004      	beq.n	8005964 <cleanup_stdio+0x30>
 800595a:	4620      	mov	r0, r4
 800595c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005960:	f001 be28 	b.w	80075b4 <_fflush_r>
 8005964:	bd10      	pop	{r4, pc}
 8005966:	bf00      	nop
 8005968:	20000370 	.word	0x20000370
 800596c:	200003d8 	.word	0x200003d8
 8005970:	20000440 	.word	0x20000440

08005974 <global_stdio_init.part.0>:
 8005974:	b510      	push	{r4, lr}
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <global_stdio_init.part.0+0x30>)
 8005978:	4c0b      	ldr	r4, [pc, #44]	; (80059a8 <global_stdio_init.part.0+0x34>)
 800597a:	4a0c      	ldr	r2, [pc, #48]	; (80059ac <global_stdio_init.part.0+0x38>)
 800597c:	4620      	mov	r0, r4
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	2104      	movs	r1, #4
 8005982:	2200      	movs	r2, #0
 8005984:	f7ff ff94 	bl	80058b0 <std>
 8005988:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800598c:	2201      	movs	r2, #1
 800598e:	2109      	movs	r1, #9
 8005990:	f7ff ff8e 	bl	80058b0 <std>
 8005994:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005998:	2202      	movs	r2, #2
 800599a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800599e:	2112      	movs	r1, #18
 80059a0:	f7ff bf86 	b.w	80058b0 <std>
 80059a4:	200004a8 	.word	0x200004a8
 80059a8:	20000370 	.word	0x20000370
 80059ac:	0800591d 	.word	0x0800591d

080059b0 <__sfp_lock_acquire>:
 80059b0:	4801      	ldr	r0, [pc, #4]	; (80059b8 <__sfp_lock_acquire+0x8>)
 80059b2:	f000 b934 	b.w	8005c1e <__retarget_lock_acquire_recursive>
 80059b6:	bf00      	nop
 80059b8:	200004b1 	.word	0x200004b1

080059bc <__sfp_lock_release>:
 80059bc:	4801      	ldr	r0, [pc, #4]	; (80059c4 <__sfp_lock_release+0x8>)
 80059be:	f000 b92f 	b.w	8005c20 <__retarget_lock_release_recursive>
 80059c2:	bf00      	nop
 80059c4:	200004b1 	.word	0x200004b1

080059c8 <__sinit>:
 80059c8:	b510      	push	{r4, lr}
 80059ca:	4604      	mov	r4, r0
 80059cc:	f7ff fff0 	bl	80059b0 <__sfp_lock_acquire>
 80059d0:	6a23      	ldr	r3, [r4, #32]
 80059d2:	b11b      	cbz	r3, 80059dc <__sinit+0x14>
 80059d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059d8:	f7ff bff0 	b.w	80059bc <__sfp_lock_release>
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <__sinit+0x28>)
 80059de:	6223      	str	r3, [r4, #32]
 80059e0:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <__sinit+0x2c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f5      	bne.n	80059d4 <__sinit+0xc>
 80059e8:	f7ff ffc4 	bl	8005974 <global_stdio_init.part.0>
 80059ec:	e7f2      	b.n	80059d4 <__sinit+0xc>
 80059ee:	bf00      	nop
 80059f0:	08005935 	.word	0x08005935
 80059f4:	200004a8 	.word	0x200004a8

080059f8 <_fwalk_sglue>:
 80059f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059fc:	4607      	mov	r7, r0
 80059fe:	4688      	mov	r8, r1
 8005a00:	4614      	mov	r4, r2
 8005a02:	2600      	movs	r6, #0
 8005a04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a08:	f1b9 0901 	subs.w	r9, r9, #1
 8005a0c:	d505      	bpl.n	8005a1a <_fwalk_sglue+0x22>
 8005a0e:	6824      	ldr	r4, [r4, #0]
 8005a10:	2c00      	cmp	r4, #0
 8005a12:	d1f7      	bne.n	8005a04 <_fwalk_sglue+0xc>
 8005a14:	4630      	mov	r0, r6
 8005a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a1a:	89ab      	ldrh	r3, [r5, #12]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d907      	bls.n	8005a30 <_fwalk_sglue+0x38>
 8005a20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a24:	3301      	adds	r3, #1
 8005a26:	d003      	beq.n	8005a30 <_fwalk_sglue+0x38>
 8005a28:	4629      	mov	r1, r5
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	47c0      	blx	r8
 8005a2e:	4306      	orrs	r6, r0
 8005a30:	3568      	adds	r5, #104	; 0x68
 8005a32:	e7e9      	b.n	8005a08 <_fwalk_sglue+0x10>

08005a34 <sniprintf>:
 8005a34:	b40c      	push	{r2, r3}
 8005a36:	b530      	push	{r4, r5, lr}
 8005a38:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <sniprintf+0x64>)
 8005a3a:	1e0c      	subs	r4, r1, #0
 8005a3c:	681d      	ldr	r5, [r3, #0]
 8005a3e:	b09d      	sub	sp, #116	; 0x74
 8005a40:	da08      	bge.n	8005a54 <sniprintf+0x20>
 8005a42:	238b      	movs	r3, #139	; 0x8b
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	602b      	str	r3, [r5, #0]
 8005a4a:	b01d      	add	sp, #116	; 0x74
 8005a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a50:	b002      	add	sp, #8
 8005a52:	4770      	bx	lr
 8005a54:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a5c:	bf0c      	ite	eq
 8005a5e:	4623      	moveq	r3, r4
 8005a60:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a64:	9304      	str	r3, [sp, #16]
 8005a66:	9307      	str	r3, [sp, #28]
 8005a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a6c:	9002      	str	r0, [sp, #8]
 8005a6e:	9006      	str	r0, [sp, #24]
 8005a70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a74:	4628      	mov	r0, r5
 8005a76:	ab21      	add	r3, sp, #132	; 0x84
 8005a78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a7a:	a902      	add	r1, sp, #8
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	f001 fc19 	bl	80072b4 <_svfiprintf_r>
 8005a82:	1c43      	adds	r3, r0, #1
 8005a84:	bfbc      	itt	lt
 8005a86:	238b      	movlt	r3, #139	; 0x8b
 8005a88:	602b      	strlt	r3, [r5, #0]
 8005a8a:	2c00      	cmp	r4, #0
 8005a8c:	d0dd      	beq.n	8005a4a <sniprintf+0x16>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	9b02      	ldr	r3, [sp, #8]
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	e7d9      	b.n	8005a4a <sniprintf+0x16>
 8005a96:	bf00      	nop
 8005a98:	2000008c 	.word	0x2000008c

08005a9c <__sread>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa4:	f000 f86c 	bl	8005b80 <_read_r>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	bfab      	itete	ge
 8005aac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005aae:	89a3      	ldrhlt	r3, [r4, #12]
 8005ab0:	181b      	addge	r3, r3, r0
 8005ab2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ab6:	bfac      	ite	ge
 8005ab8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005aba:	81a3      	strhlt	r3, [r4, #12]
 8005abc:	bd10      	pop	{r4, pc}

08005abe <__swrite>:
 8005abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac2:	461f      	mov	r7, r3
 8005ac4:	898b      	ldrh	r3, [r1, #12]
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	05db      	lsls	r3, r3, #23
 8005aca:	460c      	mov	r4, r1
 8005acc:	4616      	mov	r6, r2
 8005ace:	d505      	bpl.n	8005adc <__swrite+0x1e>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad8:	f000 f840 	bl	8005b5c <_lseek_r>
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	4632      	mov	r2, r6
 8005ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	463b      	mov	r3, r7
 8005aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005af2:	f000 b857 	b.w	8005ba4 <_write_r>

08005af6 <__sseek>:
 8005af6:	b510      	push	{r4, lr}
 8005af8:	460c      	mov	r4, r1
 8005afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005afe:	f000 f82d 	bl	8005b5c <_lseek_r>
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	bf15      	itete	ne
 8005b08:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b12:	81a3      	strheq	r3, [r4, #12]
 8005b14:	bf18      	it	ne
 8005b16:	81a3      	strhne	r3, [r4, #12]
 8005b18:	bd10      	pop	{r4, pc}

08005b1a <__sclose>:
 8005b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b1e:	f000 b80d 	b.w	8005b3c <_close_r>

08005b22 <memset>:
 8005b22:	4603      	mov	r3, r0
 8005b24:	4402      	add	r2, r0
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d100      	bne.n	8005b2c <memset+0xa>
 8005b2a:	4770      	bx	lr
 8005b2c:	f803 1b01 	strb.w	r1, [r3], #1
 8005b30:	e7f9      	b.n	8005b26 <memset+0x4>
	...

08005b34 <_localeconv_r>:
 8005b34:	4800      	ldr	r0, [pc, #0]	; (8005b38 <_localeconv_r+0x4>)
 8005b36:	4770      	bx	lr
 8005b38:	20000180 	.word	0x20000180

08005b3c <_close_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	2300      	movs	r3, #0
 8005b40:	4d05      	ldr	r5, [pc, #20]	; (8005b58 <_close_r+0x1c>)
 8005b42:	4604      	mov	r4, r0
 8005b44:	4608      	mov	r0, r1
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	f7fc f88c 	bl	8001c64 <_close>
 8005b4c:	1c43      	adds	r3, r0, #1
 8005b4e:	d102      	bne.n	8005b56 <_close_r+0x1a>
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	b103      	cbz	r3, 8005b56 <_close_r+0x1a>
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	bd38      	pop	{r3, r4, r5, pc}
 8005b58:	200004ac 	.word	0x200004ac

08005b5c <_lseek_r>:
 8005b5c:	b538      	push	{r3, r4, r5, lr}
 8005b5e:	4604      	mov	r4, r0
 8005b60:	4608      	mov	r0, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	2200      	movs	r2, #0
 8005b66:	4d05      	ldr	r5, [pc, #20]	; (8005b7c <_lseek_r+0x20>)
 8005b68:	602a      	str	r2, [r5, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f7fc f89e 	bl	8001cac <_lseek>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d102      	bne.n	8005b7a <_lseek_r+0x1e>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	b103      	cbz	r3, 8005b7a <_lseek_r+0x1e>
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	200004ac 	.word	0x200004ac

08005b80 <_read_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4604      	mov	r4, r0
 8005b84:	4608      	mov	r0, r1
 8005b86:	4611      	mov	r1, r2
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4d05      	ldr	r5, [pc, #20]	; (8005ba0 <_read_r+0x20>)
 8005b8c:	602a      	str	r2, [r5, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f7fc f82f 	bl	8001bf2 <_read>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d102      	bne.n	8005b9e <_read_r+0x1e>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b103      	cbz	r3, 8005b9e <_read_r+0x1e>
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	200004ac 	.word	0x200004ac

08005ba4 <_write_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	4608      	mov	r0, r1
 8005baa:	4611      	mov	r1, r2
 8005bac:	2200      	movs	r2, #0
 8005bae:	4d05      	ldr	r5, [pc, #20]	; (8005bc4 <_write_r+0x20>)
 8005bb0:	602a      	str	r2, [r5, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f7fc f83a 	bl	8001c2c <_write>
 8005bb8:	1c43      	adds	r3, r0, #1
 8005bba:	d102      	bne.n	8005bc2 <_write_r+0x1e>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	b103      	cbz	r3, 8005bc2 <_write_r+0x1e>
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	bd38      	pop	{r3, r4, r5, pc}
 8005bc4:	200004ac 	.word	0x200004ac

08005bc8 <__errno>:
 8005bc8:	4b01      	ldr	r3, [pc, #4]	; (8005bd0 <__errno+0x8>)
 8005bca:	6818      	ldr	r0, [r3, #0]
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	2000008c 	.word	0x2000008c

08005bd4 <__libc_init_array>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	2600      	movs	r6, #0
 8005bd8:	4d0c      	ldr	r5, [pc, #48]	; (8005c0c <__libc_init_array+0x38>)
 8005bda:	4c0d      	ldr	r4, [pc, #52]	; (8005c10 <__libc_init_array+0x3c>)
 8005bdc:	1b64      	subs	r4, r4, r5
 8005bde:	10a4      	asrs	r4, r4, #2
 8005be0:	42a6      	cmp	r6, r4
 8005be2:	d109      	bne.n	8005bf8 <__libc_init_array+0x24>
 8005be4:	f002 f886 	bl	8007cf4 <_init>
 8005be8:	2600      	movs	r6, #0
 8005bea:	4d0a      	ldr	r5, [pc, #40]	; (8005c14 <__libc_init_array+0x40>)
 8005bec:	4c0a      	ldr	r4, [pc, #40]	; (8005c18 <__libc_init_array+0x44>)
 8005bee:	1b64      	subs	r4, r4, r5
 8005bf0:	10a4      	asrs	r4, r4, #2
 8005bf2:	42a6      	cmp	r6, r4
 8005bf4:	d105      	bne.n	8005c02 <__libc_init_array+0x2e>
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}
 8005bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfc:	4798      	blx	r3
 8005bfe:	3601      	adds	r6, #1
 8005c00:	e7ee      	b.n	8005be0 <__libc_init_array+0xc>
 8005c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c06:	4798      	blx	r3
 8005c08:	3601      	adds	r6, #1
 8005c0a:	e7f2      	b.n	8005bf2 <__libc_init_array+0x1e>
 8005c0c:	080080ec 	.word	0x080080ec
 8005c10:	080080ec 	.word	0x080080ec
 8005c14:	080080ec 	.word	0x080080ec
 8005c18:	080080f0 	.word	0x080080f0

08005c1c <__retarget_lock_init_recursive>:
 8005c1c:	4770      	bx	lr

08005c1e <__retarget_lock_acquire_recursive>:
 8005c1e:	4770      	bx	lr

08005c20 <__retarget_lock_release_recursive>:
 8005c20:	4770      	bx	lr

08005c22 <memchr>:
 8005c22:	4603      	mov	r3, r0
 8005c24:	b510      	push	{r4, lr}
 8005c26:	b2c9      	uxtb	r1, r1
 8005c28:	4402      	add	r2, r0
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	d101      	bne.n	8005c34 <memchr+0x12>
 8005c30:	2000      	movs	r0, #0
 8005c32:	e003      	b.n	8005c3c <memchr+0x1a>
 8005c34:	7804      	ldrb	r4, [r0, #0]
 8005c36:	3301      	adds	r3, #1
 8005c38:	428c      	cmp	r4, r1
 8005c3a:	d1f6      	bne.n	8005c2a <memchr+0x8>
 8005c3c:	bd10      	pop	{r4, pc}

08005c3e <quorem>:
 8005c3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c42:	6903      	ldr	r3, [r0, #16]
 8005c44:	690c      	ldr	r4, [r1, #16]
 8005c46:	4607      	mov	r7, r0
 8005c48:	42a3      	cmp	r3, r4
 8005c4a:	db7f      	blt.n	8005d4c <quorem+0x10e>
 8005c4c:	3c01      	subs	r4, #1
 8005c4e:	f100 0514 	add.w	r5, r0, #20
 8005c52:	f101 0814 	add.w	r8, r1, #20
 8005c56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c5a:	9301      	str	r3, [sp, #4]
 8005c5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c64:	3301      	adds	r3, #1
 8005c66:	429a      	cmp	r2, r3
 8005c68:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c74:	d331      	bcc.n	8005cda <quorem+0x9c>
 8005c76:	f04f 0e00 	mov.w	lr, #0
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	46ac      	mov	ip, r5
 8005c7e:	46f2      	mov	sl, lr
 8005c80:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c84:	b293      	uxth	r3, r2
 8005c86:	fb06 e303 	mla	r3, r6, r3, lr
 8005c8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c8e:	0c1a      	lsrs	r2, r3, #16
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	fb06 220e 	mla	r2, r6, lr, r2
 8005c96:	ebaa 0303 	sub.w	r3, sl, r3
 8005c9a:	f8dc a000 	ldr.w	sl, [ip]
 8005c9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ca2:	fa1f fa8a 	uxth.w	sl, sl
 8005ca6:	4453      	add	r3, sl
 8005ca8:	f8dc a000 	ldr.w	sl, [ip]
 8005cac:	b292      	uxth	r2, r2
 8005cae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005cb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cbc:	4581      	cmp	r9, r0
 8005cbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005cc2:	f84c 3b04 	str.w	r3, [ip], #4
 8005cc6:	d2db      	bcs.n	8005c80 <quorem+0x42>
 8005cc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ccc:	b92b      	cbnz	r3, 8005cda <quorem+0x9c>
 8005cce:	9b01      	ldr	r3, [sp, #4]
 8005cd0:	3b04      	subs	r3, #4
 8005cd2:	429d      	cmp	r5, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	d32d      	bcc.n	8005d34 <quorem+0xf6>
 8005cd8:	613c      	str	r4, [r7, #16]
 8005cda:	4638      	mov	r0, r7
 8005cdc:	f001 f992 	bl	8007004 <__mcmp>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	db23      	blt.n	8005d2c <quorem+0xee>
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	3601      	adds	r6, #1
 8005cea:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cee:	f8d1 c000 	ldr.w	ip, [r1]
 8005cf2:	b293      	uxth	r3, r2
 8005cf4:	1ac3      	subs	r3, r0, r3
 8005cf6:	0c12      	lsrs	r2, r2, #16
 8005cf8:	fa1f f08c 	uxth.w	r0, ip
 8005cfc:	4403      	add	r3, r0
 8005cfe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005d02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d0c:	45c1      	cmp	r9, r8
 8005d0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d12:	f841 3b04 	str.w	r3, [r1], #4
 8005d16:	d2e8      	bcs.n	8005cea <quorem+0xac>
 8005d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d20:	b922      	cbnz	r2, 8005d2c <quorem+0xee>
 8005d22:	3b04      	subs	r3, #4
 8005d24:	429d      	cmp	r5, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	d30a      	bcc.n	8005d40 <quorem+0x102>
 8005d2a:	613c      	str	r4, [r7, #16]
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	b003      	add	sp, #12
 8005d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d34:	6812      	ldr	r2, [r2, #0]
 8005d36:	3b04      	subs	r3, #4
 8005d38:	2a00      	cmp	r2, #0
 8005d3a:	d1cd      	bne.n	8005cd8 <quorem+0x9a>
 8005d3c:	3c01      	subs	r4, #1
 8005d3e:	e7c8      	b.n	8005cd2 <quorem+0x94>
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	3b04      	subs	r3, #4
 8005d44:	2a00      	cmp	r2, #0
 8005d46:	d1f0      	bne.n	8005d2a <quorem+0xec>
 8005d48:	3c01      	subs	r4, #1
 8005d4a:	e7eb      	b.n	8005d24 <quorem+0xe6>
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	e7ee      	b.n	8005d2e <quorem+0xf0>

08005d50 <_dtoa_r>:
 8005d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	4616      	mov	r6, r2
 8005d56:	461f      	mov	r7, r3
 8005d58:	69c4      	ldr	r4, [r0, #28]
 8005d5a:	b099      	sub	sp, #100	; 0x64
 8005d5c:	4605      	mov	r5, r0
 8005d5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005d62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005d66:	b974      	cbnz	r4, 8005d86 <_dtoa_r+0x36>
 8005d68:	2010      	movs	r0, #16
 8005d6a:	f000 fe1d 	bl	80069a8 <malloc>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	61e8      	str	r0, [r5, #28]
 8005d72:	b920      	cbnz	r0, 8005d7e <_dtoa_r+0x2e>
 8005d74:	21ef      	movs	r1, #239	; 0xef
 8005d76:	4bac      	ldr	r3, [pc, #688]	; (8006028 <_dtoa_r+0x2d8>)
 8005d78:	48ac      	ldr	r0, [pc, #688]	; (800602c <_dtoa_r+0x2dc>)
 8005d7a:	f001 fc7b 	bl	8007674 <__assert_func>
 8005d7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d82:	6004      	str	r4, [r0, #0]
 8005d84:	60c4      	str	r4, [r0, #12]
 8005d86:	69eb      	ldr	r3, [r5, #28]
 8005d88:	6819      	ldr	r1, [r3, #0]
 8005d8a:	b151      	cbz	r1, 8005da2 <_dtoa_r+0x52>
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4093      	lsls	r3, r2
 8005d92:	604a      	str	r2, [r1, #4]
 8005d94:	608b      	str	r3, [r1, #8]
 8005d96:	4628      	mov	r0, r5
 8005d98:	f000 fefa 	bl	8006b90 <_Bfree>
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	69eb      	ldr	r3, [r5, #28]
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	1e3b      	subs	r3, r7, #0
 8005da4:	bfaf      	iteee	ge
 8005da6:	2300      	movge	r3, #0
 8005da8:	2201      	movlt	r2, #1
 8005daa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005dae:	9305      	strlt	r3, [sp, #20]
 8005db0:	bfa8      	it	ge
 8005db2:	f8c8 3000 	strge.w	r3, [r8]
 8005db6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005dba:	4b9d      	ldr	r3, [pc, #628]	; (8006030 <_dtoa_r+0x2e0>)
 8005dbc:	bfb8      	it	lt
 8005dbe:	f8c8 2000 	strlt.w	r2, [r8]
 8005dc2:	ea33 0309 	bics.w	r3, r3, r9
 8005dc6:	d119      	bne.n	8005dfc <_dtoa_r+0xac>
 8005dc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005dcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005dd4:	4333      	orrs	r3, r6
 8005dd6:	f000 8589 	beq.w	80068ec <_dtoa_r+0xb9c>
 8005dda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ddc:	b953      	cbnz	r3, 8005df4 <_dtoa_r+0xa4>
 8005dde:	4b95      	ldr	r3, [pc, #596]	; (8006034 <_dtoa_r+0x2e4>)
 8005de0:	e023      	b.n	8005e2a <_dtoa_r+0xda>
 8005de2:	4b95      	ldr	r3, [pc, #596]	; (8006038 <_dtoa_r+0x2e8>)
 8005de4:	9303      	str	r3, [sp, #12]
 8005de6:	3308      	adds	r3, #8
 8005de8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	9803      	ldr	r0, [sp, #12]
 8005dee:	b019      	add	sp, #100	; 0x64
 8005df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df4:	4b8f      	ldr	r3, [pc, #572]	; (8006034 <_dtoa_r+0x2e4>)
 8005df6:	9303      	str	r3, [sp, #12]
 8005df8:	3303      	adds	r3, #3
 8005dfa:	e7f5      	b.n	8005de8 <_dtoa_r+0x98>
 8005dfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005e04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f7fa fdcc 	bl	80009a8 <__aeabi_dcmpeq>
 8005e10:	4680      	mov	r8, r0
 8005e12:	b160      	cbz	r0, 8005e2e <_dtoa_r+0xde>
 8005e14:	2301      	movs	r3, #1
 8005e16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 8562 	beq.w	80068e6 <_dtoa_r+0xb96>
 8005e22:	4b86      	ldr	r3, [pc, #536]	; (800603c <_dtoa_r+0x2ec>)
 8005e24:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	9303      	str	r3, [sp, #12]
 8005e2c:	e7de      	b.n	8005dec <_dtoa_r+0x9c>
 8005e2e:	ab16      	add	r3, sp, #88	; 0x58
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	ab17      	add	r3, sp, #92	; 0x5c
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	4628      	mov	r0, r5
 8005e38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e3c:	f001 f98a 	bl	8007154 <__d2b>
 8005e40:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005e44:	4682      	mov	sl, r0
 8005e46:	2c00      	cmp	r4, #0
 8005e48:	d07e      	beq.n	8005f48 <_dtoa_r+0x1f8>
 8005e4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e50:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e58:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005e5c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005e60:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005e64:	4619      	mov	r1, r3
 8005e66:	2200      	movs	r2, #0
 8005e68:	4b75      	ldr	r3, [pc, #468]	; (8006040 <_dtoa_r+0x2f0>)
 8005e6a:	f7fa f97d 	bl	8000168 <__aeabi_dsub>
 8005e6e:	a368      	add	r3, pc, #416	; (adr r3, 8006010 <_dtoa_r+0x2c0>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f7fa fb30 	bl	80004d8 <__aeabi_dmul>
 8005e78:	a367      	add	r3, pc, #412	; (adr r3, 8006018 <_dtoa_r+0x2c8>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa f975 	bl	800016c <__adddf3>
 8005e82:	4606      	mov	r6, r0
 8005e84:	4620      	mov	r0, r4
 8005e86:	460f      	mov	r7, r1
 8005e88:	f7fa fabc 	bl	8000404 <__aeabi_i2d>
 8005e8c:	a364      	add	r3, pc, #400	; (adr r3, 8006020 <_dtoa_r+0x2d0>)
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	f7fa fb21 	bl	80004d8 <__aeabi_dmul>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	4639      	mov	r1, r7
 8005e9e:	f7fa f965 	bl	800016c <__adddf3>
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	460f      	mov	r7, r1
 8005ea6:	f7fa fdc7 	bl	8000a38 <__aeabi_d2iz>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	4683      	mov	fp, r0
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	f7fa fd82 	bl	80009bc <__aeabi_dcmplt>
 8005eb8:	b148      	cbz	r0, 8005ece <_dtoa_r+0x17e>
 8005eba:	4658      	mov	r0, fp
 8005ebc:	f7fa faa2 	bl	8000404 <__aeabi_i2d>
 8005ec0:	4632      	mov	r2, r6
 8005ec2:	463b      	mov	r3, r7
 8005ec4:	f7fa fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8005ec8:	b908      	cbnz	r0, 8005ece <_dtoa_r+0x17e>
 8005eca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ece:	f1bb 0f16 	cmp.w	fp, #22
 8005ed2:	d857      	bhi.n	8005f84 <_dtoa_r+0x234>
 8005ed4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ed8:	4b5a      	ldr	r3, [pc, #360]	; (8006044 <_dtoa_r+0x2f4>)
 8005eda:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f7fa fd6b 	bl	80009bc <__aeabi_dcmplt>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d04e      	beq.n	8005f88 <_dtoa_r+0x238>
 8005eea:	2300      	movs	r3, #0
 8005eec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ef2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ef4:	1b1b      	subs	r3, r3, r4
 8005ef6:	1e5a      	subs	r2, r3, #1
 8005ef8:	bf46      	itte	mi
 8005efa:	f1c3 0901 	rsbmi	r9, r3, #1
 8005efe:	2300      	movmi	r3, #0
 8005f00:	f04f 0900 	movpl.w	r9, #0
 8005f04:	9209      	str	r2, [sp, #36]	; 0x24
 8005f06:	bf48      	it	mi
 8005f08:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005f0a:	f1bb 0f00 	cmp.w	fp, #0
 8005f0e:	db3d      	blt.n	8005f8c <_dtoa_r+0x23c>
 8005f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f12:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005f16:	445b      	add	r3, fp
 8005f18:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	930a      	str	r3, [sp, #40]	; 0x28
 8005f1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f20:	2b09      	cmp	r3, #9
 8005f22:	d867      	bhi.n	8005ff4 <_dtoa_r+0x2a4>
 8005f24:	2b05      	cmp	r3, #5
 8005f26:	bfc4      	itt	gt
 8005f28:	3b04      	subgt	r3, #4
 8005f2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f2e:	bfc8      	it	gt
 8005f30:	2400      	movgt	r4, #0
 8005f32:	f1a3 0302 	sub.w	r3, r3, #2
 8005f36:	bfd8      	it	le
 8005f38:	2401      	movle	r4, #1
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	f200 8086 	bhi.w	800604c <_dtoa_r+0x2fc>
 8005f40:	e8df f003 	tbb	[pc, r3]
 8005f44:	5637392c 	.word	0x5637392c
 8005f48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005f4c:	441c      	add	r4, r3
 8005f4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	bfc1      	itttt	gt
 8005f56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f5a:	fa09 f903 	lslgt.w	r9, r9, r3
 8005f5e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005f62:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005f66:	bfd6      	itet	le
 8005f68:	f1c3 0320 	rsble	r3, r3, #32
 8005f6c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005f70:	fa06 f003 	lslle.w	r0, r6, r3
 8005f74:	f7fa fa36 	bl	80003e4 <__aeabi_ui2d>
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005f7e:	3c01      	subs	r4, #1
 8005f80:	9213      	str	r2, [sp, #76]	; 0x4c
 8005f82:	e76f      	b.n	8005e64 <_dtoa_r+0x114>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e7b3      	b.n	8005ef0 <_dtoa_r+0x1a0>
 8005f88:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f8a:	e7b2      	b.n	8005ef2 <_dtoa_r+0x1a2>
 8005f8c:	f1cb 0300 	rsb	r3, fp, #0
 8005f90:	930a      	str	r3, [sp, #40]	; 0x28
 8005f92:	2300      	movs	r3, #0
 8005f94:	eba9 090b 	sub.w	r9, r9, fp
 8005f98:	930e      	str	r3, [sp, #56]	; 0x38
 8005f9a:	e7c0      	b.n	8005f1e <_dtoa_r+0x1ce>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fa0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	dc55      	bgt.n	8006052 <_dtoa_r+0x302>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	461a      	mov	r2, r3
 8005faa:	9306      	str	r3, [sp, #24]
 8005fac:	9308      	str	r3, [sp, #32]
 8005fae:	9223      	str	r2, [sp, #140]	; 0x8c
 8005fb0:	e00b      	b.n	8005fca <_dtoa_r+0x27a>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e7f3      	b.n	8005f9e <_dtoa_r+0x24e>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fbc:	445b      	add	r3, fp
 8005fbe:	9306      	str	r3, [sp, #24]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	9308      	str	r3, [sp, #32]
 8005fc6:	bfb8      	it	lt
 8005fc8:	2301      	movlt	r3, #1
 8005fca:	2100      	movs	r1, #0
 8005fcc:	2204      	movs	r2, #4
 8005fce:	69e8      	ldr	r0, [r5, #28]
 8005fd0:	f102 0614 	add.w	r6, r2, #20
 8005fd4:	429e      	cmp	r6, r3
 8005fd6:	d940      	bls.n	800605a <_dtoa_r+0x30a>
 8005fd8:	6041      	str	r1, [r0, #4]
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f000 fd98 	bl	8006b10 <_Balloc>
 8005fe0:	9003      	str	r0, [sp, #12]
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d13c      	bne.n	8006060 <_dtoa_r+0x310>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	f240 11af 	movw	r1, #431	; 0x1af
 8005fec:	4b16      	ldr	r3, [pc, #88]	; (8006048 <_dtoa_r+0x2f8>)
 8005fee:	e6c3      	b.n	8005d78 <_dtoa_r+0x28>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e7e1      	b.n	8005fb8 <_dtoa_r+0x268>
 8005ff4:	2401      	movs	r4, #1
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005ffa:	9322      	str	r3, [sp, #136]	; 0x88
 8005ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8006000:	2200      	movs	r2, #0
 8006002:	9306      	str	r3, [sp, #24]
 8006004:	9308      	str	r3, [sp, #32]
 8006006:	2312      	movs	r3, #18
 8006008:	e7d1      	b.n	8005fae <_dtoa_r+0x25e>
 800600a:	bf00      	nop
 800600c:	f3af 8000 	nop.w
 8006010:	636f4361 	.word	0x636f4361
 8006014:	3fd287a7 	.word	0x3fd287a7
 8006018:	8b60c8b3 	.word	0x8b60c8b3
 800601c:	3fc68a28 	.word	0x3fc68a28
 8006020:	509f79fb 	.word	0x509f79fb
 8006024:	3fd34413 	.word	0x3fd34413
 8006028:	08007dbf 	.word	0x08007dbf
 800602c:	08007dd6 	.word	0x08007dd6
 8006030:	7ff00000 	.word	0x7ff00000
 8006034:	08007dbb 	.word	0x08007dbb
 8006038:	08007db2 	.word	0x08007db2
 800603c:	08007d8f 	.word	0x08007d8f
 8006040:	3ff80000 	.word	0x3ff80000
 8006044:	08007ec0 	.word	0x08007ec0
 8006048:	08007e2e 	.word	0x08007e2e
 800604c:	2301      	movs	r3, #1
 800604e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006050:	e7d4      	b.n	8005ffc <_dtoa_r+0x2ac>
 8006052:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006054:	9306      	str	r3, [sp, #24]
 8006056:	9308      	str	r3, [sp, #32]
 8006058:	e7b7      	b.n	8005fca <_dtoa_r+0x27a>
 800605a:	3101      	adds	r1, #1
 800605c:	0052      	lsls	r2, r2, #1
 800605e:	e7b7      	b.n	8005fd0 <_dtoa_r+0x280>
 8006060:	69eb      	ldr	r3, [r5, #28]
 8006062:	9a03      	ldr	r2, [sp, #12]
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	9b08      	ldr	r3, [sp, #32]
 8006068:	2b0e      	cmp	r3, #14
 800606a:	f200 80a8 	bhi.w	80061be <_dtoa_r+0x46e>
 800606e:	2c00      	cmp	r4, #0
 8006070:	f000 80a5 	beq.w	80061be <_dtoa_r+0x46e>
 8006074:	f1bb 0f00 	cmp.w	fp, #0
 8006078:	dd34      	ble.n	80060e4 <_dtoa_r+0x394>
 800607a:	4b9a      	ldr	r3, [pc, #616]	; (80062e4 <_dtoa_r+0x594>)
 800607c:	f00b 020f 	and.w	r2, fp, #15
 8006080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006084:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006088:	e9d3 3400 	ldrd	r3, r4, [r3]
 800608c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006090:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006094:	d016      	beq.n	80060c4 <_dtoa_r+0x374>
 8006096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800609a:	4b93      	ldr	r3, [pc, #588]	; (80062e8 <_dtoa_r+0x598>)
 800609c:	2703      	movs	r7, #3
 800609e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060a2:	f7fa fb43 	bl	800072c <__aeabi_ddiv>
 80060a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060aa:	f004 040f 	and.w	r4, r4, #15
 80060ae:	4e8e      	ldr	r6, [pc, #568]	; (80062e8 <_dtoa_r+0x598>)
 80060b0:	b954      	cbnz	r4, 80060c8 <_dtoa_r+0x378>
 80060b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060ba:	f7fa fb37 	bl	800072c <__aeabi_ddiv>
 80060be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060c2:	e029      	b.n	8006118 <_dtoa_r+0x3c8>
 80060c4:	2702      	movs	r7, #2
 80060c6:	e7f2      	b.n	80060ae <_dtoa_r+0x35e>
 80060c8:	07e1      	lsls	r1, r4, #31
 80060ca:	d508      	bpl.n	80060de <_dtoa_r+0x38e>
 80060cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060d4:	f7fa fa00 	bl	80004d8 <__aeabi_dmul>
 80060d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060dc:	3701      	adds	r7, #1
 80060de:	1064      	asrs	r4, r4, #1
 80060e0:	3608      	adds	r6, #8
 80060e2:	e7e5      	b.n	80060b0 <_dtoa_r+0x360>
 80060e4:	f000 80a5 	beq.w	8006232 <_dtoa_r+0x4e2>
 80060e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060ec:	f1cb 0400 	rsb	r4, fp, #0
 80060f0:	4b7c      	ldr	r3, [pc, #496]	; (80062e4 <_dtoa_r+0x594>)
 80060f2:	f004 020f 	and.w	r2, r4, #15
 80060f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f7fa f9eb 	bl	80004d8 <__aeabi_dmul>
 8006102:	2702      	movs	r7, #2
 8006104:	2300      	movs	r3, #0
 8006106:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800610a:	4e77      	ldr	r6, [pc, #476]	; (80062e8 <_dtoa_r+0x598>)
 800610c:	1124      	asrs	r4, r4, #4
 800610e:	2c00      	cmp	r4, #0
 8006110:	f040 8084 	bne.w	800621c <_dtoa_r+0x4cc>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1d2      	bne.n	80060be <_dtoa_r+0x36e>
 8006118:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800611c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 8087 	beq.w	8006236 <_dtoa_r+0x4e6>
 8006128:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800612c:	2200      	movs	r2, #0
 800612e:	4b6f      	ldr	r3, [pc, #444]	; (80062ec <_dtoa_r+0x59c>)
 8006130:	f7fa fc44 	bl	80009bc <__aeabi_dcmplt>
 8006134:	2800      	cmp	r0, #0
 8006136:	d07e      	beq.n	8006236 <_dtoa_r+0x4e6>
 8006138:	9b08      	ldr	r3, [sp, #32]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d07b      	beq.n	8006236 <_dtoa_r+0x4e6>
 800613e:	9b06      	ldr	r3, [sp, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	dd38      	ble.n	80061b6 <_dtoa_r+0x466>
 8006144:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006148:	2200      	movs	r2, #0
 800614a:	4b69      	ldr	r3, [pc, #420]	; (80062f0 <_dtoa_r+0x5a0>)
 800614c:	f7fa f9c4 	bl	80004d8 <__aeabi_dmul>
 8006150:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006154:	9c06      	ldr	r4, [sp, #24]
 8006156:	f10b 38ff 	add.w	r8, fp, #4294967295
 800615a:	3701      	adds	r7, #1
 800615c:	4638      	mov	r0, r7
 800615e:	f7fa f951 	bl	8000404 <__aeabi_i2d>
 8006162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006166:	f7fa f9b7 	bl	80004d8 <__aeabi_dmul>
 800616a:	2200      	movs	r2, #0
 800616c:	4b61      	ldr	r3, [pc, #388]	; (80062f4 <_dtoa_r+0x5a4>)
 800616e:	f7f9 fffd 	bl	800016c <__adddf3>
 8006172:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006176:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800617a:	9611      	str	r6, [sp, #68]	; 0x44
 800617c:	2c00      	cmp	r4, #0
 800617e:	d15d      	bne.n	800623c <_dtoa_r+0x4ec>
 8006180:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006184:	2200      	movs	r2, #0
 8006186:	4b5c      	ldr	r3, [pc, #368]	; (80062f8 <_dtoa_r+0x5a8>)
 8006188:	f7f9 ffee 	bl	8000168 <__aeabi_dsub>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006194:	4633      	mov	r3, r6
 8006196:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006198:	f7fa fc2e 	bl	80009f8 <__aeabi_dcmpgt>
 800619c:	2800      	cmp	r0, #0
 800619e:	f040 8295 	bne.w	80066cc <_dtoa_r+0x97c>
 80061a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80061ac:	f7fa fc06 	bl	80009bc <__aeabi_dcmplt>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f040 8289 	bne.w	80066c8 <_dtoa_r+0x978>
 80061b6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80061ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80061be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f2c0 8151 	blt.w	8006468 <_dtoa_r+0x718>
 80061c6:	f1bb 0f0e 	cmp.w	fp, #14
 80061ca:	f300 814d 	bgt.w	8006468 <_dtoa_r+0x718>
 80061ce:	4b45      	ldr	r3, [pc, #276]	; (80062e4 <_dtoa_r+0x594>)
 80061d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80061d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061d8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80061dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f280 80da 	bge.w	8006398 <_dtoa_r+0x648>
 80061e4:	9b08      	ldr	r3, [sp, #32]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f300 80d6 	bgt.w	8006398 <_dtoa_r+0x648>
 80061ec:	f040 826b 	bne.w	80066c6 <_dtoa_r+0x976>
 80061f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061f4:	2200      	movs	r2, #0
 80061f6:	4b40      	ldr	r3, [pc, #256]	; (80062f8 <_dtoa_r+0x5a8>)
 80061f8:	f7fa f96e 	bl	80004d8 <__aeabi_dmul>
 80061fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006200:	f7fa fbf0 	bl	80009e4 <__aeabi_dcmpge>
 8006204:	9c08      	ldr	r4, [sp, #32]
 8006206:	4626      	mov	r6, r4
 8006208:	2800      	cmp	r0, #0
 800620a:	f040 8241 	bne.w	8006690 <_dtoa_r+0x940>
 800620e:	2331      	movs	r3, #49	; 0x31
 8006210:	9f03      	ldr	r7, [sp, #12]
 8006212:	f10b 0b01 	add.w	fp, fp, #1
 8006216:	f807 3b01 	strb.w	r3, [r7], #1
 800621a:	e23d      	b.n	8006698 <_dtoa_r+0x948>
 800621c:	07e2      	lsls	r2, r4, #31
 800621e:	d505      	bpl.n	800622c <_dtoa_r+0x4dc>
 8006220:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006224:	f7fa f958 	bl	80004d8 <__aeabi_dmul>
 8006228:	2301      	movs	r3, #1
 800622a:	3701      	adds	r7, #1
 800622c:	1064      	asrs	r4, r4, #1
 800622e:	3608      	adds	r6, #8
 8006230:	e76d      	b.n	800610e <_dtoa_r+0x3be>
 8006232:	2702      	movs	r7, #2
 8006234:	e770      	b.n	8006118 <_dtoa_r+0x3c8>
 8006236:	46d8      	mov	r8, fp
 8006238:	9c08      	ldr	r4, [sp, #32]
 800623a:	e78f      	b.n	800615c <_dtoa_r+0x40c>
 800623c:	9903      	ldr	r1, [sp, #12]
 800623e:	4b29      	ldr	r3, [pc, #164]	; (80062e4 <_dtoa_r+0x594>)
 8006240:	4421      	add	r1, r4
 8006242:	9112      	str	r1, [sp, #72]	; 0x48
 8006244:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006246:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800624a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800624e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006252:	2900      	cmp	r1, #0
 8006254:	d054      	beq.n	8006300 <_dtoa_r+0x5b0>
 8006256:	2000      	movs	r0, #0
 8006258:	4928      	ldr	r1, [pc, #160]	; (80062fc <_dtoa_r+0x5ac>)
 800625a:	f7fa fa67 	bl	800072c <__aeabi_ddiv>
 800625e:	463b      	mov	r3, r7
 8006260:	4632      	mov	r2, r6
 8006262:	f7f9 ff81 	bl	8000168 <__aeabi_dsub>
 8006266:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800626a:	9f03      	ldr	r7, [sp, #12]
 800626c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006270:	f7fa fbe2 	bl	8000a38 <__aeabi_d2iz>
 8006274:	4604      	mov	r4, r0
 8006276:	f7fa f8c5 	bl	8000404 <__aeabi_i2d>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006282:	f7f9 ff71 	bl	8000168 <__aeabi_dsub>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	3430      	adds	r4, #48	; 0x30
 800628c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006290:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006294:	f807 4b01 	strb.w	r4, [r7], #1
 8006298:	f7fa fb90 	bl	80009bc <__aeabi_dcmplt>
 800629c:	2800      	cmp	r0, #0
 800629e:	d173      	bne.n	8006388 <_dtoa_r+0x638>
 80062a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a4:	2000      	movs	r0, #0
 80062a6:	4911      	ldr	r1, [pc, #68]	; (80062ec <_dtoa_r+0x59c>)
 80062a8:	f7f9 ff5e 	bl	8000168 <__aeabi_dsub>
 80062ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062b0:	f7fa fb84 	bl	80009bc <__aeabi_dcmplt>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f040 80b6 	bne.w	8006426 <_dtoa_r+0x6d6>
 80062ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062bc:	429f      	cmp	r7, r3
 80062be:	f43f af7a 	beq.w	80061b6 <_dtoa_r+0x466>
 80062c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062c6:	2200      	movs	r2, #0
 80062c8:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <_dtoa_r+0x5a0>)
 80062ca:	f7fa f905 	bl	80004d8 <__aeabi_dmul>
 80062ce:	2200      	movs	r2, #0
 80062d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062d8:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <_dtoa_r+0x5a0>)
 80062da:	f7fa f8fd 	bl	80004d8 <__aeabi_dmul>
 80062de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062e2:	e7c3      	b.n	800626c <_dtoa_r+0x51c>
 80062e4:	08007ec0 	.word	0x08007ec0
 80062e8:	08007e98 	.word	0x08007e98
 80062ec:	3ff00000 	.word	0x3ff00000
 80062f0:	40240000 	.word	0x40240000
 80062f4:	401c0000 	.word	0x401c0000
 80062f8:	40140000 	.word	0x40140000
 80062fc:	3fe00000 	.word	0x3fe00000
 8006300:	4630      	mov	r0, r6
 8006302:	4639      	mov	r1, r7
 8006304:	f7fa f8e8 	bl	80004d8 <__aeabi_dmul>
 8006308:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800630a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800630e:	9c03      	ldr	r4, [sp, #12]
 8006310:	9314      	str	r3, [sp, #80]	; 0x50
 8006312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006316:	f7fa fb8f 	bl	8000a38 <__aeabi_d2iz>
 800631a:	9015      	str	r0, [sp, #84]	; 0x54
 800631c:	f7fa f872 	bl	8000404 <__aeabi_i2d>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006328:	f7f9 ff1e 	bl	8000168 <__aeabi_dsub>
 800632c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800632e:	4606      	mov	r6, r0
 8006330:	3330      	adds	r3, #48	; 0x30
 8006332:	f804 3b01 	strb.w	r3, [r4], #1
 8006336:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006338:	460f      	mov	r7, r1
 800633a:	429c      	cmp	r4, r3
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	d124      	bne.n	800638c <_dtoa_r+0x63c>
 8006342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006346:	4baf      	ldr	r3, [pc, #700]	; (8006604 <_dtoa_r+0x8b4>)
 8006348:	f7f9 ff10 	bl	800016c <__adddf3>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4630      	mov	r0, r6
 8006352:	4639      	mov	r1, r7
 8006354:	f7fa fb50 	bl	80009f8 <__aeabi_dcmpgt>
 8006358:	2800      	cmp	r0, #0
 800635a:	d163      	bne.n	8006424 <_dtoa_r+0x6d4>
 800635c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006360:	2000      	movs	r0, #0
 8006362:	49a8      	ldr	r1, [pc, #672]	; (8006604 <_dtoa_r+0x8b4>)
 8006364:	f7f9 ff00 	bl	8000168 <__aeabi_dsub>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4630      	mov	r0, r6
 800636e:	4639      	mov	r1, r7
 8006370:	f7fa fb24 	bl	80009bc <__aeabi_dcmplt>
 8006374:	2800      	cmp	r0, #0
 8006376:	f43f af1e 	beq.w	80061b6 <_dtoa_r+0x466>
 800637a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800637c:	1e7b      	subs	r3, r7, #1
 800637e:	9314      	str	r3, [sp, #80]	; 0x50
 8006380:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006384:	2b30      	cmp	r3, #48	; 0x30
 8006386:	d0f8      	beq.n	800637a <_dtoa_r+0x62a>
 8006388:	46c3      	mov	fp, r8
 800638a:	e03b      	b.n	8006404 <_dtoa_r+0x6b4>
 800638c:	4b9e      	ldr	r3, [pc, #632]	; (8006608 <_dtoa_r+0x8b8>)
 800638e:	f7fa f8a3 	bl	80004d8 <__aeabi_dmul>
 8006392:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006396:	e7bc      	b.n	8006312 <_dtoa_r+0x5c2>
 8006398:	9f03      	ldr	r7, [sp, #12]
 800639a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800639e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063a2:	4640      	mov	r0, r8
 80063a4:	4649      	mov	r1, r9
 80063a6:	f7fa f9c1 	bl	800072c <__aeabi_ddiv>
 80063aa:	f7fa fb45 	bl	8000a38 <__aeabi_d2iz>
 80063ae:	4604      	mov	r4, r0
 80063b0:	f7fa f828 	bl	8000404 <__aeabi_i2d>
 80063b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063b8:	f7fa f88e 	bl	80004d8 <__aeabi_dmul>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4640      	mov	r0, r8
 80063c2:	4649      	mov	r1, r9
 80063c4:	f7f9 fed0 	bl	8000168 <__aeabi_dsub>
 80063c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80063cc:	f807 6b01 	strb.w	r6, [r7], #1
 80063d0:	9e03      	ldr	r6, [sp, #12]
 80063d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80063d6:	1bbe      	subs	r6, r7, r6
 80063d8:	45b4      	cmp	ip, r6
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	d136      	bne.n	800644e <_dtoa_r+0x6fe>
 80063e0:	f7f9 fec4 	bl	800016c <__adddf3>
 80063e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063e8:	4680      	mov	r8, r0
 80063ea:	4689      	mov	r9, r1
 80063ec:	f7fa fb04 	bl	80009f8 <__aeabi_dcmpgt>
 80063f0:	bb58      	cbnz	r0, 800644a <_dtoa_r+0x6fa>
 80063f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063f6:	4640      	mov	r0, r8
 80063f8:	4649      	mov	r1, r9
 80063fa:	f7fa fad5 	bl	80009a8 <__aeabi_dcmpeq>
 80063fe:	b108      	cbz	r0, 8006404 <_dtoa_r+0x6b4>
 8006400:	07e3      	lsls	r3, r4, #31
 8006402:	d422      	bmi.n	800644a <_dtoa_r+0x6fa>
 8006404:	4651      	mov	r1, sl
 8006406:	4628      	mov	r0, r5
 8006408:	f000 fbc2 	bl	8006b90 <_Bfree>
 800640c:	2300      	movs	r3, #0
 800640e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006410:	703b      	strb	r3, [r7, #0]
 8006412:	f10b 0301 	add.w	r3, fp, #1
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800641a:	2b00      	cmp	r3, #0
 800641c:	f43f ace6 	beq.w	8005dec <_dtoa_r+0x9c>
 8006420:	601f      	str	r7, [r3, #0]
 8006422:	e4e3      	b.n	8005dec <_dtoa_r+0x9c>
 8006424:	4627      	mov	r7, r4
 8006426:	463b      	mov	r3, r7
 8006428:	461f      	mov	r7, r3
 800642a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800642e:	2a39      	cmp	r2, #57	; 0x39
 8006430:	d107      	bne.n	8006442 <_dtoa_r+0x6f2>
 8006432:	9a03      	ldr	r2, [sp, #12]
 8006434:	429a      	cmp	r2, r3
 8006436:	d1f7      	bne.n	8006428 <_dtoa_r+0x6d8>
 8006438:	2230      	movs	r2, #48	; 0x30
 800643a:	9903      	ldr	r1, [sp, #12]
 800643c:	f108 0801 	add.w	r8, r8, #1
 8006440:	700a      	strb	r2, [r1, #0]
 8006442:	781a      	ldrb	r2, [r3, #0]
 8006444:	3201      	adds	r2, #1
 8006446:	701a      	strb	r2, [r3, #0]
 8006448:	e79e      	b.n	8006388 <_dtoa_r+0x638>
 800644a:	46d8      	mov	r8, fp
 800644c:	e7eb      	b.n	8006426 <_dtoa_r+0x6d6>
 800644e:	2200      	movs	r2, #0
 8006450:	4b6d      	ldr	r3, [pc, #436]	; (8006608 <_dtoa_r+0x8b8>)
 8006452:	f7fa f841 	bl	80004d8 <__aeabi_dmul>
 8006456:	2200      	movs	r2, #0
 8006458:	2300      	movs	r3, #0
 800645a:	4680      	mov	r8, r0
 800645c:	4689      	mov	r9, r1
 800645e:	f7fa faa3 	bl	80009a8 <__aeabi_dcmpeq>
 8006462:	2800      	cmp	r0, #0
 8006464:	d09b      	beq.n	800639e <_dtoa_r+0x64e>
 8006466:	e7cd      	b.n	8006404 <_dtoa_r+0x6b4>
 8006468:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800646a:	2a00      	cmp	r2, #0
 800646c:	f000 80c4 	beq.w	80065f8 <_dtoa_r+0x8a8>
 8006470:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006472:	2a01      	cmp	r2, #1
 8006474:	f300 80a8 	bgt.w	80065c8 <_dtoa_r+0x878>
 8006478:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800647a:	2a00      	cmp	r2, #0
 800647c:	f000 80a0 	beq.w	80065c0 <_dtoa_r+0x870>
 8006480:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006484:	464f      	mov	r7, r9
 8006486:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800648a:	2101      	movs	r1, #1
 800648c:	441a      	add	r2, r3
 800648e:	4628      	mov	r0, r5
 8006490:	4499      	add	r9, r3
 8006492:	9209      	str	r2, [sp, #36]	; 0x24
 8006494:	f000 fc32 	bl	8006cfc <__i2b>
 8006498:	4606      	mov	r6, r0
 800649a:	b15f      	cbz	r7, 80064b4 <_dtoa_r+0x764>
 800649c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649e:	2b00      	cmp	r3, #0
 80064a0:	dd08      	ble.n	80064b4 <_dtoa_r+0x764>
 80064a2:	42bb      	cmp	r3, r7
 80064a4:	bfa8      	it	ge
 80064a6:	463b      	movge	r3, r7
 80064a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064aa:	eba9 0903 	sub.w	r9, r9, r3
 80064ae:	1aff      	subs	r7, r7, r3
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	9309      	str	r3, [sp, #36]	; 0x24
 80064b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b6:	b1f3      	cbz	r3, 80064f6 <_dtoa_r+0x7a6>
 80064b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 80a0 	beq.w	8006600 <_dtoa_r+0x8b0>
 80064c0:	2c00      	cmp	r4, #0
 80064c2:	dd10      	ble.n	80064e6 <_dtoa_r+0x796>
 80064c4:	4631      	mov	r1, r6
 80064c6:	4622      	mov	r2, r4
 80064c8:	4628      	mov	r0, r5
 80064ca:	f000 fcd5 	bl	8006e78 <__pow5mult>
 80064ce:	4652      	mov	r2, sl
 80064d0:	4601      	mov	r1, r0
 80064d2:	4606      	mov	r6, r0
 80064d4:	4628      	mov	r0, r5
 80064d6:	f000 fc27 	bl	8006d28 <__multiply>
 80064da:	4680      	mov	r8, r0
 80064dc:	4651      	mov	r1, sl
 80064de:	4628      	mov	r0, r5
 80064e0:	f000 fb56 	bl	8006b90 <_Bfree>
 80064e4:	46c2      	mov	sl, r8
 80064e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e8:	1b1a      	subs	r2, r3, r4
 80064ea:	d004      	beq.n	80064f6 <_dtoa_r+0x7a6>
 80064ec:	4651      	mov	r1, sl
 80064ee:	4628      	mov	r0, r5
 80064f0:	f000 fcc2 	bl	8006e78 <__pow5mult>
 80064f4:	4682      	mov	sl, r0
 80064f6:	2101      	movs	r1, #1
 80064f8:	4628      	mov	r0, r5
 80064fa:	f000 fbff 	bl	8006cfc <__i2b>
 80064fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006500:	4604      	mov	r4, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	f340 8082 	ble.w	800660c <_dtoa_r+0x8bc>
 8006508:	461a      	mov	r2, r3
 800650a:	4601      	mov	r1, r0
 800650c:	4628      	mov	r0, r5
 800650e:	f000 fcb3 	bl	8006e78 <__pow5mult>
 8006512:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006514:	4604      	mov	r4, r0
 8006516:	2b01      	cmp	r3, #1
 8006518:	dd7b      	ble.n	8006612 <_dtoa_r+0x8c2>
 800651a:	f04f 0800 	mov.w	r8, #0
 800651e:	6923      	ldr	r3, [r4, #16]
 8006520:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006524:	6918      	ldr	r0, [r3, #16]
 8006526:	f000 fb9b 	bl	8006c60 <__hi0bits>
 800652a:	f1c0 0020 	rsb	r0, r0, #32
 800652e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006530:	4418      	add	r0, r3
 8006532:	f010 001f 	ands.w	r0, r0, #31
 8006536:	f000 8092 	beq.w	800665e <_dtoa_r+0x90e>
 800653a:	f1c0 0320 	rsb	r3, r0, #32
 800653e:	2b04      	cmp	r3, #4
 8006540:	f340 8085 	ble.w	800664e <_dtoa_r+0x8fe>
 8006544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006546:	f1c0 001c 	rsb	r0, r0, #28
 800654a:	4403      	add	r3, r0
 800654c:	4481      	add	r9, r0
 800654e:	4407      	add	r7, r0
 8006550:	9309      	str	r3, [sp, #36]	; 0x24
 8006552:	f1b9 0f00 	cmp.w	r9, #0
 8006556:	dd05      	ble.n	8006564 <_dtoa_r+0x814>
 8006558:	4651      	mov	r1, sl
 800655a:	464a      	mov	r2, r9
 800655c:	4628      	mov	r0, r5
 800655e:	f000 fce5 	bl	8006f2c <__lshift>
 8006562:	4682      	mov	sl, r0
 8006564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	dd05      	ble.n	8006576 <_dtoa_r+0x826>
 800656a:	4621      	mov	r1, r4
 800656c:	461a      	mov	r2, r3
 800656e:	4628      	mov	r0, r5
 8006570:	f000 fcdc 	bl	8006f2c <__lshift>
 8006574:	4604      	mov	r4, r0
 8006576:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d072      	beq.n	8006662 <_dtoa_r+0x912>
 800657c:	4621      	mov	r1, r4
 800657e:	4650      	mov	r0, sl
 8006580:	f000 fd40 	bl	8007004 <__mcmp>
 8006584:	2800      	cmp	r0, #0
 8006586:	da6c      	bge.n	8006662 <_dtoa_r+0x912>
 8006588:	2300      	movs	r3, #0
 800658a:	4651      	mov	r1, sl
 800658c:	220a      	movs	r2, #10
 800658e:	4628      	mov	r0, r5
 8006590:	f000 fb20 	bl	8006bd4 <__multadd>
 8006594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006596:	4682      	mov	sl, r0
 8006598:	f10b 3bff 	add.w	fp, fp, #4294967295
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 81ac 	beq.w	80068fa <_dtoa_r+0xbaa>
 80065a2:	2300      	movs	r3, #0
 80065a4:	4631      	mov	r1, r6
 80065a6:	220a      	movs	r2, #10
 80065a8:	4628      	mov	r0, r5
 80065aa:	f000 fb13 	bl	8006bd4 <__multadd>
 80065ae:	9b06      	ldr	r3, [sp, #24]
 80065b0:	4606      	mov	r6, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f300 8093 	bgt.w	80066de <_dtoa_r+0x98e>
 80065b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	dc59      	bgt.n	8006672 <_dtoa_r+0x922>
 80065be:	e08e      	b.n	80066de <_dtoa_r+0x98e>
 80065c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80065c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065c6:	e75d      	b.n	8006484 <_dtoa_r+0x734>
 80065c8:	9b08      	ldr	r3, [sp, #32]
 80065ca:	1e5c      	subs	r4, r3, #1
 80065cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ce:	42a3      	cmp	r3, r4
 80065d0:	bfbf      	itttt	lt
 80065d2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80065d4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80065d6:	1ae3      	sublt	r3, r4, r3
 80065d8:	18d2      	addlt	r2, r2, r3
 80065da:	bfa8      	it	ge
 80065dc:	1b1c      	subge	r4, r3, r4
 80065de:	9b08      	ldr	r3, [sp, #32]
 80065e0:	bfbe      	ittt	lt
 80065e2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80065e4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80065e6:	2400      	movlt	r4, #0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bfb5      	itete	lt
 80065ec:	eba9 0703 	sublt.w	r7, r9, r3
 80065f0:	464f      	movge	r7, r9
 80065f2:	2300      	movlt	r3, #0
 80065f4:	9b08      	ldrge	r3, [sp, #32]
 80065f6:	e747      	b.n	8006488 <_dtoa_r+0x738>
 80065f8:	464f      	mov	r7, r9
 80065fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80065fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80065fe:	e74c      	b.n	800649a <_dtoa_r+0x74a>
 8006600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006602:	e773      	b.n	80064ec <_dtoa_r+0x79c>
 8006604:	3fe00000 	.word	0x3fe00000
 8006608:	40240000 	.word	0x40240000
 800660c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800660e:	2b01      	cmp	r3, #1
 8006610:	dc18      	bgt.n	8006644 <_dtoa_r+0x8f4>
 8006612:	9b04      	ldr	r3, [sp, #16]
 8006614:	b9b3      	cbnz	r3, 8006644 <_dtoa_r+0x8f4>
 8006616:	9b05      	ldr	r3, [sp, #20]
 8006618:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800661c:	b993      	cbnz	r3, 8006644 <_dtoa_r+0x8f4>
 800661e:	9b05      	ldr	r3, [sp, #20]
 8006620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006624:	0d1b      	lsrs	r3, r3, #20
 8006626:	051b      	lsls	r3, r3, #20
 8006628:	b17b      	cbz	r3, 800664a <_dtoa_r+0x8fa>
 800662a:	f04f 0801 	mov.w	r8, #1
 800662e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006630:	f109 0901 	add.w	r9, r9, #1
 8006634:	3301      	adds	r3, #1
 8006636:	9309      	str	r3, [sp, #36]	; 0x24
 8006638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800663a:	2b00      	cmp	r3, #0
 800663c:	f47f af6f 	bne.w	800651e <_dtoa_r+0x7ce>
 8006640:	2001      	movs	r0, #1
 8006642:	e774      	b.n	800652e <_dtoa_r+0x7de>
 8006644:	f04f 0800 	mov.w	r8, #0
 8006648:	e7f6      	b.n	8006638 <_dtoa_r+0x8e8>
 800664a:	4698      	mov	r8, r3
 800664c:	e7f4      	b.n	8006638 <_dtoa_r+0x8e8>
 800664e:	d080      	beq.n	8006552 <_dtoa_r+0x802>
 8006650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006652:	331c      	adds	r3, #28
 8006654:	441a      	add	r2, r3
 8006656:	4499      	add	r9, r3
 8006658:	441f      	add	r7, r3
 800665a:	9209      	str	r2, [sp, #36]	; 0x24
 800665c:	e779      	b.n	8006552 <_dtoa_r+0x802>
 800665e:	4603      	mov	r3, r0
 8006660:	e7f6      	b.n	8006650 <_dtoa_r+0x900>
 8006662:	9b08      	ldr	r3, [sp, #32]
 8006664:	2b00      	cmp	r3, #0
 8006666:	dc34      	bgt.n	80066d2 <_dtoa_r+0x982>
 8006668:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800666a:	2b02      	cmp	r3, #2
 800666c:	dd31      	ble.n	80066d2 <_dtoa_r+0x982>
 800666e:	9b08      	ldr	r3, [sp, #32]
 8006670:	9306      	str	r3, [sp, #24]
 8006672:	9b06      	ldr	r3, [sp, #24]
 8006674:	b963      	cbnz	r3, 8006690 <_dtoa_r+0x940>
 8006676:	4621      	mov	r1, r4
 8006678:	2205      	movs	r2, #5
 800667a:	4628      	mov	r0, r5
 800667c:	f000 faaa 	bl	8006bd4 <__multadd>
 8006680:	4601      	mov	r1, r0
 8006682:	4604      	mov	r4, r0
 8006684:	4650      	mov	r0, sl
 8006686:	f000 fcbd 	bl	8007004 <__mcmp>
 800668a:	2800      	cmp	r0, #0
 800668c:	f73f adbf 	bgt.w	800620e <_dtoa_r+0x4be>
 8006690:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006692:	9f03      	ldr	r7, [sp, #12]
 8006694:	ea6f 0b03 	mvn.w	fp, r3
 8006698:	f04f 0800 	mov.w	r8, #0
 800669c:	4621      	mov	r1, r4
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 fa76 	bl	8006b90 <_Bfree>
 80066a4:	2e00      	cmp	r6, #0
 80066a6:	f43f aead 	beq.w	8006404 <_dtoa_r+0x6b4>
 80066aa:	f1b8 0f00 	cmp.w	r8, #0
 80066ae:	d005      	beq.n	80066bc <_dtoa_r+0x96c>
 80066b0:	45b0      	cmp	r8, r6
 80066b2:	d003      	beq.n	80066bc <_dtoa_r+0x96c>
 80066b4:	4641      	mov	r1, r8
 80066b6:	4628      	mov	r0, r5
 80066b8:	f000 fa6a 	bl	8006b90 <_Bfree>
 80066bc:	4631      	mov	r1, r6
 80066be:	4628      	mov	r0, r5
 80066c0:	f000 fa66 	bl	8006b90 <_Bfree>
 80066c4:	e69e      	b.n	8006404 <_dtoa_r+0x6b4>
 80066c6:	2400      	movs	r4, #0
 80066c8:	4626      	mov	r6, r4
 80066ca:	e7e1      	b.n	8006690 <_dtoa_r+0x940>
 80066cc:	46c3      	mov	fp, r8
 80066ce:	4626      	mov	r6, r4
 80066d0:	e59d      	b.n	800620e <_dtoa_r+0x4be>
 80066d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 80c8 	beq.w	800686a <_dtoa_r+0xb1a>
 80066da:	9b08      	ldr	r3, [sp, #32]
 80066dc:	9306      	str	r3, [sp, #24]
 80066de:	2f00      	cmp	r7, #0
 80066e0:	dd05      	ble.n	80066ee <_dtoa_r+0x99e>
 80066e2:	4631      	mov	r1, r6
 80066e4:	463a      	mov	r2, r7
 80066e6:	4628      	mov	r0, r5
 80066e8:	f000 fc20 	bl	8006f2c <__lshift>
 80066ec:	4606      	mov	r6, r0
 80066ee:	f1b8 0f00 	cmp.w	r8, #0
 80066f2:	d05b      	beq.n	80067ac <_dtoa_r+0xa5c>
 80066f4:	4628      	mov	r0, r5
 80066f6:	6871      	ldr	r1, [r6, #4]
 80066f8:	f000 fa0a 	bl	8006b10 <_Balloc>
 80066fc:	4607      	mov	r7, r0
 80066fe:	b928      	cbnz	r0, 800670c <_dtoa_r+0x9bc>
 8006700:	4602      	mov	r2, r0
 8006702:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006706:	4b81      	ldr	r3, [pc, #516]	; (800690c <_dtoa_r+0xbbc>)
 8006708:	f7ff bb36 	b.w	8005d78 <_dtoa_r+0x28>
 800670c:	6932      	ldr	r2, [r6, #16]
 800670e:	f106 010c 	add.w	r1, r6, #12
 8006712:	3202      	adds	r2, #2
 8006714:	0092      	lsls	r2, r2, #2
 8006716:	300c      	adds	r0, #12
 8006718:	f000 ff9e 	bl	8007658 <memcpy>
 800671c:	2201      	movs	r2, #1
 800671e:	4639      	mov	r1, r7
 8006720:	4628      	mov	r0, r5
 8006722:	f000 fc03 	bl	8006f2c <__lshift>
 8006726:	46b0      	mov	r8, r6
 8006728:	4606      	mov	r6, r0
 800672a:	9b03      	ldr	r3, [sp, #12]
 800672c:	9a03      	ldr	r2, [sp, #12]
 800672e:	3301      	adds	r3, #1
 8006730:	9308      	str	r3, [sp, #32]
 8006732:	9b06      	ldr	r3, [sp, #24]
 8006734:	4413      	add	r3, r2
 8006736:	930b      	str	r3, [sp, #44]	; 0x2c
 8006738:	9b04      	ldr	r3, [sp, #16]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	930a      	str	r3, [sp, #40]	; 0x28
 8006740:	9b08      	ldr	r3, [sp, #32]
 8006742:	4621      	mov	r1, r4
 8006744:	3b01      	subs	r3, #1
 8006746:	4650      	mov	r0, sl
 8006748:	9304      	str	r3, [sp, #16]
 800674a:	f7ff fa78 	bl	8005c3e <quorem>
 800674e:	4641      	mov	r1, r8
 8006750:	9006      	str	r0, [sp, #24]
 8006752:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006756:	4650      	mov	r0, sl
 8006758:	f000 fc54 	bl	8007004 <__mcmp>
 800675c:	4632      	mov	r2, r6
 800675e:	9009      	str	r0, [sp, #36]	; 0x24
 8006760:	4621      	mov	r1, r4
 8006762:	4628      	mov	r0, r5
 8006764:	f000 fc6a 	bl	800703c <__mdiff>
 8006768:	68c2      	ldr	r2, [r0, #12]
 800676a:	4607      	mov	r7, r0
 800676c:	bb02      	cbnz	r2, 80067b0 <_dtoa_r+0xa60>
 800676e:	4601      	mov	r1, r0
 8006770:	4650      	mov	r0, sl
 8006772:	f000 fc47 	bl	8007004 <__mcmp>
 8006776:	4602      	mov	r2, r0
 8006778:	4639      	mov	r1, r7
 800677a:	4628      	mov	r0, r5
 800677c:	920c      	str	r2, [sp, #48]	; 0x30
 800677e:	f000 fa07 	bl	8006b90 <_Bfree>
 8006782:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006784:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006786:	9f08      	ldr	r7, [sp, #32]
 8006788:	ea43 0102 	orr.w	r1, r3, r2
 800678c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800678e:	4319      	orrs	r1, r3
 8006790:	d110      	bne.n	80067b4 <_dtoa_r+0xa64>
 8006792:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006796:	d029      	beq.n	80067ec <_dtoa_r+0xa9c>
 8006798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679a:	2b00      	cmp	r3, #0
 800679c:	dd02      	ble.n	80067a4 <_dtoa_r+0xa54>
 800679e:	9b06      	ldr	r3, [sp, #24]
 80067a0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80067a4:	9b04      	ldr	r3, [sp, #16]
 80067a6:	f883 9000 	strb.w	r9, [r3]
 80067aa:	e777      	b.n	800669c <_dtoa_r+0x94c>
 80067ac:	4630      	mov	r0, r6
 80067ae:	e7ba      	b.n	8006726 <_dtoa_r+0x9d6>
 80067b0:	2201      	movs	r2, #1
 80067b2:	e7e1      	b.n	8006778 <_dtoa_r+0xa28>
 80067b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	db04      	blt.n	80067c4 <_dtoa_r+0xa74>
 80067ba:	9922      	ldr	r1, [sp, #136]	; 0x88
 80067bc:	430b      	orrs	r3, r1
 80067be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067c0:	430b      	orrs	r3, r1
 80067c2:	d120      	bne.n	8006806 <_dtoa_r+0xab6>
 80067c4:	2a00      	cmp	r2, #0
 80067c6:	dded      	ble.n	80067a4 <_dtoa_r+0xa54>
 80067c8:	4651      	mov	r1, sl
 80067ca:	2201      	movs	r2, #1
 80067cc:	4628      	mov	r0, r5
 80067ce:	f000 fbad 	bl	8006f2c <__lshift>
 80067d2:	4621      	mov	r1, r4
 80067d4:	4682      	mov	sl, r0
 80067d6:	f000 fc15 	bl	8007004 <__mcmp>
 80067da:	2800      	cmp	r0, #0
 80067dc:	dc03      	bgt.n	80067e6 <_dtoa_r+0xa96>
 80067de:	d1e1      	bne.n	80067a4 <_dtoa_r+0xa54>
 80067e0:	f019 0f01 	tst.w	r9, #1
 80067e4:	d0de      	beq.n	80067a4 <_dtoa_r+0xa54>
 80067e6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067ea:	d1d8      	bne.n	800679e <_dtoa_r+0xa4e>
 80067ec:	2339      	movs	r3, #57	; 0x39
 80067ee:	9a04      	ldr	r2, [sp, #16]
 80067f0:	7013      	strb	r3, [r2, #0]
 80067f2:	463b      	mov	r3, r7
 80067f4:	461f      	mov	r7, r3
 80067f6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	2a39      	cmp	r2, #57	; 0x39
 80067fe:	d06b      	beq.n	80068d8 <_dtoa_r+0xb88>
 8006800:	3201      	adds	r2, #1
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	e74a      	b.n	800669c <_dtoa_r+0x94c>
 8006806:	2a00      	cmp	r2, #0
 8006808:	dd07      	ble.n	800681a <_dtoa_r+0xaca>
 800680a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800680e:	d0ed      	beq.n	80067ec <_dtoa_r+0xa9c>
 8006810:	9a04      	ldr	r2, [sp, #16]
 8006812:	f109 0301 	add.w	r3, r9, #1
 8006816:	7013      	strb	r3, [r2, #0]
 8006818:	e740      	b.n	800669c <_dtoa_r+0x94c>
 800681a:	9b08      	ldr	r3, [sp, #32]
 800681c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800681e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006822:	4293      	cmp	r3, r2
 8006824:	d042      	beq.n	80068ac <_dtoa_r+0xb5c>
 8006826:	4651      	mov	r1, sl
 8006828:	2300      	movs	r3, #0
 800682a:	220a      	movs	r2, #10
 800682c:	4628      	mov	r0, r5
 800682e:	f000 f9d1 	bl	8006bd4 <__multadd>
 8006832:	45b0      	cmp	r8, r6
 8006834:	4682      	mov	sl, r0
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	f04f 020a 	mov.w	r2, #10
 800683e:	4641      	mov	r1, r8
 8006840:	4628      	mov	r0, r5
 8006842:	d107      	bne.n	8006854 <_dtoa_r+0xb04>
 8006844:	f000 f9c6 	bl	8006bd4 <__multadd>
 8006848:	4680      	mov	r8, r0
 800684a:	4606      	mov	r6, r0
 800684c:	9b08      	ldr	r3, [sp, #32]
 800684e:	3301      	adds	r3, #1
 8006850:	9308      	str	r3, [sp, #32]
 8006852:	e775      	b.n	8006740 <_dtoa_r+0x9f0>
 8006854:	f000 f9be 	bl	8006bd4 <__multadd>
 8006858:	4631      	mov	r1, r6
 800685a:	4680      	mov	r8, r0
 800685c:	2300      	movs	r3, #0
 800685e:	220a      	movs	r2, #10
 8006860:	4628      	mov	r0, r5
 8006862:	f000 f9b7 	bl	8006bd4 <__multadd>
 8006866:	4606      	mov	r6, r0
 8006868:	e7f0      	b.n	800684c <_dtoa_r+0xafc>
 800686a:	9b08      	ldr	r3, [sp, #32]
 800686c:	9306      	str	r3, [sp, #24]
 800686e:	9f03      	ldr	r7, [sp, #12]
 8006870:	4621      	mov	r1, r4
 8006872:	4650      	mov	r0, sl
 8006874:	f7ff f9e3 	bl	8005c3e <quorem>
 8006878:	9b03      	ldr	r3, [sp, #12]
 800687a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800687e:	f807 9b01 	strb.w	r9, [r7], #1
 8006882:	1afa      	subs	r2, r7, r3
 8006884:	9b06      	ldr	r3, [sp, #24]
 8006886:	4293      	cmp	r3, r2
 8006888:	dd07      	ble.n	800689a <_dtoa_r+0xb4a>
 800688a:	4651      	mov	r1, sl
 800688c:	2300      	movs	r3, #0
 800688e:	220a      	movs	r2, #10
 8006890:	4628      	mov	r0, r5
 8006892:	f000 f99f 	bl	8006bd4 <__multadd>
 8006896:	4682      	mov	sl, r0
 8006898:	e7ea      	b.n	8006870 <_dtoa_r+0xb20>
 800689a:	9b06      	ldr	r3, [sp, #24]
 800689c:	f04f 0800 	mov.w	r8, #0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bfcc      	ite	gt
 80068a4:	461f      	movgt	r7, r3
 80068a6:	2701      	movle	r7, #1
 80068a8:	9b03      	ldr	r3, [sp, #12]
 80068aa:	441f      	add	r7, r3
 80068ac:	4651      	mov	r1, sl
 80068ae:	2201      	movs	r2, #1
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 fb3b 	bl	8006f2c <__lshift>
 80068b6:	4621      	mov	r1, r4
 80068b8:	4682      	mov	sl, r0
 80068ba:	f000 fba3 	bl	8007004 <__mcmp>
 80068be:	2800      	cmp	r0, #0
 80068c0:	dc97      	bgt.n	80067f2 <_dtoa_r+0xaa2>
 80068c2:	d102      	bne.n	80068ca <_dtoa_r+0xb7a>
 80068c4:	f019 0f01 	tst.w	r9, #1
 80068c8:	d193      	bne.n	80067f2 <_dtoa_r+0xaa2>
 80068ca:	463b      	mov	r3, r7
 80068cc:	461f      	mov	r7, r3
 80068ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068d2:	2a30      	cmp	r2, #48	; 0x30
 80068d4:	d0fa      	beq.n	80068cc <_dtoa_r+0xb7c>
 80068d6:	e6e1      	b.n	800669c <_dtoa_r+0x94c>
 80068d8:	9a03      	ldr	r2, [sp, #12]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d18a      	bne.n	80067f4 <_dtoa_r+0xaa4>
 80068de:	2331      	movs	r3, #49	; 0x31
 80068e0:	f10b 0b01 	add.w	fp, fp, #1
 80068e4:	e797      	b.n	8006816 <_dtoa_r+0xac6>
 80068e6:	4b0a      	ldr	r3, [pc, #40]	; (8006910 <_dtoa_r+0xbc0>)
 80068e8:	f7ff ba9f 	b.w	8005e2a <_dtoa_r+0xda>
 80068ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f47f aa77 	bne.w	8005de2 <_dtoa_r+0x92>
 80068f4:	4b07      	ldr	r3, [pc, #28]	; (8006914 <_dtoa_r+0xbc4>)
 80068f6:	f7ff ba98 	b.w	8005e2a <_dtoa_r+0xda>
 80068fa:	9b06      	ldr	r3, [sp, #24]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dcb6      	bgt.n	800686e <_dtoa_r+0xb1e>
 8006900:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006902:	2b02      	cmp	r3, #2
 8006904:	f73f aeb5 	bgt.w	8006672 <_dtoa_r+0x922>
 8006908:	e7b1      	b.n	800686e <_dtoa_r+0xb1e>
 800690a:	bf00      	nop
 800690c:	08007e2e 	.word	0x08007e2e
 8006910:	08007d8e 	.word	0x08007d8e
 8006914:	08007db2 	.word	0x08007db2

08006918 <_free_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	4605      	mov	r5, r0
 800691c:	2900      	cmp	r1, #0
 800691e:	d040      	beq.n	80069a2 <_free_r+0x8a>
 8006920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006924:	1f0c      	subs	r4, r1, #4
 8006926:	2b00      	cmp	r3, #0
 8006928:	bfb8      	it	lt
 800692a:	18e4      	addlt	r4, r4, r3
 800692c:	f000 f8e4 	bl	8006af8 <__malloc_lock>
 8006930:	4a1c      	ldr	r2, [pc, #112]	; (80069a4 <_free_r+0x8c>)
 8006932:	6813      	ldr	r3, [r2, #0]
 8006934:	b933      	cbnz	r3, 8006944 <_free_r+0x2c>
 8006936:	6063      	str	r3, [r4, #4]
 8006938:	6014      	str	r4, [r2, #0]
 800693a:	4628      	mov	r0, r5
 800693c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006940:	f000 b8e0 	b.w	8006b04 <__malloc_unlock>
 8006944:	42a3      	cmp	r3, r4
 8006946:	d908      	bls.n	800695a <_free_r+0x42>
 8006948:	6820      	ldr	r0, [r4, #0]
 800694a:	1821      	adds	r1, r4, r0
 800694c:	428b      	cmp	r3, r1
 800694e:	bf01      	itttt	eq
 8006950:	6819      	ldreq	r1, [r3, #0]
 8006952:	685b      	ldreq	r3, [r3, #4]
 8006954:	1809      	addeq	r1, r1, r0
 8006956:	6021      	streq	r1, [r4, #0]
 8006958:	e7ed      	b.n	8006936 <_free_r+0x1e>
 800695a:	461a      	mov	r2, r3
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	b10b      	cbz	r3, 8006964 <_free_r+0x4c>
 8006960:	42a3      	cmp	r3, r4
 8006962:	d9fa      	bls.n	800695a <_free_r+0x42>
 8006964:	6811      	ldr	r1, [r2, #0]
 8006966:	1850      	adds	r0, r2, r1
 8006968:	42a0      	cmp	r0, r4
 800696a:	d10b      	bne.n	8006984 <_free_r+0x6c>
 800696c:	6820      	ldr	r0, [r4, #0]
 800696e:	4401      	add	r1, r0
 8006970:	1850      	adds	r0, r2, r1
 8006972:	4283      	cmp	r3, r0
 8006974:	6011      	str	r1, [r2, #0]
 8006976:	d1e0      	bne.n	800693a <_free_r+0x22>
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	4408      	add	r0, r1
 800697e:	6010      	str	r0, [r2, #0]
 8006980:	6053      	str	r3, [r2, #4]
 8006982:	e7da      	b.n	800693a <_free_r+0x22>
 8006984:	d902      	bls.n	800698c <_free_r+0x74>
 8006986:	230c      	movs	r3, #12
 8006988:	602b      	str	r3, [r5, #0]
 800698a:	e7d6      	b.n	800693a <_free_r+0x22>
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	1821      	adds	r1, r4, r0
 8006990:	428b      	cmp	r3, r1
 8006992:	bf01      	itttt	eq
 8006994:	6819      	ldreq	r1, [r3, #0]
 8006996:	685b      	ldreq	r3, [r3, #4]
 8006998:	1809      	addeq	r1, r1, r0
 800699a:	6021      	streq	r1, [r4, #0]
 800699c:	6063      	str	r3, [r4, #4]
 800699e:	6054      	str	r4, [r2, #4]
 80069a0:	e7cb      	b.n	800693a <_free_r+0x22>
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	200004b4 	.word	0x200004b4

080069a8 <malloc>:
 80069a8:	4b02      	ldr	r3, [pc, #8]	; (80069b4 <malloc+0xc>)
 80069aa:	4601      	mov	r1, r0
 80069ac:	6818      	ldr	r0, [r3, #0]
 80069ae:	f000 b823 	b.w	80069f8 <_malloc_r>
 80069b2:	bf00      	nop
 80069b4:	2000008c 	.word	0x2000008c

080069b8 <sbrk_aligned>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	4e0e      	ldr	r6, [pc, #56]	; (80069f4 <sbrk_aligned+0x3c>)
 80069bc:	460c      	mov	r4, r1
 80069be:	6831      	ldr	r1, [r6, #0]
 80069c0:	4605      	mov	r5, r0
 80069c2:	b911      	cbnz	r1, 80069ca <sbrk_aligned+0x12>
 80069c4:	f000 fe38 	bl	8007638 <_sbrk_r>
 80069c8:	6030      	str	r0, [r6, #0]
 80069ca:	4621      	mov	r1, r4
 80069cc:	4628      	mov	r0, r5
 80069ce:	f000 fe33 	bl	8007638 <_sbrk_r>
 80069d2:	1c43      	adds	r3, r0, #1
 80069d4:	d00a      	beq.n	80069ec <sbrk_aligned+0x34>
 80069d6:	1cc4      	adds	r4, r0, #3
 80069d8:	f024 0403 	bic.w	r4, r4, #3
 80069dc:	42a0      	cmp	r0, r4
 80069de:	d007      	beq.n	80069f0 <sbrk_aligned+0x38>
 80069e0:	1a21      	subs	r1, r4, r0
 80069e2:	4628      	mov	r0, r5
 80069e4:	f000 fe28 	bl	8007638 <_sbrk_r>
 80069e8:	3001      	adds	r0, #1
 80069ea:	d101      	bne.n	80069f0 <sbrk_aligned+0x38>
 80069ec:	f04f 34ff 	mov.w	r4, #4294967295
 80069f0:	4620      	mov	r0, r4
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	200004b8 	.word	0x200004b8

080069f8 <_malloc_r>:
 80069f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069fc:	1ccd      	adds	r5, r1, #3
 80069fe:	f025 0503 	bic.w	r5, r5, #3
 8006a02:	3508      	adds	r5, #8
 8006a04:	2d0c      	cmp	r5, #12
 8006a06:	bf38      	it	cc
 8006a08:	250c      	movcc	r5, #12
 8006a0a:	2d00      	cmp	r5, #0
 8006a0c:	4607      	mov	r7, r0
 8006a0e:	db01      	blt.n	8006a14 <_malloc_r+0x1c>
 8006a10:	42a9      	cmp	r1, r5
 8006a12:	d905      	bls.n	8006a20 <_malloc_r+0x28>
 8006a14:	230c      	movs	r3, #12
 8006a16:	2600      	movs	r6, #0
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006af4 <_malloc_r+0xfc>
 8006a24:	f000 f868 	bl	8006af8 <__malloc_lock>
 8006a28:	f8d8 3000 	ldr.w	r3, [r8]
 8006a2c:	461c      	mov	r4, r3
 8006a2e:	bb5c      	cbnz	r4, 8006a88 <_malloc_r+0x90>
 8006a30:	4629      	mov	r1, r5
 8006a32:	4638      	mov	r0, r7
 8006a34:	f7ff ffc0 	bl	80069b8 <sbrk_aligned>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	d155      	bne.n	8006aea <_malloc_r+0xf2>
 8006a3e:	f8d8 4000 	ldr.w	r4, [r8]
 8006a42:	4626      	mov	r6, r4
 8006a44:	2e00      	cmp	r6, #0
 8006a46:	d145      	bne.n	8006ad4 <_malloc_r+0xdc>
 8006a48:	2c00      	cmp	r4, #0
 8006a4a:	d048      	beq.n	8006ade <_malloc_r+0xe6>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4638      	mov	r0, r7
 8006a52:	eb04 0903 	add.w	r9, r4, r3
 8006a56:	f000 fdef 	bl	8007638 <_sbrk_r>
 8006a5a:	4581      	cmp	r9, r0
 8006a5c:	d13f      	bne.n	8006ade <_malloc_r+0xe6>
 8006a5e:	6821      	ldr	r1, [r4, #0]
 8006a60:	4638      	mov	r0, r7
 8006a62:	1a6d      	subs	r5, r5, r1
 8006a64:	4629      	mov	r1, r5
 8006a66:	f7ff ffa7 	bl	80069b8 <sbrk_aligned>
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d037      	beq.n	8006ade <_malloc_r+0xe6>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	442b      	add	r3, r5
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	f8d8 3000 	ldr.w	r3, [r8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d038      	beq.n	8006aee <_malloc_r+0xf6>
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	42a2      	cmp	r2, r4
 8006a80:	d12b      	bne.n	8006ada <_malloc_r+0xe2>
 8006a82:	2200      	movs	r2, #0
 8006a84:	605a      	str	r2, [r3, #4]
 8006a86:	e00f      	b.n	8006aa8 <_malloc_r+0xb0>
 8006a88:	6822      	ldr	r2, [r4, #0]
 8006a8a:	1b52      	subs	r2, r2, r5
 8006a8c:	d41f      	bmi.n	8006ace <_malloc_r+0xd6>
 8006a8e:	2a0b      	cmp	r2, #11
 8006a90:	d917      	bls.n	8006ac2 <_malloc_r+0xca>
 8006a92:	1961      	adds	r1, r4, r5
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	6025      	str	r5, [r4, #0]
 8006a98:	bf18      	it	ne
 8006a9a:	6059      	strne	r1, [r3, #4]
 8006a9c:	6863      	ldr	r3, [r4, #4]
 8006a9e:	bf08      	it	eq
 8006aa0:	f8c8 1000 	streq.w	r1, [r8]
 8006aa4:	5162      	str	r2, [r4, r5]
 8006aa6:	604b      	str	r3, [r1, #4]
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	f104 060b 	add.w	r6, r4, #11
 8006aae:	f000 f829 	bl	8006b04 <__malloc_unlock>
 8006ab2:	f026 0607 	bic.w	r6, r6, #7
 8006ab6:	1d23      	adds	r3, r4, #4
 8006ab8:	1af2      	subs	r2, r6, r3
 8006aba:	d0ae      	beq.n	8006a1a <_malloc_r+0x22>
 8006abc:	1b9b      	subs	r3, r3, r6
 8006abe:	50a3      	str	r3, [r4, r2]
 8006ac0:	e7ab      	b.n	8006a1a <_malloc_r+0x22>
 8006ac2:	42a3      	cmp	r3, r4
 8006ac4:	6862      	ldr	r2, [r4, #4]
 8006ac6:	d1dd      	bne.n	8006a84 <_malloc_r+0x8c>
 8006ac8:	f8c8 2000 	str.w	r2, [r8]
 8006acc:	e7ec      	b.n	8006aa8 <_malloc_r+0xb0>
 8006ace:	4623      	mov	r3, r4
 8006ad0:	6864      	ldr	r4, [r4, #4]
 8006ad2:	e7ac      	b.n	8006a2e <_malloc_r+0x36>
 8006ad4:	4634      	mov	r4, r6
 8006ad6:	6876      	ldr	r6, [r6, #4]
 8006ad8:	e7b4      	b.n	8006a44 <_malloc_r+0x4c>
 8006ada:	4613      	mov	r3, r2
 8006adc:	e7cc      	b.n	8006a78 <_malloc_r+0x80>
 8006ade:	230c      	movs	r3, #12
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	f000 f80e 	bl	8006b04 <__malloc_unlock>
 8006ae8:	e797      	b.n	8006a1a <_malloc_r+0x22>
 8006aea:	6025      	str	r5, [r4, #0]
 8006aec:	e7dc      	b.n	8006aa8 <_malloc_r+0xb0>
 8006aee:	605b      	str	r3, [r3, #4]
 8006af0:	deff      	udf	#255	; 0xff
 8006af2:	bf00      	nop
 8006af4:	200004b4 	.word	0x200004b4

08006af8 <__malloc_lock>:
 8006af8:	4801      	ldr	r0, [pc, #4]	; (8006b00 <__malloc_lock+0x8>)
 8006afa:	f7ff b890 	b.w	8005c1e <__retarget_lock_acquire_recursive>
 8006afe:	bf00      	nop
 8006b00:	200004b0 	.word	0x200004b0

08006b04 <__malloc_unlock>:
 8006b04:	4801      	ldr	r0, [pc, #4]	; (8006b0c <__malloc_unlock+0x8>)
 8006b06:	f7ff b88b 	b.w	8005c20 <__retarget_lock_release_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	200004b0 	.word	0x200004b0

08006b10 <_Balloc>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	69c6      	ldr	r6, [r0, #28]
 8006b14:	4604      	mov	r4, r0
 8006b16:	460d      	mov	r5, r1
 8006b18:	b976      	cbnz	r6, 8006b38 <_Balloc+0x28>
 8006b1a:	2010      	movs	r0, #16
 8006b1c:	f7ff ff44 	bl	80069a8 <malloc>
 8006b20:	4602      	mov	r2, r0
 8006b22:	61e0      	str	r0, [r4, #28]
 8006b24:	b920      	cbnz	r0, 8006b30 <_Balloc+0x20>
 8006b26:	216b      	movs	r1, #107	; 0x6b
 8006b28:	4b17      	ldr	r3, [pc, #92]	; (8006b88 <_Balloc+0x78>)
 8006b2a:	4818      	ldr	r0, [pc, #96]	; (8006b8c <_Balloc+0x7c>)
 8006b2c:	f000 fda2 	bl	8007674 <__assert_func>
 8006b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b34:	6006      	str	r6, [r0, #0]
 8006b36:	60c6      	str	r6, [r0, #12]
 8006b38:	69e6      	ldr	r6, [r4, #28]
 8006b3a:	68f3      	ldr	r3, [r6, #12]
 8006b3c:	b183      	cbz	r3, 8006b60 <_Balloc+0x50>
 8006b3e:	69e3      	ldr	r3, [r4, #28]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b46:	b9b8      	cbnz	r0, 8006b78 <_Balloc+0x68>
 8006b48:	2101      	movs	r1, #1
 8006b4a:	fa01 f605 	lsl.w	r6, r1, r5
 8006b4e:	1d72      	adds	r2, r6, #5
 8006b50:	4620      	mov	r0, r4
 8006b52:	0092      	lsls	r2, r2, #2
 8006b54:	f000 fdac 	bl	80076b0 <_calloc_r>
 8006b58:	b160      	cbz	r0, 8006b74 <_Balloc+0x64>
 8006b5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b5e:	e00e      	b.n	8006b7e <_Balloc+0x6e>
 8006b60:	2221      	movs	r2, #33	; 0x21
 8006b62:	2104      	movs	r1, #4
 8006b64:	4620      	mov	r0, r4
 8006b66:	f000 fda3 	bl	80076b0 <_calloc_r>
 8006b6a:	69e3      	ldr	r3, [r4, #28]
 8006b6c:	60f0      	str	r0, [r6, #12]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e4      	bne.n	8006b3e <_Balloc+0x2e>
 8006b74:	2000      	movs	r0, #0
 8006b76:	bd70      	pop	{r4, r5, r6, pc}
 8006b78:	6802      	ldr	r2, [r0, #0]
 8006b7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b84:	e7f7      	b.n	8006b76 <_Balloc+0x66>
 8006b86:	bf00      	nop
 8006b88:	08007dbf 	.word	0x08007dbf
 8006b8c:	08007e3f 	.word	0x08007e3f

08006b90 <_Bfree>:
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	69c6      	ldr	r6, [r0, #28]
 8006b94:	4605      	mov	r5, r0
 8006b96:	460c      	mov	r4, r1
 8006b98:	b976      	cbnz	r6, 8006bb8 <_Bfree+0x28>
 8006b9a:	2010      	movs	r0, #16
 8006b9c:	f7ff ff04 	bl	80069a8 <malloc>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	61e8      	str	r0, [r5, #28]
 8006ba4:	b920      	cbnz	r0, 8006bb0 <_Bfree+0x20>
 8006ba6:	218f      	movs	r1, #143	; 0x8f
 8006ba8:	4b08      	ldr	r3, [pc, #32]	; (8006bcc <_Bfree+0x3c>)
 8006baa:	4809      	ldr	r0, [pc, #36]	; (8006bd0 <_Bfree+0x40>)
 8006bac:	f000 fd62 	bl	8007674 <__assert_func>
 8006bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bb4:	6006      	str	r6, [r0, #0]
 8006bb6:	60c6      	str	r6, [r0, #12]
 8006bb8:	b13c      	cbz	r4, 8006bca <_Bfree+0x3a>
 8006bba:	69eb      	ldr	r3, [r5, #28]
 8006bbc:	6862      	ldr	r2, [r4, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bc4:	6021      	str	r1, [r4, #0]
 8006bc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bca:	bd70      	pop	{r4, r5, r6, pc}
 8006bcc:	08007dbf 	.word	0x08007dbf
 8006bd0:	08007e3f 	.word	0x08007e3f

08006bd4 <__multadd>:
 8006bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd8:	4607      	mov	r7, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	461e      	mov	r6, r3
 8006bde:	2000      	movs	r0, #0
 8006be0:	690d      	ldr	r5, [r1, #16]
 8006be2:	f101 0c14 	add.w	ip, r1, #20
 8006be6:	f8dc 3000 	ldr.w	r3, [ip]
 8006bea:	3001      	adds	r0, #1
 8006bec:	b299      	uxth	r1, r3
 8006bee:	fb02 6101 	mla	r1, r2, r1, r6
 8006bf2:	0c1e      	lsrs	r6, r3, #16
 8006bf4:	0c0b      	lsrs	r3, r1, #16
 8006bf6:	fb02 3306 	mla	r3, r2, r6, r3
 8006bfa:	b289      	uxth	r1, r1
 8006bfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c00:	4285      	cmp	r5, r0
 8006c02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c06:	f84c 1b04 	str.w	r1, [ip], #4
 8006c0a:	dcec      	bgt.n	8006be6 <__multadd+0x12>
 8006c0c:	b30e      	cbz	r6, 8006c52 <__multadd+0x7e>
 8006c0e:	68a3      	ldr	r3, [r4, #8]
 8006c10:	42ab      	cmp	r3, r5
 8006c12:	dc19      	bgt.n	8006c48 <__multadd+0x74>
 8006c14:	6861      	ldr	r1, [r4, #4]
 8006c16:	4638      	mov	r0, r7
 8006c18:	3101      	adds	r1, #1
 8006c1a:	f7ff ff79 	bl	8006b10 <_Balloc>
 8006c1e:	4680      	mov	r8, r0
 8006c20:	b928      	cbnz	r0, 8006c2e <__multadd+0x5a>
 8006c22:	4602      	mov	r2, r0
 8006c24:	21ba      	movs	r1, #186	; 0xba
 8006c26:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <__multadd+0x84>)
 8006c28:	480c      	ldr	r0, [pc, #48]	; (8006c5c <__multadd+0x88>)
 8006c2a:	f000 fd23 	bl	8007674 <__assert_func>
 8006c2e:	6922      	ldr	r2, [r4, #16]
 8006c30:	f104 010c 	add.w	r1, r4, #12
 8006c34:	3202      	adds	r2, #2
 8006c36:	0092      	lsls	r2, r2, #2
 8006c38:	300c      	adds	r0, #12
 8006c3a:	f000 fd0d 	bl	8007658 <memcpy>
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4638      	mov	r0, r7
 8006c42:	f7ff ffa5 	bl	8006b90 <_Bfree>
 8006c46:	4644      	mov	r4, r8
 8006c48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c4c:	3501      	adds	r5, #1
 8006c4e:	615e      	str	r6, [r3, #20]
 8006c50:	6125      	str	r5, [r4, #16]
 8006c52:	4620      	mov	r0, r4
 8006c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c58:	08007e2e 	.word	0x08007e2e
 8006c5c:	08007e3f 	.word	0x08007e3f

08006c60 <__hi0bits>:
 8006c60:	0c02      	lsrs	r2, r0, #16
 8006c62:	0412      	lsls	r2, r2, #16
 8006c64:	4603      	mov	r3, r0
 8006c66:	b9ca      	cbnz	r2, 8006c9c <__hi0bits+0x3c>
 8006c68:	0403      	lsls	r3, r0, #16
 8006c6a:	2010      	movs	r0, #16
 8006c6c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006c70:	bf04      	itt	eq
 8006c72:	021b      	lsleq	r3, r3, #8
 8006c74:	3008      	addeq	r0, #8
 8006c76:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006c7a:	bf04      	itt	eq
 8006c7c:	011b      	lsleq	r3, r3, #4
 8006c7e:	3004      	addeq	r0, #4
 8006c80:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006c84:	bf04      	itt	eq
 8006c86:	009b      	lsleq	r3, r3, #2
 8006c88:	3002      	addeq	r0, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	db05      	blt.n	8006c9a <__hi0bits+0x3a>
 8006c8e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006c92:	f100 0001 	add.w	r0, r0, #1
 8006c96:	bf08      	it	eq
 8006c98:	2020      	moveq	r0, #32
 8006c9a:	4770      	bx	lr
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	e7e5      	b.n	8006c6c <__hi0bits+0xc>

08006ca0 <__lo0bits>:
 8006ca0:	6803      	ldr	r3, [r0, #0]
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	f013 0007 	ands.w	r0, r3, #7
 8006ca8:	d00b      	beq.n	8006cc2 <__lo0bits+0x22>
 8006caa:	07d9      	lsls	r1, r3, #31
 8006cac:	d421      	bmi.n	8006cf2 <__lo0bits+0x52>
 8006cae:	0798      	lsls	r0, r3, #30
 8006cb0:	bf49      	itett	mi
 8006cb2:	085b      	lsrmi	r3, r3, #1
 8006cb4:	089b      	lsrpl	r3, r3, #2
 8006cb6:	2001      	movmi	r0, #1
 8006cb8:	6013      	strmi	r3, [r2, #0]
 8006cba:	bf5c      	itt	pl
 8006cbc:	2002      	movpl	r0, #2
 8006cbe:	6013      	strpl	r3, [r2, #0]
 8006cc0:	4770      	bx	lr
 8006cc2:	b299      	uxth	r1, r3
 8006cc4:	b909      	cbnz	r1, 8006cca <__lo0bits+0x2a>
 8006cc6:	2010      	movs	r0, #16
 8006cc8:	0c1b      	lsrs	r3, r3, #16
 8006cca:	b2d9      	uxtb	r1, r3
 8006ccc:	b909      	cbnz	r1, 8006cd2 <__lo0bits+0x32>
 8006cce:	3008      	adds	r0, #8
 8006cd0:	0a1b      	lsrs	r3, r3, #8
 8006cd2:	0719      	lsls	r1, r3, #28
 8006cd4:	bf04      	itt	eq
 8006cd6:	091b      	lsreq	r3, r3, #4
 8006cd8:	3004      	addeq	r0, #4
 8006cda:	0799      	lsls	r1, r3, #30
 8006cdc:	bf04      	itt	eq
 8006cde:	089b      	lsreq	r3, r3, #2
 8006ce0:	3002      	addeq	r0, #2
 8006ce2:	07d9      	lsls	r1, r3, #31
 8006ce4:	d403      	bmi.n	8006cee <__lo0bits+0x4e>
 8006ce6:	085b      	lsrs	r3, r3, #1
 8006ce8:	f100 0001 	add.w	r0, r0, #1
 8006cec:	d003      	beq.n	8006cf6 <__lo0bits+0x56>
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	4770      	bx	lr
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	4770      	bx	lr
 8006cf6:	2020      	movs	r0, #32
 8006cf8:	4770      	bx	lr
	...

08006cfc <__i2b>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	460c      	mov	r4, r1
 8006d00:	2101      	movs	r1, #1
 8006d02:	f7ff ff05 	bl	8006b10 <_Balloc>
 8006d06:	4602      	mov	r2, r0
 8006d08:	b928      	cbnz	r0, 8006d16 <__i2b+0x1a>
 8006d0a:	f240 1145 	movw	r1, #325	; 0x145
 8006d0e:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <__i2b+0x24>)
 8006d10:	4804      	ldr	r0, [pc, #16]	; (8006d24 <__i2b+0x28>)
 8006d12:	f000 fcaf 	bl	8007674 <__assert_func>
 8006d16:	2301      	movs	r3, #1
 8006d18:	6144      	str	r4, [r0, #20]
 8006d1a:	6103      	str	r3, [r0, #16]
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	bf00      	nop
 8006d20:	08007e2e 	.word	0x08007e2e
 8006d24:	08007e3f 	.word	0x08007e3f

08006d28 <__multiply>:
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	4691      	mov	r9, r2
 8006d2e:	690a      	ldr	r2, [r1, #16]
 8006d30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d34:	460c      	mov	r4, r1
 8006d36:	429a      	cmp	r2, r3
 8006d38:	bfbe      	ittt	lt
 8006d3a:	460b      	movlt	r3, r1
 8006d3c:	464c      	movlt	r4, r9
 8006d3e:	4699      	movlt	r9, r3
 8006d40:	6927      	ldr	r7, [r4, #16]
 8006d42:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d46:	68a3      	ldr	r3, [r4, #8]
 8006d48:	6861      	ldr	r1, [r4, #4]
 8006d4a:	eb07 060a 	add.w	r6, r7, sl
 8006d4e:	42b3      	cmp	r3, r6
 8006d50:	b085      	sub	sp, #20
 8006d52:	bfb8      	it	lt
 8006d54:	3101      	addlt	r1, #1
 8006d56:	f7ff fedb 	bl	8006b10 <_Balloc>
 8006d5a:	b930      	cbnz	r0, 8006d6a <__multiply+0x42>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006d62:	4b43      	ldr	r3, [pc, #268]	; (8006e70 <__multiply+0x148>)
 8006d64:	4843      	ldr	r0, [pc, #268]	; (8006e74 <__multiply+0x14c>)
 8006d66:	f000 fc85 	bl	8007674 <__assert_func>
 8006d6a:	f100 0514 	add.w	r5, r0, #20
 8006d6e:	462b      	mov	r3, r5
 8006d70:	2200      	movs	r2, #0
 8006d72:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d76:	4543      	cmp	r3, r8
 8006d78:	d321      	bcc.n	8006dbe <__multiply+0x96>
 8006d7a:	f104 0314 	add.w	r3, r4, #20
 8006d7e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006d82:	f109 0314 	add.w	r3, r9, #20
 8006d86:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006d8a:	9202      	str	r2, [sp, #8]
 8006d8c:	1b3a      	subs	r2, r7, r4
 8006d8e:	3a15      	subs	r2, #21
 8006d90:	f022 0203 	bic.w	r2, r2, #3
 8006d94:	3204      	adds	r2, #4
 8006d96:	f104 0115 	add.w	r1, r4, #21
 8006d9a:	428f      	cmp	r7, r1
 8006d9c:	bf38      	it	cc
 8006d9e:	2204      	movcc	r2, #4
 8006da0:	9201      	str	r2, [sp, #4]
 8006da2:	9a02      	ldr	r2, [sp, #8]
 8006da4:	9303      	str	r3, [sp, #12]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d80c      	bhi.n	8006dc4 <__multiply+0x9c>
 8006daa:	2e00      	cmp	r6, #0
 8006dac:	dd03      	ble.n	8006db6 <__multiply+0x8e>
 8006dae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d05a      	beq.n	8006e6c <__multiply+0x144>
 8006db6:	6106      	str	r6, [r0, #16]
 8006db8:	b005      	add	sp, #20
 8006dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbe:	f843 2b04 	str.w	r2, [r3], #4
 8006dc2:	e7d8      	b.n	8006d76 <__multiply+0x4e>
 8006dc4:	f8b3 a000 	ldrh.w	sl, [r3]
 8006dc8:	f1ba 0f00 	cmp.w	sl, #0
 8006dcc:	d023      	beq.n	8006e16 <__multiply+0xee>
 8006dce:	46a9      	mov	r9, r5
 8006dd0:	f04f 0c00 	mov.w	ip, #0
 8006dd4:	f104 0e14 	add.w	lr, r4, #20
 8006dd8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ddc:	f8d9 1000 	ldr.w	r1, [r9]
 8006de0:	fa1f fb82 	uxth.w	fp, r2
 8006de4:	b289      	uxth	r1, r1
 8006de6:	fb0a 110b 	mla	r1, sl, fp, r1
 8006dea:	4461      	add	r1, ip
 8006dec:	f8d9 c000 	ldr.w	ip, [r9]
 8006df0:	0c12      	lsrs	r2, r2, #16
 8006df2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006df6:	fb0a c202 	mla	r2, sl, r2, ip
 8006dfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006dfe:	b289      	uxth	r1, r1
 8006e00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e04:	4577      	cmp	r7, lr
 8006e06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e0a:	f849 1b04 	str.w	r1, [r9], #4
 8006e0e:	d8e3      	bhi.n	8006dd8 <__multiply+0xb0>
 8006e10:	9a01      	ldr	r2, [sp, #4]
 8006e12:	f845 c002 	str.w	ip, [r5, r2]
 8006e16:	9a03      	ldr	r2, [sp, #12]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e1e:	f1b9 0f00 	cmp.w	r9, #0
 8006e22:	d021      	beq.n	8006e68 <__multiply+0x140>
 8006e24:	46ae      	mov	lr, r5
 8006e26:	f04f 0a00 	mov.w	sl, #0
 8006e2a:	6829      	ldr	r1, [r5, #0]
 8006e2c:	f104 0c14 	add.w	ip, r4, #20
 8006e30:	f8bc b000 	ldrh.w	fp, [ip]
 8006e34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e38:	b289      	uxth	r1, r1
 8006e3a:	fb09 220b 	mla	r2, r9, fp, r2
 8006e3e:	4452      	add	r2, sl
 8006e40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e44:	f84e 1b04 	str.w	r1, [lr], #4
 8006e48:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006e4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e50:	f8be 1000 	ldrh.w	r1, [lr]
 8006e54:	4567      	cmp	r7, ip
 8006e56:	fb09 110a 	mla	r1, r9, sl, r1
 8006e5a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006e5e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e62:	d8e5      	bhi.n	8006e30 <__multiply+0x108>
 8006e64:	9a01      	ldr	r2, [sp, #4]
 8006e66:	50a9      	str	r1, [r5, r2]
 8006e68:	3504      	adds	r5, #4
 8006e6a:	e79a      	b.n	8006da2 <__multiply+0x7a>
 8006e6c:	3e01      	subs	r6, #1
 8006e6e:	e79c      	b.n	8006daa <__multiply+0x82>
 8006e70:	08007e2e 	.word	0x08007e2e
 8006e74:	08007e3f 	.word	0x08007e3f

08006e78 <__pow5mult>:
 8006e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e7c:	4615      	mov	r5, r2
 8006e7e:	f012 0203 	ands.w	r2, r2, #3
 8006e82:	4606      	mov	r6, r0
 8006e84:	460f      	mov	r7, r1
 8006e86:	d007      	beq.n	8006e98 <__pow5mult+0x20>
 8006e88:	4c25      	ldr	r4, [pc, #148]	; (8006f20 <__pow5mult+0xa8>)
 8006e8a:	3a01      	subs	r2, #1
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e92:	f7ff fe9f 	bl	8006bd4 <__multadd>
 8006e96:	4607      	mov	r7, r0
 8006e98:	10ad      	asrs	r5, r5, #2
 8006e9a:	d03d      	beq.n	8006f18 <__pow5mult+0xa0>
 8006e9c:	69f4      	ldr	r4, [r6, #28]
 8006e9e:	b97c      	cbnz	r4, 8006ec0 <__pow5mult+0x48>
 8006ea0:	2010      	movs	r0, #16
 8006ea2:	f7ff fd81 	bl	80069a8 <malloc>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	61f0      	str	r0, [r6, #28]
 8006eaa:	b928      	cbnz	r0, 8006eb8 <__pow5mult+0x40>
 8006eac:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006eb0:	4b1c      	ldr	r3, [pc, #112]	; (8006f24 <__pow5mult+0xac>)
 8006eb2:	481d      	ldr	r0, [pc, #116]	; (8006f28 <__pow5mult+0xb0>)
 8006eb4:	f000 fbde 	bl	8007674 <__assert_func>
 8006eb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ebc:	6004      	str	r4, [r0, #0]
 8006ebe:	60c4      	str	r4, [r0, #12]
 8006ec0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006ec4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ec8:	b94c      	cbnz	r4, 8006ede <__pow5mult+0x66>
 8006eca:	f240 2171 	movw	r1, #625	; 0x271
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7ff ff14 	bl	8006cfc <__i2b>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	f8c8 0008 	str.w	r0, [r8, #8]
 8006edc:	6003      	str	r3, [r0, #0]
 8006ede:	f04f 0900 	mov.w	r9, #0
 8006ee2:	07eb      	lsls	r3, r5, #31
 8006ee4:	d50a      	bpl.n	8006efc <__pow5mult+0x84>
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	4622      	mov	r2, r4
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7ff ff1c 	bl	8006d28 <__multiply>
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f7ff fe4b 	bl	8006b90 <_Bfree>
 8006efa:	4647      	mov	r7, r8
 8006efc:	106d      	asrs	r5, r5, #1
 8006efe:	d00b      	beq.n	8006f18 <__pow5mult+0xa0>
 8006f00:	6820      	ldr	r0, [r4, #0]
 8006f02:	b938      	cbnz	r0, 8006f14 <__pow5mult+0x9c>
 8006f04:	4622      	mov	r2, r4
 8006f06:	4621      	mov	r1, r4
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f7ff ff0d 	bl	8006d28 <__multiply>
 8006f0e:	6020      	str	r0, [r4, #0]
 8006f10:	f8c0 9000 	str.w	r9, [r0]
 8006f14:	4604      	mov	r4, r0
 8006f16:	e7e4      	b.n	8006ee2 <__pow5mult+0x6a>
 8006f18:	4638      	mov	r0, r7
 8006f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f1e:	bf00      	nop
 8006f20:	08007f88 	.word	0x08007f88
 8006f24:	08007dbf 	.word	0x08007dbf
 8006f28:	08007e3f 	.word	0x08007e3f

08006f2c <__lshift>:
 8006f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f30:	460c      	mov	r4, r1
 8006f32:	4607      	mov	r7, r0
 8006f34:	4691      	mov	r9, r2
 8006f36:	6923      	ldr	r3, [r4, #16]
 8006f38:	6849      	ldr	r1, [r1, #4]
 8006f3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f3e:	68a3      	ldr	r3, [r4, #8]
 8006f40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f44:	f108 0601 	add.w	r6, r8, #1
 8006f48:	42b3      	cmp	r3, r6
 8006f4a:	db0b      	blt.n	8006f64 <__lshift+0x38>
 8006f4c:	4638      	mov	r0, r7
 8006f4e:	f7ff fddf 	bl	8006b10 <_Balloc>
 8006f52:	4605      	mov	r5, r0
 8006f54:	b948      	cbnz	r0, 8006f6a <__lshift+0x3e>
 8006f56:	4602      	mov	r2, r0
 8006f58:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006f5c:	4b27      	ldr	r3, [pc, #156]	; (8006ffc <__lshift+0xd0>)
 8006f5e:	4828      	ldr	r0, [pc, #160]	; (8007000 <__lshift+0xd4>)
 8006f60:	f000 fb88 	bl	8007674 <__assert_func>
 8006f64:	3101      	adds	r1, #1
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	e7ee      	b.n	8006f48 <__lshift+0x1c>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f100 0114 	add.w	r1, r0, #20
 8006f70:	f100 0210 	add.w	r2, r0, #16
 8006f74:	4618      	mov	r0, r3
 8006f76:	4553      	cmp	r3, sl
 8006f78:	db33      	blt.n	8006fe2 <__lshift+0xb6>
 8006f7a:	6920      	ldr	r0, [r4, #16]
 8006f7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f80:	f104 0314 	add.w	r3, r4, #20
 8006f84:	f019 091f 	ands.w	r9, r9, #31
 8006f88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f90:	d02b      	beq.n	8006fea <__lshift+0xbe>
 8006f92:	468a      	mov	sl, r1
 8006f94:	2200      	movs	r2, #0
 8006f96:	f1c9 0e20 	rsb	lr, r9, #32
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	fa00 f009 	lsl.w	r0, r0, r9
 8006fa0:	4310      	orrs	r0, r2
 8006fa2:	f84a 0b04 	str.w	r0, [sl], #4
 8006fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006faa:	459c      	cmp	ip, r3
 8006fac:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fb0:	d8f3      	bhi.n	8006f9a <__lshift+0x6e>
 8006fb2:	ebac 0304 	sub.w	r3, ip, r4
 8006fb6:	3b15      	subs	r3, #21
 8006fb8:	f023 0303 	bic.w	r3, r3, #3
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	f104 0015 	add.w	r0, r4, #21
 8006fc2:	4584      	cmp	ip, r0
 8006fc4:	bf38      	it	cc
 8006fc6:	2304      	movcc	r3, #4
 8006fc8:	50ca      	str	r2, [r1, r3]
 8006fca:	b10a      	cbz	r2, 8006fd0 <__lshift+0xa4>
 8006fcc:	f108 0602 	add.w	r6, r8, #2
 8006fd0:	3e01      	subs	r6, #1
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	612e      	str	r6, [r5, #16]
 8006fd8:	f7ff fdda 	bl	8006b90 <_Bfree>
 8006fdc:	4628      	mov	r0, r5
 8006fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	e7c5      	b.n	8006f76 <__lshift+0x4a>
 8006fea:	3904      	subs	r1, #4
 8006fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff0:	459c      	cmp	ip, r3
 8006ff2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ff6:	d8f9      	bhi.n	8006fec <__lshift+0xc0>
 8006ff8:	e7ea      	b.n	8006fd0 <__lshift+0xa4>
 8006ffa:	bf00      	nop
 8006ffc:	08007e2e 	.word	0x08007e2e
 8007000:	08007e3f 	.word	0x08007e3f

08007004 <__mcmp>:
 8007004:	4603      	mov	r3, r0
 8007006:	690a      	ldr	r2, [r1, #16]
 8007008:	6900      	ldr	r0, [r0, #16]
 800700a:	b530      	push	{r4, r5, lr}
 800700c:	1a80      	subs	r0, r0, r2
 800700e:	d10d      	bne.n	800702c <__mcmp+0x28>
 8007010:	3314      	adds	r3, #20
 8007012:	3114      	adds	r1, #20
 8007014:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007018:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800701c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007020:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007024:	4295      	cmp	r5, r2
 8007026:	d002      	beq.n	800702e <__mcmp+0x2a>
 8007028:	d304      	bcc.n	8007034 <__mcmp+0x30>
 800702a:	2001      	movs	r0, #1
 800702c:	bd30      	pop	{r4, r5, pc}
 800702e:	42a3      	cmp	r3, r4
 8007030:	d3f4      	bcc.n	800701c <__mcmp+0x18>
 8007032:	e7fb      	b.n	800702c <__mcmp+0x28>
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	e7f8      	b.n	800702c <__mcmp+0x28>
	...

0800703c <__mdiff>:
 800703c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007040:	460d      	mov	r5, r1
 8007042:	4607      	mov	r7, r0
 8007044:	4611      	mov	r1, r2
 8007046:	4628      	mov	r0, r5
 8007048:	4614      	mov	r4, r2
 800704a:	f7ff ffdb 	bl	8007004 <__mcmp>
 800704e:	1e06      	subs	r6, r0, #0
 8007050:	d111      	bne.n	8007076 <__mdiff+0x3a>
 8007052:	4631      	mov	r1, r6
 8007054:	4638      	mov	r0, r7
 8007056:	f7ff fd5b 	bl	8006b10 <_Balloc>
 800705a:	4602      	mov	r2, r0
 800705c:	b928      	cbnz	r0, 800706a <__mdiff+0x2e>
 800705e:	f240 2137 	movw	r1, #567	; 0x237
 8007062:	4b3a      	ldr	r3, [pc, #232]	; (800714c <__mdiff+0x110>)
 8007064:	483a      	ldr	r0, [pc, #232]	; (8007150 <__mdiff+0x114>)
 8007066:	f000 fb05 	bl	8007674 <__assert_func>
 800706a:	2301      	movs	r3, #1
 800706c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007070:	4610      	mov	r0, r2
 8007072:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	bfa4      	itt	ge
 8007078:	4623      	movge	r3, r4
 800707a:	462c      	movge	r4, r5
 800707c:	4638      	mov	r0, r7
 800707e:	6861      	ldr	r1, [r4, #4]
 8007080:	bfa6      	itte	ge
 8007082:	461d      	movge	r5, r3
 8007084:	2600      	movge	r6, #0
 8007086:	2601      	movlt	r6, #1
 8007088:	f7ff fd42 	bl	8006b10 <_Balloc>
 800708c:	4602      	mov	r2, r0
 800708e:	b918      	cbnz	r0, 8007098 <__mdiff+0x5c>
 8007090:	f240 2145 	movw	r1, #581	; 0x245
 8007094:	4b2d      	ldr	r3, [pc, #180]	; (800714c <__mdiff+0x110>)
 8007096:	e7e5      	b.n	8007064 <__mdiff+0x28>
 8007098:	f102 0814 	add.w	r8, r2, #20
 800709c:	46c2      	mov	sl, r8
 800709e:	f04f 0c00 	mov.w	ip, #0
 80070a2:	6927      	ldr	r7, [r4, #16]
 80070a4:	60c6      	str	r6, [r0, #12]
 80070a6:	692e      	ldr	r6, [r5, #16]
 80070a8:	f104 0014 	add.w	r0, r4, #20
 80070ac:	f105 0914 	add.w	r9, r5, #20
 80070b0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80070b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80070b8:	3410      	adds	r4, #16
 80070ba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80070be:	f859 3b04 	ldr.w	r3, [r9], #4
 80070c2:	fa1f f18b 	uxth.w	r1, fp
 80070c6:	4461      	add	r1, ip
 80070c8:	fa1f fc83 	uxth.w	ip, r3
 80070cc:	0c1b      	lsrs	r3, r3, #16
 80070ce:	eba1 010c 	sub.w	r1, r1, ip
 80070d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80070d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80070da:	b289      	uxth	r1, r1
 80070dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80070e0:	454e      	cmp	r6, r9
 80070e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80070e6:	f84a 1b04 	str.w	r1, [sl], #4
 80070ea:	d8e6      	bhi.n	80070ba <__mdiff+0x7e>
 80070ec:	1b73      	subs	r3, r6, r5
 80070ee:	3b15      	subs	r3, #21
 80070f0:	f023 0303 	bic.w	r3, r3, #3
 80070f4:	3515      	adds	r5, #21
 80070f6:	3304      	adds	r3, #4
 80070f8:	42ae      	cmp	r6, r5
 80070fa:	bf38      	it	cc
 80070fc:	2304      	movcc	r3, #4
 80070fe:	4418      	add	r0, r3
 8007100:	4443      	add	r3, r8
 8007102:	461e      	mov	r6, r3
 8007104:	4605      	mov	r5, r0
 8007106:	4575      	cmp	r5, lr
 8007108:	d30e      	bcc.n	8007128 <__mdiff+0xec>
 800710a:	f10e 0103 	add.w	r1, lr, #3
 800710e:	1a09      	subs	r1, r1, r0
 8007110:	f021 0103 	bic.w	r1, r1, #3
 8007114:	3803      	subs	r0, #3
 8007116:	4586      	cmp	lr, r0
 8007118:	bf38      	it	cc
 800711a:	2100      	movcc	r1, #0
 800711c:	440b      	add	r3, r1
 800711e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007122:	b189      	cbz	r1, 8007148 <__mdiff+0x10c>
 8007124:	6117      	str	r7, [r2, #16]
 8007126:	e7a3      	b.n	8007070 <__mdiff+0x34>
 8007128:	f855 8b04 	ldr.w	r8, [r5], #4
 800712c:	fa1f f188 	uxth.w	r1, r8
 8007130:	4461      	add	r1, ip
 8007132:	140c      	asrs	r4, r1, #16
 8007134:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007138:	b289      	uxth	r1, r1
 800713a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800713e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007142:	f846 1b04 	str.w	r1, [r6], #4
 8007146:	e7de      	b.n	8007106 <__mdiff+0xca>
 8007148:	3f01      	subs	r7, #1
 800714a:	e7e8      	b.n	800711e <__mdiff+0xe2>
 800714c:	08007e2e 	.word	0x08007e2e
 8007150:	08007e3f 	.word	0x08007e3f

08007154 <__d2b>:
 8007154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007156:	2101      	movs	r1, #1
 8007158:	4617      	mov	r7, r2
 800715a:	461c      	mov	r4, r3
 800715c:	9e08      	ldr	r6, [sp, #32]
 800715e:	f7ff fcd7 	bl	8006b10 <_Balloc>
 8007162:	4605      	mov	r5, r0
 8007164:	b930      	cbnz	r0, 8007174 <__d2b+0x20>
 8007166:	4602      	mov	r2, r0
 8007168:	f240 310f 	movw	r1, #783	; 0x30f
 800716c:	4b22      	ldr	r3, [pc, #136]	; (80071f8 <__d2b+0xa4>)
 800716e:	4823      	ldr	r0, [pc, #140]	; (80071fc <__d2b+0xa8>)
 8007170:	f000 fa80 	bl	8007674 <__assert_func>
 8007174:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007178:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800717c:	bb24      	cbnz	r4, 80071c8 <__d2b+0x74>
 800717e:	2f00      	cmp	r7, #0
 8007180:	9301      	str	r3, [sp, #4]
 8007182:	d026      	beq.n	80071d2 <__d2b+0x7e>
 8007184:	4668      	mov	r0, sp
 8007186:	9700      	str	r7, [sp, #0]
 8007188:	f7ff fd8a 	bl	8006ca0 <__lo0bits>
 800718c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007190:	b1e8      	cbz	r0, 80071ce <__d2b+0x7a>
 8007192:	f1c0 0320 	rsb	r3, r0, #32
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	430b      	orrs	r3, r1
 800719c:	40c2      	lsrs	r2, r0
 800719e:	616b      	str	r3, [r5, #20]
 80071a0:	9201      	str	r2, [sp, #4]
 80071a2:	9b01      	ldr	r3, [sp, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	bf14      	ite	ne
 80071a8:	2102      	movne	r1, #2
 80071aa:	2101      	moveq	r1, #1
 80071ac:	61ab      	str	r3, [r5, #24]
 80071ae:	6129      	str	r1, [r5, #16]
 80071b0:	b1bc      	cbz	r4, 80071e2 <__d2b+0x8e>
 80071b2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80071b6:	4404      	add	r4, r0
 80071b8:	6034      	str	r4, [r6, #0]
 80071ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c0:	6018      	str	r0, [r3, #0]
 80071c2:	4628      	mov	r0, r5
 80071c4:	b003      	add	sp, #12
 80071c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071cc:	e7d7      	b.n	800717e <__d2b+0x2a>
 80071ce:	6169      	str	r1, [r5, #20]
 80071d0:	e7e7      	b.n	80071a2 <__d2b+0x4e>
 80071d2:	a801      	add	r0, sp, #4
 80071d4:	f7ff fd64 	bl	8006ca0 <__lo0bits>
 80071d8:	9b01      	ldr	r3, [sp, #4]
 80071da:	2101      	movs	r1, #1
 80071dc:	616b      	str	r3, [r5, #20]
 80071de:	3020      	adds	r0, #32
 80071e0:	e7e5      	b.n	80071ae <__d2b+0x5a>
 80071e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071e6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80071ea:	6030      	str	r0, [r6, #0]
 80071ec:	6918      	ldr	r0, [r3, #16]
 80071ee:	f7ff fd37 	bl	8006c60 <__hi0bits>
 80071f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80071f6:	e7e2      	b.n	80071be <__d2b+0x6a>
 80071f8:	08007e2e 	.word	0x08007e2e
 80071fc:	08007e3f 	.word	0x08007e3f

08007200 <__ssputs_r>:
 8007200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007204:	461f      	mov	r7, r3
 8007206:	688e      	ldr	r6, [r1, #8]
 8007208:	4682      	mov	sl, r0
 800720a:	42be      	cmp	r6, r7
 800720c:	460c      	mov	r4, r1
 800720e:	4690      	mov	r8, r2
 8007210:	680b      	ldr	r3, [r1, #0]
 8007212:	d82c      	bhi.n	800726e <__ssputs_r+0x6e>
 8007214:	898a      	ldrh	r2, [r1, #12]
 8007216:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800721a:	d026      	beq.n	800726a <__ssputs_r+0x6a>
 800721c:	6965      	ldr	r5, [r4, #20]
 800721e:	6909      	ldr	r1, [r1, #16]
 8007220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007224:	eba3 0901 	sub.w	r9, r3, r1
 8007228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800722c:	1c7b      	adds	r3, r7, #1
 800722e:	444b      	add	r3, r9
 8007230:	106d      	asrs	r5, r5, #1
 8007232:	429d      	cmp	r5, r3
 8007234:	bf38      	it	cc
 8007236:	461d      	movcc	r5, r3
 8007238:	0553      	lsls	r3, r2, #21
 800723a:	d527      	bpl.n	800728c <__ssputs_r+0x8c>
 800723c:	4629      	mov	r1, r5
 800723e:	f7ff fbdb 	bl	80069f8 <_malloc_r>
 8007242:	4606      	mov	r6, r0
 8007244:	b360      	cbz	r0, 80072a0 <__ssputs_r+0xa0>
 8007246:	464a      	mov	r2, r9
 8007248:	6921      	ldr	r1, [r4, #16]
 800724a:	f000 fa05 	bl	8007658 <memcpy>
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007258:	81a3      	strh	r3, [r4, #12]
 800725a:	6126      	str	r6, [r4, #16]
 800725c:	444e      	add	r6, r9
 800725e:	6026      	str	r6, [r4, #0]
 8007260:	463e      	mov	r6, r7
 8007262:	6165      	str	r5, [r4, #20]
 8007264:	eba5 0509 	sub.w	r5, r5, r9
 8007268:	60a5      	str	r5, [r4, #8]
 800726a:	42be      	cmp	r6, r7
 800726c:	d900      	bls.n	8007270 <__ssputs_r+0x70>
 800726e:	463e      	mov	r6, r7
 8007270:	4632      	mov	r2, r6
 8007272:	4641      	mov	r1, r8
 8007274:	6820      	ldr	r0, [r4, #0]
 8007276:	f000 f9c5 	bl	8007604 <memmove>
 800727a:	2000      	movs	r0, #0
 800727c:	68a3      	ldr	r3, [r4, #8]
 800727e:	1b9b      	subs	r3, r3, r6
 8007280:	60a3      	str	r3, [r4, #8]
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	4433      	add	r3, r6
 8007286:	6023      	str	r3, [r4, #0]
 8007288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728c:	462a      	mov	r2, r5
 800728e:	f000 fa35 	bl	80076fc <_realloc_r>
 8007292:	4606      	mov	r6, r0
 8007294:	2800      	cmp	r0, #0
 8007296:	d1e0      	bne.n	800725a <__ssputs_r+0x5a>
 8007298:	4650      	mov	r0, sl
 800729a:	6921      	ldr	r1, [r4, #16]
 800729c:	f7ff fb3c 	bl	8006918 <_free_r>
 80072a0:	230c      	movs	r3, #12
 80072a2:	f8ca 3000 	str.w	r3, [sl]
 80072a6:	89a3      	ldrh	r3, [r4, #12]
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b0:	81a3      	strh	r3, [r4, #12]
 80072b2:	e7e9      	b.n	8007288 <__ssputs_r+0x88>

080072b4 <_svfiprintf_r>:
 80072b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	4698      	mov	r8, r3
 80072ba:	898b      	ldrh	r3, [r1, #12]
 80072bc:	4607      	mov	r7, r0
 80072be:	061b      	lsls	r3, r3, #24
 80072c0:	460d      	mov	r5, r1
 80072c2:	4614      	mov	r4, r2
 80072c4:	b09d      	sub	sp, #116	; 0x74
 80072c6:	d50e      	bpl.n	80072e6 <_svfiprintf_r+0x32>
 80072c8:	690b      	ldr	r3, [r1, #16]
 80072ca:	b963      	cbnz	r3, 80072e6 <_svfiprintf_r+0x32>
 80072cc:	2140      	movs	r1, #64	; 0x40
 80072ce:	f7ff fb93 	bl	80069f8 <_malloc_r>
 80072d2:	6028      	str	r0, [r5, #0]
 80072d4:	6128      	str	r0, [r5, #16]
 80072d6:	b920      	cbnz	r0, 80072e2 <_svfiprintf_r+0x2e>
 80072d8:	230c      	movs	r3, #12
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	e0d0      	b.n	8007484 <_svfiprintf_r+0x1d0>
 80072e2:	2340      	movs	r3, #64	; 0x40
 80072e4:	616b      	str	r3, [r5, #20]
 80072e6:	2300      	movs	r3, #0
 80072e8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ea:	2320      	movs	r3, #32
 80072ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072f0:	2330      	movs	r3, #48	; 0x30
 80072f2:	f04f 0901 	mov.w	r9, #1
 80072f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072fa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800749c <_svfiprintf_r+0x1e8>
 80072fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007302:	4623      	mov	r3, r4
 8007304:	469a      	mov	sl, r3
 8007306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800730a:	b10a      	cbz	r2, 8007310 <_svfiprintf_r+0x5c>
 800730c:	2a25      	cmp	r2, #37	; 0x25
 800730e:	d1f9      	bne.n	8007304 <_svfiprintf_r+0x50>
 8007310:	ebba 0b04 	subs.w	fp, sl, r4
 8007314:	d00b      	beq.n	800732e <_svfiprintf_r+0x7a>
 8007316:	465b      	mov	r3, fp
 8007318:	4622      	mov	r2, r4
 800731a:	4629      	mov	r1, r5
 800731c:	4638      	mov	r0, r7
 800731e:	f7ff ff6f 	bl	8007200 <__ssputs_r>
 8007322:	3001      	adds	r0, #1
 8007324:	f000 80a9 	beq.w	800747a <_svfiprintf_r+0x1c6>
 8007328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800732a:	445a      	add	r2, fp
 800732c:	9209      	str	r2, [sp, #36]	; 0x24
 800732e:	f89a 3000 	ldrb.w	r3, [sl]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80a1 	beq.w	800747a <_svfiprintf_r+0x1c6>
 8007338:	2300      	movs	r3, #0
 800733a:	f04f 32ff 	mov.w	r2, #4294967295
 800733e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007342:	f10a 0a01 	add.w	sl, sl, #1
 8007346:	9304      	str	r3, [sp, #16]
 8007348:	9307      	str	r3, [sp, #28]
 800734a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800734e:	931a      	str	r3, [sp, #104]	; 0x68
 8007350:	4654      	mov	r4, sl
 8007352:	2205      	movs	r2, #5
 8007354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007358:	4850      	ldr	r0, [pc, #320]	; (800749c <_svfiprintf_r+0x1e8>)
 800735a:	f7fe fc62 	bl	8005c22 <memchr>
 800735e:	9a04      	ldr	r2, [sp, #16]
 8007360:	b9d8      	cbnz	r0, 800739a <_svfiprintf_r+0xe6>
 8007362:	06d0      	lsls	r0, r2, #27
 8007364:	bf44      	itt	mi
 8007366:	2320      	movmi	r3, #32
 8007368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800736c:	0711      	lsls	r1, r2, #28
 800736e:	bf44      	itt	mi
 8007370:	232b      	movmi	r3, #43	; 0x2b
 8007372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007376:	f89a 3000 	ldrb.w	r3, [sl]
 800737a:	2b2a      	cmp	r3, #42	; 0x2a
 800737c:	d015      	beq.n	80073aa <_svfiprintf_r+0xf6>
 800737e:	4654      	mov	r4, sl
 8007380:	2000      	movs	r0, #0
 8007382:	f04f 0c0a 	mov.w	ip, #10
 8007386:	9a07      	ldr	r2, [sp, #28]
 8007388:	4621      	mov	r1, r4
 800738a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800738e:	3b30      	subs	r3, #48	; 0x30
 8007390:	2b09      	cmp	r3, #9
 8007392:	d94d      	bls.n	8007430 <_svfiprintf_r+0x17c>
 8007394:	b1b0      	cbz	r0, 80073c4 <_svfiprintf_r+0x110>
 8007396:	9207      	str	r2, [sp, #28]
 8007398:	e014      	b.n	80073c4 <_svfiprintf_r+0x110>
 800739a:	eba0 0308 	sub.w	r3, r0, r8
 800739e:	fa09 f303 	lsl.w	r3, r9, r3
 80073a2:	4313      	orrs	r3, r2
 80073a4:	46a2      	mov	sl, r4
 80073a6:	9304      	str	r3, [sp, #16]
 80073a8:	e7d2      	b.n	8007350 <_svfiprintf_r+0x9c>
 80073aa:	9b03      	ldr	r3, [sp, #12]
 80073ac:	1d19      	adds	r1, r3, #4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	9103      	str	r1, [sp, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	bfbb      	ittet	lt
 80073b6:	425b      	neglt	r3, r3
 80073b8:	f042 0202 	orrlt.w	r2, r2, #2
 80073bc:	9307      	strge	r3, [sp, #28]
 80073be:	9307      	strlt	r3, [sp, #28]
 80073c0:	bfb8      	it	lt
 80073c2:	9204      	strlt	r2, [sp, #16]
 80073c4:	7823      	ldrb	r3, [r4, #0]
 80073c6:	2b2e      	cmp	r3, #46	; 0x2e
 80073c8:	d10c      	bne.n	80073e4 <_svfiprintf_r+0x130>
 80073ca:	7863      	ldrb	r3, [r4, #1]
 80073cc:	2b2a      	cmp	r3, #42	; 0x2a
 80073ce:	d134      	bne.n	800743a <_svfiprintf_r+0x186>
 80073d0:	9b03      	ldr	r3, [sp, #12]
 80073d2:	3402      	adds	r4, #2
 80073d4:	1d1a      	adds	r2, r3, #4
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	9203      	str	r2, [sp, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bfb8      	it	lt
 80073de:	f04f 33ff 	movlt.w	r3, #4294967295
 80073e2:	9305      	str	r3, [sp, #20]
 80073e4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80074a0 <_svfiprintf_r+0x1ec>
 80073e8:	2203      	movs	r2, #3
 80073ea:	4650      	mov	r0, sl
 80073ec:	7821      	ldrb	r1, [r4, #0]
 80073ee:	f7fe fc18 	bl	8005c22 <memchr>
 80073f2:	b138      	cbz	r0, 8007404 <_svfiprintf_r+0x150>
 80073f4:	2240      	movs	r2, #64	; 0x40
 80073f6:	9b04      	ldr	r3, [sp, #16]
 80073f8:	eba0 000a 	sub.w	r0, r0, sl
 80073fc:	4082      	lsls	r2, r0
 80073fe:	4313      	orrs	r3, r2
 8007400:	3401      	adds	r4, #1
 8007402:	9304      	str	r3, [sp, #16]
 8007404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007408:	2206      	movs	r2, #6
 800740a:	4826      	ldr	r0, [pc, #152]	; (80074a4 <_svfiprintf_r+0x1f0>)
 800740c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007410:	f7fe fc07 	bl	8005c22 <memchr>
 8007414:	2800      	cmp	r0, #0
 8007416:	d038      	beq.n	800748a <_svfiprintf_r+0x1d6>
 8007418:	4b23      	ldr	r3, [pc, #140]	; (80074a8 <_svfiprintf_r+0x1f4>)
 800741a:	bb1b      	cbnz	r3, 8007464 <_svfiprintf_r+0x1b0>
 800741c:	9b03      	ldr	r3, [sp, #12]
 800741e:	3307      	adds	r3, #7
 8007420:	f023 0307 	bic.w	r3, r3, #7
 8007424:	3308      	adds	r3, #8
 8007426:	9303      	str	r3, [sp, #12]
 8007428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742a:	4433      	add	r3, r6
 800742c:	9309      	str	r3, [sp, #36]	; 0x24
 800742e:	e768      	b.n	8007302 <_svfiprintf_r+0x4e>
 8007430:	460c      	mov	r4, r1
 8007432:	2001      	movs	r0, #1
 8007434:	fb0c 3202 	mla	r2, ip, r2, r3
 8007438:	e7a6      	b.n	8007388 <_svfiprintf_r+0xd4>
 800743a:	2300      	movs	r3, #0
 800743c:	f04f 0c0a 	mov.w	ip, #10
 8007440:	4619      	mov	r1, r3
 8007442:	3401      	adds	r4, #1
 8007444:	9305      	str	r3, [sp, #20]
 8007446:	4620      	mov	r0, r4
 8007448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800744c:	3a30      	subs	r2, #48	; 0x30
 800744e:	2a09      	cmp	r2, #9
 8007450:	d903      	bls.n	800745a <_svfiprintf_r+0x1a6>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0c6      	beq.n	80073e4 <_svfiprintf_r+0x130>
 8007456:	9105      	str	r1, [sp, #20]
 8007458:	e7c4      	b.n	80073e4 <_svfiprintf_r+0x130>
 800745a:	4604      	mov	r4, r0
 800745c:	2301      	movs	r3, #1
 800745e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007462:	e7f0      	b.n	8007446 <_svfiprintf_r+0x192>
 8007464:	ab03      	add	r3, sp, #12
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	462a      	mov	r2, r5
 800746a:	4638      	mov	r0, r7
 800746c:	4b0f      	ldr	r3, [pc, #60]	; (80074ac <_svfiprintf_r+0x1f8>)
 800746e:	a904      	add	r1, sp, #16
 8007470:	f7fd fe5c 	bl	800512c <_printf_float>
 8007474:	1c42      	adds	r2, r0, #1
 8007476:	4606      	mov	r6, r0
 8007478:	d1d6      	bne.n	8007428 <_svfiprintf_r+0x174>
 800747a:	89ab      	ldrh	r3, [r5, #12]
 800747c:	065b      	lsls	r3, r3, #25
 800747e:	f53f af2d 	bmi.w	80072dc <_svfiprintf_r+0x28>
 8007482:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007484:	b01d      	add	sp, #116	; 0x74
 8007486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748a:	ab03      	add	r3, sp, #12
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	462a      	mov	r2, r5
 8007490:	4638      	mov	r0, r7
 8007492:	4b06      	ldr	r3, [pc, #24]	; (80074ac <_svfiprintf_r+0x1f8>)
 8007494:	a904      	add	r1, sp, #16
 8007496:	f7fe f8e9 	bl	800566c <_printf_i>
 800749a:	e7eb      	b.n	8007474 <_svfiprintf_r+0x1c0>
 800749c:	08007f94 	.word	0x08007f94
 80074a0:	08007f9a 	.word	0x08007f9a
 80074a4:	08007f9e 	.word	0x08007f9e
 80074a8:	0800512d 	.word	0x0800512d
 80074ac:	08007201 	.word	0x08007201

080074b0 <__sflush_r>:
 80074b0:	898a      	ldrh	r2, [r1, #12]
 80074b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b4:	4605      	mov	r5, r0
 80074b6:	0710      	lsls	r0, r2, #28
 80074b8:	460c      	mov	r4, r1
 80074ba:	d457      	bmi.n	800756c <__sflush_r+0xbc>
 80074bc:	684b      	ldr	r3, [r1, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	dc04      	bgt.n	80074cc <__sflush_r+0x1c>
 80074c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	dc01      	bgt.n	80074cc <__sflush_r+0x1c>
 80074c8:	2000      	movs	r0, #0
 80074ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074ce:	2e00      	cmp	r6, #0
 80074d0:	d0fa      	beq.n	80074c8 <__sflush_r+0x18>
 80074d2:	2300      	movs	r3, #0
 80074d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074d8:	682f      	ldr	r7, [r5, #0]
 80074da:	6a21      	ldr	r1, [r4, #32]
 80074dc:	602b      	str	r3, [r5, #0]
 80074de:	d032      	beq.n	8007546 <__sflush_r+0x96>
 80074e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	075a      	lsls	r2, r3, #29
 80074e6:	d505      	bpl.n	80074f4 <__sflush_r+0x44>
 80074e8:	6863      	ldr	r3, [r4, #4]
 80074ea:	1ac0      	subs	r0, r0, r3
 80074ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074ee:	b10b      	cbz	r3, 80074f4 <__sflush_r+0x44>
 80074f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074f2:	1ac0      	subs	r0, r0, r3
 80074f4:	2300      	movs	r3, #0
 80074f6:	4602      	mov	r2, r0
 80074f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074fa:	4628      	mov	r0, r5
 80074fc:	6a21      	ldr	r1, [r4, #32]
 80074fe:	47b0      	blx	r6
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	d106      	bne.n	8007514 <__sflush_r+0x64>
 8007506:	6829      	ldr	r1, [r5, #0]
 8007508:	291d      	cmp	r1, #29
 800750a:	d82b      	bhi.n	8007564 <__sflush_r+0xb4>
 800750c:	4a28      	ldr	r2, [pc, #160]	; (80075b0 <__sflush_r+0x100>)
 800750e:	410a      	asrs	r2, r1
 8007510:	07d6      	lsls	r6, r2, #31
 8007512:	d427      	bmi.n	8007564 <__sflush_r+0xb4>
 8007514:	2200      	movs	r2, #0
 8007516:	6062      	str	r2, [r4, #4]
 8007518:	6922      	ldr	r2, [r4, #16]
 800751a:	04d9      	lsls	r1, r3, #19
 800751c:	6022      	str	r2, [r4, #0]
 800751e:	d504      	bpl.n	800752a <__sflush_r+0x7a>
 8007520:	1c42      	adds	r2, r0, #1
 8007522:	d101      	bne.n	8007528 <__sflush_r+0x78>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	b903      	cbnz	r3, 800752a <__sflush_r+0x7a>
 8007528:	6560      	str	r0, [r4, #84]	; 0x54
 800752a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800752c:	602f      	str	r7, [r5, #0]
 800752e:	2900      	cmp	r1, #0
 8007530:	d0ca      	beq.n	80074c8 <__sflush_r+0x18>
 8007532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007536:	4299      	cmp	r1, r3
 8007538:	d002      	beq.n	8007540 <__sflush_r+0x90>
 800753a:	4628      	mov	r0, r5
 800753c:	f7ff f9ec 	bl	8006918 <_free_r>
 8007540:	2000      	movs	r0, #0
 8007542:	6360      	str	r0, [r4, #52]	; 0x34
 8007544:	e7c1      	b.n	80074ca <__sflush_r+0x1a>
 8007546:	2301      	movs	r3, #1
 8007548:	4628      	mov	r0, r5
 800754a:	47b0      	blx	r6
 800754c:	1c41      	adds	r1, r0, #1
 800754e:	d1c8      	bne.n	80074e2 <__sflush_r+0x32>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0c5      	beq.n	80074e2 <__sflush_r+0x32>
 8007556:	2b1d      	cmp	r3, #29
 8007558:	d001      	beq.n	800755e <__sflush_r+0xae>
 800755a:	2b16      	cmp	r3, #22
 800755c:	d101      	bne.n	8007562 <__sflush_r+0xb2>
 800755e:	602f      	str	r7, [r5, #0]
 8007560:	e7b2      	b.n	80074c8 <__sflush_r+0x18>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007568:	81a3      	strh	r3, [r4, #12]
 800756a:	e7ae      	b.n	80074ca <__sflush_r+0x1a>
 800756c:	690f      	ldr	r7, [r1, #16]
 800756e:	2f00      	cmp	r7, #0
 8007570:	d0aa      	beq.n	80074c8 <__sflush_r+0x18>
 8007572:	0793      	lsls	r3, r2, #30
 8007574:	bf18      	it	ne
 8007576:	2300      	movne	r3, #0
 8007578:	680e      	ldr	r6, [r1, #0]
 800757a:	bf08      	it	eq
 800757c:	694b      	ldreq	r3, [r1, #20]
 800757e:	1bf6      	subs	r6, r6, r7
 8007580:	600f      	str	r7, [r1, #0]
 8007582:	608b      	str	r3, [r1, #8]
 8007584:	2e00      	cmp	r6, #0
 8007586:	dd9f      	ble.n	80074c8 <__sflush_r+0x18>
 8007588:	4633      	mov	r3, r6
 800758a:	463a      	mov	r2, r7
 800758c:	4628      	mov	r0, r5
 800758e:	6a21      	ldr	r1, [r4, #32]
 8007590:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007594:	47e0      	blx	ip
 8007596:	2800      	cmp	r0, #0
 8007598:	dc06      	bgt.n	80075a8 <__sflush_r+0xf8>
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075a4:	81a3      	strh	r3, [r4, #12]
 80075a6:	e790      	b.n	80074ca <__sflush_r+0x1a>
 80075a8:	4407      	add	r7, r0
 80075aa:	1a36      	subs	r6, r6, r0
 80075ac:	e7ea      	b.n	8007584 <__sflush_r+0xd4>
 80075ae:	bf00      	nop
 80075b0:	dfbffffe 	.word	0xdfbffffe

080075b4 <_fflush_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	690b      	ldr	r3, [r1, #16]
 80075b8:	4605      	mov	r5, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	b913      	cbnz	r3, 80075c4 <_fflush_r+0x10>
 80075be:	2500      	movs	r5, #0
 80075c0:	4628      	mov	r0, r5
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	b118      	cbz	r0, 80075ce <_fflush_r+0x1a>
 80075c6:	6a03      	ldr	r3, [r0, #32]
 80075c8:	b90b      	cbnz	r3, 80075ce <_fflush_r+0x1a>
 80075ca:	f7fe f9fd 	bl	80059c8 <__sinit>
 80075ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d0f3      	beq.n	80075be <_fflush_r+0xa>
 80075d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075d8:	07d0      	lsls	r0, r2, #31
 80075da:	d404      	bmi.n	80075e6 <_fflush_r+0x32>
 80075dc:	0599      	lsls	r1, r3, #22
 80075de:	d402      	bmi.n	80075e6 <_fflush_r+0x32>
 80075e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075e2:	f7fe fb1c 	bl	8005c1e <__retarget_lock_acquire_recursive>
 80075e6:	4628      	mov	r0, r5
 80075e8:	4621      	mov	r1, r4
 80075ea:	f7ff ff61 	bl	80074b0 <__sflush_r>
 80075ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075f0:	4605      	mov	r5, r0
 80075f2:	07da      	lsls	r2, r3, #31
 80075f4:	d4e4      	bmi.n	80075c0 <_fflush_r+0xc>
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	059b      	lsls	r3, r3, #22
 80075fa:	d4e1      	bmi.n	80075c0 <_fflush_r+0xc>
 80075fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075fe:	f7fe fb0f 	bl	8005c20 <__retarget_lock_release_recursive>
 8007602:	e7dd      	b.n	80075c0 <_fflush_r+0xc>

08007604 <memmove>:
 8007604:	4288      	cmp	r0, r1
 8007606:	b510      	push	{r4, lr}
 8007608:	eb01 0402 	add.w	r4, r1, r2
 800760c:	d902      	bls.n	8007614 <memmove+0x10>
 800760e:	4284      	cmp	r4, r0
 8007610:	4623      	mov	r3, r4
 8007612:	d807      	bhi.n	8007624 <memmove+0x20>
 8007614:	1e43      	subs	r3, r0, #1
 8007616:	42a1      	cmp	r1, r4
 8007618:	d008      	beq.n	800762c <memmove+0x28>
 800761a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800761e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007622:	e7f8      	b.n	8007616 <memmove+0x12>
 8007624:	4601      	mov	r1, r0
 8007626:	4402      	add	r2, r0
 8007628:	428a      	cmp	r2, r1
 800762a:	d100      	bne.n	800762e <memmove+0x2a>
 800762c:	bd10      	pop	{r4, pc}
 800762e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007636:	e7f7      	b.n	8007628 <memmove+0x24>

08007638 <_sbrk_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	2300      	movs	r3, #0
 800763c:	4d05      	ldr	r5, [pc, #20]	; (8007654 <_sbrk_r+0x1c>)
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	602b      	str	r3, [r5, #0]
 8007644:	f7fa fb3e 	bl	8001cc4 <_sbrk>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d102      	bne.n	8007652 <_sbrk_r+0x1a>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	b103      	cbz	r3, 8007652 <_sbrk_r+0x1a>
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	200004ac 	.word	0x200004ac

08007658 <memcpy>:
 8007658:	440a      	add	r2, r1
 800765a:	4291      	cmp	r1, r2
 800765c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007660:	d100      	bne.n	8007664 <memcpy+0xc>
 8007662:	4770      	bx	lr
 8007664:	b510      	push	{r4, lr}
 8007666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800766a:	4291      	cmp	r1, r2
 800766c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007670:	d1f9      	bne.n	8007666 <memcpy+0xe>
 8007672:	bd10      	pop	{r4, pc}

08007674 <__assert_func>:
 8007674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007676:	4614      	mov	r4, r2
 8007678:	461a      	mov	r2, r3
 800767a:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <__assert_func+0x2c>)
 800767c:	4605      	mov	r5, r0
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68d8      	ldr	r0, [r3, #12]
 8007682:	b14c      	cbz	r4, 8007698 <__assert_func+0x24>
 8007684:	4b07      	ldr	r3, [pc, #28]	; (80076a4 <__assert_func+0x30>)
 8007686:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800768a:	9100      	str	r1, [sp, #0]
 800768c:	462b      	mov	r3, r5
 800768e:	4906      	ldr	r1, [pc, #24]	; (80076a8 <__assert_func+0x34>)
 8007690:	f000 f870 	bl	8007774 <fiprintf>
 8007694:	f000 f880 	bl	8007798 <abort>
 8007698:	4b04      	ldr	r3, [pc, #16]	; (80076ac <__assert_func+0x38>)
 800769a:	461c      	mov	r4, r3
 800769c:	e7f3      	b.n	8007686 <__assert_func+0x12>
 800769e:	bf00      	nop
 80076a0:	2000008c 	.word	0x2000008c
 80076a4:	08007faf 	.word	0x08007faf
 80076a8:	08007fbc 	.word	0x08007fbc
 80076ac:	08007fea 	.word	0x08007fea

080076b0 <_calloc_r>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	fba1 5402 	umull	r5, r4, r1, r2
 80076b6:	b934      	cbnz	r4, 80076c6 <_calloc_r+0x16>
 80076b8:	4629      	mov	r1, r5
 80076ba:	f7ff f99d 	bl	80069f8 <_malloc_r>
 80076be:	4606      	mov	r6, r0
 80076c0:	b928      	cbnz	r0, 80076ce <_calloc_r+0x1e>
 80076c2:	4630      	mov	r0, r6
 80076c4:	bd70      	pop	{r4, r5, r6, pc}
 80076c6:	220c      	movs	r2, #12
 80076c8:	2600      	movs	r6, #0
 80076ca:	6002      	str	r2, [r0, #0]
 80076cc:	e7f9      	b.n	80076c2 <_calloc_r+0x12>
 80076ce:	462a      	mov	r2, r5
 80076d0:	4621      	mov	r1, r4
 80076d2:	f7fe fa26 	bl	8005b22 <memset>
 80076d6:	e7f4      	b.n	80076c2 <_calloc_r+0x12>

080076d8 <__ascii_mbtowc>:
 80076d8:	b082      	sub	sp, #8
 80076da:	b901      	cbnz	r1, 80076de <__ascii_mbtowc+0x6>
 80076dc:	a901      	add	r1, sp, #4
 80076de:	b142      	cbz	r2, 80076f2 <__ascii_mbtowc+0x1a>
 80076e0:	b14b      	cbz	r3, 80076f6 <__ascii_mbtowc+0x1e>
 80076e2:	7813      	ldrb	r3, [r2, #0]
 80076e4:	600b      	str	r3, [r1, #0]
 80076e6:	7812      	ldrb	r2, [r2, #0]
 80076e8:	1e10      	subs	r0, r2, #0
 80076ea:	bf18      	it	ne
 80076ec:	2001      	movne	r0, #1
 80076ee:	b002      	add	sp, #8
 80076f0:	4770      	bx	lr
 80076f2:	4610      	mov	r0, r2
 80076f4:	e7fb      	b.n	80076ee <__ascii_mbtowc+0x16>
 80076f6:	f06f 0001 	mvn.w	r0, #1
 80076fa:	e7f8      	b.n	80076ee <__ascii_mbtowc+0x16>

080076fc <_realloc_r>:
 80076fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007700:	4680      	mov	r8, r0
 8007702:	4614      	mov	r4, r2
 8007704:	460e      	mov	r6, r1
 8007706:	b921      	cbnz	r1, 8007712 <_realloc_r+0x16>
 8007708:	4611      	mov	r1, r2
 800770a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800770e:	f7ff b973 	b.w	80069f8 <_malloc_r>
 8007712:	b92a      	cbnz	r2, 8007720 <_realloc_r+0x24>
 8007714:	f7ff f900 	bl	8006918 <_free_r>
 8007718:	4625      	mov	r5, r4
 800771a:	4628      	mov	r0, r5
 800771c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007720:	f000 f841 	bl	80077a6 <_malloc_usable_size_r>
 8007724:	4284      	cmp	r4, r0
 8007726:	4607      	mov	r7, r0
 8007728:	d802      	bhi.n	8007730 <_realloc_r+0x34>
 800772a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800772e:	d812      	bhi.n	8007756 <_realloc_r+0x5a>
 8007730:	4621      	mov	r1, r4
 8007732:	4640      	mov	r0, r8
 8007734:	f7ff f960 	bl	80069f8 <_malloc_r>
 8007738:	4605      	mov	r5, r0
 800773a:	2800      	cmp	r0, #0
 800773c:	d0ed      	beq.n	800771a <_realloc_r+0x1e>
 800773e:	42bc      	cmp	r4, r7
 8007740:	4622      	mov	r2, r4
 8007742:	4631      	mov	r1, r6
 8007744:	bf28      	it	cs
 8007746:	463a      	movcs	r2, r7
 8007748:	f7ff ff86 	bl	8007658 <memcpy>
 800774c:	4631      	mov	r1, r6
 800774e:	4640      	mov	r0, r8
 8007750:	f7ff f8e2 	bl	8006918 <_free_r>
 8007754:	e7e1      	b.n	800771a <_realloc_r+0x1e>
 8007756:	4635      	mov	r5, r6
 8007758:	e7df      	b.n	800771a <_realloc_r+0x1e>

0800775a <__ascii_wctomb>:
 800775a:	4603      	mov	r3, r0
 800775c:	4608      	mov	r0, r1
 800775e:	b141      	cbz	r1, 8007772 <__ascii_wctomb+0x18>
 8007760:	2aff      	cmp	r2, #255	; 0xff
 8007762:	d904      	bls.n	800776e <__ascii_wctomb+0x14>
 8007764:	228a      	movs	r2, #138	; 0x8a
 8007766:	f04f 30ff 	mov.w	r0, #4294967295
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	4770      	bx	lr
 800776e:	2001      	movs	r0, #1
 8007770:	700a      	strb	r2, [r1, #0]
 8007772:	4770      	bx	lr

08007774 <fiprintf>:
 8007774:	b40e      	push	{r1, r2, r3}
 8007776:	b503      	push	{r0, r1, lr}
 8007778:	4601      	mov	r1, r0
 800777a:	ab03      	add	r3, sp, #12
 800777c:	4805      	ldr	r0, [pc, #20]	; (8007794 <fiprintf+0x20>)
 800777e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007782:	6800      	ldr	r0, [r0, #0]
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	f000 f83d 	bl	8007804 <_vfiprintf_r>
 800778a:	b002      	add	sp, #8
 800778c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007790:	b003      	add	sp, #12
 8007792:	4770      	bx	lr
 8007794:	2000008c 	.word	0x2000008c

08007798 <abort>:
 8007798:	2006      	movs	r0, #6
 800779a:	b508      	push	{r3, lr}
 800779c:	f000 fa0a 	bl	8007bb4 <raise>
 80077a0:	2001      	movs	r0, #1
 80077a2:	f7fa fa1c 	bl	8001bde <_exit>

080077a6 <_malloc_usable_size_r>:
 80077a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077aa:	1f18      	subs	r0, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bfbc      	itt	lt
 80077b0:	580b      	ldrlt	r3, [r1, r0]
 80077b2:	18c0      	addlt	r0, r0, r3
 80077b4:	4770      	bx	lr

080077b6 <__sfputc_r>:
 80077b6:	6893      	ldr	r3, [r2, #8]
 80077b8:	b410      	push	{r4}
 80077ba:	3b01      	subs	r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	6093      	str	r3, [r2, #8]
 80077c0:	da07      	bge.n	80077d2 <__sfputc_r+0x1c>
 80077c2:	6994      	ldr	r4, [r2, #24]
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	db01      	blt.n	80077cc <__sfputc_r+0x16>
 80077c8:	290a      	cmp	r1, #10
 80077ca:	d102      	bne.n	80077d2 <__sfputc_r+0x1c>
 80077cc:	bc10      	pop	{r4}
 80077ce:	f000 b933 	b.w	8007a38 <__swbuf_r>
 80077d2:	6813      	ldr	r3, [r2, #0]
 80077d4:	1c58      	adds	r0, r3, #1
 80077d6:	6010      	str	r0, [r2, #0]
 80077d8:	7019      	strb	r1, [r3, #0]
 80077da:	4608      	mov	r0, r1
 80077dc:	bc10      	pop	{r4}
 80077de:	4770      	bx	lr

080077e0 <__sfputs_r>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	4606      	mov	r6, r0
 80077e4:	460f      	mov	r7, r1
 80077e6:	4614      	mov	r4, r2
 80077e8:	18d5      	adds	r5, r2, r3
 80077ea:	42ac      	cmp	r4, r5
 80077ec:	d101      	bne.n	80077f2 <__sfputs_r+0x12>
 80077ee:	2000      	movs	r0, #0
 80077f0:	e007      	b.n	8007802 <__sfputs_r+0x22>
 80077f2:	463a      	mov	r2, r7
 80077f4:	4630      	mov	r0, r6
 80077f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077fa:	f7ff ffdc 	bl	80077b6 <__sfputc_r>
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	d1f3      	bne.n	80077ea <__sfputs_r+0xa>
 8007802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007804 <_vfiprintf_r>:
 8007804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007808:	460d      	mov	r5, r1
 800780a:	4614      	mov	r4, r2
 800780c:	4698      	mov	r8, r3
 800780e:	4606      	mov	r6, r0
 8007810:	b09d      	sub	sp, #116	; 0x74
 8007812:	b118      	cbz	r0, 800781c <_vfiprintf_r+0x18>
 8007814:	6a03      	ldr	r3, [r0, #32]
 8007816:	b90b      	cbnz	r3, 800781c <_vfiprintf_r+0x18>
 8007818:	f7fe f8d6 	bl	80059c8 <__sinit>
 800781c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800781e:	07d9      	lsls	r1, r3, #31
 8007820:	d405      	bmi.n	800782e <_vfiprintf_r+0x2a>
 8007822:	89ab      	ldrh	r3, [r5, #12]
 8007824:	059a      	lsls	r2, r3, #22
 8007826:	d402      	bmi.n	800782e <_vfiprintf_r+0x2a>
 8007828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800782a:	f7fe f9f8 	bl	8005c1e <__retarget_lock_acquire_recursive>
 800782e:	89ab      	ldrh	r3, [r5, #12]
 8007830:	071b      	lsls	r3, r3, #28
 8007832:	d501      	bpl.n	8007838 <_vfiprintf_r+0x34>
 8007834:	692b      	ldr	r3, [r5, #16]
 8007836:	b99b      	cbnz	r3, 8007860 <_vfiprintf_r+0x5c>
 8007838:	4629      	mov	r1, r5
 800783a:	4630      	mov	r0, r6
 800783c:	f000 f93a 	bl	8007ab4 <__swsetup_r>
 8007840:	b170      	cbz	r0, 8007860 <_vfiprintf_r+0x5c>
 8007842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007844:	07dc      	lsls	r4, r3, #31
 8007846:	d504      	bpl.n	8007852 <_vfiprintf_r+0x4e>
 8007848:	f04f 30ff 	mov.w	r0, #4294967295
 800784c:	b01d      	add	sp, #116	; 0x74
 800784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007852:	89ab      	ldrh	r3, [r5, #12]
 8007854:	0598      	lsls	r0, r3, #22
 8007856:	d4f7      	bmi.n	8007848 <_vfiprintf_r+0x44>
 8007858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800785a:	f7fe f9e1 	bl	8005c20 <__retarget_lock_release_recursive>
 800785e:	e7f3      	b.n	8007848 <_vfiprintf_r+0x44>
 8007860:	2300      	movs	r3, #0
 8007862:	9309      	str	r3, [sp, #36]	; 0x24
 8007864:	2320      	movs	r3, #32
 8007866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800786a:	2330      	movs	r3, #48	; 0x30
 800786c:	f04f 0901 	mov.w	r9, #1
 8007870:	f8cd 800c 	str.w	r8, [sp, #12]
 8007874:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007a24 <_vfiprintf_r+0x220>
 8007878:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800787c:	4623      	mov	r3, r4
 800787e:	469a      	mov	sl, r3
 8007880:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007884:	b10a      	cbz	r2, 800788a <_vfiprintf_r+0x86>
 8007886:	2a25      	cmp	r2, #37	; 0x25
 8007888:	d1f9      	bne.n	800787e <_vfiprintf_r+0x7a>
 800788a:	ebba 0b04 	subs.w	fp, sl, r4
 800788e:	d00b      	beq.n	80078a8 <_vfiprintf_r+0xa4>
 8007890:	465b      	mov	r3, fp
 8007892:	4622      	mov	r2, r4
 8007894:	4629      	mov	r1, r5
 8007896:	4630      	mov	r0, r6
 8007898:	f7ff ffa2 	bl	80077e0 <__sfputs_r>
 800789c:	3001      	adds	r0, #1
 800789e:	f000 80a9 	beq.w	80079f4 <_vfiprintf_r+0x1f0>
 80078a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078a4:	445a      	add	r2, fp
 80078a6:	9209      	str	r2, [sp, #36]	; 0x24
 80078a8:	f89a 3000 	ldrb.w	r3, [sl]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 80a1 	beq.w	80079f4 <_vfiprintf_r+0x1f0>
 80078b2:	2300      	movs	r3, #0
 80078b4:	f04f 32ff 	mov.w	r2, #4294967295
 80078b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078bc:	f10a 0a01 	add.w	sl, sl, #1
 80078c0:	9304      	str	r3, [sp, #16]
 80078c2:	9307      	str	r3, [sp, #28]
 80078c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078c8:	931a      	str	r3, [sp, #104]	; 0x68
 80078ca:	4654      	mov	r4, sl
 80078cc:	2205      	movs	r2, #5
 80078ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d2:	4854      	ldr	r0, [pc, #336]	; (8007a24 <_vfiprintf_r+0x220>)
 80078d4:	f7fe f9a5 	bl	8005c22 <memchr>
 80078d8:	9a04      	ldr	r2, [sp, #16]
 80078da:	b9d8      	cbnz	r0, 8007914 <_vfiprintf_r+0x110>
 80078dc:	06d1      	lsls	r1, r2, #27
 80078de:	bf44      	itt	mi
 80078e0:	2320      	movmi	r3, #32
 80078e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078e6:	0713      	lsls	r3, r2, #28
 80078e8:	bf44      	itt	mi
 80078ea:	232b      	movmi	r3, #43	; 0x2b
 80078ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078f0:	f89a 3000 	ldrb.w	r3, [sl]
 80078f4:	2b2a      	cmp	r3, #42	; 0x2a
 80078f6:	d015      	beq.n	8007924 <_vfiprintf_r+0x120>
 80078f8:	4654      	mov	r4, sl
 80078fa:	2000      	movs	r0, #0
 80078fc:	f04f 0c0a 	mov.w	ip, #10
 8007900:	9a07      	ldr	r2, [sp, #28]
 8007902:	4621      	mov	r1, r4
 8007904:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007908:	3b30      	subs	r3, #48	; 0x30
 800790a:	2b09      	cmp	r3, #9
 800790c:	d94d      	bls.n	80079aa <_vfiprintf_r+0x1a6>
 800790e:	b1b0      	cbz	r0, 800793e <_vfiprintf_r+0x13a>
 8007910:	9207      	str	r2, [sp, #28]
 8007912:	e014      	b.n	800793e <_vfiprintf_r+0x13a>
 8007914:	eba0 0308 	sub.w	r3, r0, r8
 8007918:	fa09 f303 	lsl.w	r3, r9, r3
 800791c:	4313      	orrs	r3, r2
 800791e:	46a2      	mov	sl, r4
 8007920:	9304      	str	r3, [sp, #16]
 8007922:	e7d2      	b.n	80078ca <_vfiprintf_r+0xc6>
 8007924:	9b03      	ldr	r3, [sp, #12]
 8007926:	1d19      	adds	r1, r3, #4
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	9103      	str	r1, [sp, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	bfbb      	ittet	lt
 8007930:	425b      	neglt	r3, r3
 8007932:	f042 0202 	orrlt.w	r2, r2, #2
 8007936:	9307      	strge	r3, [sp, #28]
 8007938:	9307      	strlt	r3, [sp, #28]
 800793a:	bfb8      	it	lt
 800793c:	9204      	strlt	r2, [sp, #16]
 800793e:	7823      	ldrb	r3, [r4, #0]
 8007940:	2b2e      	cmp	r3, #46	; 0x2e
 8007942:	d10c      	bne.n	800795e <_vfiprintf_r+0x15a>
 8007944:	7863      	ldrb	r3, [r4, #1]
 8007946:	2b2a      	cmp	r3, #42	; 0x2a
 8007948:	d134      	bne.n	80079b4 <_vfiprintf_r+0x1b0>
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	3402      	adds	r4, #2
 800794e:	1d1a      	adds	r2, r3, #4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	9203      	str	r2, [sp, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	bfb8      	it	lt
 8007958:	f04f 33ff 	movlt.w	r3, #4294967295
 800795c:	9305      	str	r3, [sp, #20]
 800795e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a28 <_vfiprintf_r+0x224>
 8007962:	2203      	movs	r2, #3
 8007964:	4650      	mov	r0, sl
 8007966:	7821      	ldrb	r1, [r4, #0]
 8007968:	f7fe f95b 	bl	8005c22 <memchr>
 800796c:	b138      	cbz	r0, 800797e <_vfiprintf_r+0x17a>
 800796e:	2240      	movs	r2, #64	; 0x40
 8007970:	9b04      	ldr	r3, [sp, #16]
 8007972:	eba0 000a 	sub.w	r0, r0, sl
 8007976:	4082      	lsls	r2, r0
 8007978:	4313      	orrs	r3, r2
 800797a:	3401      	adds	r4, #1
 800797c:	9304      	str	r3, [sp, #16]
 800797e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007982:	2206      	movs	r2, #6
 8007984:	4829      	ldr	r0, [pc, #164]	; (8007a2c <_vfiprintf_r+0x228>)
 8007986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800798a:	f7fe f94a 	bl	8005c22 <memchr>
 800798e:	2800      	cmp	r0, #0
 8007990:	d03f      	beq.n	8007a12 <_vfiprintf_r+0x20e>
 8007992:	4b27      	ldr	r3, [pc, #156]	; (8007a30 <_vfiprintf_r+0x22c>)
 8007994:	bb1b      	cbnz	r3, 80079de <_vfiprintf_r+0x1da>
 8007996:	9b03      	ldr	r3, [sp, #12]
 8007998:	3307      	adds	r3, #7
 800799a:	f023 0307 	bic.w	r3, r3, #7
 800799e:	3308      	adds	r3, #8
 80079a0:	9303      	str	r3, [sp, #12]
 80079a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a4:	443b      	add	r3, r7
 80079a6:	9309      	str	r3, [sp, #36]	; 0x24
 80079a8:	e768      	b.n	800787c <_vfiprintf_r+0x78>
 80079aa:	460c      	mov	r4, r1
 80079ac:	2001      	movs	r0, #1
 80079ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80079b2:	e7a6      	b.n	8007902 <_vfiprintf_r+0xfe>
 80079b4:	2300      	movs	r3, #0
 80079b6:	f04f 0c0a 	mov.w	ip, #10
 80079ba:	4619      	mov	r1, r3
 80079bc:	3401      	adds	r4, #1
 80079be:	9305      	str	r3, [sp, #20]
 80079c0:	4620      	mov	r0, r4
 80079c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079c6:	3a30      	subs	r2, #48	; 0x30
 80079c8:	2a09      	cmp	r2, #9
 80079ca:	d903      	bls.n	80079d4 <_vfiprintf_r+0x1d0>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0c6      	beq.n	800795e <_vfiprintf_r+0x15a>
 80079d0:	9105      	str	r1, [sp, #20]
 80079d2:	e7c4      	b.n	800795e <_vfiprintf_r+0x15a>
 80079d4:	4604      	mov	r4, r0
 80079d6:	2301      	movs	r3, #1
 80079d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80079dc:	e7f0      	b.n	80079c0 <_vfiprintf_r+0x1bc>
 80079de:	ab03      	add	r3, sp, #12
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	462a      	mov	r2, r5
 80079e4:	4630      	mov	r0, r6
 80079e6:	4b13      	ldr	r3, [pc, #76]	; (8007a34 <_vfiprintf_r+0x230>)
 80079e8:	a904      	add	r1, sp, #16
 80079ea:	f7fd fb9f 	bl	800512c <_printf_float>
 80079ee:	4607      	mov	r7, r0
 80079f0:	1c78      	adds	r0, r7, #1
 80079f2:	d1d6      	bne.n	80079a2 <_vfiprintf_r+0x19e>
 80079f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079f6:	07d9      	lsls	r1, r3, #31
 80079f8:	d405      	bmi.n	8007a06 <_vfiprintf_r+0x202>
 80079fa:	89ab      	ldrh	r3, [r5, #12]
 80079fc:	059a      	lsls	r2, r3, #22
 80079fe:	d402      	bmi.n	8007a06 <_vfiprintf_r+0x202>
 8007a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a02:	f7fe f90d 	bl	8005c20 <__retarget_lock_release_recursive>
 8007a06:	89ab      	ldrh	r3, [r5, #12]
 8007a08:	065b      	lsls	r3, r3, #25
 8007a0a:	f53f af1d 	bmi.w	8007848 <_vfiprintf_r+0x44>
 8007a0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a10:	e71c      	b.n	800784c <_vfiprintf_r+0x48>
 8007a12:	ab03      	add	r3, sp, #12
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	462a      	mov	r2, r5
 8007a18:	4630      	mov	r0, r6
 8007a1a:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <_vfiprintf_r+0x230>)
 8007a1c:	a904      	add	r1, sp, #16
 8007a1e:	f7fd fe25 	bl	800566c <_printf_i>
 8007a22:	e7e4      	b.n	80079ee <_vfiprintf_r+0x1ea>
 8007a24:	08007f94 	.word	0x08007f94
 8007a28:	08007f9a 	.word	0x08007f9a
 8007a2c:	08007f9e 	.word	0x08007f9e
 8007a30:	0800512d 	.word	0x0800512d
 8007a34:	080077e1 	.word	0x080077e1

08007a38 <__swbuf_r>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	460e      	mov	r6, r1
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	4605      	mov	r5, r0
 8007a40:	b118      	cbz	r0, 8007a4a <__swbuf_r+0x12>
 8007a42:	6a03      	ldr	r3, [r0, #32]
 8007a44:	b90b      	cbnz	r3, 8007a4a <__swbuf_r+0x12>
 8007a46:	f7fd ffbf 	bl	80059c8 <__sinit>
 8007a4a:	69a3      	ldr	r3, [r4, #24]
 8007a4c:	60a3      	str	r3, [r4, #8]
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	071a      	lsls	r2, r3, #28
 8007a52:	d525      	bpl.n	8007aa0 <__swbuf_r+0x68>
 8007a54:	6923      	ldr	r3, [r4, #16]
 8007a56:	b31b      	cbz	r3, 8007aa0 <__swbuf_r+0x68>
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	6922      	ldr	r2, [r4, #16]
 8007a5c:	b2f6      	uxtb	r6, r6
 8007a5e:	1a98      	subs	r0, r3, r2
 8007a60:	6963      	ldr	r3, [r4, #20]
 8007a62:	4637      	mov	r7, r6
 8007a64:	4283      	cmp	r3, r0
 8007a66:	dc04      	bgt.n	8007a72 <__swbuf_r+0x3a>
 8007a68:	4621      	mov	r1, r4
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	f7ff fda2 	bl	80075b4 <_fflush_r>
 8007a70:	b9e0      	cbnz	r0, 8007aac <__swbuf_r+0x74>
 8007a72:	68a3      	ldr	r3, [r4, #8]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	60a3      	str	r3, [r4, #8]
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	6022      	str	r2, [r4, #0]
 8007a7e:	701e      	strb	r6, [r3, #0]
 8007a80:	6962      	ldr	r2, [r4, #20]
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d004      	beq.n	8007a92 <__swbuf_r+0x5a>
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	07db      	lsls	r3, r3, #31
 8007a8c:	d506      	bpl.n	8007a9c <__swbuf_r+0x64>
 8007a8e:	2e0a      	cmp	r6, #10
 8007a90:	d104      	bne.n	8007a9c <__swbuf_r+0x64>
 8007a92:	4621      	mov	r1, r4
 8007a94:	4628      	mov	r0, r5
 8007a96:	f7ff fd8d 	bl	80075b4 <_fflush_r>
 8007a9a:	b938      	cbnz	r0, 8007aac <__swbuf_r+0x74>
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f000 f806 	bl	8007ab4 <__swsetup_r>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d0d5      	beq.n	8007a58 <__swbuf_r+0x20>
 8007aac:	f04f 37ff 	mov.w	r7, #4294967295
 8007ab0:	e7f4      	b.n	8007a9c <__swbuf_r+0x64>
	...

08007ab4 <__swsetup_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4b2a      	ldr	r3, [pc, #168]	; (8007b60 <__swsetup_r+0xac>)
 8007ab8:	4605      	mov	r5, r0
 8007aba:	6818      	ldr	r0, [r3, #0]
 8007abc:	460c      	mov	r4, r1
 8007abe:	b118      	cbz	r0, 8007ac8 <__swsetup_r+0x14>
 8007ac0:	6a03      	ldr	r3, [r0, #32]
 8007ac2:	b90b      	cbnz	r3, 8007ac8 <__swsetup_r+0x14>
 8007ac4:	f7fd ff80 	bl	80059c8 <__sinit>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ace:	0718      	lsls	r0, r3, #28
 8007ad0:	d422      	bmi.n	8007b18 <__swsetup_r+0x64>
 8007ad2:	06d9      	lsls	r1, r3, #27
 8007ad4:	d407      	bmi.n	8007ae6 <__swsetup_r+0x32>
 8007ad6:	2309      	movs	r3, #9
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ade:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae2:	81a3      	strh	r3, [r4, #12]
 8007ae4:	e034      	b.n	8007b50 <__swsetup_r+0x9c>
 8007ae6:	0758      	lsls	r0, r3, #29
 8007ae8:	d512      	bpl.n	8007b10 <__swsetup_r+0x5c>
 8007aea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aec:	b141      	cbz	r1, 8007b00 <__swsetup_r+0x4c>
 8007aee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007af2:	4299      	cmp	r1, r3
 8007af4:	d002      	beq.n	8007afc <__swsetup_r+0x48>
 8007af6:	4628      	mov	r0, r5
 8007af8:	f7fe ff0e 	bl	8006918 <_free_r>
 8007afc:	2300      	movs	r3, #0
 8007afe:	6363      	str	r3, [r4, #52]	; 0x34
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b06:	81a3      	strh	r3, [r4, #12]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	6063      	str	r3, [r4, #4]
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	f043 0308 	orr.w	r3, r3, #8
 8007b16:	81a3      	strh	r3, [r4, #12]
 8007b18:	6923      	ldr	r3, [r4, #16]
 8007b1a:	b94b      	cbnz	r3, 8007b30 <__swsetup_r+0x7c>
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b26:	d003      	beq.n	8007b30 <__swsetup_r+0x7c>
 8007b28:	4621      	mov	r1, r4
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f000 f883 	bl	8007c36 <__smakebuf_r>
 8007b30:	89a0      	ldrh	r0, [r4, #12]
 8007b32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b36:	f010 0301 	ands.w	r3, r0, #1
 8007b3a:	d00a      	beq.n	8007b52 <__swsetup_r+0x9e>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	60a3      	str	r3, [r4, #8]
 8007b40:	6963      	ldr	r3, [r4, #20]
 8007b42:	425b      	negs	r3, r3
 8007b44:	61a3      	str	r3, [r4, #24]
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	b943      	cbnz	r3, 8007b5c <__swsetup_r+0xa8>
 8007b4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b4e:	d1c4      	bne.n	8007ada <__swsetup_r+0x26>
 8007b50:	bd38      	pop	{r3, r4, r5, pc}
 8007b52:	0781      	lsls	r1, r0, #30
 8007b54:	bf58      	it	pl
 8007b56:	6963      	ldrpl	r3, [r4, #20]
 8007b58:	60a3      	str	r3, [r4, #8]
 8007b5a:	e7f4      	b.n	8007b46 <__swsetup_r+0x92>
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	e7f7      	b.n	8007b50 <__swsetup_r+0x9c>
 8007b60:	2000008c 	.word	0x2000008c

08007b64 <_raise_r>:
 8007b64:	291f      	cmp	r1, #31
 8007b66:	b538      	push	{r3, r4, r5, lr}
 8007b68:	4604      	mov	r4, r0
 8007b6a:	460d      	mov	r5, r1
 8007b6c:	d904      	bls.n	8007b78 <_raise_r+0x14>
 8007b6e:	2316      	movs	r3, #22
 8007b70:	6003      	str	r3, [r0, #0]
 8007b72:	f04f 30ff 	mov.w	r0, #4294967295
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
 8007b78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007b7a:	b112      	cbz	r2, 8007b82 <_raise_r+0x1e>
 8007b7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b80:	b94b      	cbnz	r3, 8007b96 <_raise_r+0x32>
 8007b82:	4620      	mov	r0, r4
 8007b84:	f000 f830 	bl	8007be8 <_getpid_r>
 8007b88:	462a      	mov	r2, r5
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b92:	f000 b817 	b.w	8007bc4 <_kill_r>
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d00a      	beq.n	8007bb0 <_raise_r+0x4c>
 8007b9a:	1c59      	adds	r1, r3, #1
 8007b9c:	d103      	bne.n	8007ba6 <_raise_r+0x42>
 8007b9e:	2316      	movs	r3, #22
 8007ba0:	6003      	str	r3, [r0, #0]
 8007ba2:	2001      	movs	r0, #1
 8007ba4:	e7e7      	b.n	8007b76 <_raise_r+0x12>
 8007ba6:	2400      	movs	r4, #0
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007bae:	4798      	blx	r3
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	e7e0      	b.n	8007b76 <_raise_r+0x12>

08007bb4 <raise>:
 8007bb4:	4b02      	ldr	r3, [pc, #8]	; (8007bc0 <raise+0xc>)
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	6818      	ldr	r0, [r3, #0]
 8007bba:	f7ff bfd3 	b.w	8007b64 <_raise_r>
 8007bbe:	bf00      	nop
 8007bc0:	2000008c 	.word	0x2000008c

08007bc4 <_kill_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	4d06      	ldr	r5, [pc, #24]	; (8007be4 <_kill_r+0x20>)
 8007bca:	4604      	mov	r4, r0
 8007bcc:	4608      	mov	r0, r1
 8007bce:	4611      	mov	r1, r2
 8007bd0:	602b      	str	r3, [r5, #0]
 8007bd2:	f7f9 fff4 	bl	8001bbe <_kill>
 8007bd6:	1c43      	adds	r3, r0, #1
 8007bd8:	d102      	bne.n	8007be0 <_kill_r+0x1c>
 8007bda:	682b      	ldr	r3, [r5, #0]
 8007bdc:	b103      	cbz	r3, 8007be0 <_kill_r+0x1c>
 8007bde:	6023      	str	r3, [r4, #0]
 8007be0:	bd38      	pop	{r3, r4, r5, pc}
 8007be2:	bf00      	nop
 8007be4:	200004ac 	.word	0x200004ac

08007be8 <_getpid_r>:
 8007be8:	f7f9 bfe2 	b.w	8001bb0 <_getpid>

08007bec <__swhatbuf_r>:
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	460c      	mov	r4, r1
 8007bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf4:	4615      	mov	r5, r2
 8007bf6:	2900      	cmp	r1, #0
 8007bf8:	461e      	mov	r6, r3
 8007bfa:	b096      	sub	sp, #88	; 0x58
 8007bfc:	da0c      	bge.n	8007c18 <__swhatbuf_r+0x2c>
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	2100      	movs	r1, #0
 8007c02:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c06:	bf0c      	ite	eq
 8007c08:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007c0c:	2340      	movne	r3, #64	; 0x40
 8007c0e:	2000      	movs	r0, #0
 8007c10:	6031      	str	r1, [r6, #0]
 8007c12:	602b      	str	r3, [r5, #0]
 8007c14:	b016      	add	sp, #88	; 0x58
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	466a      	mov	r2, sp
 8007c1a:	f000 f849 	bl	8007cb0 <_fstat_r>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	dbed      	blt.n	8007bfe <__swhatbuf_r+0x12>
 8007c22:	9901      	ldr	r1, [sp, #4]
 8007c24:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007c28:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007c2c:	4259      	negs	r1, r3
 8007c2e:	4159      	adcs	r1, r3
 8007c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c34:	e7eb      	b.n	8007c0e <__swhatbuf_r+0x22>

08007c36 <__smakebuf_r>:
 8007c36:	898b      	ldrh	r3, [r1, #12]
 8007c38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c3a:	079d      	lsls	r5, r3, #30
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	d507      	bpl.n	8007c52 <__smakebuf_r+0x1c>
 8007c42:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	6123      	str	r3, [r4, #16]
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	6163      	str	r3, [r4, #20]
 8007c4e:	b002      	add	sp, #8
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
 8007c52:	466a      	mov	r2, sp
 8007c54:	ab01      	add	r3, sp, #4
 8007c56:	f7ff ffc9 	bl	8007bec <__swhatbuf_r>
 8007c5a:	9900      	ldr	r1, [sp, #0]
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f7fe feca 	bl	80069f8 <_malloc_r>
 8007c64:	b948      	cbnz	r0, 8007c7a <__smakebuf_r+0x44>
 8007c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c6a:	059a      	lsls	r2, r3, #22
 8007c6c:	d4ef      	bmi.n	8007c4e <__smakebuf_r+0x18>
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	f043 0302 	orr.w	r3, r3, #2
 8007c76:	81a3      	strh	r3, [r4, #12]
 8007c78:	e7e3      	b.n	8007c42 <__smakebuf_r+0xc>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	6020      	str	r0, [r4, #0]
 8007c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c82:	81a3      	strh	r3, [r4, #12]
 8007c84:	9b00      	ldr	r3, [sp, #0]
 8007c86:	6120      	str	r0, [r4, #16]
 8007c88:	6163      	str	r3, [r4, #20]
 8007c8a:	9b01      	ldr	r3, [sp, #4]
 8007c8c:	b15b      	cbz	r3, 8007ca6 <__smakebuf_r+0x70>
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c94:	f000 f81e 	bl	8007cd4 <_isatty_r>
 8007c98:	b128      	cbz	r0, 8007ca6 <__smakebuf_r+0x70>
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	f023 0303 	bic.w	r3, r3, #3
 8007ca0:	f043 0301 	orr.w	r3, r3, #1
 8007ca4:	81a3      	strh	r3, [r4, #12]
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	431d      	orrs	r5, r3
 8007caa:	81a5      	strh	r5, [r4, #12]
 8007cac:	e7cf      	b.n	8007c4e <__smakebuf_r+0x18>
	...

08007cb0 <_fstat_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	4d06      	ldr	r5, [pc, #24]	; (8007cd0 <_fstat_r+0x20>)
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	602b      	str	r3, [r5, #0]
 8007cbe:	f7f9 ffdc 	bl	8001c7a <_fstat>
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	d102      	bne.n	8007ccc <_fstat_r+0x1c>
 8007cc6:	682b      	ldr	r3, [r5, #0]
 8007cc8:	b103      	cbz	r3, 8007ccc <_fstat_r+0x1c>
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	bd38      	pop	{r3, r4, r5, pc}
 8007cce:	bf00      	nop
 8007cd0:	200004ac 	.word	0x200004ac

08007cd4 <_isatty_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	4d05      	ldr	r5, [pc, #20]	; (8007cf0 <_isatty_r+0x1c>)
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	602b      	str	r3, [r5, #0]
 8007ce0:	f7f9 ffda 	bl	8001c98 <_isatty>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d102      	bne.n	8007cee <_isatty_r+0x1a>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	b103      	cbz	r3, 8007cee <_isatty_r+0x1a>
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	200004ac 	.word	0x200004ac

08007cf4 <_init>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	bf00      	nop
 8007cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfa:	bc08      	pop	{r3}
 8007cfc:	469e      	mov	lr, r3
 8007cfe:	4770      	bx	lr

08007d00 <_fini>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	bf00      	nop
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr
